{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Class Explanations_Logistic Regression_ANGER2","provenance":[{"file_id":"1kG_nhxha4ah5zm0pXqaLW6SoYPKqqCL0","timestamp":1628914108223},{"file_id":"1mbDmH5LItKPZPLu9ETHy1BnD2D9Vg0c0","timestamp":1628914062905}],"authorship_tag":"ABX9TyNd/5QEiVBtAwWB3lfixVMr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"R6qJgzVvpUrc"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6bwGEBEMh6rD","executionInfo":{"status":"ok","timestamp":1628915810291,"user_tz":-330,"elapsed":35986,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"887b4620-f0ea-42f9-946b-86bc2bc71c67"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ddkZYSLKiKnx","executionInfo":{"status":"ok","timestamp":1628915813676,"user_tz":-330,"elapsed":652,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"0fa9d7b2-2203-4cc2-9cb7-07dac701101d"},"source":["%cd drive/MyDrive/xAI\\ for\\ Social\\ Bias"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/content/drive/.shortcut-targets-by-id/1G9SUNVbWwaSSHKmsm4W1sQGap8KDKgHv/xAI for Social Bias\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6S7NrLzSiLUe","executionInfo":{"status":"ok","timestamp":1628915826143,"user_tz":-330,"elapsed":6282,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"9005551a-c362-401b-b826-ef9ae2df56da"},"source":["!pip install lime"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Collecting lime\n","  Downloading lime-0.2.0.1.tar.gz (275 kB)\n","\u001b[?25l\r\u001b[K     |█▏                              | 10 kB 27.1 MB/s eta 0:00:01\r\u001b[K     |██▍                             | 20 kB 29.8 MB/s eta 0:00:01\r\u001b[K     |███▋                            | 30 kB 21.3 MB/s eta 0:00:01\r\u001b[K     |████▊                           | 40 kB 12.8 MB/s eta 0:00:01\r\u001b[K     |██████                          | 51 kB 4.9 MB/s eta 0:00:01\r\u001b[K     |███████▏                        | 61 kB 4.8 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 71 kB 4.8 MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 81 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |██████████▊                     | 92 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████▉                    | 102 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 112 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |██████████████▎                 | 122 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |███████████████▌                | 133 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 143 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |█████████████████▉              | 153 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 163 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 174 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▍          | 184 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▋         | 194 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▊        | 204 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 215 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 225 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▍    | 235 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 245 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▊  | 256 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 266 kB 4.5 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 275 kB 4.5 MB/s \n","\u001b[?25hRequirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from lime) (3.2.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from lime) (1.19.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from lime) (1.4.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from lime) (4.62.0)\n","Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.7/dist-packages (from lime) (0.22.2.post1)\n","Requirement already satisfied: scikit-image>=0.12 in /usr/local/lib/python3.7/dist-packages (from lime) (0.16.2)\n","Requirement already satisfied: pillow>=4.3.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image>=0.12->lime) (7.1.2)\n","Requirement already satisfied: imageio>=2.3.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image>=0.12->lime) (2.4.1)\n","Requirement already satisfied: PyWavelets>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image>=0.12->lime) (1.1.1)\n","Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image>=0.12->lime) (2.6.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->lime) (2.4.7)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->lime) (0.10.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->lime) (2.8.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->lime) (1.3.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from cycler>=0.10->matplotlib->lime) (1.15.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.18->lime) (1.0.1)\n","Building wheels for collected packages: lime\n","  Building wheel for lime (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for lime: filename=lime-0.2.0.1-py3-none-any.whl size=283857 sha256=440d7c995cdbb420c6096feef8ba05f87e0a12d89e97a1bb961777afa0da3541\n","  Stored in directory: /root/.cache/pip/wheels/ca/cb/e5/ac701e12d365a08917bf4c6171c0961bc880a8181359c66aa7\n","Successfully built lime\n","Installing collected packages: lime\n","Successfully installed lime-0.2.0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NNrDTD4miLff","executionInfo":{"status":"ok","timestamp":1628915859583,"user_tz":-330,"elapsed":2512,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}}},"source":["emotions=['anger','joy','fear','sad']\n","mas=[]\n","fe=[]\n","neu=[]\n","with open(\"Gender/\"+emotions[0]+\"_m.txt\") as f:\n","  mas=f.readlines()\n","f.close()\n","with open(\"Gender/\"+emotions[0]+\"_f.txt\") as f:\n","  fe=f.readlines()\n","f.close()\n","with open(\"Gender/\"+emotions[0]+\"_n.txt\") as f:\n","  neu=f.readlines()\n","f.close()"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"SbSOm8mSiLlC","executionInfo":{"status":"ok","timestamp":1628915863655,"user_tz":-330,"elapsed":1426,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}}},"source":["import numpy as np\n","import pandas as pd\n","import lime\n","from lime.lime_text import LimeTextExplainer"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O-H_JJAAiLoj","executionInfo":{"status":"ok","timestamp":1628915865996,"user_tz":-330,"elapsed":15,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"bd12772f-857b-4d86-8517-f9c426d700ab"},"source":["print(len(mas))"],"execution_count":6,"outputs":[{"output_type":"stream","text":["280\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"BdyUZ-qajc_q"},"source":["Logistic Regression Base"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iz2Lyhh3pV5e","executionInfo":{"status":"ok","timestamp":1628915868163,"user_tz":-330,"elapsed":10,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"d64ab4eb-9baf-4597-c01c-d534b9ffd8a2"},"source":["%cd Sklearn\\ Models"],"execution_count":7,"outputs":[{"output_type":"stream","text":["/content/drive/.shortcut-targets-by-id/1G9SUNVbWwaSSHKmsm4W1sQGap8KDKgHv/xAI for Social Bias/Sklearn Models\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yLISnruipchg","executionInfo":{"status":"ok","timestamp":1628915872277,"user_tz":-330,"elapsed":26,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"b4db7706-1830-4726-ff18-27ac361317c6"},"source":["ls"],"execution_count":8,"outputs":[{"output_type":"stream","text":[" best-accuracy-uncleaned-data.ipynb       NB.pkl\n"," Cleaned_Data_Scikit_learn_Models.ipynb   previous-cleaned-sklearn-models.ipynb\n"," Linear_SVC_pipeline.pkl                 \u001b[0m\u001b[01;34m'Saved Models_Cleaned Data'\u001b[0m/\n"," Linear_SVM_BOW.pkl                      \u001b[01;34m'Saved_Models_Uncleaned Data'\u001b[0m/\n"," Linear_SVM_TFIDF.pkl                     SVM_pipeline.pkl\n"," Logistic_Regression_pipeline.pkl         SVM_SGD.pkl\n"," Logistic_Regression.pkl                  Twitter_Data.csv\n"," mnb_pipeline.pkl\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5aY13TDnj7S5","executionInfo":{"status":"ok","timestamp":1628915875782,"user_tz":-330,"elapsed":1243,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}}},"source":["lr_bow_pipe = pd.read_pickle(r'Logistic_Regression_pipeline.pkl')"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wzQMwyMUiLyg","executionInfo":{"status":"ok","timestamp":1628915877597,"user_tz":-330,"elapsed":11,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"18fdaff4-f084-4416-f991-14b3076fc996"},"source":["from string import punctuation\n","\n","def tokenize_(test):\n","    #print(test)\n","    test= test.lower() # lowercase\n","    # get rid of punctuation\n","    txt = ''.join([c for c in test if c not in punctuation])\n","\n","    return txt\n","\n","sample = 'This is the worst movie I have seen, and the acting was terrible.'\n","output_ints = tokenize_(sample)\n","print(output_ints)\n","\n","def predict(test_, model, sequence_length=200):\n","    # tokenize review\n","    op = tokenize_(test_)\n","    \n","    # get the output from the model\n","    output = model.predict_proba([op])\n","    # print(type(output))\n","    \n","    # convert output probabilities to predicted class (0 or 1)\n","    pred = np.round(output.squeeze()) \n","    # printing output value, before rounding\n","    #print('Prediction value, pre-rounding:', output)\n","    \n","    # print custom response\n","    pred_=np.argmax(output)\n","    if(pred_==0):\n","      print(\"It is a negative review\")\n","    if(pred_==1):\n","      print(\"It is a neutral review\")\n","    if(pred_==2):\n","      print(\"It is a positive review\")\n","    return pred"],"execution_count":10,"outputs":[{"output_type":"stream","text":["this is the worst movie i have seen and the acting was terrible\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BjPLGzPVmZkw","executionInfo":{"status":"ok","timestamp":1628915882439,"user_tz":-330,"elapsed":4,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}}},"source":["class_names=['Negative','Neutral','Positive']"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":329},"id":"Ybe-yKhdiL1O","executionInfo":{"status":"ok","timestamp":1628915886522,"user_tz":-330,"elapsed":39,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"86745678-0b0b-4acd-e784-0f8460ea1321"},"source":["from lime.lime_text import LimeTextExplainer\n","\n","explainer = LimeTextExplainer(class_names=['Negative','Neutral','Positive'])\n","sentences=[\"He is unhappy\"]\n","exp = explainer.explain_instance(tokenize_(\"He is unhappy\"), lr_bow_pipe.predict_proba, top_labels=3, num_features=10, num_samples=100)\n","predict(sentences[0], lr_bow_pipe)\n","print(exp.predict_proba)\n","print(exp.show_in_notebook())\n","print(exp.as_list(label=0))\n","print(exp.as_list(label=1))\n","print(exp.as_list(label=2))\n","print(exp.as_list())"],"execution_count":12,"outputs":[{"output_type":"stream","text":["It is a negative review\n","[0.79555901 0.19378941 0.01065158]\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<html>\n","        <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF8\">\n","        <head><script>var lime =\n","/******/ (function(modules) { // webpackBootstrap\n","/******/ \t// The module cache\n","/******/ \tvar installedModules = {};\n","/******/\n","/******/ \t// The require function\n","/******/ \tfunction __webpack_require__(moduleId) {\n","/******/\n","/******/ \t\t// Check if module is in cache\n","/******/ \t\tif(installedModules[moduleId])\n","/******/ \t\t\treturn installedModules[moduleId].exports;\n","/******/\n","/******/ \t\t// Create a new module (and put it into the cache)\n","/******/ \t\tvar module = installedModules[moduleId] = {\n","/******/ \t\t\texports: {},\n","/******/ \t\t\tid: moduleId,\n","/******/ \t\t\tloaded: false\n","/******/ \t\t};\n","/******/\n","/******/ \t\t// Execute the module function\n","/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n","/******/\n","/******/ \t\t// Flag the module as loaded\n","/******/ \t\tmodule.loaded = true;\n","/******/\n","/******/ \t\t// Return the exports of the module\n","/******/ \t\treturn module.exports;\n","/******/ \t}\n","/******/\n","/******/\n","/******/ \t// expose the modules object (__webpack_modules__)\n","/******/ \t__webpack_require__.m = modules;\n","/******/\n","/******/ \t// expose the module cache\n","/******/ \t__webpack_require__.c = installedModules;\n","/******/\n","/******/ \t// __webpack_public_path__\n","/******/ \t__webpack_require__.p = \"\";\n","/******/\n","/******/ \t// Load entry module and return exports\n","/******/ \treturn __webpack_require__(0);\n","/******/ })\n","/************************************************************************/\n","/******/ ([\n","/* 0 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n","\t\n","\tObject.defineProperty(exports, \"__esModule\", {\n","\t  value: true\n","\t});\n","\texports.PredictedValue = exports.PredictProba = exports.Barchart = exports.Explanation = undefined;\n","\t\n","\tvar _explanation = __webpack_require__(1);\n","\t\n","\tvar _explanation2 = _interopRequireDefault(_explanation);\n","\t\n","\tvar _bar_chart = __webpack_require__(3);\n","\t\n","\tvar _bar_chart2 = _interopRequireDefault(_bar_chart);\n","\t\n","\tvar _predict_proba = __webpack_require__(6);\n","\t\n","\tvar _predict_proba2 = _interopRequireDefault(_predict_proba);\n","\t\n","\tvar _predicted_value = __webpack_require__(7);\n","\t\n","\tvar _predicted_value2 = _interopRequireDefault(_predicted_value);\n","\t\n","\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n","\t\n","\tif (!global._babelPolyfill) {\n","\t  __webpack_require__(8);\n","\t}\n","\t\n","\t__webpack_require__(339);\n","\t\n","\texports.Explanation = _explanation2.default;\n","\texports.Barchart = _bar_chart2.default;\n","\texports.PredictProba = _predict_proba2.default;\n","\texports.PredictedValue = _predicted_value2.default;\n","\t//require('style-loader');\n","\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n","\n","/***/ }),\n","/* 1 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tObject.defineProperty(exports, \"__esModule\", {\n","\t  value: true\n","\t});\n","\t\n","\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n","\t\n","\tvar _d2 = __webpack_require__(2);\n","\t\n","\tvar _d3 = _interopRequireDefault(_d2);\n","\t\n","\tvar _bar_chart = __webpack_require__(3);\n","\t\n","\tvar _bar_chart2 = _interopRequireDefault(_bar_chart);\n","\t\n","\tvar _lodash = __webpack_require__(4);\n","\t\n","\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n","\t\n","\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n","\t\n","\tvar Explanation = function () {\n","\t  function Explanation(class_names) {\n","\t    _classCallCheck(this, Explanation);\n","\t\n","\t    this.names = class_names;\n","\t    if (class_names.length < 10) {\n","\t      this.colors = _d3.default.scale.category10().domain(this.names);\n","\t      this.colors_i = _d3.default.scale.category10().domain((0, _lodash.range)(this.names.length));\n","\t    } else {\n","\t      this.colors = _d3.default.scale.category20().domain(this.names);\n","\t      this.colors_i = _d3.default.scale.category20().domain((0, _lodash.range)(this.names.length));\n","\t    }\n","\t  }\n","\t  // exp: [(feature-name, weight), ...]\n","\t  // label: int\n","\t  // div: d3 selection\n","\t\n","\t\n","\t  Explanation.prototype.show = function show(exp, label, div) {\n","\t    var svg = div.append('svg').style('width', '100%');\n","\t    var colors = ['#5F9EA0', this.colors_i(label)];\n","\t    var names = ['NOT ' + this.names[label], this.names[label]];\n","\t    if (this.names.length == 2) {\n","\t      colors = [this.colors_i(0), this.colors_i(1)];\n","\t      names = this.names;\n","\t    }\n","\t    var plot = new _bar_chart2.default(svg, exp, true, names, colors, true, 10);\n","\t    svg.style('height', plot.svg_height + 'px');\n","\t  };\n","\t  // exp has all ocurrences of words, with start index and weight:\n","\t  // exp = [('word', 132, -0.13), ('word3', 111, 1.3)\n","\t\n","\t\n","\t  Explanation.prototype.show_raw_text = function show_raw_text(exp, label, raw, div) {\n","\t    var opacity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n","\t\n","\t    //let colors=['#5F9EA0', this.colors(this.exp['class'])];\n","\t    var colors = ['#5F9EA0', this.colors_i(label)];\n","\t    if (this.names.length == 2) {\n","\t      colors = [this.colors_i(0), this.colors_i(1)];\n","\t    }\n","\t    var word_lists = [[], []];\n","\t    var max_weight = -1;\n","\t    var _iteratorNormalCompletion = true;\n","\t    var _didIteratorError = false;\n","\t    var _iteratorError = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator = exp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n","\t        var _step$value = _slicedToArray(_step.value, 3),\n","\t            word = _step$value[0],\n","\t            start = _step$value[1],\n","\t            weight = _step$value[2];\n","\t\n","\t        if (weight > 0) {\n","\t          word_lists[1].push([start, start + word.length, weight]);\n","\t        } else {\n","\t          word_lists[0].push([start, start + word.length, -weight]);\n","\t        }\n","\t        max_weight = Math.max(max_weight, Math.abs(weight));\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError = true;\n","\t      _iteratorError = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion && _iterator.return) {\n","\t          _iterator.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError) {\n","\t          throw _iteratorError;\n","\t        }\n","\t      }\n","\t    }\n","\t\n","\t    if (!opacity) {\n","\t      max_weight = 0;\n","\t    }\n","\t    this.display_raw_text(div, raw, word_lists, colors, max_weight, true);\n","\t  };\n","\t  // exp is list of (feature_name, value, weight)\n","\t\n","\t\n","\t  Explanation.prototype.show_raw_tabular = function show_raw_tabular(exp, label, div) {\n","\t    div.classed('lime', true).classed('table_div', true);\n","\t    var colors = ['#5F9EA0', this.colors_i(label)];\n","\t    if (this.names.length == 2) {\n","\t      colors = [this.colors_i(0), this.colors_i(1)];\n","\t    }\n","\t    var table = div.append('table');\n","\t    var thead = table.append('tr');\n","\t    thead.append('td').text('Feature');\n","\t    thead.append('td').text('Value');\n","\t    thead.style('color', 'black').style('font-size', '20px');\n","\t    var _iteratorNormalCompletion2 = true;\n","\t    var _didIteratorError2 = false;\n","\t    var _iteratorError2 = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator2 = exp[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n","\t        var _step2$value = _slicedToArray(_step2.value, 3),\n","\t            fname = _step2$value[0],\n","\t            value = _step2$value[1],\n","\t            weight = _step2$value[2];\n","\t\n","\t        var tr = table.append('tr');\n","\t        tr.style('border-style', 'hidden');\n","\t        tr.append('td').text(fname);\n","\t        tr.append('td').text(value);\n","\t        if (weight > 0) {\n","\t          tr.style('background-color', colors[1]);\n","\t        } else if (weight < 0) {\n","\t          tr.style('background-color', colors[0]);\n","\t        } else {\n","\t          tr.style('color', 'black');\n","\t        }\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError2 = true;\n","\t      _iteratorError2 = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n","\t          _iterator2.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError2) {\n","\t          throw _iteratorError2;\n","\t        }\n","\t      }\n","\t    }\n","\t  };\n","\t\n","\t  Explanation.prototype.hexToRgb = function hexToRgb(hex) {\n","\t    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n","\t    return result ? {\n","\t      r: parseInt(result[1], 16),\n","\t      g: parseInt(result[2], 16),\n","\t      b: parseInt(result[3], 16)\n","\t    } : null;\n","\t  };\n","\t\n","\t  Explanation.prototype.applyAlpha = function applyAlpha(hex, alpha) {\n","\t    var components = this.hexToRgb(hex);\n","\t    return 'rgba(' + components.r + \",\" + components.g + \",\" + components.b + \",\" + alpha.toFixed(3) + \")\";\n","\t  };\n","\t  // sord_lists is an array of arrays, of length (colors). if with_positions is true,\n","\t  // word_lists is an array of [start,end] positions instead\n","\t\n","\t\n","\t  Explanation.prototype.display_raw_text = function display_raw_text(div, raw_text) {\n","\t    var word_lists = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n","\t    var colors = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n","\t    var max_weight = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n","\t    var positions = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n","\t\n","\t    div.classed('lime', true).classed('text_div', true);\n","\t    div.append('h3').text('Text with highlighted words');\n","\t    var highlight_tag = 'span';\n","\t    var text_span = div.append('span').style('white-space', 'pre-wrap').text(raw_text);\n","\t    var position_lists = word_lists;\n","\t    if (!positions) {\n","\t      position_lists = this.wordlists_to_positions(word_lists, raw_text);\n","\t    }\n","\t    var objects = [];\n","\t    var _iteratorNormalCompletion3 = true;\n","\t    var _didIteratorError3 = false;\n","\t    var _iteratorError3 = undefined;\n","\t\n","\t    try {\n","\t      var _loop = function _loop() {\n","\t        var i = _step3.value;\n","\t\n","\t        position_lists[i].map(function (x) {\n","\t          return objects.push({ 'label': i, 'start': x[0], 'end': x[1], 'alpha': max_weight === 0 ? 1 : x[2] / max_weight });\n","\t        });\n","\t      };\n","\t\n","\t      for (var _iterator3 = (0, _lodash.range)(position_lists.length)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n","\t        _loop();\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError3 = true;\n","\t      _iteratorError3 = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n","\t          _iterator3.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError3) {\n","\t          throw _iteratorError3;\n","\t        }\n","\t      }\n","\t    }\n","\t\n","\t    objects = (0, _lodash.sortBy)(objects, function (x) {\n","\t      return x['start'];\n","\t    });\n","\t    var node = text_span.node().childNodes[0];\n","\t    var subtract = 0;\n","\t    var _iteratorNormalCompletion4 = true;\n","\t    var _didIteratorError4 = false;\n","\t    var _iteratorError4 = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator4 = objects[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n","\t        var obj = _step4.value;\n","\t\n","\t        var word = raw_text.slice(obj.start, obj.end);\n","\t        var start = obj.start - subtract;\n","\t        var end = obj.end - subtract;\n","\t        var match = document.createElement(highlight_tag);\n","\t        match.appendChild(document.createTextNode(word));\n","\t        match.style.backgroundColor = this.applyAlpha(colors[obj.label], obj.alpha);\n","\t        var after = node.splitText(start);\n","\t        after.nodeValue = after.nodeValue.substring(word.length);\n","\t        node.parentNode.insertBefore(match, after);\n","\t        subtract += end;\n","\t        node = after;\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError4 = true;\n","\t      _iteratorError4 = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n","\t          _iterator4.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError4) {\n","\t          throw _iteratorError4;\n","\t        }\n","\t      }\n","\t    }\n","\t  };\n","\t\n","\t  Explanation.prototype.wordlists_to_positions = function wordlists_to_positions(word_lists, raw_text) {\n","\t    var ret = [];\n","\t    var _iteratorNormalCompletion5 = true;\n","\t    var _didIteratorError5 = false;\n","\t    var _iteratorError5 = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator5 = word_lists[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n","\t        var words = _step5.value;\n","\t\n","\t        if (words.length === 0) {\n","\t          ret.push([]);\n","\t          continue;\n","\t        }\n","\t        var re = new RegExp(\"\\\\b(\" + words.join('|') + \")\\\\b\", 'gm');\n","\t        var temp = void 0;\n","\t        var list = [];\n","\t        while ((temp = re.exec(raw_text)) !== null) {\n","\t          list.push([temp.index, temp.index + temp[0].length]);\n","\t        }\n","\t        ret.push(list);\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError5 = true;\n","\t      _iteratorError5 = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n","\t          _iterator5.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError5) {\n","\t          throw _iteratorError5;\n","\t        }\n","\t      }\n","\t    }\n","\t\n","\t    return ret;\n","\t  };\n","\t\n","\t  return Explanation;\n","\t}();\n","\t\n","\texports.default = Explanation;\n","\n","/***/ }),\n","/* 2 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {\n","\t  var d3 = {\n","\t    version: \"3.5.17\"\n","\t  };\n","\t  var d3_arraySlice = [].slice, d3_array = function(list) {\n","\t    return d3_arraySlice.call(list);\n","\t  };\n","\t  var d3_document = this.document;\n","\t  function d3_documentElement(node) {\n","\t    return node && (node.ownerDocument || node.document || node).documentElement;\n","\t  }\n","\t  function d3_window(node) {\n","\t    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n","\t  }\n","\t  if (d3_document) {\n","\t    try {\n","\t      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n","\t    } catch (e) {\n","\t      d3_array = function(list) {\n","\t        var i = list.length, array = new Array(i);\n","\t        while (i--) array[i] = list[i];\n","\t        return array;\n","\t      };\n","\t    }\n","\t  }\n","\t  if (!Date.now) Date.now = function() {\n","\t    return +new Date();\n","\t  };\n","\t  if (d3_document) {\n","\t    try {\n","\t      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n","\t    } catch (error) {\n","\t      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n","\t      d3_element_prototype.setAttribute = function(name, value) {\n","\t        d3_element_setAttribute.call(this, name, value + \"\");\n","\t      };\n","\t      d3_element_prototype.setAttributeNS = function(space, local, value) {\n","\t        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n","\t      };\n","\t      d3_style_prototype.setProperty = function(name, value, priority) {\n","\t        d3_style_setProperty.call(this, name, value + \"\", priority);\n","\t      };\n","\t    }\n","\t  }\n","\t  d3.ascending = d3_ascending;\n","\t  function d3_ascending(a, b) {\n","\t    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n","\t  }\n","\t  d3.descending = function(a, b) {\n","\t    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n","\t  };\n","\t  d3.min = function(array, f) {\n","\t    var i = -1, n = array.length, a, b;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if ((b = array[i]) != null && b >= b) {\n","\t        a = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n","\t    } else {\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n","\t        a = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n","\t    }\n","\t    return a;\n","\t  };\n","\t  d3.max = function(array, f) {\n","\t    var i = -1, n = array.length, a, b;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if ((b = array[i]) != null && b >= b) {\n","\t        a = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n","\t    } else {\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n","\t        a = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n","\t    }\n","\t    return a;\n","\t  };\n","\t  d3.extent = function(array, f) {\n","\t    var i = -1, n = array.length, a, b, c;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if ((b = array[i]) != null && b >= b) {\n","\t        a = c = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = array[i]) != null) {\n","\t        if (a > b) a = b;\n","\t        if (c < b) c = b;\n","\t      }\n","\t    } else {\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n","\t        a = c = b;\n","\t        break;\n","\t      }\n","\t      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n","\t        if (a > b) a = b;\n","\t        if (c < b) c = b;\n","\t      }\n","\t    }\n","\t    return [ a, c ];\n","\t  };\n","\t  function d3_number(x) {\n","\t    return x === null ? NaN : +x;\n","\t  }\n","\t  function d3_numeric(x) {\n","\t    return !isNaN(x);\n","\t  }\n","\t  d3.sum = function(array, f) {\n","\t    var s = 0, n = array.length, a, i = -1;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n","\t    } else {\n","\t      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n","\t    }\n","\t    return s;\n","\t  };\n","\t  d3.mean = function(array, f) {\n","\t    var s = 0, n = array.length, a, i = -1, j = n;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n","\t    } else {\n","\t      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n","\t    }\n","\t    if (j) return s / j;\n","\t  };\n","\t  d3.quantile = function(values, p) {\n","\t    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n","\t    return e ? v + e * (values[h] - v) : v;\n","\t  };\n","\t  d3.median = function(array, f) {\n","\t    var numbers = [], n = array.length, a, i = -1;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n","\t    } else {\n","\t      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n","\t    }\n","\t    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n","\t  };\n","\t  d3.variance = function(array, f) {\n","\t    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n","\t    if (arguments.length === 1) {\n","\t      while (++i < n) {\n","\t        if (d3_numeric(a = d3_number(array[i]))) {\n","\t          d = a - m;\n","\t          m += d / ++j;\n","\t          s += d * (a - m);\n","\t        }\n","\t      }\n","\t    } else {\n","\t      while (++i < n) {\n","\t        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n","\t          d = a - m;\n","\t          m += d / ++j;\n","\t          s += d * (a - m);\n","\t        }\n","\t      }\n","\t    }\n","\t    if (j > 1) return s / (j - 1);\n","\t  };\n","\t  d3.deviation = function() {\n","\t    var v = d3.variance.apply(this, arguments);\n","\t    return v ? Math.sqrt(v) : v;\n","\t  };\n","\t  function d3_bisector(compare) {\n","\t    return {\n","\t      left: function(a, x, lo, hi) {\n","\t        if (arguments.length < 3) lo = 0;\n","\t        if (arguments.length < 4) hi = a.length;\n","\t        while (lo < hi) {\n","\t          var mid = lo + hi >>> 1;\n","\t          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n","\t        }\n","\t        return lo;\n","\t      },\n","\t      right: function(a, x, lo, hi) {\n","\t        if (arguments.length < 3) lo = 0;\n","\t        if (arguments.length < 4) hi = a.length;\n","\t        while (lo < hi) {\n","\t          var mid = lo + hi >>> 1;\n","\t          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n","\t        }\n","\t        return lo;\n","\t      }\n","\t    };\n","\t  }\n","\t  var d3_bisect = d3_bisector(d3_ascending);\n","\t  d3.bisectLeft = d3_bisect.left;\n","\t  d3.bisect = d3.bisectRight = d3_bisect.right;\n","\t  d3.bisector = function(f) {\n","\t    return d3_bisector(f.length === 1 ? function(d, x) {\n","\t      return d3_ascending(f(d), x);\n","\t    } : f);\n","\t  };\n","\t  d3.shuffle = function(array, i0, i1) {\n","\t    if ((m = arguments.length) < 3) {\n","\t      i1 = array.length;\n","\t      if (m < 2) i0 = 0;\n","\t    }\n","\t    var m = i1 - i0, t, i;\n","\t    while (m) {\n","\t      i = Math.random() * m-- | 0;\n","\t      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n","\t    }\n","\t    return array;\n","\t  };\n","\t  d3.permute = function(array, indexes) {\n","\t    var i = indexes.length, permutes = new Array(i);\n","\t    while (i--) permutes[i] = array[indexes[i]];\n","\t    return permutes;\n","\t  };\n","\t  d3.pairs = function(array) {\n","\t    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n","\t    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n","\t    return pairs;\n","\t  };\n","\t  d3.transpose = function(matrix) {\n","\t    if (!(n = matrix.length)) return [];\n","\t    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n","\t      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n","\t        row[j] = matrix[j][i];\n","\t      }\n","\t    }\n","\t    return transpose;\n","\t  };\n","\t  function d3_transposeLength(d) {\n","\t    return d.length;\n","\t  }\n","\t  d3.zip = function() {\n","\t    return d3.transpose(arguments);\n","\t  };\n","\t  d3.keys = function(map) {\n","\t    var keys = [];\n","\t    for (var key in map) keys.push(key);\n","\t    return keys;\n","\t  };\n","\t  d3.values = function(map) {\n","\t    var values = [];\n","\t    for (var key in map) values.push(map[key]);\n","\t    return values;\n","\t  };\n","\t  d3.entries = function(map) {\n","\t    var entries = [];\n","\t    for (var key in map) entries.push({\n","\t      key: key,\n","\t      value: map[key]\n","\t    });\n","\t    return entries;\n","\t  };\n","\t  d3.merge = function(arrays) {\n","\t    var n = arrays.length, m, i = -1, j = 0, merged, array;\n","\t    while (++i < n) j += arrays[i].length;\n","\t    merged = new Array(j);\n","\t    while (--n >= 0) {\n","\t      array = arrays[n];\n","\t      m = array.length;\n","\t      while (--m >= 0) {\n","\t        merged[--j] = array[m];\n","\t      }\n","\t    }\n","\t    return merged;\n","\t  };\n","\t  var abs = Math.abs;\n","\t  d3.range = function(start, stop, step) {\n","\t    if (arguments.length < 3) {\n","\t      step = 1;\n","\t      if (arguments.length < 2) {\n","\t        stop = start;\n","\t        start = 0;\n","\t      }\n","\t    }\n","\t    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n","\t    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n","\t    start *= k, stop *= k, step *= k;\n","\t    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n","\t    return range;\n","\t  };\n","\t  function d3_range_integerScale(x) {\n","\t    var k = 1;\n","\t    while (x * k % 1) k *= 10;\n","\t    return k;\n","\t  }\n","\t  function d3_class(ctor, properties) {\n","\t    for (var key in properties) {\n","\t      Object.defineProperty(ctor.prototype, key, {\n","\t        value: properties[key],\n","\t        enumerable: false\n","\t      });\n","\t    }\n","\t  }\n","\t  d3.map = function(object, f) {\n","\t    var map = new d3_Map();\n","\t    if (object instanceof d3_Map) {\n","\t      object.forEach(function(key, value) {\n","\t        map.set(key, value);\n","\t      });\n","\t    } else if (Array.isArray(object)) {\n","\t      var i = -1, n = object.length, o;\n","\t      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n","\t    } else {\n","\t      for (var key in object) map.set(key, object[key]);\n","\t    }\n","\t    return map;\n","\t  };\n","\t  function d3_Map() {\n","\t    this._ = Object.create(null);\n","\t  }\n","\t  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n","\t  d3_class(d3_Map, {\n","\t    has: d3_map_has,\n","\t    get: function(key) {\n","\t      return this._[d3_map_escape(key)];\n","\t    },\n","\t    set: function(key, value) {\n","\t      return this._[d3_map_escape(key)] = value;\n","\t    },\n","\t    remove: d3_map_remove,\n","\t    keys: d3_map_keys,\n","\t    values: function() {\n","\t      var values = [];\n","\t      for (var key in this._) values.push(this._[key]);\n","\t      return values;\n","\t    },\n","\t    entries: function() {\n","\t      var entries = [];\n","\t      for (var key in this._) entries.push({\n","\t        key: d3_map_unescape(key),\n","\t        value: this._[key]\n","\t      });\n","\t      return entries;\n","\t    },\n","\t    size: d3_map_size,\n","\t    empty: d3_map_empty,\n","\t    forEach: function(f) {\n","\t      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n","\t    }\n","\t  });\n","\t  function d3_map_escape(key) {\n","\t    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n","\t  }\n","\t  function d3_map_unescape(key) {\n","\t    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n","\t  }\n","\t  function d3_map_has(key) {\n","\t    return d3_map_escape(key) in this._;\n","\t  }\n","\t  function d3_map_remove(key) {\n","\t    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n","\t  }\n","\t  function d3_map_keys() {\n","\t    var keys = [];\n","\t    for (var key in this._) keys.push(d3_map_unescape(key));\n","\t    return keys;\n","\t  }\n","\t  function d3_map_size() {\n","\t    var size = 0;\n","\t    for (var key in this._) ++size;\n","\t    return size;\n","\t  }\n","\t  function d3_map_empty() {\n","\t    for (var key in this._) return false;\n","\t    return true;\n","\t  }\n","\t  d3.nest = function() {\n","\t    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n","\t    function map(mapType, array, depth) {\n","\t      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n","\t      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n","\t      while (++i < n) {\n","\t        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n","\t          values.push(object);\n","\t        } else {\n","\t          valuesByKey.set(keyValue, [ object ]);\n","\t        }\n","\t      }\n","\t      if (mapType) {\n","\t        object = mapType();\n","\t        setter = function(keyValue, values) {\n","\t          object.set(keyValue, map(mapType, values, depth));\n","\t        };\n","\t      } else {\n","\t        object = {};\n","\t        setter = function(keyValue, values) {\n","\t          object[keyValue] = map(mapType, values, depth);\n","\t        };\n","\t      }\n","\t      valuesByKey.forEach(setter);\n","\t      return object;\n","\t    }\n","\t    function entries(map, depth) {\n","\t      if (depth >= keys.length) return map;\n","\t      var array = [], sortKey = sortKeys[depth++];\n","\t      map.forEach(function(key, keyMap) {\n","\t        array.push({\n","\t          key: key,\n","\t          values: entries(keyMap, depth)\n","\t        });\n","\t      });\n","\t      return sortKey ? array.sort(function(a, b) {\n","\t        return sortKey(a.key, b.key);\n","\t      }) : array;\n","\t    }\n","\t    nest.map = function(array, mapType) {\n","\t      return map(mapType, array, 0);\n","\t    };\n","\t    nest.entries = function(array) {\n","\t      return entries(map(d3.map, array, 0), 0);\n","\t    };\n","\t    nest.key = function(d) {\n","\t      keys.push(d);\n","\t      return nest;\n","\t    };\n","\t    nest.sortKeys = function(order) {\n","\t      sortKeys[keys.length - 1] = order;\n","\t      return nest;\n","\t    };\n","\t    nest.sortValues = function(order) {\n","\t      sortValues = order;\n","\t      return nest;\n","\t    };\n","\t    nest.rollup = function(f) {\n","\t      rollup = f;\n","\t      return nest;\n","\t    };\n","\t    return nest;\n","\t  };\n","\t  d3.set = function(array) {\n","\t    var set = new d3_Set();\n","\t    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n","\t    return set;\n","\t  };\n","\t  function d3_Set() {\n","\t    this._ = Object.create(null);\n","\t  }\n","\t  d3_class(d3_Set, {\n","\t    has: d3_map_has,\n","\t    add: function(key) {\n","\t      this._[d3_map_escape(key += \"\")] = true;\n","\t      return key;\n","\t    },\n","\t    remove: d3_map_remove,\n","\t    values: d3_map_keys,\n","\t    size: d3_map_size,\n","\t    empty: d3_map_empty,\n","\t    forEach: function(f) {\n","\t      for (var key in this._) f.call(this, d3_map_unescape(key));\n","\t    }\n","\t  });\n","\t  d3.behavior = {};\n","\t  function d3_identity(d) {\n","\t    return d;\n","\t  }\n","\t  d3.rebind = function(target, source) {\n","\t    var i = 1, n = arguments.length, method;\n","\t    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n","\t    return target;\n","\t  };\n","\t  function d3_rebind(target, source, method) {\n","\t    return function() {\n","\t      var value = method.apply(source, arguments);\n","\t      return value === source ? target : value;\n","\t    };\n","\t  }\n","\t  function d3_vendorSymbol(object, name) {\n","\t    if (name in object) return name;\n","\t    name = name.charAt(0).toUpperCase() + name.slice(1);\n","\t    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n","\t      var prefixName = d3_vendorPrefixes[i] + name;\n","\t      if (prefixName in object) return prefixName;\n","\t    }\n","\t  }\n","\t  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n","\t  function d3_noop() {}\n","\t  d3.dispatch = function() {\n","\t    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n","\t    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n","\t    return dispatch;\n","\t  };\n","\t  function d3_dispatch() {}\n","\t  d3_dispatch.prototype.on = function(type, listener) {\n","\t    var i = type.indexOf(\".\"), name = \"\";\n","\t    if (i >= 0) {\n","\t      name = type.slice(i + 1);\n","\t      type = type.slice(0, i);\n","\t    }\n","\t    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n","\t    if (arguments.length === 2) {\n","\t      if (listener == null) for (type in this) {\n","\t        if (this.hasOwnProperty(type)) this[type].on(name, null);\n","\t      }\n","\t      return this;\n","\t    }\n","\t  };\n","\t  function d3_dispatch_event(dispatch) {\n","\t    var listeners = [], listenerByName = new d3_Map();\n","\t    function event() {\n","\t      var z = listeners, i = -1, n = z.length, l;\n","\t      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n","\t      return dispatch;\n","\t    }\n","\t    event.on = function(name, listener) {\n","\t      var l = listenerByName.get(name), i;\n","\t      if (arguments.length < 2) return l && l.on;\n","\t      if (l) {\n","\t        l.on = null;\n","\t        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n","\t        listenerByName.remove(name);\n","\t      }\n","\t      if (listener) listeners.push(listenerByName.set(name, {\n","\t        on: listener\n","\t      }));\n","\t      return dispatch;\n","\t    };\n","\t    return event;\n","\t  }\n","\t  d3.event = null;\n","\t  function d3_eventPreventDefault() {\n","\t    d3.event.preventDefault();\n","\t  }\n","\t  function d3_eventSource() {\n","\t    var e = d3.event, s;\n","\t    while (s = e.sourceEvent) e = s;\n","\t    return e;\n","\t  }\n","\t  function d3_eventDispatch(target) {\n","\t    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n","\t    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n","\t    dispatch.of = function(thiz, argumentz) {\n","\t      return function(e1) {\n","\t        try {\n","\t          var e0 = e1.sourceEvent = d3.event;\n","\t          e1.target = target;\n","\t          d3.event = e1;\n","\t          dispatch[e1.type].apply(thiz, argumentz);\n","\t        } finally {\n","\t          d3.event = e0;\n","\t        }\n","\t      };\n","\t    };\n","\t    return dispatch;\n","\t  }\n","\t  d3.requote = function(s) {\n","\t    return s.replace(d3_requote_re, \"\\\\$&\");\n","\t  };\n","\t  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n","\t  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n","\t    object.__proto__ = prototype;\n","\t  } : function(object, prototype) {\n","\t    for (var property in prototype) object[property] = prototype[property];\n","\t  };\n","\t  function d3_selection(groups) {\n","\t    d3_subclass(groups, d3_selectionPrototype);\n","\t    return groups;\n","\t  }\n","\t  var d3_select = function(s, n) {\n","\t    return n.querySelector(s);\n","\t  }, d3_selectAll = function(s, n) {\n","\t    return n.querySelectorAll(s);\n","\t  }, d3_selectMatches = function(n, s) {\n","\t    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n","\t    d3_selectMatches = function(n, s) {\n","\t      return d3_selectMatcher.call(n, s);\n","\t    };\n","\t    return d3_selectMatches(n, s);\n","\t  };\n","\t  if (typeof Sizzle === \"function\") {\n","\t    d3_select = function(s, n) {\n","\t      return Sizzle(s, n)[0] || null;\n","\t    };\n","\t    d3_selectAll = Sizzle;\n","\t    d3_selectMatches = Sizzle.matchesSelector;\n","\t  }\n","\t  d3.selection = function() {\n","\t    return d3.select(d3_document.documentElement);\n","\t  };\n","\t  var d3_selectionPrototype = d3.selection.prototype = [];\n","\t  d3_selectionPrototype.select = function(selector) {\n","\t    var subgroups = [], subgroup, subnode, group, node;\n","\t    selector = d3_selection_selector(selector);\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      subgroups.push(subgroup = []);\n","\t      subgroup.parentNode = (group = this[j]).parentNode;\n","\t      for (var i = -1, n = group.length; ++i < n; ) {\n","\t        if (node = group[i]) {\n","\t          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n","\t          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n","\t        } else {\n","\t          subgroup.push(null);\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_selection(subgroups);\n","\t  };\n","\t  function d3_selection_selector(selector) {\n","\t    return typeof selector === \"function\" ? selector : function() {\n","\t      return d3_select(selector, this);\n","\t    };\n","\t  }\n","\t  d3_selectionPrototype.selectAll = function(selector) {\n","\t    var subgroups = [], subgroup, node;\n","\t    selector = d3_selection_selectorAll(selector);\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n","\t        if (node = group[i]) {\n","\t          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n","\t          subgroup.parentNode = node;\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_selection(subgroups);\n","\t  };\n","\t  function d3_selection_selectorAll(selector) {\n","\t    return typeof selector === \"function\" ? selector : function() {\n","\t      return d3_selectAll(selector, this);\n","\t    };\n","\t  }\n","\t  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n","\t  var d3_nsPrefix = {\n","\t    svg: \"http://www.w3.org/2000/svg\",\n","\t    xhtml: d3_nsXhtml,\n","\t    xlink: \"http://www.w3.org/1999/xlink\",\n","\t    xml: \"http://www.w3.org/XML/1998/namespace\",\n","\t    xmlns: \"http://www.w3.org/2000/xmlns/\"\n","\t  };\n","\t  d3.ns = {\n","\t    prefix: d3_nsPrefix,\n","\t    qualify: function(name) {\n","\t      var i = name.indexOf(\":\"), prefix = name;\n","\t      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n","\t      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n","\t        space: d3_nsPrefix[prefix],\n","\t        local: name\n","\t      } : name;\n","\t    }\n","\t  };\n","\t  d3_selectionPrototype.attr = function(name, value) {\n","\t    if (arguments.length < 2) {\n","\t      if (typeof name === \"string\") {\n","\t        var node = this.node();\n","\t        name = d3.ns.qualify(name);\n","\t        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n","\t      }\n","\t      for (value in name) this.each(d3_selection_attr(value, name[value]));\n","\t      return this;\n","\t    }\n","\t    return this.each(d3_selection_attr(name, value));\n","\t  };\n","\t  function d3_selection_attr(name, value) {\n","\t    name = d3.ns.qualify(name);\n","\t    function attrNull() {\n","\t      this.removeAttribute(name);\n","\t    }\n","\t    function attrNullNS() {\n","\t      this.removeAttributeNS(name.space, name.local);\n","\t    }\n","\t    function attrConstant() {\n","\t      this.setAttribute(name, value);\n","\t    }\n","\t    function attrConstantNS() {\n","\t      this.setAttributeNS(name.space, name.local, value);\n","\t    }\n","\t    function attrFunction() {\n","\t      var x = value.apply(this, arguments);\n","\t      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n","\t    }\n","\t    function attrFunctionNS() {\n","\t      var x = value.apply(this, arguments);\n","\t      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n","\t    }\n","\t    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n","\t  }\n","\t  function d3_collapse(s) {\n","\t    return s.trim().replace(/\\s+/g, \" \");\n","\t  }\n","\t  d3_selectionPrototype.classed = function(name, value) {\n","\t    if (arguments.length < 2) {\n","\t      if (typeof name === \"string\") {\n","\t        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n","\t        if (value = node.classList) {\n","\t          while (++i < n) if (!value.contains(name[i])) return false;\n","\t        } else {\n","\t          value = node.getAttribute(\"class\");\n","\t          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n","\t        }\n","\t        return true;\n","\t      }\n","\t      for (value in name) this.each(d3_selection_classed(value, name[value]));\n","\t      return this;\n","\t    }\n","\t    return this.each(d3_selection_classed(name, value));\n","\t  };\n","\t  function d3_selection_classedRe(name) {\n","\t    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n","\t  }\n","\t  function d3_selection_classes(name) {\n","\t    return (name + \"\").trim().split(/^|\\s+/);\n","\t  }\n","\t  function d3_selection_classed(name, value) {\n","\t    name = d3_selection_classes(name).map(d3_selection_classedName);\n","\t    var n = name.length;\n","\t    function classedConstant() {\n","\t      var i = -1;\n","\t      while (++i < n) name[i](this, value);\n","\t    }\n","\t    function classedFunction() {\n","\t      var i = -1, x = value.apply(this, arguments);\n","\t      while (++i < n) name[i](this, x);\n","\t    }\n","\t    return typeof value === \"function\" ? classedFunction : classedConstant;\n","\t  }\n","\t  function d3_selection_classedName(name) {\n","\t    var re = d3_selection_classedRe(name);\n","\t    return function(node, value) {\n","\t      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n","\t      var c = node.getAttribute(\"class\") || \"\";\n","\t      if (value) {\n","\t        re.lastIndex = 0;\n","\t        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n","\t      } else {\n","\t        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n","\t      }\n","\t    };\n","\t  }\n","\t  d3_selectionPrototype.style = function(name, value, priority) {\n","\t    var n = arguments.length;\n","\t    if (n < 3) {\n","\t      if (typeof name !== \"string\") {\n","\t        if (n < 2) value = \"\";\n","\t        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n","\t        return this;\n","\t      }\n","\t      if (n < 2) {\n","\t        var node = this.node();\n","\t        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n","\t      }\n","\t      priority = \"\";\n","\t    }\n","\t    return this.each(d3_selection_style(name, value, priority));\n","\t  };\n","\t  function d3_selection_style(name, value, priority) {\n","\t    function styleNull() {\n","\t      this.style.removeProperty(name);\n","\t    }\n","\t    function styleConstant() {\n","\t      this.style.setProperty(name, value, priority);\n","\t    }\n","\t    function styleFunction() {\n","\t      var x = value.apply(this, arguments);\n","\t      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n","\t    }\n","\t    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n","\t  }\n","\t  d3_selectionPrototype.property = function(name, value) {\n","\t    if (arguments.length < 2) {\n","\t      if (typeof name === \"string\") return this.node()[name];\n","\t      for (value in name) this.each(d3_selection_property(value, name[value]));\n","\t      return this;\n","\t    }\n","\t    return this.each(d3_selection_property(name, value));\n","\t  };\n","\t  function d3_selection_property(name, value) {\n","\t    function propertyNull() {\n","\t      delete this[name];\n","\t    }\n","\t    function propertyConstant() {\n","\t      this[name] = value;\n","\t    }\n","\t    function propertyFunction() {\n","\t      var x = value.apply(this, arguments);\n","\t      if (x == null) delete this[name]; else this[name] = x;\n","\t    }\n","\t    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n","\t  }\n","\t  d3_selectionPrototype.text = function(value) {\n","\t    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n","\t      var v = value.apply(this, arguments);\n","\t      this.textContent = v == null ? \"\" : v;\n","\t    } : value == null ? function() {\n","\t      this.textContent = \"\";\n","\t    } : function() {\n","\t      this.textContent = value;\n","\t    }) : this.node().textContent;\n","\t  };\n","\t  d3_selectionPrototype.html = function(value) {\n","\t    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n","\t      var v = value.apply(this, arguments);\n","\t      this.innerHTML = v == null ? \"\" : v;\n","\t    } : value == null ? function() {\n","\t      this.innerHTML = \"\";\n","\t    } : function() {\n","\t      this.innerHTML = value;\n","\t    }) : this.node().innerHTML;\n","\t  };\n","\t  d3_selectionPrototype.append = function(name) {\n","\t    name = d3_selection_creator(name);\n","\t    return this.select(function() {\n","\t      return this.appendChild(name.apply(this, arguments));\n","\t    });\n","\t  };\n","\t  function d3_selection_creator(name) {\n","\t    function create() {\n","\t      var document = this.ownerDocument, namespace = this.namespaceURI;\n","\t      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n","\t    }\n","\t    function createNS() {\n","\t      return this.ownerDocument.createElementNS(name.space, name.local);\n","\t    }\n","\t    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n","\t  }\n","\t  d3_selectionPrototype.insert = function(name, before) {\n","\t    name = d3_selection_creator(name);\n","\t    before = d3_selection_selector(before);\n","\t    return this.select(function() {\n","\t      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n","\t    });\n","\t  };\n","\t  d3_selectionPrototype.remove = function() {\n","\t    return this.each(d3_selectionRemove);\n","\t  };\n","\t  function d3_selectionRemove() {\n","\t    var parent = this.parentNode;\n","\t    if (parent) parent.removeChild(this);\n","\t  }\n","\t  d3_selectionPrototype.data = function(value, key) {\n","\t    var i = -1, n = this.length, group, node;\n","\t    if (!arguments.length) {\n","\t      value = new Array(n = (group = this[0]).length);\n","\t      while (++i < n) {\n","\t        if (node = group[i]) {\n","\t          value[i] = node.__data__;\n","\t        }\n","\t      }\n","\t      return value;\n","\t    }\n","\t    function bind(group, groupData) {\n","\t      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n","\t      if (key) {\n","\t        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n","\t        for (i = -1; ++i < n; ) {\n","\t          if (node = group[i]) {\n","\t            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n","\t              exitNodes[i] = node;\n","\t            } else {\n","\t              nodeByKeyValue.set(keyValue, node);\n","\t            }\n","\t            keyValues[i] = keyValue;\n","\t          }\n","\t        }\n","\t        for (i = -1; ++i < m; ) {\n","\t          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n","\t            enterNodes[i] = d3_selection_dataNode(nodeData);\n","\t          } else if (node !== true) {\n","\t            updateNodes[i] = node;\n","\t            node.__data__ = nodeData;\n","\t          }\n","\t          nodeByKeyValue.set(keyValue, true);\n","\t        }\n","\t        for (i = -1; ++i < n; ) {\n","\t          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n","\t            exitNodes[i] = group[i];\n","\t          }\n","\t        }\n","\t      } else {\n","\t        for (i = -1; ++i < n0; ) {\n","\t          node = group[i];\n","\t          nodeData = groupData[i];\n","\t          if (node) {\n","\t            node.__data__ = nodeData;\n","\t            updateNodes[i] = node;\n","\t          } else {\n","\t            enterNodes[i] = d3_selection_dataNode(nodeData);\n","\t          }\n","\t        }\n","\t        for (;i < m; ++i) {\n","\t          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n","\t        }\n","\t        for (;i < n; ++i) {\n","\t          exitNodes[i] = group[i];\n","\t        }\n","\t      }\n","\t      enterNodes.update = updateNodes;\n","\t      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n","\t      enter.push(enterNodes);\n","\t      update.push(updateNodes);\n","\t      exit.push(exitNodes);\n","\t    }\n","\t    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n","\t    if (typeof value === \"function\") {\n","\t      while (++i < n) {\n","\t        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n","\t      }\n","\t    } else {\n","\t      while (++i < n) {\n","\t        bind(group = this[i], value);\n","\t      }\n","\t    }\n","\t    update.enter = function() {\n","\t      return enter;\n","\t    };\n","\t    update.exit = function() {\n","\t      return exit;\n","\t    };\n","\t    return update;\n","\t  };\n","\t  function d3_selection_dataNode(data) {\n","\t    return {\n","\t      __data__: data\n","\t    };\n","\t  }\n","\t  d3_selectionPrototype.datum = function(value) {\n","\t    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n","\t  };\n","\t  d3_selectionPrototype.filter = function(filter) {\n","\t    var subgroups = [], subgroup, group, node;\n","\t    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n","\t    for (var j = 0, m = this.length; j < m; j++) {\n","\t      subgroups.push(subgroup = []);\n","\t      subgroup.parentNode = (group = this[j]).parentNode;\n","\t      for (var i = 0, n = group.length; i < n; i++) {\n","\t        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n","\t          subgroup.push(node);\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_selection(subgroups);\n","\t  };\n","\t  function d3_selection_filter(selector) {\n","\t    return function() {\n","\t      return d3_selectMatches(this, selector);\n","\t    };\n","\t  }\n","\t  d3_selectionPrototype.order = function() {\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n","\t        if (node = group[i]) {\n","\t          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n","\t          next = node;\n","\t        }\n","\t      }\n","\t    }\n","\t    return this;\n","\t  };\n","\t  d3_selectionPrototype.sort = function(comparator) {\n","\t    comparator = d3_selection_sortComparator.apply(this, arguments);\n","\t    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n","\t    return this.order();\n","\t  };\n","\t  function d3_selection_sortComparator(comparator) {\n","\t    if (!arguments.length) comparator = d3_ascending;\n","\t    return function(a, b) {\n","\t      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n","\t    };\n","\t  }\n","\t  d3_selectionPrototype.each = function(callback) {\n","\t    return d3_selection_each(this, function(node, i, j) {\n","\t      callback.call(node, node.__data__, i, j);\n","\t    });\n","\t  };\n","\t  function d3_selection_each(groups, callback) {\n","\t    for (var j = 0, m = groups.length; j < m; j++) {\n","\t      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n","\t        if (node = group[i]) callback(node, i, j);\n","\t      }\n","\t    }\n","\t    return groups;\n","\t  }\n","\t  d3_selectionPrototype.call = function(callback) {\n","\t    var args = d3_array(arguments);\n","\t    callback.apply(args[0] = this, args);\n","\t    return this;\n","\t  };\n","\t  d3_selectionPrototype.empty = function() {\n","\t    return !this.node();\n","\t  };\n","\t  d3_selectionPrototype.node = function() {\n","\t    for (var j = 0, m = this.length; j < m; j++) {\n","\t      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n","\t        var node = group[i];\n","\t        if (node) return node;\n","\t      }\n","\t    }\n","\t    return null;\n","\t  };\n","\t  d3_selectionPrototype.size = function() {\n","\t    var n = 0;\n","\t    d3_selection_each(this, function() {\n","\t      ++n;\n","\t    });\n","\t    return n;\n","\t  };\n","\t  function d3_selection_enter(selection) {\n","\t    d3_subclass(selection, d3_selection_enterPrototype);\n","\t    return selection;\n","\t  }\n","\t  var d3_selection_enterPrototype = [];\n","\t  d3.selection.enter = d3_selection_enter;\n","\t  d3.selection.enter.prototype = d3_selection_enterPrototype;\n","\t  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n","\t  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n","\t  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n","\t  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n","\t  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n","\t  d3_selection_enterPrototype.select = function(selector) {\n","\t    var subgroups = [], subgroup, subnode, upgroup, group, node;\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      upgroup = (group = this[j]).update;\n","\t      subgroups.push(subgroup = []);\n","\t      subgroup.parentNode = group.parentNode;\n","\t      for (var i = -1, n = group.length; ++i < n; ) {\n","\t        if (node = group[i]) {\n","\t          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n","\t          subnode.__data__ = node.__data__;\n","\t        } else {\n","\t          subgroup.push(null);\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_selection(subgroups);\n","\t  };\n","\t  d3_selection_enterPrototype.insert = function(name, before) {\n","\t    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n","\t    return d3_selectionPrototype.insert.call(this, name, before);\n","\t  };\n","\t  function d3_selection_enterInsertBefore(enter) {\n","\t    var i0, j0;\n","\t    return function(d, i, j) {\n","\t      var group = enter[j].update, n = group.length, node;\n","\t      if (j != j0) j0 = j, i0 = 0;\n","\t      if (i >= i0) i0 = i + 1;\n","\t      while (!(node = group[i0]) && ++i0 < n) ;\n","\t      return node;\n","\t    };\n","\t  }\n","\t  d3.select = function(node) {\n","\t    var group;\n","\t    if (typeof node === \"string\") {\n","\t      group = [ d3_select(node, d3_document) ];\n","\t      group.parentNode = d3_document.documentElement;\n","\t    } else {\n","\t      group = [ node ];\n","\t      group.parentNode = d3_documentElement(node);\n","\t    }\n","\t    return d3_selection([ group ]);\n","\t  };\n","\t  d3.selectAll = function(nodes) {\n","\t    var group;\n","\t    if (typeof nodes === \"string\") {\n","\t      group = d3_array(d3_selectAll(nodes, d3_document));\n","\t      group.parentNode = d3_document.documentElement;\n","\t    } else {\n","\t      group = d3_array(nodes);\n","\t      group.parentNode = null;\n","\t    }\n","\t    return d3_selection([ group ]);\n","\t  };\n","\t  d3_selectionPrototype.on = function(type, listener, capture) {\n","\t    var n = arguments.length;\n","\t    if (n < 3) {\n","\t      if (typeof type !== \"string\") {\n","\t        if (n < 2) listener = false;\n","\t        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n","\t        return this;\n","\t      }\n","\t      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n","\t      capture = false;\n","\t    }\n","\t    return this.each(d3_selection_on(type, listener, capture));\n","\t  };\n","\t  function d3_selection_on(type, listener, capture) {\n","\t    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n","\t    if (i > 0) type = type.slice(0, i);\n","\t    var filter = d3_selection_onFilters.get(type);\n","\t    if (filter) type = filter, wrap = d3_selection_onFilter;\n","\t    function onRemove() {\n","\t      var l = this[name];\n","\t      if (l) {\n","\t        this.removeEventListener(type, l, l.$);\n","\t        delete this[name];\n","\t      }\n","\t    }\n","\t    function onAdd() {\n","\t      var l = wrap(listener, d3_array(arguments));\n","\t      onRemove.call(this);\n","\t      this.addEventListener(type, this[name] = l, l.$ = capture);\n","\t      l._ = listener;\n","\t    }\n","\t    function removeAll() {\n","\t      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n","\t      for (var name in this) {\n","\t        if (match = name.match(re)) {\n","\t          var l = this[name];\n","\t          this.removeEventListener(match[1], l, l.$);\n","\t          delete this[name];\n","\t        }\n","\t      }\n","\t    }\n","\t    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n","\t  }\n","\t  var d3_selection_onFilters = d3.map({\n","\t    mouseenter: \"mouseover\",\n","\t    mouseleave: \"mouseout\"\n","\t  });\n","\t  if (d3_document) {\n","\t    d3_selection_onFilters.forEach(function(k) {\n","\t      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n","\t    });\n","\t  }\n","\t  function d3_selection_onListener(listener, argumentz) {\n","\t    return function(e) {\n","\t      var o = d3.event;\n","\t      d3.event = e;\n","\t      argumentz[0] = this.__data__;\n","\t      try {\n","\t        listener.apply(this, argumentz);\n","\t      } finally {\n","\t        d3.event = o;\n","\t      }\n","\t    };\n","\t  }\n","\t  function d3_selection_onFilter(listener, argumentz) {\n","\t    var l = d3_selection_onListener(listener, argumentz);\n","\t    return function(e) {\n","\t      var target = this, related = e.relatedTarget;\n","\t      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n","\t        l.call(target, e);\n","\t      }\n","\t    };\n","\t  }\n","\t  var d3_event_dragSelect, d3_event_dragId = 0;\n","\t  function d3_event_dragSuppress(node) {\n","\t    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n","\t    if (d3_event_dragSelect == null) {\n","\t      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n","\t    }\n","\t    if (d3_event_dragSelect) {\n","\t      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n","\t      style[d3_event_dragSelect] = \"none\";\n","\t    }\n","\t    return function(suppressClick) {\n","\t      w.on(name, null);\n","\t      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n","\t      if (suppressClick) {\n","\t        var off = function() {\n","\t          w.on(click, null);\n","\t        };\n","\t        w.on(click, function() {\n","\t          d3_eventPreventDefault();\n","\t          off();\n","\t        }, true);\n","\t        setTimeout(off, 0);\n","\t      }\n","\t    };\n","\t  }\n","\t  d3.mouse = function(container) {\n","\t    return d3_mousePoint(container, d3_eventSource());\n","\t  };\n","\t  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n","\t  function d3_mousePoint(container, e) {\n","\t    if (e.changedTouches) e = e.changedTouches[0];\n","\t    var svg = container.ownerSVGElement || container;\n","\t    if (svg.createSVGPoint) {\n","\t      var point = svg.createSVGPoint();\n","\t      if (d3_mouse_bug44083 < 0) {\n","\t        var window = d3_window(container);\n","\t        if (window.scrollX || window.scrollY) {\n","\t          svg = d3.select(\"body\").append(\"svg\").style({\n","\t            position: \"absolute\",\n","\t            top: 0,\n","\t            left: 0,\n","\t            margin: 0,\n","\t            padding: 0,\n","\t            border: \"none\"\n","\t          }, \"important\");\n","\t          var ctm = svg[0][0].getScreenCTM();\n","\t          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n","\t          svg.remove();\n","\t        }\n","\t      }\n","\t      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n","\t      point.y = e.clientY;\n","\t      point = point.matrixTransform(container.getScreenCTM().inverse());\n","\t      return [ point.x, point.y ];\n","\t    }\n","\t    var rect = container.getBoundingClientRect();\n","\t    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n","\t  }\n","\t  d3.touch = function(container, touches, identifier) {\n","\t    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n","\t    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n","\t      if ((touch = touches[i]).identifier === identifier) {\n","\t        return d3_mousePoint(container, touch);\n","\t      }\n","\t    }\n","\t  };\n","\t  d3.behavior.drag = function() {\n","\t    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n","\t    function drag() {\n","\t      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n","\t    }\n","\t    function dragstart(id, position, subject, move, end) {\n","\t      return function() {\n","\t        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n","\t        if (origin) {\n","\t          dragOffset = origin.apply(that, arguments);\n","\t          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n","\t        } else {\n","\t          dragOffset = [ 0, 0 ];\n","\t        }\n","\t        dispatch({\n","\t          type: \"dragstart\"\n","\t        });\n","\t        function moved() {\n","\t          var position1 = position(parent, dragId), dx, dy;\n","\t          if (!position1) return;\n","\t          dx = position1[0] - position0[0];\n","\t          dy = position1[1] - position0[1];\n","\t          dragged |= dx | dy;\n","\t          position0 = position1;\n","\t          dispatch({\n","\t            type: \"drag\",\n","\t            x: position1[0] + dragOffset[0],\n","\t            y: position1[1] + dragOffset[1],\n","\t            dx: dx,\n","\t            dy: dy\n","\t          });\n","\t        }\n","\t        function ended() {\n","\t          if (!position(parent, dragId)) return;\n","\t          dragSubject.on(move + dragName, null).on(end + dragName, null);\n","\t          dragRestore(dragged);\n","\t          dispatch({\n","\t            type: \"dragend\"\n","\t          });\n","\t        }\n","\t      };\n","\t    }\n","\t    drag.origin = function(x) {\n","\t      if (!arguments.length) return origin;\n","\t      origin = x;\n","\t      return drag;\n","\t    };\n","\t    return d3.rebind(drag, event, \"on\");\n","\t  };\n","\t  function d3_behavior_dragTouchId() {\n","\t    return d3.event.changedTouches[0].identifier;\n","\t  }\n","\t  d3.touches = function(container, touches) {\n","\t    if (arguments.length < 2) touches = d3_eventSource().touches;\n","\t    return touches ? d3_array(touches).map(function(touch) {\n","\t      var point = d3_mousePoint(container, touch);\n","\t      point.identifier = touch.identifier;\n","\t      return point;\n","\t    }) : [];\n","\t  };\n","\t  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n","\t  function d3_sgn(x) {\n","\t    return x > 0 ? 1 : x < 0 ? -1 : 0;\n","\t  }\n","\t  function d3_cross2d(a, b, c) {\n","\t    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n","\t  }\n","\t  function d3_acos(x) {\n","\t    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n","\t  }\n","\t  function d3_asin(x) {\n","\t    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n","\t  }\n","\t  function d3_sinh(x) {\n","\t    return ((x = Math.exp(x)) - 1 / x) / 2;\n","\t  }\n","\t  function d3_cosh(x) {\n","\t    return ((x = Math.exp(x)) + 1 / x) / 2;\n","\t  }\n","\t  function d3_tanh(x) {\n","\t    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n","\t  }\n","\t  function d3_haversin(x) {\n","\t    return (x = Math.sin(x / 2)) * x;\n","\t  }\n","\t  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n","\t  d3.interpolateZoom = function(p0, p1) {\n","\t    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n","\t    if (d2 < ε2) {\n","\t      S = Math.log(w1 / w0) / ρ;\n","\t      i = function(t) {\n","\t        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n","\t      };\n","\t    } else {\n","\t      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n","\t      S = (r1 - r0) / ρ;\n","\t      i = function(t) {\n","\t        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n","\t        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n","\t      };\n","\t    }\n","\t    i.duration = S * 1e3;\n","\t    return i;\n","\t  };\n","\t  d3.behavior.zoom = function() {\n","\t    var view = {\n","\t      x: 0,\n","\t      y: 0,\n","\t      k: 1\n","\t    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n","\t    if (!d3_behavior_zoomWheel) {\n","\t      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n","\t        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n","\t      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n","\t        return d3.event.wheelDelta;\n","\t      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n","\t        return -d3.event.detail;\n","\t      }, \"MozMousePixelScroll\");\n","\t    }\n","\t    function zoom(g) {\n","\t      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n","\t    }\n","\t    zoom.event = function(g) {\n","\t      g.each(function() {\n","\t        var dispatch = event.of(this, arguments), view1 = view;\n","\t        if (d3_transitionInheritId) {\n","\t          d3.select(this).transition().each(\"start.zoom\", function() {\n","\t            view = this.__chart__ || {\n","\t              x: 0,\n","\t              y: 0,\n","\t              k: 1\n","\t            };\n","\t            zoomstarted(dispatch);\n","\t          }).tween(\"zoom:zoom\", function() {\n","\t            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n","\t            return function(t) {\n","\t              var l = i(t), k = dx / l[2];\n","\t              this.__chart__ = view = {\n","\t                x: cx - l[0] * k,\n","\t                y: cy - l[1] * k,\n","\t                k: k\n","\t              };\n","\t              zoomed(dispatch);\n","\t            };\n","\t          }).each(\"interrupt.zoom\", function() {\n","\t            zoomended(dispatch);\n","\t          }).each(\"end.zoom\", function() {\n","\t            zoomended(dispatch);\n","\t          });\n","\t        } else {\n","\t          this.__chart__ = view;\n","\t          zoomstarted(dispatch);\n","\t          zoomed(dispatch);\n","\t          zoomended(dispatch);\n","\t        }\n","\t      });\n","\t    };\n","\t    zoom.translate = function(_) {\n","\t      if (!arguments.length) return [ view.x, view.y ];\n","\t      view = {\n","\t        x: +_[0],\n","\t        y: +_[1],\n","\t        k: view.k\n","\t      };\n","\t      rescale();\n","\t      return zoom;\n","\t    };\n","\t    zoom.scale = function(_) {\n","\t      if (!arguments.length) return view.k;\n","\t      view = {\n","\t        x: view.x,\n","\t        y: view.y,\n","\t        k: null\n","\t      };\n","\t      scaleTo(+_);\n","\t      rescale();\n","\t      return zoom;\n","\t    };\n","\t    zoom.scaleExtent = function(_) {\n","\t      if (!arguments.length) return scaleExtent;\n","\t      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n","\t      return zoom;\n","\t    };\n","\t    zoom.center = function(_) {\n","\t      if (!arguments.length) return center;\n","\t      center = _ && [ +_[0], +_[1] ];\n","\t      return zoom;\n","\t    };\n","\t    zoom.size = function(_) {\n","\t      if (!arguments.length) return size;\n","\t      size = _ && [ +_[0], +_[1] ];\n","\t      return zoom;\n","\t    };\n","\t    zoom.duration = function(_) {\n","\t      if (!arguments.length) return duration;\n","\t      duration = +_;\n","\t      return zoom;\n","\t    };\n","\t    zoom.x = function(z) {\n","\t      if (!arguments.length) return x1;\n","\t      x1 = z;\n","\t      x0 = z.copy();\n","\t      view = {\n","\t        x: 0,\n","\t        y: 0,\n","\t        k: 1\n","\t      };\n","\t      return zoom;\n","\t    };\n","\t    zoom.y = function(z) {\n","\t      if (!arguments.length) return y1;\n","\t      y1 = z;\n","\t      y0 = z.copy();\n","\t      view = {\n","\t        x: 0,\n","\t        y: 0,\n","\t        k: 1\n","\t      };\n","\t      return zoom;\n","\t    };\n","\t    function location(p) {\n","\t      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n","\t    }\n","\t    function point(l) {\n","\t      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n","\t    }\n","\t    function scaleTo(s) {\n","\t      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n","\t    }\n","\t    function translateTo(p, l) {\n","\t      l = point(l);\n","\t      view.x += p[0] - l[0];\n","\t      view.y += p[1] - l[1];\n","\t    }\n","\t    function zoomTo(that, p, l, k) {\n","\t      that.__chart__ = {\n","\t        x: view.x,\n","\t        y: view.y,\n","\t        k: view.k\n","\t      };\n","\t      scaleTo(Math.pow(2, k));\n","\t      translateTo(center0 = p, l);\n","\t      that = d3.select(that);\n","\t      if (duration > 0) that = that.transition().duration(duration);\n","\t      that.call(zoom.event);\n","\t    }\n","\t    function rescale() {\n","\t      if (x1) x1.domain(x0.range().map(function(x) {\n","\t        return (x - view.x) / view.k;\n","\t      }).map(x0.invert));\n","\t      if (y1) y1.domain(y0.range().map(function(y) {\n","\t        return (y - view.y) / view.k;\n","\t      }).map(y0.invert));\n","\t    }\n","\t    function zoomstarted(dispatch) {\n","\t      if (!zooming++) dispatch({\n","\t        type: \"zoomstart\"\n","\t      });\n","\t    }\n","\t    function zoomed(dispatch) {\n","\t      rescale();\n","\t      dispatch({\n","\t        type: \"zoom\",\n","\t        scale: view.k,\n","\t        translate: [ view.x, view.y ]\n","\t      });\n","\t    }\n","\t    function zoomended(dispatch) {\n","\t      if (!--zooming) dispatch({\n","\t        type: \"zoomend\"\n","\t      }), center0 = null;\n","\t    }\n","\t    function mousedowned() {\n","\t      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n","\t      d3_selection_interrupt.call(that);\n","\t      zoomstarted(dispatch);\n","\t      function moved() {\n","\t        dragged = 1;\n","\t        translateTo(d3.mouse(that), location0);\n","\t        zoomed(dispatch);\n","\t      }\n","\t      function ended() {\n","\t        subject.on(mousemove, null).on(mouseup, null);\n","\t        dragRestore(dragged);\n","\t        zoomended(dispatch);\n","\t      }\n","\t    }\n","\t    function touchstarted() {\n","\t      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n","\t      started();\n","\t      zoomstarted(dispatch);\n","\t      subject.on(mousedown, null).on(touchstart, started);\n","\t      function relocate() {\n","\t        var touches = d3.touches(that);\n","\t        scale0 = view.k;\n","\t        touches.forEach(function(t) {\n","\t          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n","\t        });\n","\t        return touches;\n","\t      }\n","\t      function started() {\n","\t        var target = d3.event.target;\n","\t        d3.select(target).on(touchmove, moved).on(touchend, ended);\n","\t        targets.push(target);\n","\t        var changed = d3.event.changedTouches;\n","\t        for (var i = 0, n = changed.length; i < n; ++i) {\n","\t          locations0[changed[i].identifier] = null;\n","\t        }\n","\t        var touches = relocate(), now = Date.now();\n","\t        if (touches.length === 1) {\n","\t          if (now - touchtime < 500) {\n","\t            var p = touches[0];\n","\t            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n","\t            d3_eventPreventDefault();\n","\t          }\n","\t          touchtime = now;\n","\t        } else if (touches.length > 1) {\n","\t          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n","\t          distance0 = dx * dx + dy * dy;\n","\t        }\n","\t      }\n","\t      function moved() {\n","\t        var touches = d3.touches(that), p0, l0, p1, l1;\n","\t        d3_selection_interrupt.call(that);\n","\t        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n","\t          p1 = touches[i];\n","\t          if (l1 = locations0[p1.identifier]) {\n","\t            if (l0) break;\n","\t            p0 = p1, l0 = l1;\n","\t          }\n","\t        }\n","\t        if (l1) {\n","\t          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n","\t          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n","\t          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n","\t          scaleTo(scale1 * scale0);\n","\t        }\n","\t        touchtime = null;\n","\t        translateTo(p0, l0);\n","\t        zoomed(dispatch);\n","\t      }\n","\t      function ended() {\n","\t        if (d3.event.touches.length) {\n","\t          var changed = d3.event.changedTouches;\n","\t          for (var i = 0, n = changed.length; i < n; ++i) {\n","\t            delete locations0[changed[i].identifier];\n","\t          }\n","\t          for (var identifier in locations0) {\n","\t            return void relocate();\n","\t          }\n","\t        }\n","\t        d3.selectAll(targets).on(zoomName, null);\n","\t        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n","\t        dragRestore();\n","\t        zoomended(dispatch);\n","\t      }\n","\t    }\n","\t    function mousewheeled() {\n","\t      var dispatch = event.of(this, arguments);\n","\t      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n","\t      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n","\t      mousewheelTimer = setTimeout(function() {\n","\t        mousewheelTimer = null;\n","\t        zoomended(dispatch);\n","\t      }, 50);\n","\t      d3_eventPreventDefault();\n","\t      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n","\t      translateTo(center0, translate0);\n","\t      zoomed(dispatch);\n","\t    }\n","\t    function dblclicked() {\n","\t      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n","\t      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n","\t    }\n","\t    return d3.rebind(zoom, event, \"on\");\n","\t  };\n","\t  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n","\t  d3.color = d3_color;\n","\t  function d3_color() {}\n","\t  d3_color.prototype.toString = function() {\n","\t    return this.rgb() + \"\";\n","\t  };\n","\t  d3.hsl = d3_hsl;\n","\t  function d3_hsl(h, s, l) {\n","\t    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n","\t  }\n","\t  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n","\t  d3_hslPrototype.brighter = function(k) {\n","\t    k = Math.pow(.7, arguments.length ? k : 1);\n","\t    return new d3_hsl(this.h, this.s, this.l / k);\n","\t  };\n","\t  d3_hslPrototype.darker = function(k) {\n","\t    k = Math.pow(.7, arguments.length ? k : 1);\n","\t    return new d3_hsl(this.h, this.s, k * this.l);\n","\t  };\n","\t  d3_hslPrototype.rgb = function() {\n","\t    return d3_hsl_rgb(this.h, this.s, this.l);\n","\t  };\n","\t  function d3_hsl_rgb(h, s, l) {\n","\t    var m1, m2;\n","\t    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n","\t    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n","\t    l = l < 0 ? 0 : l > 1 ? 1 : l;\n","\t    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n","\t    m1 = 2 * l - m2;\n","\t    function v(h) {\n","\t      if (h > 360) h -= 360; else if (h < 0) h += 360;\n","\t      if (h < 60) return m1 + (m2 - m1) * h / 60;\n","\t      if (h < 180) return m2;\n","\t      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n","\t      return m1;\n","\t    }\n","\t    function vv(h) {\n","\t      return Math.round(v(h) * 255);\n","\t    }\n","\t    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n","\t  }\n","\t  d3.hcl = d3_hcl;\n","\t  function d3_hcl(h, c, l) {\n","\t    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n","\t  }\n","\t  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n","\t  d3_hclPrototype.brighter = function(k) {\n","\t    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n","\t  };\n","\t  d3_hclPrototype.darker = function(k) {\n","\t    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n","\t  };\n","\t  d3_hclPrototype.rgb = function() {\n","\t    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n","\t  };\n","\t  function d3_hcl_lab(h, c, l) {\n","\t    if (isNaN(h)) h = 0;\n","\t    if (isNaN(c)) c = 0;\n","\t    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n","\t  }\n","\t  d3.lab = d3_lab;\n","\t  function d3_lab(l, a, b) {\n","\t    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n","\t  }\n","\t  var d3_lab_K = 18;\n","\t  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n","\t  var d3_labPrototype = d3_lab.prototype = new d3_color();\n","\t  d3_labPrototype.brighter = function(k) {\n","\t    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n","\t  };\n","\t  d3_labPrototype.darker = function(k) {\n","\t    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n","\t  };\n","\t  d3_labPrototype.rgb = function() {\n","\t    return d3_lab_rgb(this.l, this.a, this.b);\n","\t  };\n","\t  function d3_lab_rgb(l, a, b) {\n","\t    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n","\t    x = d3_lab_xyz(x) * d3_lab_X;\n","\t    y = d3_lab_xyz(y) * d3_lab_Y;\n","\t    z = d3_lab_xyz(z) * d3_lab_Z;\n","\t    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n","\t  }\n","\t  function d3_lab_hcl(l, a, b) {\n","\t    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n","\t  }\n","\t  function d3_lab_xyz(x) {\n","\t    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n","\t  }\n","\t  function d3_xyz_lab(x) {\n","\t    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n","\t  }\n","\t  function d3_xyz_rgb(r) {\n","\t    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n","\t  }\n","\t  d3.rgb = d3_rgb;\n","\t  function d3_rgb(r, g, b) {\n","\t    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n","\t  }\n","\t  function d3_rgbNumber(value) {\n","\t    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n","\t  }\n","\t  function d3_rgbString(value) {\n","\t    return d3_rgbNumber(value) + \"\";\n","\t  }\n","\t  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n","\t  d3_rgbPrototype.brighter = function(k) {\n","\t    k = Math.pow(.7, arguments.length ? k : 1);\n","\t    var r = this.r, g = this.g, b = this.b, i = 30;\n","\t    if (!r && !g && !b) return new d3_rgb(i, i, i);\n","\t    if (r && r < i) r = i;\n","\t    if (g && g < i) g = i;\n","\t    if (b && b < i) b = i;\n","\t    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n","\t  };\n","\t  d3_rgbPrototype.darker = function(k) {\n","\t    k = Math.pow(.7, arguments.length ? k : 1);\n","\t    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n","\t  };\n","\t  d3_rgbPrototype.hsl = function() {\n","\t    return d3_rgb_hsl(this.r, this.g, this.b);\n","\t  };\n","\t  d3_rgbPrototype.toString = function() {\n","\t    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n","\t  };\n","\t  function d3_rgb_hex(v) {\n","\t    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n","\t  }\n","\t  function d3_rgb_parse(format, rgb, hsl) {\n","\t    var r = 0, g = 0, b = 0, m1, m2, color;\n","\t    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n","\t    if (m1) {\n","\t      m2 = m1[2].split(\",\");\n","\t      switch (m1[1]) {\n","\t       case \"hsl\":\n","\t        {\n","\t          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n","\t        }\n","\t\n","\t       case \"rgb\":\n","\t        {\n","\t          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n","\t        }\n","\t      }\n","\t    }\n","\t    if (color = d3_rgb_names.get(format)) {\n","\t      return rgb(color.r, color.g, color.b);\n","\t    }\n","\t    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n","\t      if (format.length === 4) {\n","\t        r = (color & 3840) >> 4;\n","\t        r = r >> 4 | r;\n","\t        g = color & 240;\n","\t        g = g >> 4 | g;\n","\t        b = color & 15;\n","\t        b = b << 4 | b;\n","\t      } else if (format.length === 7) {\n","\t        r = (color & 16711680) >> 16;\n","\t        g = (color & 65280) >> 8;\n","\t        b = color & 255;\n","\t      }\n","\t    }\n","\t    return rgb(r, g, b);\n","\t  }\n","\t  function d3_rgb_hsl(r, g, b) {\n","\t    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n","\t    if (d) {\n","\t      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n","\t      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n","\t      h *= 60;\n","\t    } else {\n","\t      h = NaN;\n","\t      s = l > 0 && l < 1 ? 0 : h;\n","\t    }\n","\t    return new d3_hsl(h, s, l);\n","\t  }\n","\t  function d3_rgb_lab(r, g, b) {\n","\t    r = d3_rgb_xyz(r);\n","\t    g = d3_rgb_xyz(g);\n","\t    b = d3_rgb_xyz(b);\n","\t    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n","\t    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n","\t  }\n","\t  function d3_rgb_xyz(r) {\n","\t    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n","\t  }\n","\t  function d3_rgb_parseNumber(c) {\n","\t    var f = parseFloat(c);\n","\t    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n","\t  }\n","\t  var d3_rgb_names = d3.map({\n","\t    aliceblue: 15792383,\n","\t    antiquewhite: 16444375,\n","\t    aqua: 65535,\n","\t    aquamarine: 8388564,\n","\t    azure: 15794175,\n","\t    beige: 16119260,\n","\t    bisque: 16770244,\n","\t    black: 0,\n","\t    blanchedalmond: 16772045,\n","\t    blue: 255,\n","\t    blueviolet: 9055202,\n","\t    brown: 10824234,\n","\t    burlywood: 14596231,\n","\t    cadetblue: 6266528,\n","\t    chartreuse: 8388352,\n","\t    chocolate: 13789470,\n","\t    coral: 16744272,\n","\t    cornflowerblue: 6591981,\n","\t    cornsilk: 16775388,\n","\t    crimson: 14423100,\n","\t    cyan: 65535,\n","\t    darkblue: 139,\n","\t    darkcyan: 35723,\n","\t    darkgoldenrod: 12092939,\n","\t    darkgray: 11119017,\n","\t    darkgreen: 25600,\n","\t    darkgrey: 11119017,\n","\t    darkkhaki: 12433259,\n","\t    darkmagenta: 9109643,\n","\t    darkolivegreen: 5597999,\n","\t    darkorange: 16747520,\n","\t    darkorchid: 10040012,\n","\t    darkred: 9109504,\n","\t    darksalmon: 15308410,\n","\t    darkseagreen: 9419919,\n","\t    darkslateblue: 4734347,\n","\t    darkslategray: 3100495,\n","\t    darkslategrey: 3100495,\n","\t    darkturquoise: 52945,\n","\t    darkviolet: 9699539,\n","\t    deeppink: 16716947,\n","\t    deepskyblue: 49151,\n","\t    dimgray: 6908265,\n","\t    dimgrey: 6908265,\n","\t    dodgerblue: 2003199,\n","\t    firebrick: 11674146,\n","\t    floralwhite: 16775920,\n","\t    forestgreen: 2263842,\n","\t    fuchsia: 16711935,\n","\t    gainsboro: 14474460,\n","\t    ghostwhite: 16316671,\n","\t    gold: 16766720,\n","\t    goldenrod: 14329120,\n","\t    gray: 8421504,\n","\t    green: 32768,\n","\t    greenyellow: 11403055,\n","\t    grey: 8421504,\n","\t    honeydew: 15794160,\n","\t    hotpink: 16738740,\n","\t    indianred: 13458524,\n","\t    indigo: 4915330,\n","\t    ivory: 16777200,\n","\t    khaki: 15787660,\n","\t    lavender: 15132410,\n","\t    lavenderblush: 16773365,\n","\t    lawngreen: 8190976,\n","\t    lemonchiffon: 16775885,\n","\t    lightblue: 11393254,\n","\t    lightcoral: 15761536,\n","\t    lightcyan: 14745599,\n","\t    lightgoldenrodyellow: 16448210,\n","\t    lightgray: 13882323,\n","\t    lightgreen: 9498256,\n","\t    lightgrey: 13882323,\n","\t    lightpink: 16758465,\n","\t    lightsalmon: 16752762,\n","\t    lightseagreen: 2142890,\n","\t    lightskyblue: 8900346,\n","\t    lightslategray: 7833753,\n","\t    lightslategrey: 7833753,\n","\t    lightsteelblue: 11584734,\n","\t    lightyellow: 16777184,\n","\t    lime: 65280,\n","\t    limegreen: 3329330,\n","\t    linen: 16445670,\n","\t    magenta: 16711935,\n","\t    maroon: 8388608,\n","\t    mediumaquamarine: 6737322,\n","\t    mediumblue: 205,\n","\t    mediumorchid: 12211667,\n","\t    mediumpurple: 9662683,\n","\t    mediumseagreen: 3978097,\n","\t    mediumslateblue: 8087790,\n","\t    mediumspringgreen: 64154,\n","\t    mediumturquoise: 4772300,\n","\t    mediumvioletred: 13047173,\n","\t    midnightblue: 1644912,\n","\t    mintcream: 16121850,\n","\t    mistyrose: 16770273,\n","\t    moccasin: 16770229,\n","\t    navajowhite: 16768685,\n","\t    navy: 128,\n","\t    oldlace: 16643558,\n","\t    olive: 8421376,\n","\t    olivedrab: 7048739,\n","\t    orange: 16753920,\n","\t    orangered: 16729344,\n","\t    orchid: 14315734,\n","\t    palegoldenrod: 15657130,\n","\t    palegreen: 10025880,\n","\t    paleturquoise: 11529966,\n","\t    palevioletred: 14381203,\n","\t    papayawhip: 16773077,\n","\t    peachpuff: 16767673,\n","\t    peru: 13468991,\n","\t    pink: 16761035,\n","\t    plum: 14524637,\n","\t    powderblue: 11591910,\n","\t    purple: 8388736,\n","\t    rebeccapurple: 6697881,\n","\t    red: 16711680,\n","\t    rosybrown: 12357519,\n","\t    royalblue: 4286945,\n","\t    saddlebrown: 9127187,\n","\t    salmon: 16416882,\n","\t    sandybrown: 16032864,\n","\t    seagreen: 3050327,\n","\t    seashell: 16774638,\n","\t    sienna: 10506797,\n","\t    silver: 12632256,\n","\t    skyblue: 8900331,\n","\t    slateblue: 6970061,\n","\t    slategray: 7372944,\n","\t    slategrey: 7372944,\n","\t    snow: 16775930,\n","\t    springgreen: 65407,\n","\t    steelblue: 4620980,\n","\t    tan: 13808780,\n","\t    teal: 32896,\n","\t    thistle: 14204888,\n","\t    tomato: 16737095,\n","\t    turquoise: 4251856,\n","\t    violet: 15631086,\n","\t    wheat: 16113331,\n","\t    white: 16777215,\n","\t    whitesmoke: 16119285,\n","\t    yellow: 16776960,\n","\t    yellowgreen: 10145074\n","\t  });\n","\t  d3_rgb_names.forEach(function(key, value) {\n","\t    d3_rgb_names.set(key, d3_rgbNumber(value));\n","\t  });\n","\t  function d3_functor(v) {\n","\t    return typeof v === \"function\" ? v : function() {\n","\t      return v;\n","\t    };\n","\t  }\n","\t  d3.functor = d3_functor;\n","\t  d3.xhr = d3_xhrType(d3_identity);\n","\t  function d3_xhrType(response) {\n","\t    return function(url, mimeType, callback) {\n","\t      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n","\t      mimeType = null;\n","\t      return d3_xhr(url, mimeType, response, callback);\n","\t    };\n","\t  }\n","\t  function d3_xhr(url, mimeType, response, callback) {\n","\t    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n","\t    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n","\t    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n","\t      request.readyState > 3 && respond();\n","\t    };\n","\t    function respond() {\n","\t      var status = request.status, result;\n","\t      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n","\t        try {\n","\t          result = response.call(xhr, request);\n","\t        } catch (e) {\n","\t          dispatch.error.call(xhr, e);\n","\t          return;\n","\t        }\n","\t        dispatch.load.call(xhr, result);\n","\t      } else {\n","\t        dispatch.error.call(xhr, request);\n","\t      }\n","\t    }\n","\t    request.onprogress = function(event) {\n","\t      var o = d3.event;\n","\t      d3.event = event;\n","\t      try {\n","\t        dispatch.progress.call(xhr, request);\n","\t      } finally {\n","\t        d3.event = o;\n","\t      }\n","\t    };\n","\t    xhr.header = function(name, value) {\n","\t      name = (name + \"\").toLowerCase();\n","\t      if (arguments.length < 2) return headers[name];\n","\t      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n","\t      return xhr;\n","\t    };\n","\t    xhr.mimeType = function(value) {\n","\t      if (!arguments.length) return mimeType;\n","\t      mimeType = value == null ? null : value + \"\";\n","\t      return xhr;\n","\t    };\n","\t    xhr.responseType = function(value) {\n","\t      if (!arguments.length) return responseType;\n","\t      responseType = value;\n","\t      return xhr;\n","\t    };\n","\t    xhr.response = function(value) {\n","\t      response = value;\n","\t      return xhr;\n","\t    };\n","\t    [ \"get\", \"post\" ].forEach(function(method) {\n","\t      xhr[method] = function() {\n","\t        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n","\t      };\n","\t    });\n","\t    xhr.send = function(method, data, callback) {\n","\t      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n","\t      request.open(method, url, true);\n","\t      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n","\t      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n","\t      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n","\t      if (responseType != null) request.responseType = responseType;\n","\t      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n","\t        callback(null, request);\n","\t      });\n","\t      dispatch.beforesend.call(xhr, request);\n","\t      request.send(data == null ? null : data);\n","\t      return xhr;\n","\t    };\n","\t    xhr.abort = function() {\n","\t      request.abort();\n","\t      return xhr;\n","\t    };\n","\t    d3.rebind(xhr, dispatch, \"on\");\n","\t    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n","\t  }\n","\t  function d3_xhr_fixCallback(callback) {\n","\t    return callback.length === 1 ? function(error, request) {\n","\t      callback(error == null ? request : null);\n","\t    } : callback;\n","\t  }\n","\t  function d3_xhrHasResponse(request) {\n","\t    var type = request.responseType;\n","\t    return type && type !== \"text\" ? request.response : request.responseText;\n","\t  }\n","\t  d3.dsv = function(delimiter, mimeType) {\n","\t    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n","\t    function dsv(url, row, callback) {\n","\t      if (arguments.length < 3) callback = row, row = null;\n","\t      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n","\t      xhr.row = function(_) {\n","\t        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n","\t      };\n","\t      return xhr;\n","\t    }\n","\t    function response(request) {\n","\t      return dsv.parse(request.responseText);\n","\t    }\n","\t    function typedResponse(f) {\n","\t      return function(request) {\n","\t        return dsv.parse(request.responseText, f);\n","\t      };\n","\t    }\n","\t    dsv.parse = function(text, f) {\n","\t      var o;\n","\t      return dsv.parseRows(text, function(row, i) {\n","\t        if (o) return o(row, i - 1);\n","\t        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n","\t          return JSON.stringify(name) + \": d[\" + i + \"]\";\n","\t        }).join(\",\") + \"}\");\n","\t        o = f ? function(row, i) {\n","\t          return f(a(row), i);\n","\t        } : a;\n","\t      });\n","\t    };\n","\t    dsv.parseRows = function(text, f) {\n","\t      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n","\t      function token() {\n","\t        if (I >= N) return EOF;\n","\t        if (eol) return eol = false, EOL;\n","\t        var j = I;\n","\t        if (text.charCodeAt(j) === 34) {\n","\t          var i = j;\n","\t          while (i++ < N) {\n","\t            if (text.charCodeAt(i) === 34) {\n","\t              if (text.charCodeAt(i + 1) !== 34) break;\n","\t              ++i;\n","\t            }\n","\t          }\n","\t          I = i + 2;\n","\t          var c = text.charCodeAt(i + 1);\n","\t          if (c === 13) {\n","\t            eol = true;\n","\t            if (text.charCodeAt(i + 2) === 10) ++I;\n","\t          } else if (c === 10) {\n","\t            eol = true;\n","\t          }\n","\t          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n","\t        }\n","\t        while (I < N) {\n","\t          var c = text.charCodeAt(I++), k = 1;\n","\t          if (c === 10) eol = true; else if (c === 13) {\n","\t            eol = true;\n","\t            if (text.charCodeAt(I) === 10) ++I, ++k;\n","\t          } else if (c !== delimiterCode) continue;\n","\t          return text.slice(j, I - k);\n","\t        }\n","\t        return text.slice(j);\n","\t      }\n","\t      while ((t = token()) !== EOF) {\n","\t        var a = [];\n","\t        while (t !== EOL && t !== EOF) {\n","\t          a.push(t);\n","\t          t = token();\n","\t        }\n","\t        if (f && (a = f(a, n++)) == null) continue;\n","\t        rows.push(a);\n","\t      }\n","\t      return rows;\n","\t    };\n","\t    dsv.format = function(rows) {\n","\t      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n","\t      var fieldSet = new d3_Set(), fields = [];\n","\t      rows.forEach(function(row) {\n","\t        for (var field in row) {\n","\t          if (!fieldSet.has(field)) {\n","\t            fields.push(fieldSet.add(field));\n","\t          }\n","\t        }\n","\t      });\n","\t      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n","\t        return fields.map(function(field) {\n","\t          return formatValue(row[field]);\n","\t        }).join(delimiter);\n","\t      })).join(\"\\n\");\n","\t    };\n","\t    dsv.formatRows = function(rows) {\n","\t      return rows.map(formatRow).join(\"\\n\");\n","\t    };\n","\t    function formatRow(row) {\n","\t      return row.map(formatValue).join(delimiter);\n","\t    }\n","\t    function formatValue(text) {\n","\t      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n","\t    }\n","\t    return dsv;\n","\t  };\n","\t  d3.csv = d3.dsv(\",\", \"text/csv\");\n","\t  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n","\t  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n","\t    setTimeout(callback, 17);\n","\t  };\n","\t  d3.timer = function() {\n","\t    d3_timer.apply(this, arguments);\n","\t  };\n","\t  function d3_timer(callback, delay, then) {\n","\t    var n = arguments.length;\n","\t    if (n < 2) delay = 0;\n","\t    if (n < 3) then = Date.now();\n","\t    var time = then + delay, timer = {\n","\t      c: callback,\n","\t      t: time,\n","\t      n: null\n","\t    };\n","\t    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n","\t    d3_timer_queueTail = timer;\n","\t    if (!d3_timer_interval) {\n","\t      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n","\t      d3_timer_interval = 1;\n","\t      d3_timer_frame(d3_timer_step);\n","\t    }\n","\t    return timer;\n","\t  }\n","\t  function d3_timer_step() {\n","\t    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n","\t    if (delay > 24) {\n","\t      if (isFinite(delay)) {\n","\t        clearTimeout(d3_timer_timeout);\n","\t        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n","\t      }\n","\t      d3_timer_interval = 0;\n","\t    } else {\n","\t      d3_timer_interval = 1;\n","\t      d3_timer_frame(d3_timer_step);\n","\t    }\n","\t  }\n","\t  d3.timer.flush = function() {\n","\t    d3_timer_mark();\n","\t    d3_timer_sweep();\n","\t  };\n","\t  function d3_timer_mark() {\n","\t    var now = Date.now(), timer = d3_timer_queueHead;\n","\t    while (timer) {\n","\t      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n","\t      timer = timer.n;\n","\t    }\n","\t    return now;\n","\t  }\n","\t  function d3_timer_sweep() {\n","\t    var t0, t1 = d3_timer_queueHead, time = Infinity;\n","\t    while (t1) {\n","\t      if (t1.c) {\n","\t        if (t1.t < time) time = t1.t;\n","\t        t1 = (t0 = t1).n;\n","\t      } else {\n","\t        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n","\t      }\n","\t    }\n","\t    d3_timer_queueTail = t0;\n","\t    return time;\n","\t  }\n","\t  function d3_format_precision(x, p) {\n","\t    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n","\t  }\n","\t  d3.round = function(x, n) {\n","\t    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n","\t  };\n","\t  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n","\t  d3.formatPrefix = function(value, precision) {\n","\t    var i = 0;\n","\t    if (value = +value) {\n","\t      if (value < 0) value *= -1;\n","\t      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n","\t      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n","\t      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n","\t    }\n","\t    return d3_formatPrefixes[8 + i / 3];\n","\t  };\n","\t  function d3_formatPrefix(d, i) {\n","\t    var k = Math.pow(10, abs(8 - i) * 3);\n","\t    return {\n","\t      scale: i > 8 ? function(d) {\n","\t        return d / k;\n","\t      } : function(d) {\n","\t        return d * k;\n","\t      },\n","\t      symbol: d\n","\t    };\n","\t  }\n","\t  function d3_locale_numberFormat(locale) {\n","\t    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n","\t      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n","\t      while (i > 0 && g > 0) {\n","\t        if (length + g + 1 > width) g = Math.max(1, width - length);\n","\t        t.push(value.substring(i -= g, i + g));\n","\t        if ((length += g + 1) > width) break;\n","\t        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n","\t      }\n","\t      return t.reverse().join(locale_thousands);\n","\t    } : d3_identity;\n","\t    return function(specifier) {\n","\t      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n","\t      if (precision) precision = +precision.substring(1);\n","\t      if (zfill || fill === \"0\" && align === \"=\") {\n","\t        zfill = fill = \"0\";\n","\t        align = \"=\";\n","\t      }\n","\t      switch (type) {\n","\t       case \"n\":\n","\t        comma = true;\n","\t        type = \"g\";\n","\t        break;\n","\t\n","\t       case \"%\":\n","\t        scale = 100;\n","\t        suffix = \"%\";\n","\t        type = \"f\";\n","\t        break;\n","\t\n","\t       case \"p\":\n","\t        scale = 100;\n","\t        suffix = \"%\";\n","\t        type = \"r\";\n","\t        break;\n","\t\n","\t       case \"b\":\n","\t       case \"o\":\n","\t       case \"x\":\n","\t       case \"X\":\n","\t        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n","\t\n","\t       case \"c\":\n","\t        exponent = false;\n","\t\n","\t       case \"d\":\n","\t        integer = true;\n","\t        precision = 0;\n","\t        break;\n","\t\n","\t       case \"s\":\n","\t        scale = -1;\n","\t        type = \"r\";\n","\t        break;\n","\t      }\n","\t      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n","\t      if (type == \"r\" && !precision) type = \"g\";\n","\t      if (precision != null) {\n","\t        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n","\t      }\n","\t      type = d3_format_types.get(type) || d3_format_typeDefault;\n","\t      var zcomma = zfill && comma;\n","\t      return function(value) {\n","\t        var fullSuffix = suffix;\n","\t        if (integer && value % 1) return \"\";\n","\t        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n","\t        if (scale < 0) {\n","\t          var unit = d3.formatPrefix(value, precision);\n","\t          value = unit.scale(value);\n","\t          fullSuffix = unit.symbol + suffix;\n","\t        } else {\n","\t          value *= scale;\n","\t        }\n","\t        value = type(value, precision);\n","\t        var i = value.lastIndexOf(\".\"), before, after;\n","\t        if (i < 0) {\n","\t          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n","\t          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n","\t        } else {\n","\t          before = value.substring(0, i);\n","\t          after = locale_decimal + value.substring(i + 1);\n","\t        }\n","\t        if (!zfill && comma) before = formatGroup(before, Infinity);\n","\t        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n","\t        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n","\t        negative += prefix;\n","\t        value = before + after;\n","\t        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n","\t      };\n","\t    };\n","\t  }\n","\t  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n","\t  var d3_format_types = d3.map({\n","\t    b: function(x) {\n","\t      return x.toString(2);\n","\t    },\n","\t    c: function(x) {\n","\t      return String.fromCharCode(x);\n","\t    },\n","\t    o: function(x) {\n","\t      return x.toString(8);\n","\t    },\n","\t    x: function(x) {\n","\t      return x.toString(16);\n","\t    },\n","\t    X: function(x) {\n","\t      return x.toString(16).toUpperCase();\n","\t    },\n","\t    g: function(x, p) {\n","\t      return x.toPrecision(p);\n","\t    },\n","\t    e: function(x, p) {\n","\t      return x.toExponential(p);\n","\t    },\n","\t    f: function(x, p) {\n","\t      return x.toFixed(p);\n","\t    },\n","\t    r: function(x, p) {\n","\t      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n","\t    }\n","\t  });\n","\t  function d3_format_typeDefault(x) {\n","\t    return x + \"\";\n","\t  }\n","\t  var d3_time = d3.time = {}, d3_date = Date;\n","\t  function d3_date_utc() {\n","\t    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n","\t  }\n","\t  d3_date_utc.prototype = {\n","\t    getDate: function() {\n","\t      return this._.getUTCDate();\n","\t    },\n","\t    getDay: function() {\n","\t      return this._.getUTCDay();\n","\t    },\n","\t    getFullYear: function() {\n","\t      return this._.getUTCFullYear();\n","\t    },\n","\t    getHours: function() {\n","\t      return this._.getUTCHours();\n","\t    },\n","\t    getMilliseconds: function() {\n","\t      return this._.getUTCMilliseconds();\n","\t    },\n","\t    getMinutes: function() {\n","\t      return this._.getUTCMinutes();\n","\t    },\n","\t    getMonth: function() {\n","\t      return this._.getUTCMonth();\n","\t    },\n","\t    getSeconds: function() {\n","\t      return this._.getUTCSeconds();\n","\t    },\n","\t    getTime: function() {\n","\t      return this._.getTime();\n","\t    },\n","\t    getTimezoneOffset: function() {\n","\t      return 0;\n","\t    },\n","\t    valueOf: function() {\n","\t      return this._.valueOf();\n","\t    },\n","\t    setDate: function() {\n","\t      d3_time_prototype.setUTCDate.apply(this._, arguments);\n","\t    },\n","\t    setDay: function() {\n","\t      d3_time_prototype.setUTCDay.apply(this._, arguments);\n","\t    },\n","\t    setFullYear: function() {\n","\t      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n","\t    },\n","\t    setHours: function() {\n","\t      d3_time_prototype.setUTCHours.apply(this._, arguments);\n","\t    },\n","\t    setMilliseconds: function() {\n","\t      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n","\t    },\n","\t    setMinutes: function() {\n","\t      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n","\t    },\n","\t    setMonth: function() {\n","\t      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n","\t    },\n","\t    setSeconds: function() {\n","\t      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n","\t    },\n","\t    setTime: function() {\n","\t      d3_time_prototype.setTime.apply(this._, arguments);\n","\t    }\n","\t  };\n","\t  var d3_time_prototype = Date.prototype;\n","\t  function d3_time_interval(local, step, number) {\n","\t    function round(date) {\n","\t      var d0 = local(date), d1 = offset(d0, 1);\n","\t      return date - d0 < d1 - date ? d0 : d1;\n","\t    }\n","\t    function ceil(date) {\n","\t      step(date = local(new d3_date(date - 1)), 1);\n","\t      return date;\n","\t    }\n","\t    function offset(date, k) {\n","\t      step(date = new d3_date(+date), k);\n","\t      return date;\n","\t    }\n","\t    function range(t0, t1, dt) {\n","\t      var time = ceil(t0), times = [];\n","\t      if (dt > 1) {\n","\t        while (time < t1) {\n","\t          if (!(number(time) % dt)) times.push(new Date(+time));\n","\t          step(time, 1);\n","\t        }\n","\t      } else {\n","\t        while (time < t1) times.push(new Date(+time)), step(time, 1);\n","\t      }\n","\t      return times;\n","\t    }\n","\t    function range_utc(t0, t1, dt) {\n","\t      try {\n","\t        d3_date = d3_date_utc;\n","\t        var utc = new d3_date_utc();\n","\t        utc._ = t0;\n","\t        return range(utc, t1, dt);\n","\t      } finally {\n","\t        d3_date = Date;\n","\t      }\n","\t    }\n","\t    local.floor = local;\n","\t    local.round = round;\n","\t    local.ceil = ceil;\n","\t    local.offset = offset;\n","\t    local.range = range;\n","\t    var utc = local.utc = d3_time_interval_utc(local);\n","\t    utc.floor = utc;\n","\t    utc.round = d3_time_interval_utc(round);\n","\t    utc.ceil = d3_time_interval_utc(ceil);\n","\t    utc.offset = d3_time_interval_utc(offset);\n","\t    utc.range = range_utc;\n","\t    return local;\n","\t  }\n","\t  function d3_time_interval_utc(method) {\n","\t    return function(date, k) {\n","\t      try {\n","\t        d3_date = d3_date_utc;\n","\t        var utc = new d3_date_utc();\n","\t        utc._ = date;\n","\t        return method(utc, k)._;\n","\t      } finally {\n","\t        d3_date = Date;\n","\t      }\n","\t    };\n","\t  }\n","\t  d3_time.year = d3_time_interval(function(date) {\n","\t    date = d3_time.day(date);\n","\t    date.setMonth(0, 1);\n","\t    return date;\n","\t  }, function(date, offset) {\n","\t    date.setFullYear(date.getFullYear() + offset);\n","\t  }, function(date) {\n","\t    return date.getFullYear();\n","\t  });\n","\t  d3_time.years = d3_time.year.range;\n","\t  d3_time.years.utc = d3_time.year.utc.range;\n","\t  d3_time.day = d3_time_interval(function(date) {\n","\t    var day = new d3_date(2e3, 0);\n","\t    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n","\t    return day;\n","\t  }, function(date, offset) {\n","\t    date.setDate(date.getDate() + offset);\n","\t  }, function(date) {\n","\t    return date.getDate() - 1;\n","\t  });\n","\t  d3_time.days = d3_time.day.range;\n","\t  d3_time.days.utc = d3_time.day.utc.range;\n","\t  d3_time.dayOfYear = function(date) {\n","\t    var year = d3_time.year(date);\n","\t    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n","\t  };\n","\t  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n","\t    i = 7 - i;\n","\t    var interval = d3_time[day] = d3_time_interval(function(date) {\n","\t      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n","\t      return date;\n","\t    }, function(date, offset) {\n","\t      date.setDate(date.getDate() + Math.floor(offset) * 7);\n","\t    }, function(date) {\n","\t      var day = d3_time.year(date).getDay();\n","\t      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n","\t    });\n","\t    d3_time[day + \"s\"] = interval.range;\n","\t    d3_time[day + \"s\"].utc = interval.utc.range;\n","\t    d3_time[day + \"OfYear\"] = function(date) {\n","\t      var day = d3_time.year(date).getDay();\n","\t      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n","\t    };\n","\t  });\n","\t  d3_time.week = d3_time.sunday;\n","\t  d3_time.weeks = d3_time.sunday.range;\n","\t  d3_time.weeks.utc = d3_time.sunday.utc.range;\n","\t  d3_time.weekOfYear = d3_time.sundayOfYear;\n","\t  function d3_locale_timeFormat(locale) {\n","\t    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n","\t    function d3_time_format(template) {\n","\t      var n = template.length;\n","\t      function format(date) {\n","\t        var string = [], i = -1, j = 0, c, p, f;\n","\t        while (++i < n) {\n","\t          if (template.charCodeAt(i) === 37) {\n","\t            string.push(template.slice(j, i));\n","\t            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n","\t            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n","\t            string.push(c);\n","\t            j = i + 1;\n","\t          }\n","\t        }\n","\t        string.push(template.slice(j, i));\n","\t        return string.join(\"\");\n","\t      }\n","\t      format.parse = function(string) {\n","\t        var d = {\n","\t          y: 1900,\n","\t          m: 0,\n","\t          d: 1,\n","\t          H: 0,\n","\t          M: 0,\n","\t          S: 0,\n","\t          L: 0,\n","\t          Z: null\n","\t        }, i = d3_time_parse(d, template, string, 0);\n","\t        if (i != string.length) return null;\n","\t        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n","\t        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n","\t        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n","\t          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n","\t          date.setFullYear(d.y, 0, 1);\n","\t          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n","\t        } else date.setFullYear(d.y, d.m, d.d);\n","\t        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n","\t        return localZ ? date._ : date;\n","\t      };\n","\t      format.toString = function() {\n","\t        return template;\n","\t      };\n","\t      return format;\n","\t    }\n","\t    function d3_time_parse(date, template, string, j) {\n","\t      var c, p, t, i = 0, n = template.length, m = string.length;\n","\t      while (i < n) {\n","\t        if (j >= m) return -1;\n","\t        c = template.charCodeAt(i++);\n","\t        if (c === 37) {\n","\t          t = template.charAt(i++);\n","\t          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n","\t          if (!p || (j = p(date, string, j)) < 0) return -1;\n","\t        } else if (c != string.charCodeAt(j++)) {\n","\t          return -1;\n","\t        }\n","\t      }\n","\t      return j;\n","\t    }\n","\t    d3_time_format.utc = function(template) {\n","\t      var local = d3_time_format(template);\n","\t      function format(date) {\n","\t        try {\n","\t          d3_date = d3_date_utc;\n","\t          var utc = new d3_date();\n","\t          utc._ = date;\n","\t          return local(utc);\n","\t        } finally {\n","\t          d3_date = Date;\n","\t        }\n","\t      }\n","\t      format.parse = function(string) {\n","\t        try {\n","\t          d3_date = d3_date_utc;\n","\t          var date = local.parse(string);\n","\t          return date && date._;\n","\t        } finally {\n","\t          d3_date = Date;\n","\t        }\n","\t      };\n","\t      format.toString = local.toString;\n","\t      return format;\n","\t    };\n","\t    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n","\t    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n","\t    locale_periods.forEach(function(p, i) {\n","\t      d3_time_periodLookup.set(p.toLowerCase(), i);\n","\t    });\n","\t    var d3_time_formats = {\n","\t      a: function(d) {\n","\t        return locale_shortDays[d.getDay()];\n","\t      },\n","\t      A: function(d) {\n","\t        return locale_days[d.getDay()];\n","\t      },\n","\t      b: function(d) {\n","\t        return locale_shortMonths[d.getMonth()];\n","\t      },\n","\t      B: function(d) {\n","\t        return locale_months[d.getMonth()];\n","\t      },\n","\t      c: d3_time_format(locale_dateTime),\n","\t      d: function(d, p) {\n","\t        return d3_time_formatPad(d.getDate(), p, 2);\n","\t      },\n","\t      e: function(d, p) {\n","\t        return d3_time_formatPad(d.getDate(), p, 2);\n","\t      },\n","\t      H: function(d, p) {\n","\t        return d3_time_formatPad(d.getHours(), p, 2);\n","\t      },\n","\t      I: function(d, p) {\n","\t        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n","\t      },\n","\t      j: function(d, p) {\n","\t        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n","\t      },\n","\t      L: function(d, p) {\n","\t        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n","\t      },\n","\t      m: function(d, p) {\n","\t        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n","\t      },\n","\t      M: function(d, p) {\n","\t        return d3_time_formatPad(d.getMinutes(), p, 2);\n","\t      },\n","\t      p: function(d) {\n","\t        return locale_periods[+(d.getHours() >= 12)];\n","\t      },\n","\t      S: function(d, p) {\n","\t        return d3_time_formatPad(d.getSeconds(), p, 2);\n","\t      },\n","\t      U: function(d, p) {\n","\t        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n","\t      },\n","\t      w: function(d) {\n","\t        return d.getDay();\n","\t      },\n","\t      W: function(d, p) {\n","\t        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n","\t      },\n","\t      x: d3_time_format(locale_date),\n","\t      X: d3_time_format(locale_time),\n","\t      y: function(d, p) {\n","\t        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n","\t      },\n","\t      Y: function(d, p) {\n","\t        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n","\t      },\n","\t      Z: d3_time_zone,\n","\t      \"%\": function() {\n","\t        return \"%\";\n","\t      }\n","\t    };\n","\t    var d3_time_parsers = {\n","\t      a: d3_time_parseWeekdayAbbrev,\n","\t      A: d3_time_parseWeekday,\n","\t      b: d3_time_parseMonthAbbrev,\n","\t      B: d3_time_parseMonth,\n","\t      c: d3_time_parseLocaleFull,\n","\t      d: d3_time_parseDay,\n","\t      e: d3_time_parseDay,\n","\t      H: d3_time_parseHour24,\n","\t      I: d3_time_parseHour24,\n","\t      j: d3_time_parseDayOfYear,\n","\t      L: d3_time_parseMilliseconds,\n","\t      m: d3_time_parseMonthNumber,\n","\t      M: d3_time_parseMinutes,\n","\t      p: d3_time_parseAmPm,\n","\t      S: d3_time_parseSeconds,\n","\t      U: d3_time_parseWeekNumberSunday,\n","\t      w: d3_time_parseWeekdayNumber,\n","\t      W: d3_time_parseWeekNumberMonday,\n","\t      x: d3_time_parseLocaleDate,\n","\t      X: d3_time_parseLocaleTime,\n","\t      y: d3_time_parseYear,\n","\t      Y: d3_time_parseFullYear,\n","\t      Z: d3_time_parseZone,\n","\t      \"%\": d3_time_parseLiteralPercent\n","\t    };\n","\t    function d3_time_parseWeekdayAbbrev(date, string, i) {\n","\t      d3_time_dayAbbrevRe.lastIndex = 0;\n","\t      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n","\t      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n","\t    }\n","\t    function d3_time_parseWeekday(date, string, i) {\n","\t      d3_time_dayRe.lastIndex = 0;\n","\t      var n = d3_time_dayRe.exec(string.slice(i));\n","\t      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n","\t    }\n","\t    function d3_time_parseMonthAbbrev(date, string, i) {\n","\t      d3_time_monthAbbrevRe.lastIndex = 0;\n","\t      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n","\t      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n","\t    }\n","\t    function d3_time_parseMonth(date, string, i) {\n","\t      d3_time_monthRe.lastIndex = 0;\n","\t      var n = d3_time_monthRe.exec(string.slice(i));\n","\t      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n","\t    }\n","\t    function d3_time_parseLocaleFull(date, string, i) {\n","\t      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n","\t    }\n","\t    function d3_time_parseLocaleDate(date, string, i) {\n","\t      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n","\t    }\n","\t    function d3_time_parseLocaleTime(date, string, i) {\n","\t      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n","\t    }\n","\t    function d3_time_parseAmPm(date, string, i) {\n","\t      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n","\t      return n == null ? -1 : (date.p = n, i);\n","\t    }\n","\t    return d3_time_format;\n","\t  }\n","\t  var d3_time_formatPads = {\n","\t    \"-\": \"\",\n","\t    _: \" \",\n","\t    \"0\": \"0\"\n","\t  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n","\t  function d3_time_formatPad(value, fill, width) {\n","\t    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n","\t    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n","\t  }\n","\t  function d3_time_formatRe(names) {\n","\t    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n","\t  }\n","\t  function d3_time_formatLookup(names) {\n","\t    var map = new d3_Map(), i = -1, n = names.length;\n","\t    while (++i < n) map.set(names[i].toLowerCase(), i);\n","\t    return map;\n","\t  }\n","\t  function d3_time_parseWeekdayNumber(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n","\t    return n ? (date.w = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseWeekNumberSunday(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i));\n","\t    return n ? (date.U = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseWeekNumberMonday(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i));\n","\t    return n ? (date.W = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseFullYear(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n","\t    return n ? (date.y = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseYear(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseZone(date, string, i) {\n","\t    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n","\t    i + 5) : -1;\n","\t  }\n","\t  function d3_time_expandYear(d) {\n","\t    return d + (d > 68 ? 1900 : 2e3);\n","\t  }\n","\t  function d3_time_parseMonthNumber(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseDay(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.d = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseDayOfYear(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n","\t    return n ? (date.j = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseHour24(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.H = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseMinutes(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.M = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseSeconds(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n","\t    return n ? (date.S = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_parseMilliseconds(date, string, i) {\n","\t    d3_time_numberRe.lastIndex = 0;\n","\t    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n","\t    return n ? (date.L = +n[0], i + n[0].length) : -1;\n","\t  }\n","\t  function d3_time_zone(d) {\n","\t    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n","\t    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n","\t  }\n","\t  function d3_time_parseLiteralPercent(date, string, i) {\n","\t    d3_time_percentRe.lastIndex = 0;\n","\t    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n","\t    return n ? i + n[0].length : -1;\n","\t  }\n","\t  function d3_time_formatMulti(formats) {\n","\t    var n = formats.length, i = -1;\n","\t    while (++i < n) formats[i][0] = this(formats[i][0]);\n","\t    return function(date) {\n","\t      var i = 0, f = formats[i];\n","\t      while (!f[1](date)) f = formats[++i];\n","\t      return f[0](date);\n","\t    };\n","\t  }\n","\t  d3.locale = function(locale) {\n","\t    return {\n","\t      numberFormat: d3_locale_numberFormat(locale),\n","\t      timeFormat: d3_locale_timeFormat(locale)\n","\t    };\n","\t  };\n","\t  var d3_locale_enUS = d3.locale({\n","\t    decimal: \".\",\n","\t    thousands: \",\",\n","\t    grouping: [ 3 ],\n","\t    currency: [ \"$\", \"\" ],\n","\t    dateTime: \"%a %b %e %X %Y\",\n","\t    date: \"%m/%d/%Y\",\n","\t    time: \"%H:%M:%S\",\n","\t    periods: [ \"AM\", \"PM\" ],\n","\t    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n","\t    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n","\t    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n","\t    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n","\t  });\n","\t  d3.format = d3_locale_enUS.numberFormat;\n","\t  d3.geo = {};\n","\t  function d3_adder() {}\n","\t  d3_adder.prototype = {\n","\t    s: 0,\n","\t    t: 0,\n","\t    add: function(y) {\n","\t      d3_adderSum(y, this.t, d3_adderTemp);\n","\t      d3_adderSum(d3_adderTemp.s, this.s, this);\n","\t      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n","\t    },\n","\t    reset: function() {\n","\t      this.s = this.t = 0;\n","\t    },\n","\t    valueOf: function() {\n","\t      return this.s;\n","\t    }\n","\t  };\n","\t  var d3_adderTemp = new d3_adder();\n","\t  function d3_adderSum(a, b, o) {\n","\t    var x = o.s = a + b, bv = x - a, av = x - bv;\n","\t    o.t = a - av + (b - bv);\n","\t  }\n","\t  d3.geo.stream = function(object, listener) {\n","\t    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n","\t      d3_geo_streamObjectType[object.type](object, listener);\n","\t    } else {\n","\t      d3_geo_streamGeometry(object, listener);\n","\t    }\n","\t  };\n","\t  function d3_geo_streamGeometry(geometry, listener) {\n","\t    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n","\t      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n","\t    }\n","\t  }\n","\t  var d3_geo_streamObjectType = {\n","\t    Feature: function(feature, listener) {\n","\t      d3_geo_streamGeometry(feature.geometry, listener);\n","\t    },\n","\t    FeatureCollection: function(object, listener) {\n","\t      var features = object.features, i = -1, n = features.length;\n","\t      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n","\t    }\n","\t  };\n","\t  var d3_geo_streamGeometryType = {\n","\t    Sphere: function(object, listener) {\n","\t      listener.sphere();\n","\t    },\n","\t    Point: function(object, listener) {\n","\t      object = object.coordinates;\n","\t      listener.point(object[0], object[1], object[2]);\n","\t    },\n","\t    MultiPoint: function(object, listener) {\n","\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n","\t      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n","\t    },\n","\t    LineString: function(object, listener) {\n","\t      d3_geo_streamLine(object.coordinates, listener, 0);\n","\t    },\n","\t    MultiLineString: function(object, listener) {\n","\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n","\t      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n","\t    },\n","\t    Polygon: function(object, listener) {\n","\t      d3_geo_streamPolygon(object.coordinates, listener);\n","\t    },\n","\t    MultiPolygon: function(object, listener) {\n","\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n","\t      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n","\t    },\n","\t    GeometryCollection: function(object, listener) {\n","\t      var geometries = object.geometries, i = -1, n = geometries.length;\n","\t      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n","\t    }\n","\t  };\n","\t  function d3_geo_streamLine(coordinates, listener, closed) {\n","\t    var i = -1, n = coordinates.length - closed, coordinate;\n","\t    listener.lineStart();\n","\t    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n","\t    listener.lineEnd();\n","\t  }\n","\t  function d3_geo_streamPolygon(coordinates, listener) {\n","\t    var i = -1, n = coordinates.length;\n","\t    listener.polygonStart();\n","\t    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n","\t    listener.polygonEnd();\n","\t  }\n","\t  d3.geo.area = function(object) {\n","\t    d3_geo_areaSum = 0;\n","\t    d3.geo.stream(object, d3_geo_area);\n","\t    return d3_geo_areaSum;\n","\t  };\n","\t  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n","\t  var d3_geo_area = {\n","\t    sphere: function() {\n","\t      d3_geo_areaSum += 4 * π;\n","\t    },\n","\t    point: d3_noop,\n","\t    lineStart: d3_noop,\n","\t    lineEnd: d3_noop,\n","\t    polygonStart: function() {\n","\t      d3_geo_areaRingSum.reset();\n","\t      d3_geo_area.lineStart = d3_geo_areaRingStart;\n","\t    },\n","\t    polygonEnd: function() {\n","\t      var area = 2 * d3_geo_areaRingSum;\n","\t      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n","\t      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n","\t    }\n","\t  };\n","\t  function d3_geo_areaRingStart() {\n","\t    var λ00, φ00, λ0, cosφ0, sinφ0;\n","\t    d3_geo_area.point = function(λ, φ) {\n","\t      d3_geo_area.point = nextPoint;\n","\t      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n","\t      sinφ0 = Math.sin(φ);\n","\t    };\n","\t    function nextPoint(λ, φ) {\n","\t      λ *= d3_radians;\n","\t      φ = φ * d3_radians / 2 + π / 4;\n","\t      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n","\t      d3_geo_areaRingSum.add(Math.atan2(v, u));\n","\t      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n","\t    }\n","\t    d3_geo_area.lineEnd = function() {\n","\t      nextPoint(λ00, φ00);\n","\t    };\n","\t  }\n","\t  function d3_geo_cartesian(spherical) {\n","\t    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n","\t    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n","\t  }\n","\t  function d3_geo_cartesianDot(a, b) {\n","\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n","\t  }\n","\t  function d3_geo_cartesianCross(a, b) {\n","\t    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n","\t  }\n","\t  function d3_geo_cartesianAdd(a, b) {\n","\t    a[0] += b[0];\n","\t    a[1] += b[1];\n","\t    a[2] += b[2];\n","\t  }\n","\t  function d3_geo_cartesianScale(vector, k) {\n","\t    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n","\t  }\n","\t  function d3_geo_cartesianNormalize(d) {\n","\t    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n","\t    d[0] /= l;\n","\t    d[1] /= l;\n","\t    d[2] /= l;\n","\t  }\n","\t  function d3_geo_spherical(cartesian) {\n","\t    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n","\t  }\n","\t  function d3_geo_sphericalEqual(a, b) {\n","\t    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n","\t  }\n","\t  d3.geo.bounds = function() {\n","\t    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n","\t    var bound = {\n","\t      point: point,\n","\t      lineStart: lineStart,\n","\t      lineEnd: lineEnd,\n","\t      polygonStart: function() {\n","\t        bound.point = ringPoint;\n","\t        bound.lineStart = ringStart;\n","\t        bound.lineEnd = ringEnd;\n","\t        dλSum = 0;\n","\t        d3_geo_area.polygonStart();\n","\t      },\n","\t      polygonEnd: function() {\n","\t        d3_geo_area.polygonEnd();\n","\t        bound.point = point;\n","\t        bound.lineStart = lineStart;\n","\t        bound.lineEnd = lineEnd;\n","\t        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n","\t        range[0] = λ0, range[1] = λ1;\n","\t      }\n","\t    };\n","\t    function point(λ, φ) {\n","\t      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n","\t      if (φ < φ0) φ0 = φ;\n","\t      if (φ > φ1) φ1 = φ;\n","\t    }\n","\t    function linePoint(λ, φ) {\n","\t      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n","\t      if (p0) {\n","\t        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n","\t        d3_geo_cartesianNormalize(inflection);\n","\t        inflection = d3_geo_spherical(inflection);\n","\t        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n","\t        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n","\t          var φi = inflection[1] * d3_degrees;\n","\t          if (φi > φ1) φ1 = φi;\n","\t        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n","\t          var φi = -inflection[1] * d3_degrees;\n","\t          if (φi < φ0) φ0 = φi;\n","\t        } else {\n","\t          if (φ < φ0) φ0 = φ;\n","\t          if (φ > φ1) φ1 = φ;\n","\t        }\n","\t        if (antimeridian) {\n","\t          if (λ < λ_) {\n","\t            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n","\t          } else {\n","\t            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n","\t          }\n","\t        } else {\n","\t          if (λ1 >= λ0) {\n","\t            if (λ < λ0) λ0 = λ;\n","\t            if (λ > λ1) λ1 = λ;\n","\t          } else {\n","\t            if (λ > λ_) {\n","\t              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n","\t            } else {\n","\t              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n","\t            }\n","\t          }\n","\t        }\n","\t      } else {\n","\t        point(λ, φ);\n","\t      }\n","\t      p0 = p, λ_ = λ;\n","\t    }\n","\t    function lineStart() {\n","\t      bound.point = linePoint;\n","\t    }\n","\t    function lineEnd() {\n","\t      range[0] = λ0, range[1] = λ1;\n","\t      bound.point = point;\n","\t      p0 = null;\n","\t    }\n","\t    function ringPoint(λ, φ) {\n","\t      if (p0) {\n","\t        var dλ = λ - λ_;\n","\t        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n","\t      } else λ__ = λ, φ__ = φ;\n","\t      d3_geo_area.point(λ, φ);\n","\t      linePoint(λ, φ);\n","\t    }\n","\t    function ringStart() {\n","\t      d3_geo_area.lineStart();\n","\t    }\n","\t    function ringEnd() {\n","\t      ringPoint(λ__, φ__);\n","\t      d3_geo_area.lineEnd();\n","\t      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n","\t      range[0] = λ0, range[1] = λ1;\n","\t      p0 = null;\n","\t    }\n","\t    function angle(λ0, λ1) {\n","\t      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n","\t    }\n","\t    function compareRanges(a, b) {\n","\t      return a[0] - b[0];\n","\t    }\n","\t    function withinRange(x, range) {\n","\t      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n","\t    }\n","\t    return function(feature) {\n","\t      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n","\t      ranges = [];\n","\t      d3.geo.stream(feature, bound);\n","\t      var n = ranges.length;\n","\t      if (n) {\n","\t        ranges.sort(compareRanges);\n","\t        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n","\t          b = ranges[i];\n","\t          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n","\t            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n","\t            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n","\t          } else {\n","\t            merged.push(a = b);\n","\t          }\n","\t        }\n","\t        var best = -Infinity, dλ;\n","\t        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n","\t          b = merged[i];\n","\t          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n","\t        }\n","\t      }\n","\t      ranges = range = null;\n","\t      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n","\t    };\n","\t  }();\n","\t  d3.geo.centroid = function(object) {\n","\t    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n","\t    d3.geo.stream(object, d3_geo_centroid);\n","\t    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n","\t    if (m < ε2) {\n","\t      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n","\t      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n","\t      m = x * x + y * y + z * z;\n","\t      if (m < ε2) return [ NaN, NaN ];\n","\t    }\n","\t    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n","\t  };\n","\t  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n","\t  var d3_geo_centroid = {\n","\t    sphere: d3_noop,\n","\t    point: d3_geo_centroidPoint,\n","\t    lineStart: d3_geo_centroidLineStart,\n","\t    lineEnd: d3_geo_centroidLineEnd,\n","\t    polygonStart: function() {\n","\t      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n","\t    },\n","\t    polygonEnd: function() {\n","\t      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n","\t    }\n","\t  };\n","\t  function d3_geo_centroidPoint(λ, φ) {\n","\t    λ *= d3_radians;\n","\t    var cosφ = Math.cos(φ *= d3_radians);\n","\t    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n","\t  }\n","\t  function d3_geo_centroidPointXYZ(x, y, z) {\n","\t    ++d3_geo_centroidW0;\n","\t    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n","\t    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n","\t    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n","\t  }\n","\t  function d3_geo_centroidLineStart() {\n","\t    var x0, y0, z0;\n","\t    d3_geo_centroid.point = function(λ, φ) {\n","\t      λ *= d3_radians;\n","\t      var cosφ = Math.cos(φ *= d3_radians);\n","\t      x0 = cosφ * Math.cos(λ);\n","\t      y0 = cosφ * Math.sin(λ);\n","\t      z0 = Math.sin(φ);\n","\t      d3_geo_centroid.point = nextPoint;\n","\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n","\t    };\n","\t    function nextPoint(λ, φ) {\n","\t      λ *= d3_radians;\n","\t      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n","\t      d3_geo_centroidW1 += w;\n","\t      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n","\t      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n","\t      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n","\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n","\t    }\n","\t  }\n","\t  function d3_geo_centroidLineEnd() {\n","\t    d3_geo_centroid.point = d3_geo_centroidPoint;\n","\t  }\n","\t  function d3_geo_centroidRingStart() {\n","\t    var λ00, φ00, x0, y0, z0;\n","\t    d3_geo_centroid.point = function(λ, φ) {\n","\t      λ00 = λ, φ00 = φ;\n","\t      d3_geo_centroid.point = nextPoint;\n","\t      λ *= d3_radians;\n","\t      var cosφ = Math.cos(φ *= d3_radians);\n","\t      x0 = cosφ * Math.cos(λ);\n","\t      y0 = cosφ * Math.sin(λ);\n","\t      z0 = Math.sin(φ);\n","\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n","\t    };\n","\t    d3_geo_centroid.lineEnd = function() {\n","\t      nextPoint(λ00, φ00);\n","\t      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n","\t      d3_geo_centroid.point = d3_geo_centroidPoint;\n","\t    };\n","\t    function nextPoint(λ, φ) {\n","\t      λ *= d3_radians;\n","\t      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n","\t      d3_geo_centroidX2 += v * cx;\n","\t      d3_geo_centroidY2 += v * cy;\n","\t      d3_geo_centroidZ2 += v * cz;\n","\t      d3_geo_centroidW1 += w;\n","\t      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n","\t      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n","\t      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n","\t      d3_geo_centroidPointXYZ(x0, y0, z0);\n","\t    }\n","\t  }\n","\t  function d3_geo_compose(a, b) {\n","\t    function compose(x, y) {\n","\t      return x = a(x, y), b(x[0], x[1]);\n","\t    }\n","\t    if (a.invert && b.invert) compose.invert = function(x, y) {\n","\t      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n","\t    };\n","\t    return compose;\n","\t  }\n","\t  function d3_true() {\n","\t    return true;\n","\t  }\n","\t  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n","\t    var subject = [], clip = [];\n","\t    segments.forEach(function(segment) {\n","\t      if ((n = segment.length - 1) <= 0) return;\n","\t      var n, p0 = segment[0], p1 = segment[n];\n","\t      if (d3_geo_sphericalEqual(p0, p1)) {\n","\t        listener.lineStart();\n","\t        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n","\t        listener.lineEnd();\n","\t        return;\n","\t      }\n","\t      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n","\t      a.o = b;\n","\t      subject.push(a);\n","\t      clip.push(b);\n","\t      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n","\t      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n","\t      a.o = b;\n","\t      subject.push(a);\n","\t      clip.push(b);\n","\t    });\n","\t    clip.sort(compare);\n","\t    d3_geo_clipPolygonLinkCircular(subject);\n","\t    d3_geo_clipPolygonLinkCircular(clip);\n","\t    if (!subject.length) return;\n","\t    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n","\t      clip[i].e = entry = !entry;\n","\t    }\n","\t    var start = subject[0], points, point;\n","\t    while (1) {\n","\t      var current = start, isSubject = true;\n","\t      while (current.v) if ((current = current.n) === start) return;\n","\t      points = current.z;\n","\t      listener.lineStart();\n","\t      do {\n","\t        current.v = current.o.v = true;\n","\t        if (current.e) {\n","\t          if (isSubject) {\n","\t            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n","\t          } else {\n","\t            interpolate(current.x, current.n.x, 1, listener);\n","\t          }\n","\t          current = current.n;\n","\t        } else {\n","\t          if (isSubject) {\n","\t            points = current.p.z;\n","\t            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n","\t          } else {\n","\t            interpolate(current.x, current.p.x, -1, listener);\n","\t          }\n","\t          current = current.p;\n","\t        }\n","\t        current = current.o;\n","\t        points = current.z;\n","\t        isSubject = !isSubject;\n","\t      } while (!current.v);\n","\t      listener.lineEnd();\n","\t    }\n","\t  }\n","\t  function d3_geo_clipPolygonLinkCircular(array) {\n","\t    if (!(n = array.length)) return;\n","\t    var n, i = 0, a = array[0], b;\n","\t    while (++i < n) {\n","\t      a.n = b = array[i];\n","\t      b.p = a;\n","\t      a = b;\n","\t    }\n","\t    a.n = b = array[0];\n","\t    b.p = a;\n","\t  }\n","\t  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n","\t    this.x = point;\n","\t    this.z = points;\n","\t    this.o = other;\n","\t    this.e = entry;\n","\t    this.v = false;\n","\t    this.n = this.p = null;\n","\t  }\n","\t  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n","\t    return function(rotate, listener) {\n","\t      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n","\t      var clip = {\n","\t        point: point,\n","\t        lineStart: lineStart,\n","\t        lineEnd: lineEnd,\n","\t        polygonStart: function() {\n","\t          clip.point = pointRing;\n","\t          clip.lineStart = ringStart;\n","\t          clip.lineEnd = ringEnd;\n","\t          segments = [];\n","\t          polygon = [];\n","\t        },\n","\t        polygonEnd: function() {\n","\t          clip.point = point;\n","\t          clip.lineStart = lineStart;\n","\t          clip.lineEnd = lineEnd;\n","\t          segments = d3.merge(segments);\n","\t          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n","\t          if (segments.length) {\n","\t            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n","\t            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n","\t          } else if (clipStartInside) {\n","\t            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n","\t            listener.lineStart();\n","\t            interpolate(null, null, 1, listener);\n","\t            listener.lineEnd();\n","\t          }\n","\t          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n","\t          segments = polygon = null;\n","\t        },\n","\t        sphere: function() {\n","\t          listener.polygonStart();\n","\t          listener.lineStart();\n","\t          interpolate(null, null, 1, listener);\n","\t          listener.lineEnd();\n","\t          listener.polygonEnd();\n","\t        }\n","\t      };\n","\t      function point(λ, φ) {\n","\t        var point = rotate(λ, φ);\n","\t        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n","\t      }\n","\t      function pointLine(λ, φ) {\n","\t        var point = rotate(λ, φ);\n","\t        line.point(point[0], point[1]);\n","\t      }\n","\t      function lineStart() {\n","\t        clip.point = pointLine;\n","\t        line.lineStart();\n","\t      }\n","\t      function lineEnd() {\n","\t        clip.point = point;\n","\t        line.lineEnd();\n","\t      }\n","\t      var segments;\n","\t      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n","\t      function pointRing(λ, φ) {\n","\t        ring.push([ λ, φ ]);\n","\t        var point = rotate(λ, φ);\n","\t        ringListener.point(point[0], point[1]);\n","\t      }\n","\t      function ringStart() {\n","\t        ringListener.lineStart();\n","\t        ring = [];\n","\t      }\n","\t      function ringEnd() {\n","\t        pointRing(ring[0][0], ring[0][1]);\n","\t        ringListener.lineEnd();\n","\t        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n","\t        ring.pop();\n","\t        polygon.push(ring);\n","\t        ring = null;\n","\t        if (!n) return;\n","\t        if (clean & 1) {\n","\t          segment = ringSegments[0];\n","\t          var n = segment.length - 1, i = -1, point;\n","\t          if (n > 0) {\n","\t            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n","\t            listener.lineStart();\n","\t            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n","\t            listener.lineEnd();\n","\t          }\n","\t          return;\n","\t        }\n","\t        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n","\t        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n","\t      }\n","\t      return clip;\n","\t    };\n","\t  }\n","\t  function d3_geo_clipSegmentLength1(segment) {\n","\t    return segment.length > 1;\n","\t  }\n","\t  function d3_geo_clipBufferListener() {\n","\t    var lines = [], line;\n","\t    return {\n","\t      lineStart: function() {\n","\t        lines.push(line = []);\n","\t      },\n","\t      point: function(λ, φ) {\n","\t        line.push([ λ, φ ]);\n","\t      },\n","\t      lineEnd: d3_noop,\n","\t      buffer: function() {\n","\t        var buffer = lines;\n","\t        lines = [];\n","\t        line = null;\n","\t        return buffer;\n","\t      },\n","\t      rejoin: function() {\n","\t        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n","\t      }\n","\t    };\n","\t  }\n","\t  function d3_geo_clipSort(a, b) {\n","\t    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n","\t  }\n","\t  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n","\t  function d3_geo_clipAntimeridianLine(listener) {\n","\t    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n","\t    return {\n","\t      lineStart: function() {\n","\t        listener.lineStart();\n","\t        clean = 1;\n","\t      },\n","\t      point: function(λ1, φ1) {\n","\t        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n","\t        if (abs(dλ - π) < ε) {\n","\t          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n","\t          listener.point(sλ0, φ0);\n","\t          listener.lineEnd();\n","\t          listener.lineStart();\n","\t          listener.point(sλ1, φ0);\n","\t          listener.point(λ1, φ0);\n","\t          clean = 0;\n","\t        } else if (sλ0 !== sλ1 && dλ >= π) {\n","\t          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n","\t          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n","\t          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n","\t          listener.point(sλ0, φ0);\n","\t          listener.lineEnd();\n","\t          listener.lineStart();\n","\t          listener.point(sλ1, φ0);\n","\t          clean = 0;\n","\t        }\n","\t        listener.point(λ0 = λ1, φ0 = φ1);\n","\t        sλ0 = sλ1;\n","\t      },\n","\t      lineEnd: function() {\n","\t        listener.lineEnd();\n","\t        λ0 = φ0 = NaN;\n","\t      },\n","\t      clean: function() {\n","\t        return 2 - clean;\n","\t      }\n","\t    };\n","\t  }\n","\t  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n","\t    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n","\t    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n","\t  }\n","\t  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n","\t    var φ;\n","\t    if (from == null) {\n","\t      φ = direction * halfπ;\n","\t      listener.point(-π, φ);\n","\t      listener.point(0, φ);\n","\t      listener.point(π, φ);\n","\t      listener.point(π, 0);\n","\t      listener.point(π, -φ);\n","\t      listener.point(0, -φ);\n","\t      listener.point(-π, -φ);\n","\t      listener.point(-π, 0);\n","\t      listener.point(-π, φ);\n","\t    } else if (abs(from[0] - to[0]) > ε) {\n","\t      var s = from[0] < to[0] ? π : -π;\n","\t      φ = direction * s / 2;\n","\t      listener.point(-s, φ);\n","\t      listener.point(0, φ);\n","\t      listener.point(s, φ);\n","\t    } else {\n","\t      listener.point(to[0], to[1]);\n","\t    }\n","\t  }\n","\t  function d3_geo_pointInPolygon(point, polygon) {\n","\t    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n","\t    d3_geo_areaRingSum.reset();\n","\t    for (var i = 0, n = polygon.length; i < n; ++i) {\n","\t      var ring = polygon[i], m = ring.length;\n","\t      if (!m) continue;\n","\t      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n","\t      while (true) {\n","\t        if (j === m) j = 0;\n","\t        point = ring[j];\n","\t        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n","\t        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n","\t        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n","\t        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n","\t          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n","\t          d3_geo_cartesianNormalize(arc);\n","\t          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n","\t          d3_geo_cartesianNormalize(intersection);\n","\t          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n","\t          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n","\t            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n","\t          }\n","\t        }\n","\t        if (!j++) break;\n","\t        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n","\t      }\n","\t    }\n","\t    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n","\t  }\n","\t  function d3_geo_clipCircle(radius) {\n","\t    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n","\t    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n","\t    function visible(λ, φ) {\n","\t      return Math.cos(λ) * Math.cos(φ) > cr;\n","\t    }\n","\t    function clipLine(listener) {\n","\t      var point0, c0, v0, v00, clean;\n","\t      return {\n","\t        lineStart: function() {\n","\t          v00 = v0 = false;\n","\t          clean = 1;\n","\t        },\n","\t        point: function(λ, φ) {\n","\t          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n","\t          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n","\t          if (v !== v0) {\n","\t            point2 = intersect(point0, point1);\n","\t            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n","\t              point1[0] += ε;\n","\t              point1[1] += ε;\n","\t              v = visible(point1[0], point1[1]);\n","\t            }\n","\t          }\n","\t          if (v !== v0) {\n","\t            clean = 0;\n","\t            if (v) {\n","\t              listener.lineStart();\n","\t              point2 = intersect(point1, point0);\n","\t              listener.point(point2[0], point2[1]);\n","\t            } else {\n","\t              point2 = intersect(point0, point1);\n","\t              listener.point(point2[0], point2[1]);\n","\t              listener.lineEnd();\n","\t            }\n","\t            point0 = point2;\n","\t          } else if (notHemisphere && point0 && smallRadius ^ v) {\n","\t            var t;\n","\t            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n","\t              clean = 0;\n","\t              if (smallRadius) {\n","\t                listener.lineStart();\n","\t                listener.point(t[0][0], t[0][1]);\n","\t                listener.point(t[1][0], t[1][1]);\n","\t                listener.lineEnd();\n","\t              } else {\n","\t                listener.point(t[1][0], t[1][1]);\n","\t                listener.lineEnd();\n","\t                listener.lineStart();\n","\t                listener.point(t[0][0], t[0][1]);\n","\t              }\n","\t            }\n","\t          }\n","\t          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n","\t            listener.point(point1[0], point1[1]);\n","\t          }\n","\t          point0 = point1, v0 = v, c0 = c;\n","\t        },\n","\t        lineEnd: function() {\n","\t          if (v0) listener.lineEnd();\n","\t          point0 = null;\n","\t        },\n","\t        clean: function() {\n","\t          return clean | (v00 && v0) << 1;\n","\t        }\n","\t      };\n","\t    }\n","\t    function intersect(a, b, two) {\n","\t      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n","\t      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n","\t      if (!determinant) return !two && a;\n","\t      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n","\t      d3_geo_cartesianAdd(A, B);\n","\t      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n","\t      if (t2 < 0) return;\n","\t      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n","\t      d3_geo_cartesianAdd(q, A);\n","\t      q = d3_geo_spherical(q);\n","\t      if (!two) return q;\n","\t      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n","\t      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n","\t      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n","\t      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n","\t      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n","\t        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n","\t        d3_geo_cartesianAdd(q1, A);\n","\t        return [ q, d3_geo_spherical(q1) ];\n","\t      }\n","\t    }\n","\t    function code(λ, φ) {\n","\t      var r = smallRadius ? radius : π - radius, code = 0;\n","\t      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n","\t      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n","\t      return code;\n","\t    }\n","\t  }\n","\t  function d3_geom_clipLine(x0, y0, x1, y1) {\n","\t    return function(line) {\n","\t      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n","\t      r = x0 - ax;\n","\t      if (!dx && r > 0) return;\n","\t      r /= dx;\n","\t      if (dx < 0) {\n","\t        if (r < t0) return;\n","\t        if (r < t1) t1 = r;\n","\t      } else if (dx > 0) {\n","\t        if (r > t1) return;\n","\t        if (r > t0) t0 = r;\n","\t      }\n","\t      r = x1 - ax;\n","\t      if (!dx && r < 0) return;\n","\t      r /= dx;\n","\t      if (dx < 0) {\n","\t        if (r > t1) return;\n","\t        if (r > t0) t0 = r;\n","\t      } else if (dx > 0) {\n","\t        if (r < t0) return;\n","\t        if (r < t1) t1 = r;\n","\t      }\n","\t      r = y0 - ay;\n","\t      if (!dy && r > 0) return;\n","\t      r /= dy;\n","\t      if (dy < 0) {\n","\t        if (r < t0) return;\n","\t        if (r < t1) t1 = r;\n","\t      } else if (dy > 0) {\n","\t        if (r > t1) return;\n","\t        if (r > t0) t0 = r;\n","\t      }\n","\t      r = y1 - ay;\n","\t      if (!dy && r < 0) return;\n","\t      r /= dy;\n","\t      if (dy < 0) {\n","\t        if (r > t1) return;\n","\t        if (r > t0) t0 = r;\n","\t      } else if (dy > 0) {\n","\t        if (r < t0) return;\n","\t        if (r < t1) t1 = r;\n","\t      }\n","\t      if (t0 > 0) line.a = {\n","\t        x: ax + t0 * dx,\n","\t        y: ay + t0 * dy\n","\t      };\n","\t      if (t1 < 1) line.b = {\n","\t        x: ax + t1 * dx,\n","\t        y: ay + t1 * dy\n","\t      };\n","\t      return line;\n","\t    };\n","\t  }\n","\t  var d3_geo_clipExtentMAX = 1e9;\n","\t  d3.geo.clipExtent = function() {\n","\t    var x0, y0, x1, y1, stream, clip, clipExtent = {\n","\t      stream: function(output) {\n","\t        if (stream) stream.valid = false;\n","\t        stream = clip(output);\n","\t        stream.valid = true;\n","\t        return stream;\n","\t      },\n","\t      extent: function(_) {\n","\t        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n","\t        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n","\t        if (stream) stream.valid = false, stream = null;\n","\t        return clipExtent;\n","\t      }\n","\t    };\n","\t    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n","\t  };\n","\t  function d3_geo_clipExtent(x0, y0, x1, y1) {\n","\t    return function(listener) {\n","\t      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n","\t      var clip = {\n","\t        point: point,\n","\t        lineStart: lineStart,\n","\t        lineEnd: lineEnd,\n","\t        polygonStart: function() {\n","\t          listener = bufferListener;\n","\t          segments = [];\n","\t          polygon = [];\n","\t          clean = true;\n","\t        },\n","\t        polygonEnd: function() {\n","\t          listener = listener_;\n","\t          segments = d3.merge(segments);\n","\t          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n","\t          if (inside || visible) {\n","\t            listener.polygonStart();\n","\t            if (inside) {\n","\t              listener.lineStart();\n","\t              interpolate(null, null, 1, listener);\n","\t              listener.lineEnd();\n","\t            }\n","\t            if (visible) {\n","\t              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n","\t            }\n","\t            listener.polygonEnd();\n","\t          }\n","\t          segments = polygon = ring = null;\n","\t        }\n","\t      };\n","\t      function insidePolygon(p) {\n","\t        var wn = 0, n = polygon.length, y = p[1];\n","\t        for (var i = 0; i < n; ++i) {\n","\t          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n","\t            b = v[j];\n","\t            if (a[1] <= y) {\n","\t              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n","\t            } else {\n","\t              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n","\t            }\n","\t            a = b;\n","\t          }\n","\t        }\n","\t        return wn !== 0;\n","\t      }\n","\t      function interpolate(from, to, direction, listener) {\n","\t        var a = 0, a1 = 0;\n","\t        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n","\t          do {\n","\t            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n","\t          } while ((a = (a + direction + 4) % 4) !== a1);\n","\t        } else {\n","\t          listener.point(to[0], to[1]);\n","\t        }\n","\t      }\n","\t      function pointVisible(x, y) {\n","\t        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n","\t      }\n","\t      function point(x, y) {\n","\t        if (pointVisible(x, y)) listener.point(x, y);\n","\t      }\n","\t      var x__, y__, v__, x_, y_, v_, first, clean;\n","\t      function lineStart() {\n","\t        clip.point = linePoint;\n","\t        if (polygon) polygon.push(ring = []);\n","\t        first = true;\n","\t        v_ = false;\n","\t        x_ = y_ = NaN;\n","\t      }\n","\t      function lineEnd() {\n","\t        if (segments) {\n","\t          linePoint(x__, y__);\n","\t          if (v__ && v_) bufferListener.rejoin();\n","\t          segments.push(bufferListener.buffer());\n","\t        }\n","\t        clip.point = point;\n","\t        if (v_) listener.lineEnd();\n","\t      }\n","\t      function linePoint(x, y) {\n","\t        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n","\t        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n","\t        var v = pointVisible(x, y);\n","\t        if (polygon) ring.push([ x, y ]);\n","\t        if (first) {\n","\t          x__ = x, y__ = y, v__ = v;\n","\t          first = false;\n","\t          if (v) {\n","\t            listener.lineStart();\n","\t            listener.point(x, y);\n","\t          }\n","\t        } else {\n","\t          if (v && v_) listener.point(x, y); else {\n","\t            var l = {\n","\t              a: {\n","\t                x: x_,\n","\t                y: y_\n","\t              },\n","\t              b: {\n","\t                x: x,\n","\t                y: y\n","\t              }\n","\t            };\n","\t            if (clipLine(l)) {\n","\t              if (!v_) {\n","\t                listener.lineStart();\n","\t                listener.point(l.a.x, l.a.y);\n","\t              }\n","\t              listener.point(l.b.x, l.b.y);\n","\t              if (!v) listener.lineEnd();\n","\t              clean = false;\n","\t            } else if (v) {\n","\t              listener.lineStart();\n","\t              listener.point(x, y);\n","\t              clean = false;\n","\t            }\n","\t          }\n","\t        }\n","\t        x_ = x, y_ = y, v_ = v;\n","\t      }\n","\t      return clip;\n","\t    };\n","\t    function corner(p, direction) {\n","\t      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n","\t    }\n","\t    function compare(a, b) {\n","\t      return comparePoints(a.x, b.x);\n","\t    }\n","\t    function comparePoints(a, b) {\n","\t      var ca = corner(a, 1), cb = corner(b, 1);\n","\t      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n","\t    }\n","\t  }\n","\t  function d3_geo_conic(projectAt) {\n","\t    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n","\t    p.parallels = function(_) {\n","\t      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n","\t      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n","\t    };\n","\t    return p;\n","\t  }\n","\t  function d3_geo_conicEqualArea(φ0, φ1) {\n","\t    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n","\t    function forward(λ, φ) {\n","\t      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n","\t      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n","\t    }\n","\t    forward.invert = function(x, y) {\n","\t      var ρ0_y = ρ0 - y;\n","\t      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n","\t    };\n","\t    return forward;\n","\t  }\n","\t  (d3.geo.conicEqualArea = function() {\n","\t    return d3_geo_conic(d3_geo_conicEqualArea);\n","\t  }).raw = d3_geo_conicEqualArea;\n","\t  d3.geo.albers = function() {\n","\t    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n","\t  };\n","\t  d3.geo.albersUsa = function() {\n","\t    var lower48 = d3.geo.albers();\n","\t    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n","\t    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n","\t    var point, pointStream = {\n","\t      point: function(x, y) {\n","\t        point = [ x, y ];\n","\t      }\n","\t    }, lower48Point, alaskaPoint, hawaiiPoint;\n","\t    function albersUsa(coordinates) {\n","\t      var x = coordinates[0], y = coordinates[1];\n","\t      point = null;\n","\t      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n","\t      return point;\n","\t    }\n","\t    albersUsa.invert = function(coordinates) {\n","\t      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n","\t      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n","\t    };\n","\t    albersUsa.stream = function(stream) {\n","\t      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n","\t      return {\n","\t        point: function(x, y) {\n","\t          lower48Stream.point(x, y);\n","\t          alaskaStream.point(x, y);\n","\t          hawaiiStream.point(x, y);\n","\t        },\n","\t        sphere: function() {\n","\t          lower48Stream.sphere();\n","\t          alaskaStream.sphere();\n","\t          hawaiiStream.sphere();\n","\t        },\n","\t        lineStart: function() {\n","\t          lower48Stream.lineStart();\n","\t          alaskaStream.lineStart();\n","\t          hawaiiStream.lineStart();\n","\t        },\n","\t        lineEnd: function() {\n","\t          lower48Stream.lineEnd();\n","\t          alaskaStream.lineEnd();\n","\t          hawaiiStream.lineEnd();\n","\t        },\n","\t        polygonStart: function() {\n","\t          lower48Stream.polygonStart();\n","\t          alaskaStream.polygonStart();\n","\t          hawaiiStream.polygonStart();\n","\t        },\n","\t        polygonEnd: function() {\n","\t          lower48Stream.polygonEnd();\n","\t          alaskaStream.polygonEnd();\n","\t          hawaiiStream.polygonEnd();\n","\t        }\n","\t      };\n","\t    };\n","\t    albersUsa.precision = function(_) {\n","\t      if (!arguments.length) return lower48.precision();\n","\t      lower48.precision(_);\n","\t      alaska.precision(_);\n","\t      hawaii.precision(_);\n","\t      return albersUsa;\n","\t    };\n","\t    albersUsa.scale = function(_) {\n","\t      if (!arguments.length) return lower48.scale();\n","\t      lower48.scale(_);\n","\t      alaska.scale(_ * .35);\n","\t      hawaii.scale(_);\n","\t      return albersUsa.translate(lower48.translate());\n","\t    };\n","\t    albersUsa.translate = function(_) {\n","\t      if (!arguments.length) return lower48.translate();\n","\t      var k = lower48.scale(), x = +_[0], y = +_[1];\n","\t      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n","\t      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n","\t      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n","\t      return albersUsa;\n","\t    };\n","\t    return albersUsa.scale(1070);\n","\t  };\n","\t  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n","\t    point: d3_noop,\n","\t    lineStart: d3_noop,\n","\t    lineEnd: d3_noop,\n","\t    polygonStart: function() {\n","\t      d3_geo_pathAreaPolygon = 0;\n","\t      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n","\t    },\n","\t    polygonEnd: function() {\n","\t      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n","\t      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n","\t    }\n","\t  };\n","\t  function d3_geo_pathAreaRingStart() {\n","\t    var x00, y00, x0, y0;\n","\t    d3_geo_pathArea.point = function(x, y) {\n","\t      d3_geo_pathArea.point = nextPoint;\n","\t      x00 = x0 = x, y00 = y0 = y;\n","\t    };\n","\t    function nextPoint(x, y) {\n","\t      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n","\t      x0 = x, y0 = y;\n","\t    }\n","\t    d3_geo_pathArea.lineEnd = function() {\n","\t      nextPoint(x00, y00);\n","\t    };\n","\t  }\n","\t  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n","\t  var d3_geo_pathBounds = {\n","\t    point: d3_geo_pathBoundsPoint,\n","\t    lineStart: d3_noop,\n","\t    lineEnd: d3_noop,\n","\t    polygonStart: d3_noop,\n","\t    polygonEnd: d3_noop\n","\t  };\n","\t  function d3_geo_pathBoundsPoint(x, y) {\n","\t    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n","\t    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n","\t    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n","\t    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n","\t  }\n","\t  function d3_geo_pathBuffer() {\n","\t    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n","\t    var stream = {\n","\t      point: point,\n","\t      lineStart: function() {\n","\t        stream.point = pointLineStart;\n","\t      },\n","\t      lineEnd: lineEnd,\n","\t      polygonStart: function() {\n","\t        stream.lineEnd = lineEndPolygon;\n","\t      },\n","\t      polygonEnd: function() {\n","\t        stream.lineEnd = lineEnd;\n","\t        stream.point = point;\n","\t      },\n","\t      pointRadius: function(_) {\n","\t        pointCircle = d3_geo_pathBufferCircle(_);\n","\t        return stream;\n","\t      },\n","\t      result: function() {\n","\t        if (buffer.length) {\n","\t          var result = buffer.join(\"\");\n","\t          buffer = [];\n","\t          return result;\n","\t        }\n","\t      }\n","\t    };\n","\t    function point(x, y) {\n","\t      buffer.push(\"M\", x, \",\", y, pointCircle);\n","\t    }\n","\t    function pointLineStart(x, y) {\n","\t      buffer.push(\"M\", x, \",\", y);\n","\t      stream.point = pointLine;\n","\t    }\n","\t    function pointLine(x, y) {\n","\t      buffer.push(\"L\", x, \",\", y);\n","\t    }\n","\t    function lineEnd() {\n","\t      stream.point = point;\n","\t    }\n","\t    function lineEndPolygon() {\n","\t      buffer.push(\"Z\");\n","\t    }\n","\t    return stream;\n","\t  }\n","\t  function d3_geo_pathBufferCircle(radius) {\n","\t    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n","\t  }\n","\t  var d3_geo_pathCentroid = {\n","\t    point: d3_geo_pathCentroidPoint,\n","\t    lineStart: d3_geo_pathCentroidLineStart,\n","\t    lineEnd: d3_geo_pathCentroidLineEnd,\n","\t    polygonStart: function() {\n","\t      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n","\t    },\n","\t    polygonEnd: function() {\n","\t      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n","\t      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n","\t      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n","\t    }\n","\t  };\n","\t  function d3_geo_pathCentroidPoint(x, y) {\n","\t    d3_geo_centroidX0 += x;\n","\t    d3_geo_centroidY0 += y;\n","\t    ++d3_geo_centroidZ0;\n","\t  }\n","\t  function d3_geo_pathCentroidLineStart() {\n","\t    var x0, y0;\n","\t    d3_geo_pathCentroid.point = function(x, y) {\n","\t      d3_geo_pathCentroid.point = nextPoint;\n","\t      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n","\t    };\n","\t    function nextPoint(x, y) {\n","\t      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n","\t      d3_geo_centroidX1 += z * (x0 + x) / 2;\n","\t      d3_geo_centroidY1 += z * (y0 + y) / 2;\n","\t      d3_geo_centroidZ1 += z;\n","\t      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n","\t    }\n","\t  }\n","\t  function d3_geo_pathCentroidLineEnd() {\n","\t    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n","\t  }\n","\t  function d3_geo_pathCentroidRingStart() {\n","\t    var x00, y00, x0, y0;\n","\t    d3_geo_pathCentroid.point = function(x, y) {\n","\t      d3_geo_pathCentroid.point = nextPoint;\n","\t      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n","\t    };\n","\t    function nextPoint(x, y) {\n","\t      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n","\t      d3_geo_centroidX1 += z * (x0 + x) / 2;\n","\t      d3_geo_centroidY1 += z * (y0 + y) / 2;\n","\t      d3_geo_centroidZ1 += z;\n","\t      z = y0 * x - x0 * y;\n","\t      d3_geo_centroidX2 += z * (x0 + x);\n","\t      d3_geo_centroidY2 += z * (y0 + y);\n","\t      d3_geo_centroidZ2 += z * 3;\n","\t      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n","\t    }\n","\t    d3_geo_pathCentroid.lineEnd = function() {\n","\t      nextPoint(x00, y00);\n","\t    };\n","\t  }\n","\t  function d3_geo_pathContext(context) {\n","\t    var pointRadius = 4.5;\n","\t    var stream = {\n","\t      point: point,\n","\t      lineStart: function() {\n","\t        stream.point = pointLineStart;\n","\t      },\n","\t      lineEnd: lineEnd,\n","\t      polygonStart: function() {\n","\t        stream.lineEnd = lineEndPolygon;\n","\t      },\n","\t      polygonEnd: function() {\n","\t        stream.lineEnd = lineEnd;\n","\t        stream.point = point;\n","\t      },\n","\t      pointRadius: function(_) {\n","\t        pointRadius = _;\n","\t        return stream;\n","\t      },\n","\t      result: d3_noop\n","\t    };\n","\t    function point(x, y) {\n","\t      context.moveTo(x + pointRadius, y);\n","\t      context.arc(x, y, pointRadius, 0, τ);\n","\t    }\n","\t    function pointLineStart(x, y) {\n","\t      context.moveTo(x, y);\n","\t      stream.point = pointLine;\n","\t    }\n","\t    function pointLine(x, y) {\n","\t      context.lineTo(x, y);\n","\t    }\n","\t    function lineEnd() {\n","\t      stream.point = point;\n","\t    }\n","\t    function lineEndPolygon() {\n","\t      context.closePath();\n","\t    }\n","\t    return stream;\n","\t  }\n","\t  function d3_geo_resample(project) {\n","\t    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n","\t    function resample(stream) {\n","\t      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n","\t    }\n","\t    function resampleNone(stream) {\n","\t      return d3_geo_transformPoint(stream, function(x, y) {\n","\t        x = project(x, y);\n","\t        stream.point(x[0], x[1]);\n","\t      });\n","\t    }\n","\t    function resampleRecursive(stream) {\n","\t      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n","\t      var resample = {\n","\t        point: point,\n","\t        lineStart: lineStart,\n","\t        lineEnd: lineEnd,\n","\t        polygonStart: function() {\n","\t          stream.polygonStart();\n","\t          resample.lineStart = ringStart;\n","\t        },\n","\t        polygonEnd: function() {\n","\t          stream.polygonEnd();\n","\t          resample.lineStart = lineStart;\n","\t        }\n","\t      };\n","\t      function point(x, y) {\n","\t        x = project(x, y);\n","\t        stream.point(x[0], x[1]);\n","\t      }\n","\t      function lineStart() {\n","\t        x0 = NaN;\n","\t        resample.point = linePoint;\n","\t        stream.lineStart();\n","\t      }\n","\t      function linePoint(λ, φ) {\n","\t        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n","\t        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n","\t        stream.point(x0, y0);\n","\t      }\n","\t      function lineEnd() {\n","\t        resample.point = point;\n","\t        stream.lineEnd();\n","\t      }\n","\t      function ringStart() {\n","\t        lineStart();\n","\t        resample.point = ringPoint;\n","\t        resample.lineEnd = ringEnd;\n","\t      }\n","\t      function ringPoint(λ, φ) {\n","\t        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n","\t        resample.point = linePoint;\n","\t      }\n","\t      function ringEnd() {\n","\t        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n","\t        resample.lineEnd = lineEnd;\n","\t        lineEnd();\n","\t      }\n","\t      return resample;\n","\t    }\n","\t    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n","\t      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n","\t      if (d2 > 4 * δ2 && depth--) {\n","\t        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n","\t        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n","\t          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n","\t          stream.point(x2, y2);\n","\t          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n","\t        }\n","\t      }\n","\t    }\n","\t    resample.precision = function(_) {\n","\t      if (!arguments.length) return Math.sqrt(δ2);\n","\t      maxDepth = (δ2 = _ * _) > 0 && 16;\n","\t      return resample;\n","\t    };\n","\t    return resample;\n","\t  }\n","\t  d3.geo.path = function() {\n","\t    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n","\t    function path(object) {\n","\t      if (object) {\n","\t        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n","\t        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n","\t        d3.geo.stream(object, cacheStream);\n","\t      }\n","\t      return contextStream.result();\n","\t    }\n","\t    path.area = function(object) {\n","\t      d3_geo_pathAreaSum = 0;\n","\t      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n","\t      return d3_geo_pathAreaSum;\n","\t    };\n","\t    path.centroid = function(object) {\n","\t      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n","\t      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n","\t      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n","\t    };\n","\t    path.bounds = function(object) {\n","\t      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n","\t      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n","\t      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n","\t    };\n","\t    path.projection = function(_) {\n","\t      if (!arguments.length) return projection;\n","\t      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n","\t      return reset();\n","\t    };\n","\t    path.context = function(_) {\n","\t      if (!arguments.length) return context;\n","\t      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n","\t      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n","\t      return reset();\n","\t    };\n","\t    path.pointRadius = function(_) {\n","\t      if (!arguments.length) return pointRadius;\n","\t      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n","\t      return path;\n","\t    };\n","\t    function reset() {\n","\t      cacheStream = null;\n","\t      return path;\n","\t    }\n","\t    return path.projection(d3.geo.albersUsa()).context(null);\n","\t  };\n","\t  function d3_geo_pathProjectStream(project) {\n","\t    var resample = d3_geo_resample(function(x, y) {\n","\t      return project([ x * d3_degrees, y * d3_degrees ]);\n","\t    });\n","\t    return function(stream) {\n","\t      return d3_geo_projectionRadians(resample(stream));\n","\t    };\n","\t  }\n","\t  d3.geo.transform = function(methods) {\n","\t    return {\n","\t      stream: function(stream) {\n","\t        var transform = new d3_geo_transform(stream);\n","\t        for (var k in methods) transform[k] = methods[k];\n","\t        return transform;\n","\t      }\n","\t    };\n","\t  };\n","\t  function d3_geo_transform(stream) {\n","\t    this.stream = stream;\n","\t  }\n","\t  d3_geo_transform.prototype = {\n","\t    point: function(x, y) {\n","\t      this.stream.point(x, y);\n","\t    },\n","\t    sphere: function() {\n","\t      this.stream.sphere();\n","\t    },\n","\t    lineStart: function() {\n","\t      this.stream.lineStart();\n","\t    },\n","\t    lineEnd: function() {\n","\t      this.stream.lineEnd();\n","\t    },\n","\t    polygonStart: function() {\n","\t      this.stream.polygonStart();\n","\t    },\n","\t    polygonEnd: function() {\n","\t      this.stream.polygonEnd();\n","\t    }\n","\t  };\n","\t  function d3_geo_transformPoint(stream, point) {\n","\t    return {\n","\t      point: point,\n","\t      sphere: function() {\n","\t        stream.sphere();\n","\t      },\n","\t      lineStart: function() {\n","\t        stream.lineStart();\n","\t      },\n","\t      lineEnd: function() {\n","\t        stream.lineEnd();\n","\t      },\n","\t      polygonStart: function() {\n","\t        stream.polygonStart();\n","\t      },\n","\t      polygonEnd: function() {\n","\t        stream.polygonEnd();\n","\t      }\n","\t    };\n","\t  }\n","\t  d3.geo.projection = d3_geo_projection;\n","\t  d3.geo.projectionMutator = d3_geo_projectionMutator;\n","\t  function d3_geo_projection(project) {\n","\t    return d3_geo_projectionMutator(function() {\n","\t      return project;\n","\t    })();\n","\t  }\n","\t  function d3_geo_projectionMutator(projectAt) {\n","\t    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n","\t      x = project(x, y);\n","\t      return [ x[0] * k + δx, δy - x[1] * k ];\n","\t    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n","\t    function projection(point) {\n","\t      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n","\t      return [ point[0] * k + δx, δy - point[1] * k ];\n","\t    }\n","\t    function invert(point) {\n","\t      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n","\t      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n","\t    }\n","\t    projection.stream = function(output) {\n","\t      if (stream) stream.valid = false;\n","\t      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n","\t      stream.valid = true;\n","\t      return stream;\n","\t    };\n","\t    projection.clipAngle = function(_) {\n","\t      if (!arguments.length) return clipAngle;\n","\t      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n","\t      return invalidate();\n","\t    };\n","\t    projection.clipExtent = function(_) {\n","\t      if (!arguments.length) return clipExtent;\n","\t      clipExtent = _;\n","\t      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n","\t      return invalidate();\n","\t    };\n","\t    projection.scale = function(_) {\n","\t      if (!arguments.length) return k;\n","\t      k = +_;\n","\t      return reset();\n","\t    };\n","\t    projection.translate = function(_) {\n","\t      if (!arguments.length) return [ x, y ];\n","\t      x = +_[0];\n","\t      y = +_[1];\n","\t      return reset();\n","\t    };\n","\t    projection.center = function(_) {\n","\t      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n","\t      λ = _[0] % 360 * d3_radians;\n","\t      φ = _[1] % 360 * d3_radians;\n","\t      return reset();\n","\t    };\n","\t    projection.rotate = function(_) {\n","\t      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n","\t      δλ = _[0] % 360 * d3_radians;\n","\t      δφ = _[1] % 360 * d3_radians;\n","\t      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n","\t      return reset();\n","\t    };\n","\t    d3.rebind(projection, projectResample, \"precision\");\n","\t    function reset() {\n","\t      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n","\t      var center = project(λ, φ);\n","\t      δx = x - center[0] * k;\n","\t      δy = y + center[1] * k;\n","\t      return invalidate();\n","\t    }\n","\t    function invalidate() {\n","\t      if (stream) stream.valid = false, stream = null;\n","\t      return projection;\n","\t    }\n","\t    return function() {\n","\t      project = projectAt.apply(this, arguments);\n","\t      projection.invert = project.invert && invert;\n","\t      return reset();\n","\t    };\n","\t  }\n","\t  function d3_geo_projectionRadians(stream) {\n","\t    return d3_geo_transformPoint(stream, function(x, y) {\n","\t      stream.point(x * d3_radians, y * d3_radians);\n","\t    });\n","\t  }\n","\t  function d3_geo_equirectangular(λ, φ) {\n","\t    return [ λ, φ ];\n","\t  }\n","\t  (d3.geo.equirectangular = function() {\n","\t    return d3_geo_projection(d3_geo_equirectangular);\n","\t  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n","\t  d3.geo.rotation = function(rotate) {\n","\t    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n","\t    function forward(coordinates) {\n","\t      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n","\t      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n","\t    }\n","\t    forward.invert = function(coordinates) {\n","\t      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n","\t      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n","\t    };\n","\t    return forward;\n","\t  };\n","\t  function d3_geo_identityRotation(λ, φ) {\n","\t    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n","\t  }\n","\t  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n","\t  function d3_geo_rotation(δλ, δφ, δγ) {\n","\t    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n","\t  }\n","\t  function d3_geo_forwardRotationλ(δλ) {\n","\t    return function(λ, φ) {\n","\t      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n","\t    };\n","\t  }\n","\t  function d3_geo_rotationλ(δλ) {\n","\t    var rotation = d3_geo_forwardRotationλ(δλ);\n","\t    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n","\t    return rotation;\n","\t  }\n","\t  function d3_geo_rotationφγ(δφ, δγ) {\n","\t    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n","\t    function rotation(λ, φ) {\n","\t      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n","\t      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n","\t    }\n","\t    rotation.invert = function(λ, φ) {\n","\t      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n","\t      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n","\t    };\n","\t    return rotation;\n","\t  }\n","\t  d3.geo.circle = function() {\n","\t    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n","\t    function circle() {\n","\t      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n","\t      interpolate(null, null, 1, {\n","\t        point: function(x, y) {\n","\t          ring.push(x = rotate(x, y));\n","\t          x[0] *= d3_degrees, x[1] *= d3_degrees;\n","\t        }\n","\t      });\n","\t      return {\n","\t        type: \"Polygon\",\n","\t        coordinates: [ ring ]\n","\t      };\n","\t    }\n","\t    circle.origin = function(x) {\n","\t      if (!arguments.length) return origin;\n","\t      origin = x;\n","\t      return circle;\n","\t    };\n","\t    circle.angle = function(x) {\n","\t      if (!arguments.length) return angle;\n","\t      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n","\t      return circle;\n","\t    };\n","\t    circle.precision = function(_) {\n","\t      if (!arguments.length) return precision;\n","\t      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n","\t      return circle;\n","\t    };\n","\t    return circle.angle(90);\n","\t  };\n","\t  function d3_geo_circleInterpolate(radius, precision) {\n","\t    var cr = Math.cos(radius), sr = Math.sin(radius);\n","\t    return function(from, to, direction, listener) {\n","\t      var step = direction * precision;\n","\t      if (from != null) {\n","\t        from = d3_geo_circleAngle(cr, from);\n","\t        to = d3_geo_circleAngle(cr, to);\n","\t        if (direction > 0 ? from < to : from > to) from += direction * τ;\n","\t      } else {\n","\t        from = radius + direction * τ;\n","\t        to = radius - .5 * step;\n","\t      }\n","\t      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n","\t        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n","\t      }\n","\t    };\n","\t  }\n","\t  function d3_geo_circleAngle(cr, point) {\n","\t    var a = d3_geo_cartesian(point);\n","\t    a[0] -= cr;\n","\t    d3_geo_cartesianNormalize(a);\n","\t    var angle = d3_acos(-a[1]);\n","\t    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n","\t  }\n","\t  d3.geo.distance = function(a, b) {\n","\t    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n","\t    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n","\t  };\n","\t  d3.geo.graticule = function() {\n","\t    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n","\t    function graticule() {\n","\t      return {\n","\t        type: \"MultiLineString\",\n","\t        coordinates: lines()\n","\t      };\n","\t    }\n","\t    function lines() {\n","\t      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n","\t        return abs(x % DX) > ε;\n","\t      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n","\t        return abs(y % DY) > ε;\n","\t      }).map(y));\n","\t    }\n","\t    graticule.lines = function() {\n","\t      return lines().map(function(coordinates) {\n","\t        return {\n","\t          type: \"LineString\",\n","\t          coordinates: coordinates\n","\t        };\n","\t      });\n","\t    };\n","\t    graticule.outline = function() {\n","\t      return {\n","\t        type: \"Polygon\",\n","\t        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n","\t      };\n","\t    };\n","\t    graticule.extent = function(_) {\n","\t      if (!arguments.length) return graticule.minorExtent();\n","\t      return graticule.majorExtent(_).minorExtent(_);\n","\t    };\n","\t    graticule.majorExtent = function(_) {\n","\t      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n","\t      X0 = +_[0][0], X1 = +_[1][0];\n","\t      Y0 = +_[0][1], Y1 = +_[1][1];\n","\t      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n","\t      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n","\t      return graticule.precision(precision);\n","\t    };\n","\t    graticule.minorExtent = function(_) {\n","\t      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n","\t      x0 = +_[0][0], x1 = +_[1][0];\n","\t      y0 = +_[0][1], y1 = +_[1][1];\n","\t      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n","\t      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n","\t      return graticule.precision(precision);\n","\t    };\n","\t    graticule.step = function(_) {\n","\t      if (!arguments.length) return graticule.minorStep();\n","\t      return graticule.majorStep(_).minorStep(_);\n","\t    };\n","\t    graticule.majorStep = function(_) {\n","\t      if (!arguments.length) return [ DX, DY ];\n","\t      DX = +_[0], DY = +_[1];\n","\t      return graticule;\n","\t    };\n","\t    graticule.minorStep = function(_) {\n","\t      if (!arguments.length) return [ dx, dy ];\n","\t      dx = +_[0], dy = +_[1];\n","\t      return graticule;\n","\t    };\n","\t    graticule.precision = function(_) {\n","\t      if (!arguments.length) return precision;\n","\t      precision = +_;\n","\t      x = d3_geo_graticuleX(y0, y1, 90);\n","\t      y = d3_geo_graticuleY(x0, x1, precision);\n","\t      X = d3_geo_graticuleX(Y0, Y1, 90);\n","\t      Y = d3_geo_graticuleY(X0, X1, precision);\n","\t      return graticule;\n","\t    };\n","\t    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n","\t  };\n","\t  function d3_geo_graticuleX(y0, y1, dy) {\n","\t    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n","\t    return function(x) {\n","\t      return y.map(function(y) {\n","\t        return [ x, y ];\n","\t      });\n","\t    };\n","\t  }\n","\t  function d3_geo_graticuleY(x0, x1, dx) {\n","\t    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n","\t    return function(y) {\n","\t      return x.map(function(x) {\n","\t        return [ x, y ];\n","\t      });\n","\t    };\n","\t  }\n","\t  function d3_source(d) {\n","\t    return d.source;\n","\t  }\n","\t  function d3_target(d) {\n","\t    return d.target;\n","\t  }\n","\t  d3.geo.greatArc = function() {\n","\t    var source = d3_source, source_, target = d3_target, target_;\n","\t    function greatArc() {\n","\t      return {\n","\t        type: \"LineString\",\n","\t        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n","\t      };\n","\t    }\n","\t    greatArc.distance = function() {\n","\t      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n","\t    };\n","\t    greatArc.source = function(_) {\n","\t      if (!arguments.length) return source;\n","\t      source = _, source_ = typeof _ === \"function\" ? null : _;\n","\t      return greatArc;\n","\t    };\n","\t    greatArc.target = function(_) {\n","\t      if (!arguments.length) return target;\n","\t      target = _, target_ = typeof _ === \"function\" ? null : _;\n","\t      return greatArc;\n","\t    };\n","\t    greatArc.precision = function() {\n","\t      return arguments.length ? greatArc : 0;\n","\t    };\n","\t    return greatArc;\n","\t  };\n","\t  d3.geo.interpolate = function(source, target) {\n","\t    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n","\t  };\n","\t  function d3_geo_interpolate(x0, y0, x1, y1) {\n","\t    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n","\t    var interpolate = d ? function(t) {\n","\t      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n","\t      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n","\t    } : function() {\n","\t      return [ x0 * d3_degrees, y0 * d3_degrees ];\n","\t    };\n","\t    interpolate.distance = d;\n","\t    return interpolate;\n","\t  }\n","\t  d3.geo.length = function(object) {\n","\t    d3_geo_lengthSum = 0;\n","\t    d3.geo.stream(object, d3_geo_length);\n","\t    return d3_geo_lengthSum;\n","\t  };\n","\t  var d3_geo_lengthSum;\n","\t  var d3_geo_length = {\n","\t    sphere: d3_noop,\n","\t    point: d3_noop,\n","\t    lineStart: d3_geo_lengthLineStart,\n","\t    lineEnd: d3_noop,\n","\t    polygonStart: d3_noop,\n","\t    polygonEnd: d3_noop\n","\t  };\n","\t  function d3_geo_lengthLineStart() {\n","\t    var λ0, sinφ0, cosφ0;\n","\t    d3_geo_length.point = function(λ, φ) {\n","\t      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n","\t      d3_geo_length.point = nextPoint;\n","\t    };\n","\t    d3_geo_length.lineEnd = function() {\n","\t      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n","\t    };\n","\t    function nextPoint(λ, φ) {\n","\t      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n","\t      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n","\t      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n","\t    }\n","\t  }\n","\t  function d3_geo_azimuthal(scale, angle) {\n","\t    function azimuthal(λ, φ) {\n","\t      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n","\t      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n","\t    }\n","\t    azimuthal.invert = function(x, y) {\n","\t      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n","\t      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n","\t    };\n","\t    return azimuthal;\n","\t  }\n","\t  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n","\t    return Math.sqrt(2 / (1 + cosλcosφ));\n","\t  }, function(ρ) {\n","\t    return 2 * Math.asin(ρ / 2);\n","\t  });\n","\t  (d3.geo.azimuthalEqualArea = function() {\n","\t    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n","\t  }).raw = d3_geo_azimuthalEqualArea;\n","\t  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n","\t    var c = Math.acos(cosλcosφ);\n","\t    return c && c / Math.sin(c);\n","\t  }, d3_identity);\n","\t  (d3.geo.azimuthalEquidistant = function() {\n","\t    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n","\t  }).raw = d3_geo_azimuthalEquidistant;\n","\t  function d3_geo_conicConformal(φ0, φ1) {\n","\t    var cosφ0 = Math.cos(φ0), t = function(φ) {\n","\t      return Math.tan(π / 4 + φ / 2);\n","\t    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n","\t    if (!n) return d3_geo_mercator;\n","\t    function forward(λ, φ) {\n","\t      if (F > 0) {\n","\t        if (φ < -halfπ + ε) φ = -halfπ + ε;\n","\t      } else {\n","\t        if (φ > halfπ - ε) φ = halfπ - ε;\n","\t      }\n","\t      var ρ = F / Math.pow(t(φ), n);\n","\t      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n","\t    }\n","\t    forward.invert = function(x, y) {\n","\t      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n","\t      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n","\t    };\n","\t    return forward;\n","\t  }\n","\t  (d3.geo.conicConformal = function() {\n","\t    return d3_geo_conic(d3_geo_conicConformal);\n","\t  }).raw = d3_geo_conicConformal;\n","\t  function d3_geo_conicEquidistant(φ0, φ1) {\n","\t    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n","\t    if (abs(n) < ε) return d3_geo_equirectangular;\n","\t    function forward(λ, φ) {\n","\t      var ρ = G - φ;\n","\t      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n","\t    }\n","\t    forward.invert = function(x, y) {\n","\t      var ρ0_y = G - y;\n","\t      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n","\t    };\n","\t    return forward;\n","\t  }\n","\t  (d3.geo.conicEquidistant = function() {\n","\t    return d3_geo_conic(d3_geo_conicEquidistant);\n","\t  }).raw = d3_geo_conicEquidistant;\n","\t  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n","\t    return 1 / cosλcosφ;\n","\t  }, Math.atan);\n","\t  (d3.geo.gnomonic = function() {\n","\t    return d3_geo_projection(d3_geo_gnomonic);\n","\t  }).raw = d3_geo_gnomonic;\n","\t  function d3_geo_mercator(λ, φ) {\n","\t    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n","\t  }\n","\t  d3_geo_mercator.invert = function(x, y) {\n","\t    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n","\t  };\n","\t  function d3_geo_mercatorProjection(project) {\n","\t    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n","\t    m.scale = function() {\n","\t      var v = scale.apply(m, arguments);\n","\t      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n","\t    };\n","\t    m.translate = function() {\n","\t      var v = translate.apply(m, arguments);\n","\t      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n","\t    };\n","\t    m.clipExtent = function(_) {\n","\t      var v = clipExtent.apply(m, arguments);\n","\t      if (v === m) {\n","\t        if (clipAuto = _ == null) {\n","\t          var k = π * scale(), t = translate();\n","\t          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n","\t        }\n","\t      } else if (clipAuto) {\n","\t        v = null;\n","\t      }\n","\t      return v;\n","\t    };\n","\t    return m.clipExtent(null);\n","\t  }\n","\t  (d3.geo.mercator = function() {\n","\t    return d3_geo_mercatorProjection(d3_geo_mercator);\n","\t  }).raw = d3_geo_mercator;\n","\t  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n","\t    return 1;\n","\t  }, Math.asin);\n","\t  (d3.geo.orthographic = function() {\n","\t    return d3_geo_projection(d3_geo_orthographic);\n","\t  }).raw = d3_geo_orthographic;\n","\t  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n","\t    return 1 / (1 + cosλcosφ);\n","\t  }, function(ρ) {\n","\t    return 2 * Math.atan(ρ);\n","\t  });\n","\t  (d3.geo.stereographic = function() {\n","\t    return d3_geo_projection(d3_geo_stereographic);\n","\t  }).raw = d3_geo_stereographic;\n","\t  function d3_geo_transverseMercator(λ, φ) {\n","\t    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n","\t  }\n","\t  d3_geo_transverseMercator.invert = function(x, y) {\n","\t    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n","\t  };\n","\t  (d3.geo.transverseMercator = function() {\n","\t    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n","\t    projection.center = function(_) {\n","\t      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n","\t    };\n","\t    projection.rotate = function(_) {\n","\t      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n","\t      [ _[0], _[1], _[2] - 90 ]);\n","\t    };\n","\t    return rotate([ 0, 0, 90 ]);\n","\t  }).raw = d3_geo_transverseMercator;\n","\t  d3.geom = {};\n","\t  function d3_geom_pointX(d) {\n","\t    return d[0];\n","\t  }\n","\t  function d3_geom_pointY(d) {\n","\t    return d[1];\n","\t  }\n","\t  d3.geom.hull = function(vertices) {\n","\t    var x = d3_geom_pointX, y = d3_geom_pointY;\n","\t    if (arguments.length) return hull(vertices);\n","\t    function hull(data) {\n","\t      if (data.length < 3) return [];\n","\t      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n","\t      for (i = 0; i < n; i++) {\n","\t        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n","\t      }\n","\t      points.sort(d3_geom_hullOrder);\n","\t      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n","\t      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n","\t      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n","\t      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n","\t      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n","\t      return polygon;\n","\t    }\n","\t    hull.x = function(_) {\n","\t      return arguments.length ? (x = _, hull) : x;\n","\t    };\n","\t    hull.y = function(_) {\n","\t      return arguments.length ? (y = _, hull) : y;\n","\t    };\n","\t    return hull;\n","\t  };\n","\t  function d3_geom_hullUpper(points) {\n","\t    var n = points.length, hull = [ 0, 1 ], hs = 2;\n","\t    for (var i = 2; i < n; i++) {\n","\t      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n","\t      hull[hs++] = i;\n","\t    }\n","\t    return hull.slice(0, hs);\n","\t  }\n","\t  function d3_geom_hullOrder(a, b) {\n","\t    return a[0] - b[0] || a[1] - b[1];\n","\t  }\n","\t  d3.geom.polygon = function(coordinates) {\n","\t    d3_subclass(coordinates, d3_geom_polygonPrototype);\n","\t    return coordinates;\n","\t  };\n","\t  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n","\t  d3_geom_polygonPrototype.area = function() {\n","\t    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n","\t    while (++i < n) {\n","\t      a = b;\n","\t      b = this[i];\n","\t      area += a[1] * b[0] - a[0] * b[1];\n","\t    }\n","\t    return area * .5;\n","\t  };\n","\t  d3_geom_polygonPrototype.centroid = function(k) {\n","\t    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n","\t    if (!arguments.length) k = -1 / (6 * this.area());\n","\t    while (++i < n) {\n","\t      a = b;\n","\t      b = this[i];\n","\t      c = a[0] * b[1] - b[0] * a[1];\n","\t      x += (a[0] + b[0]) * c;\n","\t      y += (a[1] + b[1]) * c;\n","\t    }\n","\t    return [ x * k, y * k ];\n","\t  };\n","\t  d3_geom_polygonPrototype.clip = function(subject) {\n","\t    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n","\t    while (++i < n) {\n","\t      input = subject.slice();\n","\t      subject.length = 0;\n","\t      b = this[i];\n","\t      c = input[(m = input.length - closed) - 1];\n","\t      j = -1;\n","\t      while (++j < m) {\n","\t        d = input[j];\n","\t        if (d3_geom_polygonInside(d, a, b)) {\n","\t          if (!d3_geom_polygonInside(c, a, b)) {\n","\t            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n","\t          }\n","\t          subject.push(d);\n","\t        } else if (d3_geom_polygonInside(c, a, b)) {\n","\t          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n","\t        }\n","\t        c = d;\n","\t      }\n","\t      if (closed) subject.push(subject[0]);\n","\t      a = b;\n","\t    }\n","\t    return subject;\n","\t  };\n","\t  function d3_geom_polygonInside(p, a, b) {\n","\t    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n","\t  }\n","\t  function d3_geom_polygonIntersect(c, d, a, b) {\n","\t    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n","\t    return [ x1 + ua * x21, y1 + ua * y21 ];\n","\t  }\n","\t  function d3_geom_polygonClosed(coordinates) {\n","\t    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n","\t    return !(a[0] - b[0] || a[1] - b[1]);\n","\t  }\n","\t  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n","\t  function d3_geom_voronoiBeach() {\n","\t    d3_geom_voronoiRedBlackNode(this);\n","\t    this.edge = this.site = this.circle = null;\n","\t  }\n","\t  function d3_geom_voronoiCreateBeach(site) {\n","\t    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n","\t    beach.site = site;\n","\t    return beach;\n","\t  }\n","\t  function d3_geom_voronoiDetachBeach(beach) {\n","\t    d3_geom_voronoiDetachCircle(beach);\n","\t    d3_geom_voronoiBeaches.remove(beach);\n","\t    d3_geom_voronoiBeachPool.push(beach);\n","\t    d3_geom_voronoiRedBlackNode(beach);\n","\t  }\n","\t  function d3_geom_voronoiRemoveBeach(beach) {\n","\t    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n","\t      x: x,\n","\t      y: y\n","\t    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n","\t    d3_geom_voronoiDetachBeach(beach);\n","\t    var lArc = previous;\n","\t    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n","\t      previous = lArc.P;\n","\t      disappearing.unshift(lArc);\n","\t      d3_geom_voronoiDetachBeach(lArc);\n","\t      lArc = previous;\n","\t    }\n","\t    disappearing.unshift(lArc);\n","\t    d3_geom_voronoiDetachCircle(lArc);\n","\t    var rArc = next;\n","\t    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n","\t      next = rArc.N;\n","\t      disappearing.push(rArc);\n","\t      d3_geom_voronoiDetachBeach(rArc);\n","\t      rArc = next;\n","\t    }\n","\t    disappearing.push(rArc);\n","\t    d3_geom_voronoiDetachCircle(rArc);\n","\t    var nArcs = disappearing.length, iArc;\n","\t    for (iArc = 1; iArc < nArcs; ++iArc) {\n","\t      rArc = disappearing[iArc];\n","\t      lArc = disappearing[iArc - 1];\n","\t      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n","\t    }\n","\t    lArc = disappearing[0];\n","\t    rArc = disappearing[nArcs - 1];\n","\t    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n","\t    d3_geom_voronoiAttachCircle(lArc);\n","\t    d3_geom_voronoiAttachCircle(rArc);\n","\t  }\n","\t  function d3_geom_voronoiAddBeach(site) {\n","\t    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n","\t    while (node) {\n","\t      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n","\t      if (dxl > ε) node = node.L; else {\n","\t        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n","\t        if (dxr > ε) {\n","\t          if (!node.R) {\n","\t            lArc = node;\n","\t            break;\n","\t          }\n","\t          node = node.R;\n","\t        } else {\n","\t          if (dxl > -ε) {\n","\t            lArc = node.P;\n","\t            rArc = node;\n","\t          } else if (dxr > -ε) {\n","\t            lArc = node;\n","\t            rArc = node.N;\n","\t          } else {\n","\t            lArc = rArc = node;\n","\t          }\n","\t          break;\n","\t        }\n","\t      }\n","\t    }\n","\t    var newArc = d3_geom_voronoiCreateBeach(site);\n","\t    d3_geom_voronoiBeaches.insert(lArc, newArc);\n","\t    if (!lArc && !rArc) return;\n","\t    if (lArc === rArc) {\n","\t      d3_geom_voronoiDetachCircle(lArc);\n","\t      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n","\t      d3_geom_voronoiBeaches.insert(newArc, rArc);\n","\t      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n","\t      d3_geom_voronoiAttachCircle(lArc);\n","\t      d3_geom_voronoiAttachCircle(rArc);\n","\t      return;\n","\t    }\n","\t    if (!rArc) {\n","\t      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n","\t      return;\n","\t    }\n","\t    d3_geom_voronoiDetachCircle(lArc);\n","\t    d3_geom_voronoiDetachCircle(rArc);\n","\t    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n","\t      x: (cy * hb - by * hc) / d + ax,\n","\t      y: (bx * hc - cx * hb) / d + ay\n","\t    };\n","\t    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n","\t    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n","\t    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n","\t    d3_geom_voronoiAttachCircle(lArc);\n","\t    d3_geom_voronoiAttachCircle(rArc);\n","\t  }\n","\t  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n","\t    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n","\t    if (!pby2) return rfocx;\n","\t    var lArc = arc.P;\n","\t    if (!lArc) return -Infinity;\n","\t    site = lArc.site;\n","\t    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n","\t    if (!plby2) return lfocx;\n","\t    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n","\t    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n","\t    return (rfocx + lfocx) / 2;\n","\t  }\n","\t  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n","\t    var rArc = arc.N;\n","\t    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n","\t    var site = arc.site;\n","\t    return site.y === directrix ? site.x : Infinity;\n","\t  }\n","\t  function d3_geom_voronoiCell(site) {\n","\t    this.site = site;\n","\t    this.edges = [];\n","\t  }\n","\t  d3_geom_voronoiCell.prototype.prepare = function() {\n","\t    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n","\t    while (iHalfEdge--) {\n","\t      edge = halfEdges[iHalfEdge].edge;\n","\t      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n","\t    }\n","\t    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n","\t    return halfEdges.length;\n","\t  };\n","\t  function d3_geom_voronoiCloseCells(extent) {\n","\t    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n","\t    while (iCell--) {\n","\t      cell = cells[iCell];\n","\t      if (!cell || !cell.prepare()) continue;\n","\t      halfEdges = cell.edges;\n","\t      nHalfEdges = halfEdges.length;\n","\t      iHalfEdge = 0;\n","\t      while (iHalfEdge < nHalfEdges) {\n","\t        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n","\t        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n","\t        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n","\t          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n","\t            x: x0,\n","\t            y: abs(x2 - x0) < ε ? y2 : y1\n","\t          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n","\t            x: abs(y2 - y1) < ε ? x2 : x1,\n","\t            y: y1\n","\t          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n","\t            x: x1,\n","\t            y: abs(x2 - x1) < ε ? y2 : y0\n","\t          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n","\t            x: abs(y2 - y0) < ε ? x2 : x0,\n","\t            y: y0\n","\t          } : null), cell.site, null));\n","\t          ++nHalfEdges;\n","\t        }\n","\t      }\n","\t    }\n","\t  }\n","\t  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n","\t    return b.angle - a.angle;\n","\t  }\n","\t  function d3_geom_voronoiCircle() {\n","\t    d3_geom_voronoiRedBlackNode(this);\n","\t    this.x = this.y = this.arc = this.site = this.cy = null;\n","\t  }\n","\t  function d3_geom_voronoiAttachCircle(arc) {\n","\t    var lArc = arc.P, rArc = arc.N;\n","\t    if (!lArc || !rArc) return;\n","\t    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n","\t    if (lSite === rSite) return;\n","\t    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n","\t    var d = 2 * (ax * cy - ay * cx);\n","\t    if (d >= -ε2) return;\n","\t    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n","\t    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n","\t    circle.arc = arc;\n","\t    circle.site = cSite;\n","\t    circle.x = x + bx;\n","\t    circle.y = cy + Math.sqrt(x * x + y * y);\n","\t    circle.cy = cy;\n","\t    arc.circle = circle;\n","\t    var before = null, node = d3_geom_voronoiCircles._;\n","\t    while (node) {\n","\t      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n","\t        if (node.L) node = node.L; else {\n","\t          before = node.P;\n","\t          break;\n","\t        }\n","\t      } else {\n","\t        if (node.R) node = node.R; else {\n","\t          before = node;\n","\t          break;\n","\t        }\n","\t      }\n","\t    }\n","\t    d3_geom_voronoiCircles.insert(before, circle);\n","\t    if (!before) d3_geom_voronoiFirstCircle = circle;\n","\t  }\n","\t  function d3_geom_voronoiDetachCircle(arc) {\n","\t    var circle = arc.circle;\n","\t    if (circle) {\n","\t      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n","\t      d3_geom_voronoiCircles.remove(circle);\n","\t      d3_geom_voronoiCirclePool.push(circle);\n","\t      d3_geom_voronoiRedBlackNode(circle);\n","\t      arc.circle = null;\n","\t    }\n","\t  }\n","\t  function d3_geom_voronoiClipEdges(extent) {\n","\t    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n","\t    while (i--) {\n","\t      e = edges[i];\n","\t      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n","\t        e.a = e.b = null;\n","\t        edges.splice(i, 1);\n","\t      }\n","\t    }\n","\t  }\n","\t  function d3_geom_voronoiConnectEdge(edge, extent) {\n","\t    var vb = edge.b;\n","\t    if (vb) return true;\n","\t    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n","\t    if (ry === ly) {\n","\t      if (fx < x0 || fx >= x1) return;\n","\t      if (lx > rx) {\n","\t        if (!va) va = {\n","\t          x: fx,\n","\t          y: y0\n","\t        }; else if (va.y >= y1) return;\n","\t        vb = {\n","\t          x: fx,\n","\t          y: y1\n","\t        };\n","\t      } else {\n","\t        if (!va) va = {\n","\t          x: fx,\n","\t          y: y1\n","\t        }; else if (va.y < y0) return;\n","\t        vb = {\n","\t          x: fx,\n","\t          y: y0\n","\t        };\n","\t      }\n","\t    } else {\n","\t      fm = (lx - rx) / (ry - ly);\n","\t      fb = fy - fm * fx;\n","\t      if (fm < -1 || fm > 1) {\n","\t        if (lx > rx) {\n","\t          if (!va) va = {\n","\t            x: (y0 - fb) / fm,\n","\t            y: y0\n","\t          }; else if (va.y >= y1) return;\n","\t          vb = {\n","\t            x: (y1 - fb) / fm,\n","\t            y: y1\n","\t          };\n","\t        } else {\n","\t          if (!va) va = {\n","\t            x: (y1 - fb) / fm,\n","\t            y: y1\n","\t          }; else if (va.y < y0) return;\n","\t          vb = {\n","\t            x: (y0 - fb) / fm,\n","\t            y: y0\n","\t          };\n","\t        }\n","\t      } else {\n","\t        if (ly < ry) {\n","\t          if (!va) va = {\n","\t            x: x0,\n","\t            y: fm * x0 + fb\n","\t          }; else if (va.x >= x1) return;\n","\t          vb = {\n","\t            x: x1,\n","\t            y: fm * x1 + fb\n","\t          };\n","\t        } else {\n","\t          if (!va) va = {\n","\t            x: x1,\n","\t            y: fm * x1 + fb\n","\t          }; else if (va.x < x0) return;\n","\t          vb = {\n","\t            x: x0,\n","\t            y: fm * x0 + fb\n","\t          };\n","\t        }\n","\t      }\n","\t    }\n","\t    edge.a = va;\n","\t    edge.b = vb;\n","\t    return true;\n","\t  }\n","\t  function d3_geom_voronoiEdge(lSite, rSite) {\n","\t    this.l = lSite;\n","\t    this.r = rSite;\n","\t    this.a = this.b = null;\n","\t  }\n","\t  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n","\t    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n","\t    d3_geom_voronoiEdges.push(edge);\n","\t    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n","\t    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n","\t    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n","\t    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n","\t    return edge;\n","\t  }\n","\t  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n","\t    var edge = new d3_geom_voronoiEdge(lSite, null);\n","\t    edge.a = va;\n","\t    edge.b = vb;\n","\t    d3_geom_voronoiEdges.push(edge);\n","\t    return edge;\n","\t  }\n","\t  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n","\t    if (!edge.a && !edge.b) {\n","\t      edge.a = vertex;\n","\t      edge.l = lSite;\n","\t      edge.r = rSite;\n","\t    } else if (edge.l === rSite) {\n","\t      edge.b = vertex;\n","\t    } else {\n","\t      edge.a = vertex;\n","\t    }\n","\t  }\n","\t  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n","\t    var va = edge.a, vb = edge.b;\n","\t    this.edge = edge;\n","\t    this.site = lSite;\n","\t    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n","\t  }\n","\t  d3_geom_voronoiHalfEdge.prototype = {\n","\t    start: function() {\n","\t      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n","\t    },\n","\t    end: function() {\n","\t      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n","\t    }\n","\t  };\n","\t  function d3_geom_voronoiRedBlackTree() {\n","\t    this._ = null;\n","\t  }\n","\t  function d3_geom_voronoiRedBlackNode(node) {\n","\t    node.U = node.C = node.L = node.R = node.P = node.N = null;\n","\t  }\n","\t  d3_geom_voronoiRedBlackTree.prototype = {\n","\t    insert: function(after, node) {\n","\t      var parent, grandpa, uncle;\n","\t      if (after) {\n","\t        node.P = after;\n","\t        node.N = after.N;\n","\t        if (after.N) after.N.P = node;\n","\t        after.N = node;\n","\t        if (after.R) {\n","\t          after = after.R;\n","\t          while (after.L) after = after.L;\n","\t          after.L = node;\n","\t        } else {\n","\t          after.R = node;\n","\t        }\n","\t        parent = after;\n","\t      } else if (this._) {\n","\t        after = d3_geom_voronoiRedBlackFirst(this._);\n","\t        node.P = null;\n","\t        node.N = after;\n","\t        after.P = after.L = node;\n","\t        parent = after;\n","\t      } else {\n","\t        node.P = node.N = null;\n","\t        this._ = node;\n","\t        parent = null;\n","\t      }\n","\t      node.L = node.R = null;\n","\t      node.U = parent;\n","\t      node.C = true;\n","\t      after = node;\n","\t      while (parent && parent.C) {\n","\t        grandpa = parent.U;\n","\t        if (parent === grandpa.L) {\n","\t          uncle = grandpa.R;\n","\t          if (uncle && uncle.C) {\n","\t            parent.C = uncle.C = false;\n","\t            grandpa.C = true;\n","\t            after = grandpa;\n","\t          } else {\n","\t            if (after === parent.R) {\n","\t              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n","\t              after = parent;\n","\t              parent = after.U;\n","\t            }\n","\t            parent.C = false;\n","\t            grandpa.C = true;\n","\t            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n","\t          }\n","\t        } else {\n","\t          uncle = grandpa.L;\n","\t          if (uncle && uncle.C) {\n","\t            parent.C = uncle.C = false;\n","\t            grandpa.C = true;\n","\t            after = grandpa;\n","\t          } else {\n","\t            if (after === parent.L) {\n","\t              d3_geom_voronoiRedBlackRotateRight(this, parent);\n","\t              after = parent;\n","\t              parent = after.U;\n","\t            }\n","\t            parent.C = false;\n","\t            grandpa.C = true;\n","\t            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n","\t          }\n","\t        }\n","\t        parent = after.U;\n","\t      }\n","\t      this._.C = false;\n","\t    },\n","\t    remove: function(node) {\n","\t      if (node.N) node.N.P = node.P;\n","\t      if (node.P) node.P.N = node.N;\n","\t      node.N = node.P = null;\n","\t      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n","\t      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n","\t      if (parent) {\n","\t        if (parent.L === node) parent.L = next; else parent.R = next;\n","\t      } else {\n","\t        this._ = next;\n","\t      }\n","\t      if (left && right) {\n","\t        red = next.C;\n","\t        next.C = node.C;\n","\t        next.L = left;\n","\t        left.U = next;\n","\t        if (next !== right) {\n","\t          parent = next.U;\n","\t          next.U = node.U;\n","\t          node = next.R;\n","\t          parent.L = node;\n","\t          next.R = right;\n","\t          right.U = next;\n","\t        } else {\n","\t          next.U = parent;\n","\t          parent = next;\n","\t          node = next.R;\n","\t        }\n","\t      } else {\n","\t        red = node.C;\n","\t        node = next;\n","\t      }\n","\t      if (node) node.U = parent;\n","\t      if (red) return;\n","\t      if (node && node.C) {\n","\t        node.C = false;\n","\t        return;\n","\t      }\n","\t      do {\n","\t        if (node === this._) break;\n","\t        if (node === parent.L) {\n","\t          sibling = parent.R;\n","\t          if (sibling.C) {\n","\t            sibling.C = false;\n","\t            parent.C = true;\n","\t            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n","\t            sibling = parent.R;\n","\t          }\n","\t          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n","\t            if (!sibling.R || !sibling.R.C) {\n","\t              sibling.L.C = false;\n","\t              sibling.C = true;\n","\t              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n","\t              sibling = parent.R;\n","\t            }\n","\t            sibling.C = parent.C;\n","\t            parent.C = sibling.R.C = false;\n","\t            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n","\t            node = this._;\n","\t            break;\n","\t          }\n","\t        } else {\n","\t          sibling = parent.L;\n","\t          if (sibling.C) {\n","\t            sibling.C = false;\n","\t            parent.C = true;\n","\t            d3_geom_voronoiRedBlackRotateRight(this, parent);\n","\t            sibling = parent.L;\n","\t          }\n","\t          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n","\t            if (!sibling.L || !sibling.L.C) {\n","\t              sibling.R.C = false;\n","\t              sibling.C = true;\n","\t              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n","\t              sibling = parent.L;\n","\t            }\n","\t            sibling.C = parent.C;\n","\t            parent.C = sibling.L.C = false;\n","\t            d3_geom_voronoiRedBlackRotateRight(this, parent);\n","\t            node = this._;\n","\t            break;\n","\t          }\n","\t        }\n","\t        sibling.C = true;\n","\t        node = parent;\n","\t        parent = parent.U;\n","\t      } while (!node.C);\n","\t      if (node) node.C = false;\n","\t    }\n","\t  };\n","\t  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n","\t    var p = node, q = node.R, parent = p.U;\n","\t    if (parent) {\n","\t      if (parent.L === p) parent.L = q; else parent.R = q;\n","\t    } else {\n","\t      tree._ = q;\n","\t    }\n","\t    q.U = parent;\n","\t    p.U = q;\n","\t    p.R = q.L;\n","\t    if (p.R) p.R.U = p;\n","\t    q.L = p;\n","\t  }\n","\t  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n","\t    var p = node, q = node.L, parent = p.U;\n","\t    if (parent) {\n","\t      if (parent.L === p) parent.L = q; else parent.R = q;\n","\t    } else {\n","\t      tree._ = q;\n","\t    }\n","\t    q.U = parent;\n","\t    p.U = q;\n","\t    p.L = q.R;\n","\t    if (p.L) p.L.U = p;\n","\t    q.R = p;\n","\t  }\n","\t  function d3_geom_voronoiRedBlackFirst(node) {\n","\t    while (node.L) node = node.L;\n","\t    return node;\n","\t  }\n","\t  function d3_geom_voronoi(sites, bbox) {\n","\t    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n","\t    d3_geom_voronoiEdges = [];\n","\t    d3_geom_voronoiCells = new Array(sites.length);\n","\t    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n","\t    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n","\t    while (true) {\n","\t      circle = d3_geom_voronoiFirstCircle;\n","\t      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n","\t        if (site.x !== x0 || site.y !== y0) {\n","\t          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n","\t          d3_geom_voronoiAddBeach(site);\n","\t          x0 = site.x, y0 = site.y;\n","\t        }\n","\t        site = sites.pop();\n","\t      } else if (circle) {\n","\t        d3_geom_voronoiRemoveBeach(circle.arc);\n","\t      } else {\n","\t        break;\n","\t      }\n","\t    }\n","\t    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n","\t    var diagram = {\n","\t      cells: d3_geom_voronoiCells,\n","\t      edges: d3_geom_voronoiEdges\n","\t    };\n","\t    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n","\t    return diagram;\n","\t  }\n","\t  function d3_geom_voronoiVertexOrder(a, b) {\n","\t    return b.y - a.y || b.x - a.x;\n","\t  }\n","\t  d3.geom.voronoi = function(points) {\n","\t    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n","\t    if (points) return voronoi(points);\n","\t    function voronoi(data) {\n","\t      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n","\t      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n","\t        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n","\t          var s = e.start();\n","\t          return [ s.x, s.y ];\n","\t        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n","\t        polygon.point = data[i];\n","\t      });\n","\t      return polygons;\n","\t    }\n","\t    function sites(data) {\n","\t      return data.map(function(d, i) {\n","\t        return {\n","\t          x: Math.round(fx(d, i) / ε) * ε,\n","\t          y: Math.round(fy(d, i) / ε) * ε,\n","\t          i: i\n","\t        };\n","\t      });\n","\t    }\n","\t    voronoi.links = function(data) {\n","\t      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n","\t        return edge.l && edge.r;\n","\t      }).map(function(edge) {\n","\t        return {\n","\t          source: data[edge.l.i],\n","\t          target: data[edge.r.i]\n","\t        };\n","\t      });\n","\t    };\n","\t    voronoi.triangles = function(data) {\n","\t      var triangles = [];\n","\t      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n","\t        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n","\t        while (++j < m) {\n","\t          e0 = e1;\n","\t          s0 = s1;\n","\t          e1 = edges[j].edge;\n","\t          s1 = e1.l === site ? e1.r : e1.l;\n","\t          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n","\t            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n","\t          }\n","\t        }\n","\t      });\n","\t      return triangles;\n","\t    };\n","\t    voronoi.x = function(_) {\n","\t      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n","\t    };\n","\t    voronoi.y = function(_) {\n","\t      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n","\t    };\n","\t    voronoi.clipExtent = function(_) {\n","\t      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n","\t      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n","\t      return voronoi;\n","\t    };\n","\t    voronoi.size = function(_) {\n","\t      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n","\t      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n","\t    };\n","\t    return voronoi;\n","\t  };\n","\t  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n","\t  function d3_geom_voronoiTriangleArea(a, b, c) {\n","\t    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n","\t  }\n","\t  d3.geom.delaunay = function(vertices) {\n","\t    return d3.geom.voronoi().triangles(vertices);\n","\t  };\n","\t  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n","\t    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n","\t    if (compat = arguments.length) {\n","\t      x = d3_geom_quadtreeCompatX;\n","\t      y = d3_geom_quadtreeCompatY;\n","\t      if (compat === 3) {\n","\t        y2 = y1;\n","\t        x2 = x1;\n","\t        y1 = x1 = 0;\n","\t      }\n","\t      return quadtree(points);\n","\t    }\n","\t    function quadtree(data) {\n","\t      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n","\t      if (x1 != null) {\n","\t        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n","\t      } else {\n","\t        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n","\t        xs = [], ys = [];\n","\t        n = data.length;\n","\t        if (compat) for (i = 0; i < n; ++i) {\n","\t          d = data[i];\n","\t          if (d.x < x1_) x1_ = d.x;\n","\t          if (d.y < y1_) y1_ = d.y;\n","\t          if (d.x > x2_) x2_ = d.x;\n","\t          if (d.y > y2_) y2_ = d.y;\n","\t          xs.push(d.x);\n","\t          ys.push(d.y);\n","\t        } else for (i = 0; i < n; ++i) {\n","\t          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n","\t          if (x_ < x1_) x1_ = x_;\n","\t          if (y_ < y1_) y1_ = y_;\n","\t          if (x_ > x2_) x2_ = x_;\n","\t          if (y_ > y2_) y2_ = y_;\n","\t          xs.push(x_);\n","\t          ys.push(y_);\n","\t        }\n","\t      }\n","\t      var dx = x2_ - x1_, dy = y2_ - y1_;\n","\t      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n","\t      function insert(n, d, x, y, x1, y1, x2, y2) {\n","\t        if (isNaN(x) || isNaN(y)) return;\n","\t        if (n.leaf) {\n","\t          var nx = n.x, ny = n.y;\n","\t          if (nx != null) {\n","\t            if (abs(nx - x) + abs(ny - y) < .01) {\n","\t              insertChild(n, d, x, y, x1, y1, x2, y2);\n","\t            } else {\n","\t              var nPoint = n.point;\n","\t              n.x = n.y = n.point = null;\n","\t              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n","\t              insertChild(n, d, x, y, x1, y1, x2, y2);\n","\t            }\n","\t          } else {\n","\t            n.x = x, n.y = y, n.point = d;\n","\t          }\n","\t        } else {\n","\t          insertChild(n, d, x, y, x1, y1, x2, y2);\n","\t        }\n","\t      }\n","\t      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n","\t        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n","\t        n.leaf = false;\n","\t        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n","\t        if (right) x1 = xm; else x2 = xm;\n","\t        if (below) y1 = ym; else y2 = ym;\n","\t        insert(n, d, x, y, x1, y1, x2, y2);\n","\t      }\n","\t      var root = d3_geom_quadtreeNode();\n","\t      root.add = function(d) {\n","\t        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n","\t      };\n","\t      root.visit = function(f) {\n","\t        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n","\t      };\n","\t      root.find = function(point) {\n","\t        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n","\t      };\n","\t      i = -1;\n","\t      if (x1 == null) {\n","\t        while (++i < n) {\n","\t          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n","\t        }\n","\t        --i;\n","\t      } else data.forEach(root.add);\n","\t      xs = ys = data = d = null;\n","\t      return root;\n","\t    }\n","\t    quadtree.x = function(_) {\n","\t      return arguments.length ? (x = _, quadtree) : x;\n","\t    };\n","\t    quadtree.y = function(_) {\n","\t      return arguments.length ? (y = _, quadtree) : y;\n","\t    };\n","\t    quadtree.extent = function(_) {\n","\t      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n","\t      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n","\t      y2 = +_[1][1];\n","\t      return quadtree;\n","\t    };\n","\t    quadtree.size = function(_) {\n","\t      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n","\t      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n","\t      return quadtree;\n","\t    };\n","\t    return quadtree;\n","\t  };\n","\t  function d3_geom_quadtreeCompatX(d) {\n","\t    return d.x;\n","\t  }\n","\t  function d3_geom_quadtreeCompatY(d) {\n","\t    return d.y;\n","\t  }\n","\t  function d3_geom_quadtreeNode() {\n","\t    return {\n","\t      leaf: true,\n","\t      nodes: [],\n","\t      point: null,\n","\t      x: null,\n","\t      y: null\n","\t    };\n","\t  }\n","\t  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n","\t    if (!f(node, x1, y1, x2, y2)) {\n","\t      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n","\t      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n","\t      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n","\t      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n","\t      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n","\t    }\n","\t  }\n","\t  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n","\t    var minDistance2 = Infinity, closestPoint;\n","\t    (function find(node, x1, y1, x2, y2) {\n","\t      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n","\t      if (point = node.point) {\n","\t        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n","\t        if (distance2 < minDistance2) {\n","\t          var distance = Math.sqrt(minDistance2 = distance2);\n","\t          x0 = x - distance, y0 = y - distance;\n","\t          x3 = x + distance, y3 = y + distance;\n","\t          closestPoint = point;\n","\t        }\n","\t      }\n","\t      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n","\t      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n","\t        if (node = children[i & 3]) switch (i & 3) {\n","\t         case 0:\n","\t          find(node, x1, y1, xm, ym);\n","\t          break;\n","\t\n","\t         case 1:\n","\t          find(node, xm, y1, x2, ym);\n","\t          break;\n","\t\n","\t         case 2:\n","\t          find(node, x1, ym, xm, y2);\n","\t          break;\n","\t\n","\t         case 3:\n","\t          find(node, xm, ym, x2, y2);\n","\t          break;\n","\t        }\n","\t      }\n","\t    })(root, x0, y0, x3, y3);\n","\t    return closestPoint;\n","\t  }\n","\t  d3.interpolateRgb = d3_interpolateRgb;\n","\t  function d3_interpolateRgb(a, b) {\n","\t    a = d3.rgb(a);\n","\t    b = d3.rgb(b);\n","\t    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n","\t    return function(t) {\n","\t      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n","\t    };\n","\t  }\n","\t  d3.interpolateObject = d3_interpolateObject;\n","\t  function d3_interpolateObject(a, b) {\n","\t    var i = {}, c = {}, k;\n","\t    for (k in a) {\n","\t      if (k in b) {\n","\t        i[k] = d3_interpolate(a[k], b[k]);\n","\t      } else {\n","\t        c[k] = a[k];\n","\t      }\n","\t    }\n","\t    for (k in b) {\n","\t      if (!(k in a)) {\n","\t        c[k] = b[k];\n","\t      }\n","\t    }\n","\t    return function(t) {\n","\t      for (k in i) c[k] = i[k](t);\n","\t      return c;\n","\t    };\n","\t  }\n","\t  d3.interpolateNumber = d3_interpolateNumber;\n","\t  function d3_interpolateNumber(a, b) {\n","\t    a = +a, b = +b;\n","\t    return function(t) {\n","\t      return a * (1 - t) + b * t;\n","\t    };\n","\t  }\n","\t  d3.interpolateString = d3_interpolateString;\n","\t  function d3_interpolateString(a, b) {\n","\t    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n","\t    a = a + \"\", b = b + \"\";\n","\t    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n","\t      if ((bs = bm.index) > bi) {\n","\t        bs = b.slice(bi, bs);\n","\t        if (s[i]) s[i] += bs; else s[++i] = bs;\n","\t      }\n","\t      if ((am = am[0]) === (bm = bm[0])) {\n","\t        if (s[i]) s[i] += bm; else s[++i] = bm;\n","\t      } else {\n","\t        s[++i] = null;\n","\t        q.push({\n","\t          i: i,\n","\t          x: d3_interpolateNumber(am, bm)\n","\t        });\n","\t      }\n","\t      bi = d3_interpolate_numberB.lastIndex;\n","\t    }\n","\t    if (bi < b.length) {\n","\t      bs = b.slice(bi);\n","\t      if (s[i]) s[i] += bs; else s[++i] = bs;\n","\t    }\n","\t    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n","\t      return b(t) + \"\";\n","\t    }) : function() {\n","\t      return b;\n","\t    } : (b = q.length, function(t) {\n","\t      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n","\t      return s.join(\"\");\n","\t    });\n","\t  }\n","\t  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n","\t  d3.interpolate = d3_interpolate;\n","\t  function d3_interpolate(a, b) {\n","\t    var i = d3.interpolators.length, f;\n","\t    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n","\t    return f;\n","\t  }\n","\t  d3.interpolators = [ function(a, b) {\n","\t    var t = typeof b;\n","\t    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n","\t  } ];\n","\t  d3.interpolateArray = d3_interpolateArray;\n","\t  function d3_interpolateArray(a, b) {\n","\t    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n","\t    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n","\t    for (;i < na; ++i) c[i] = a[i];\n","\t    for (;i < nb; ++i) c[i] = b[i];\n","\t    return function(t) {\n","\t      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n","\t      return c;\n","\t    };\n","\t  }\n","\t  var d3_ease_default = function() {\n","\t    return d3_identity;\n","\t  };\n","\t  var d3_ease = d3.map({\n","\t    linear: d3_ease_default,\n","\t    poly: d3_ease_poly,\n","\t    quad: function() {\n","\t      return d3_ease_quad;\n","\t    },\n","\t    cubic: function() {\n","\t      return d3_ease_cubic;\n","\t    },\n","\t    sin: function() {\n","\t      return d3_ease_sin;\n","\t    },\n","\t    exp: function() {\n","\t      return d3_ease_exp;\n","\t    },\n","\t    circle: function() {\n","\t      return d3_ease_circle;\n","\t    },\n","\t    elastic: d3_ease_elastic,\n","\t    back: d3_ease_back,\n","\t    bounce: function() {\n","\t      return d3_ease_bounce;\n","\t    }\n","\t  });\n","\t  var d3_ease_mode = d3.map({\n","\t    \"in\": d3_identity,\n","\t    out: d3_ease_reverse,\n","\t    \"in-out\": d3_ease_reflect,\n","\t    \"out-in\": function(f) {\n","\t      return d3_ease_reflect(d3_ease_reverse(f));\n","\t    }\n","\t  });\n","\t  d3.ease = function(name) {\n","\t    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n","\t    t = d3_ease.get(t) || d3_ease_default;\n","\t    m = d3_ease_mode.get(m) || d3_identity;\n","\t    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n","\t  };\n","\t  function d3_ease_clamp(f) {\n","\t    return function(t) {\n","\t      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n","\t    };\n","\t  }\n","\t  function d3_ease_reverse(f) {\n","\t    return function(t) {\n","\t      return 1 - f(1 - t);\n","\t    };\n","\t  }\n","\t  function d3_ease_reflect(f) {\n","\t    return function(t) {\n","\t      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n","\t    };\n","\t  }\n","\t  function d3_ease_quad(t) {\n","\t    return t * t;\n","\t  }\n","\t  function d3_ease_cubic(t) {\n","\t    return t * t * t;\n","\t  }\n","\t  function d3_ease_cubicInOut(t) {\n","\t    if (t <= 0) return 0;\n","\t    if (t >= 1) return 1;\n","\t    var t2 = t * t, t3 = t2 * t;\n","\t    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n","\t  }\n","\t  function d3_ease_poly(e) {\n","\t    return function(t) {\n","\t      return Math.pow(t, e);\n","\t    };\n","\t  }\n","\t  function d3_ease_sin(t) {\n","\t    return 1 - Math.cos(t * halfπ);\n","\t  }\n","\t  function d3_ease_exp(t) {\n","\t    return Math.pow(2, 10 * (t - 1));\n","\t  }\n","\t  function d3_ease_circle(t) {\n","\t    return 1 - Math.sqrt(1 - t * t);\n","\t  }\n","\t  function d3_ease_elastic(a, p) {\n","\t    var s;\n","\t    if (arguments.length < 2) p = .45;\n","\t    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n","\t    return function(t) {\n","\t      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n","\t    };\n","\t  }\n","\t  function d3_ease_back(s) {\n","\t    if (!s) s = 1.70158;\n","\t    return function(t) {\n","\t      return t * t * ((s + 1) * t - s);\n","\t    };\n","\t  }\n","\t  function d3_ease_bounce(t) {\n","\t    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n","\t  }\n","\t  d3.interpolateHcl = d3_interpolateHcl;\n","\t  function d3_interpolateHcl(a, b) {\n","\t    a = d3.hcl(a);\n","\t    b = d3.hcl(b);\n","\t    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n","\t    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n","\t    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n","\t    return function(t) {\n","\t      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n","\t    };\n","\t  }\n","\t  d3.interpolateHsl = d3_interpolateHsl;\n","\t  function d3_interpolateHsl(a, b) {\n","\t    a = d3.hsl(a);\n","\t    b = d3.hsl(b);\n","\t    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n","\t    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n","\t    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n","\t    return function(t) {\n","\t      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n","\t    };\n","\t  }\n","\t  d3.interpolateLab = d3_interpolateLab;\n","\t  function d3_interpolateLab(a, b) {\n","\t    a = d3.lab(a);\n","\t    b = d3.lab(b);\n","\t    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n","\t    return function(t) {\n","\t      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n","\t    };\n","\t  }\n","\t  d3.interpolateRound = d3_interpolateRound;\n","\t  function d3_interpolateRound(a, b) {\n","\t    b -= a;\n","\t    return function(t) {\n","\t      return Math.round(a + b * t);\n","\t    };\n","\t  }\n","\t  d3.transform = function(string) {\n","\t    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n","\t    return (d3.transform = function(string) {\n","\t      if (string != null) {\n","\t        g.setAttribute(\"transform\", string);\n","\t        var t = g.transform.baseVal.consolidate();\n","\t      }\n","\t      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n","\t    })(string);\n","\t  };\n","\t  function d3_transform(m) {\n","\t    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n","\t    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n","\t      r0[0] *= -1;\n","\t      r0[1] *= -1;\n","\t      kx *= -1;\n","\t      kz *= -1;\n","\t    }\n","\t    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n","\t    this.translate = [ m.e, m.f ];\n","\t    this.scale = [ kx, ky ];\n","\t    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n","\t  }\n","\t  d3_transform.prototype.toString = function() {\n","\t    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n","\t  };\n","\t  function d3_transformDot(a, b) {\n","\t    return a[0] * b[0] + a[1] * b[1];\n","\t  }\n","\t  function d3_transformNormalize(a) {\n","\t    var k = Math.sqrt(d3_transformDot(a, a));\n","\t    if (k) {\n","\t      a[0] /= k;\n","\t      a[1] /= k;\n","\t    }\n","\t    return k;\n","\t  }\n","\t  function d3_transformCombine(a, b, k) {\n","\t    a[0] += k * b[0];\n","\t    a[1] += k * b[1];\n","\t    return a;\n","\t  }\n","\t  var d3_transformIdentity = {\n","\t    a: 1,\n","\t    b: 0,\n","\t    c: 0,\n","\t    d: 1,\n","\t    e: 0,\n","\t    f: 0\n","\t  };\n","\t  d3.interpolateTransform = d3_interpolateTransform;\n","\t  function d3_interpolateTransformPop(s) {\n","\t    return s.length ? s.pop() + \",\" : \"\";\n","\t  }\n","\t  function d3_interpolateTranslate(ta, tb, s, q) {\n","\t    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n","\t      var i = s.push(\"translate(\", null, \",\", null, \")\");\n","\t      q.push({\n","\t        i: i - 4,\n","\t        x: d3_interpolateNumber(ta[0], tb[0])\n","\t      }, {\n","\t        i: i - 2,\n","\t        x: d3_interpolateNumber(ta[1], tb[1])\n","\t      });\n","\t    } else if (tb[0] || tb[1]) {\n","\t      s.push(\"translate(\" + tb + \")\");\n","\t    }\n","\t  }\n","\t  function d3_interpolateRotate(ra, rb, s, q) {\n","\t    if (ra !== rb) {\n","\t      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n","\t      q.push({\n","\t        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n","\t        x: d3_interpolateNumber(ra, rb)\n","\t      });\n","\t    } else if (rb) {\n","\t      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n","\t    }\n","\t  }\n","\t  function d3_interpolateSkew(wa, wb, s, q) {\n","\t    if (wa !== wb) {\n","\t      q.push({\n","\t        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n","\t        x: d3_interpolateNumber(wa, wb)\n","\t      });\n","\t    } else if (wb) {\n","\t      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n","\t    }\n","\t  }\n","\t  function d3_interpolateScale(ka, kb, s, q) {\n","\t    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n","\t      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n","\t      q.push({\n","\t        i: i - 4,\n","\t        x: d3_interpolateNumber(ka[0], kb[0])\n","\t      }, {\n","\t        i: i - 2,\n","\t        x: d3_interpolateNumber(ka[1], kb[1])\n","\t      });\n","\t    } else if (kb[0] !== 1 || kb[1] !== 1) {\n","\t      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n","\t    }\n","\t  }\n","\t  function d3_interpolateTransform(a, b) {\n","\t    var s = [], q = [];\n","\t    a = d3.transform(a), b = d3.transform(b);\n","\t    d3_interpolateTranslate(a.translate, b.translate, s, q);\n","\t    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n","\t    d3_interpolateSkew(a.skew, b.skew, s, q);\n","\t    d3_interpolateScale(a.scale, b.scale, s, q);\n","\t    a = b = null;\n","\t    return function(t) {\n","\t      var i = -1, n = q.length, o;\n","\t      while (++i < n) s[(o = q[i]).i] = o.x(t);\n","\t      return s.join(\"\");\n","\t    };\n","\t  }\n","\t  function d3_uninterpolateNumber(a, b) {\n","\t    b = (b -= a = +a) || 1 / b;\n","\t    return function(x) {\n","\t      return (x - a) / b;\n","\t    };\n","\t  }\n","\t  function d3_uninterpolateClamp(a, b) {\n","\t    b = (b -= a = +a) || 1 / b;\n","\t    return function(x) {\n","\t      return Math.max(0, Math.min(1, (x - a) / b));\n","\t    };\n","\t  }\n","\t  d3.layout = {};\n","\t  d3.layout.bundle = function() {\n","\t    return function(links) {\n","\t      var paths = [], i = -1, n = links.length;\n","\t      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n","\t      return paths;\n","\t    };\n","\t  };\n","\t  function d3_layout_bundlePath(link) {\n","\t    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n","\t    while (start !== lca) {\n","\t      start = start.parent;\n","\t      points.push(start);\n","\t    }\n","\t    var k = points.length;\n","\t    while (end !== lca) {\n","\t      points.splice(k, 0, end);\n","\t      end = end.parent;\n","\t    }\n","\t    return points;\n","\t  }\n","\t  function d3_layout_bundleAncestors(node) {\n","\t    var ancestors = [], parent = node.parent;\n","\t    while (parent != null) {\n","\t      ancestors.push(node);\n","\t      node = parent;\n","\t      parent = parent.parent;\n","\t    }\n","\t    ancestors.push(node);\n","\t    return ancestors;\n","\t  }\n","\t  function d3_layout_bundleLeastCommonAncestor(a, b) {\n","\t    if (a === b) return a;\n","\t    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n","\t    while (aNode === bNode) {\n","\t      sharedNode = aNode;\n","\t      aNode = aNodes.pop();\n","\t      bNode = bNodes.pop();\n","\t    }\n","\t    return sharedNode;\n","\t  }\n","\t  d3.layout.chord = function() {\n","\t    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n","\t    function relayout() {\n","\t      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n","\t      chords = [];\n","\t      groups = [];\n","\t      k = 0, i = -1;\n","\t      while (++i < n) {\n","\t        x = 0, j = -1;\n","\t        while (++j < n) {\n","\t          x += matrix[i][j];\n","\t        }\n","\t        groupSums.push(x);\n","\t        subgroupIndex.push(d3.range(n));\n","\t        k += x;\n","\t      }\n","\t      if (sortGroups) {\n","\t        groupIndex.sort(function(a, b) {\n","\t          return sortGroups(groupSums[a], groupSums[b]);\n","\t        });\n","\t      }\n","\t      if (sortSubgroups) {\n","\t        subgroupIndex.forEach(function(d, i) {\n","\t          d.sort(function(a, b) {\n","\t            return sortSubgroups(matrix[i][a], matrix[i][b]);\n","\t          });\n","\t        });\n","\t      }\n","\t      k = (τ - padding * n) / k;\n","\t      x = 0, i = -1;\n","\t      while (++i < n) {\n","\t        x0 = x, j = -1;\n","\t        while (++j < n) {\n","\t          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n","\t          subgroups[di + \"-\" + dj] = {\n","\t            index: di,\n","\t            subindex: dj,\n","\t            startAngle: a0,\n","\t            endAngle: a1,\n","\t            value: v\n","\t          };\n","\t        }\n","\t        groups[di] = {\n","\t          index: di,\n","\t          startAngle: x0,\n","\t          endAngle: x,\n","\t          value: groupSums[di]\n","\t        };\n","\t        x += padding;\n","\t      }\n","\t      i = -1;\n","\t      while (++i < n) {\n","\t        j = i - 1;\n","\t        while (++j < n) {\n","\t          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n","\t          if (source.value || target.value) {\n","\t            chords.push(source.value < target.value ? {\n","\t              source: target,\n","\t              target: source\n","\t            } : {\n","\t              source: source,\n","\t              target: target\n","\t            });\n","\t          }\n","\t        }\n","\t      }\n","\t      if (sortChords) resort();\n","\t    }\n","\t    function resort() {\n","\t      chords.sort(function(a, b) {\n","\t        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n","\t      });\n","\t    }\n","\t    chord.matrix = function(x) {\n","\t      if (!arguments.length) return matrix;\n","\t      n = (matrix = x) && matrix.length;\n","\t      chords = groups = null;\n","\t      return chord;\n","\t    };\n","\t    chord.padding = function(x) {\n","\t      if (!arguments.length) return padding;\n","\t      padding = x;\n","\t      chords = groups = null;\n","\t      return chord;\n","\t    };\n","\t    chord.sortGroups = function(x) {\n","\t      if (!arguments.length) return sortGroups;\n","\t      sortGroups = x;\n","\t      chords = groups = null;\n","\t      return chord;\n","\t    };\n","\t    chord.sortSubgroups = function(x) {\n","\t      if (!arguments.length) return sortSubgroups;\n","\t      sortSubgroups = x;\n","\t      chords = null;\n","\t      return chord;\n","\t    };\n","\t    chord.sortChords = function(x) {\n","\t      if (!arguments.length) return sortChords;\n","\t      sortChords = x;\n","\t      if (chords) resort();\n","\t      return chord;\n","\t    };\n","\t    chord.chords = function() {\n","\t      if (!chords) relayout();\n","\t      return chords;\n","\t    };\n","\t    chord.groups = function() {\n","\t      if (!groups) relayout();\n","\t      return groups;\n","\t    };\n","\t    return chord;\n","\t  };\n","\t  d3.layout.force = function() {\n","\t    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n","\t    function repulse(node) {\n","\t      return function(quad, x1, _, x2) {\n","\t        if (quad.point !== node) {\n","\t          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n","\t          if (dw * dw / theta2 < dn) {\n","\t            if (dn < chargeDistance2) {\n","\t              var k = quad.charge / dn;\n","\t              node.px -= dx * k;\n","\t              node.py -= dy * k;\n","\t            }\n","\t            return true;\n","\t          }\n","\t          if (quad.point && dn && dn < chargeDistance2) {\n","\t            var k = quad.pointCharge / dn;\n","\t            node.px -= dx * k;\n","\t            node.py -= dy * k;\n","\t          }\n","\t        }\n","\t        return !quad.charge;\n","\t      };\n","\t    }\n","\t    force.tick = function() {\n","\t      if ((alpha *= .99) < .005) {\n","\t        timer = null;\n","\t        event.end({\n","\t          type: \"end\",\n","\t          alpha: alpha = 0\n","\t        });\n","\t        return true;\n","\t      }\n","\t      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n","\t      for (i = 0; i < m; ++i) {\n","\t        o = links[i];\n","\t        s = o.source;\n","\t        t = o.target;\n","\t        x = t.x - s.x;\n","\t        y = t.y - s.y;\n","\t        if (l = x * x + y * y) {\n","\t          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n","\t          x *= l;\n","\t          y *= l;\n","\t          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n","\t          t.y -= y * k;\n","\t          s.x += x * (k = 1 - k);\n","\t          s.y += y * k;\n","\t        }\n","\t      }\n","\t      if (k = alpha * gravity) {\n","\t        x = size[0] / 2;\n","\t        y = size[1] / 2;\n","\t        i = -1;\n","\t        if (k) while (++i < n) {\n","\t          o = nodes[i];\n","\t          o.x += (x - o.x) * k;\n","\t          o.y += (y - o.y) * k;\n","\t        }\n","\t      }\n","\t      if (charge) {\n","\t        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n","\t        i = -1;\n","\t        while (++i < n) {\n","\t          if (!(o = nodes[i]).fixed) {\n","\t            q.visit(repulse(o));\n","\t          }\n","\t        }\n","\t      }\n","\t      i = -1;\n","\t      while (++i < n) {\n","\t        o = nodes[i];\n","\t        if (o.fixed) {\n","\t          o.x = o.px;\n","\t          o.y = o.py;\n","\t        } else {\n","\t          o.x -= (o.px - (o.px = o.x)) * friction;\n","\t          o.y -= (o.py - (o.py = o.y)) * friction;\n","\t        }\n","\t      }\n","\t      event.tick({\n","\t        type: \"tick\",\n","\t        alpha: alpha\n","\t      });\n","\t    };\n","\t    force.nodes = function(x) {\n","\t      if (!arguments.length) return nodes;\n","\t      nodes = x;\n","\t      return force;\n","\t    };\n","\t    force.links = function(x) {\n","\t      if (!arguments.length) return links;\n","\t      links = x;\n","\t      return force;\n","\t    };\n","\t    force.size = function(x) {\n","\t      if (!arguments.length) return size;\n","\t      size = x;\n","\t      return force;\n","\t    };\n","\t    force.linkDistance = function(x) {\n","\t      if (!arguments.length) return linkDistance;\n","\t      linkDistance = typeof x === \"function\" ? x : +x;\n","\t      return force;\n","\t    };\n","\t    force.distance = force.linkDistance;\n","\t    force.linkStrength = function(x) {\n","\t      if (!arguments.length) return linkStrength;\n","\t      linkStrength = typeof x === \"function\" ? x : +x;\n","\t      return force;\n","\t    };\n","\t    force.friction = function(x) {\n","\t      if (!arguments.length) return friction;\n","\t      friction = +x;\n","\t      return force;\n","\t    };\n","\t    force.charge = function(x) {\n","\t      if (!arguments.length) return charge;\n","\t      charge = typeof x === \"function\" ? x : +x;\n","\t      return force;\n","\t    };\n","\t    force.chargeDistance = function(x) {\n","\t      if (!arguments.length) return Math.sqrt(chargeDistance2);\n","\t      chargeDistance2 = x * x;\n","\t      return force;\n","\t    };\n","\t    force.gravity = function(x) {\n","\t      if (!arguments.length) return gravity;\n","\t      gravity = +x;\n","\t      return force;\n","\t    };\n","\t    force.theta = function(x) {\n","\t      if (!arguments.length) return Math.sqrt(theta2);\n","\t      theta2 = x * x;\n","\t      return force;\n","\t    };\n","\t    force.alpha = function(x) {\n","\t      if (!arguments.length) return alpha;\n","\t      x = +x;\n","\t      if (alpha) {\n","\t        if (x > 0) {\n","\t          alpha = x;\n","\t        } else {\n","\t          timer.c = null, timer.t = NaN, timer = null;\n","\t          event.end({\n","\t            type: \"end\",\n","\t            alpha: alpha = 0\n","\t          });\n","\t        }\n","\t      } else if (x > 0) {\n","\t        event.start({\n","\t          type: \"start\",\n","\t          alpha: alpha = x\n","\t        });\n","\t        timer = d3_timer(force.tick);\n","\t      }\n","\t      return force;\n","\t    };\n","\t    force.start = function() {\n","\t      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n","\t      for (i = 0; i < n; ++i) {\n","\t        (o = nodes[i]).index = i;\n","\t        o.weight = 0;\n","\t      }\n","\t      for (i = 0; i < m; ++i) {\n","\t        o = links[i];\n","\t        if (typeof o.source == \"number\") o.source = nodes[o.source];\n","\t        if (typeof o.target == \"number\") o.target = nodes[o.target];\n","\t        ++o.source.weight;\n","\t        ++o.target.weight;\n","\t      }\n","\t      for (i = 0; i < n; ++i) {\n","\t        o = nodes[i];\n","\t        if (isNaN(o.x)) o.x = position(\"x\", w);\n","\t        if (isNaN(o.y)) o.y = position(\"y\", h);\n","\t        if (isNaN(o.px)) o.px = o.x;\n","\t        if (isNaN(o.py)) o.py = o.y;\n","\t      }\n","\t      distances = [];\n","\t      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n","\t      strengths = [];\n","\t      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n","\t      charges = [];\n","\t      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n","\t      function position(dimension, size) {\n","\t        if (!neighbors) {\n","\t          neighbors = new Array(n);\n","\t          for (j = 0; j < n; ++j) {\n","\t            neighbors[j] = [];\n","\t          }\n","\t          for (j = 0; j < m; ++j) {\n","\t            var o = links[j];\n","\t            neighbors[o.source.index].push(o.target);\n","\t            neighbors[o.target.index].push(o.source);\n","\t          }\n","\t        }\n","\t        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n","\t        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n","\t        return Math.random() * size;\n","\t      }\n","\t      return force.resume();\n","\t    };\n","\t    force.resume = function() {\n","\t      return force.alpha(.1);\n","\t    };\n","\t    force.stop = function() {\n","\t      return force.alpha(0);\n","\t    };\n","\t    force.drag = function() {\n","\t      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n","\t      if (!arguments.length) return drag;\n","\t      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n","\t    };\n","\t    function dragmove(d) {\n","\t      d.px = d3.event.x, d.py = d3.event.y;\n","\t      force.resume();\n","\t    }\n","\t    return d3.rebind(force, event, \"on\");\n","\t  };\n","\t  function d3_layout_forceDragstart(d) {\n","\t    d.fixed |= 2;\n","\t  }\n","\t  function d3_layout_forceDragend(d) {\n","\t    d.fixed &= ~6;\n","\t  }\n","\t  function d3_layout_forceMouseover(d) {\n","\t    d.fixed |= 4;\n","\t    d.px = d.x, d.py = d.y;\n","\t  }\n","\t  function d3_layout_forceMouseout(d) {\n","\t    d.fixed &= ~4;\n","\t  }\n","\t  function d3_layout_forceAccumulate(quad, alpha, charges) {\n","\t    var cx = 0, cy = 0;\n","\t    quad.charge = 0;\n","\t    if (!quad.leaf) {\n","\t      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n","\t      while (++i < n) {\n","\t        c = nodes[i];\n","\t        if (c == null) continue;\n","\t        d3_layout_forceAccumulate(c, alpha, charges);\n","\t        quad.charge += c.charge;\n","\t        cx += c.charge * c.cx;\n","\t        cy += c.charge * c.cy;\n","\t      }\n","\t    }\n","\t    if (quad.point) {\n","\t      if (!quad.leaf) {\n","\t        quad.point.x += Math.random() - .5;\n","\t        quad.point.y += Math.random() - .5;\n","\t      }\n","\t      var k = alpha * charges[quad.point.index];\n","\t      quad.charge += quad.pointCharge = k;\n","\t      cx += k * quad.point.x;\n","\t      cy += k * quad.point.y;\n","\t    }\n","\t    quad.cx = cx / quad.charge;\n","\t    quad.cy = cy / quad.charge;\n","\t  }\n","\t  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n","\t  d3.layout.hierarchy = function() {\n","\t    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n","\t    function hierarchy(root) {\n","\t      var stack = [ root ], nodes = [], node;\n","\t      root.depth = 0;\n","\t      while ((node = stack.pop()) != null) {\n","\t        nodes.push(node);\n","\t        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n","\t          var n, childs, child;\n","\t          while (--n >= 0) {\n","\t            stack.push(child = childs[n]);\n","\t            child.parent = node;\n","\t            child.depth = node.depth + 1;\n","\t          }\n","\t          if (value) node.value = 0;\n","\t          node.children = childs;\n","\t        } else {\n","\t          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n","\t          delete node.children;\n","\t        }\n","\t      }\n","\t      d3_layout_hierarchyVisitAfter(root, function(node) {\n","\t        var childs, parent;\n","\t        if (sort && (childs = node.children)) childs.sort(sort);\n","\t        if (value && (parent = node.parent)) parent.value += node.value;\n","\t      });\n","\t      return nodes;\n","\t    }\n","\t    hierarchy.sort = function(x) {\n","\t      if (!arguments.length) return sort;\n","\t      sort = x;\n","\t      return hierarchy;\n","\t    };\n","\t    hierarchy.children = function(x) {\n","\t      if (!arguments.length) return children;\n","\t      children = x;\n","\t      return hierarchy;\n","\t    };\n","\t    hierarchy.value = function(x) {\n","\t      if (!arguments.length) return value;\n","\t      value = x;\n","\t      return hierarchy;\n","\t    };\n","\t    hierarchy.revalue = function(root) {\n","\t      if (value) {\n","\t        d3_layout_hierarchyVisitBefore(root, function(node) {\n","\t          if (node.children) node.value = 0;\n","\t        });\n","\t        d3_layout_hierarchyVisitAfter(root, function(node) {\n","\t          var parent;\n","\t          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n","\t          if (parent = node.parent) parent.value += node.value;\n","\t        });\n","\t      }\n","\t      return root;\n","\t    };\n","\t    return hierarchy;\n","\t  };\n","\t  function d3_layout_hierarchyRebind(object, hierarchy) {\n","\t    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n","\t    object.nodes = object;\n","\t    object.links = d3_layout_hierarchyLinks;\n","\t    return object;\n","\t  }\n","\t  function d3_layout_hierarchyVisitBefore(node, callback) {\n","\t    var nodes = [ node ];\n","\t    while ((node = nodes.pop()) != null) {\n","\t      callback(node);\n","\t      if ((children = node.children) && (n = children.length)) {\n","\t        var n, children;\n","\t        while (--n >= 0) nodes.push(children[n]);\n","\t      }\n","\t    }\n","\t  }\n","\t  function d3_layout_hierarchyVisitAfter(node, callback) {\n","\t    var nodes = [ node ], nodes2 = [];\n","\t    while ((node = nodes.pop()) != null) {\n","\t      nodes2.push(node);\n","\t      if ((children = node.children) && (n = children.length)) {\n","\t        var i = -1, n, children;\n","\t        while (++i < n) nodes.push(children[i]);\n","\t      }\n","\t    }\n","\t    while ((node = nodes2.pop()) != null) {\n","\t      callback(node);\n","\t    }\n","\t  }\n","\t  function d3_layout_hierarchyChildren(d) {\n","\t    return d.children;\n","\t  }\n","\t  function d3_layout_hierarchyValue(d) {\n","\t    return d.value;\n","\t  }\n","\t  function d3_layout_hierarchySort(a, b) {\n","\t    return b.value - a.value;\n","\t  }\n","\t  function d3_layout_hierarchyLinks(nodes) {\n","\t    return d3.merge(nodes.map(function(parent) {\n","\t      return (parent.children || []).map(function(child) {\n","\t        return {\n","\t          source: parent,\n","\t          target: child\n","\t        };\n","\t      });\n","\t    }));\n","\t  }\n","\t  d3.layout.partition = function() {\n","\t    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n","\t    function position(node, x, dx, dy) {\n","\t      var children = node.children;\n","\t      node.x = x;\n","\t      node.y = node.depth * dy;\n","\t      node.dx = dx;\n","\t      node.dy = dy;\n","\t      if (children && (n = children.length)) {\n","\t        var i = -1, n, c, d;\n","\t        dx = node.value ? dx / node.value : 0;\n","\t        while (++i < n) {\n","\t          position(c = children[i], x, d = c.value * dx, dy);\n","\t          x += d;\n","\t        }\n","\t      }\n","\t    }\n","\t    function depth(node) {\n","\t      var children = node.children, d = 0;\n","\t      if (children && (n = children.length)) {\n","\t        var i = -1, n;\n","\t        while (++i < n) d = Math.max(d, depth(children[i]));\n","\t      }\n","\t      return 1 + d;\n","\t    }\n","\t    function partition(d, i) {\n","\t      var nodes = hierarchy.call(this, d, i);\n","\t      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n","\t      return nodes;\n","\t    }\n","\t    partition.size = function(x) {\n","\t      if (!arguments.length) return size;\n","\t      size = x;\n","\t      return partition;\n","\t    };\n","\t    return d3_layout_hierarchyRebind(partition, hierarchy);\n","\t  };\n","\t  d3.layout.pie = function() {\n","\t    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n","\t    function pie(data) {\n","\t      var n = data.length, values = data.map(function(d, i) {\n","\t        return +value.call(pie, d, i);\n","\t      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n","\t      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n","\t        return values[j] - values[i];\n","\t      } : function(i, j) {\n","\t        return sort(data[i], data[j]);\n","\t      });\n","\t      index.forEach(function(i) {\n","\t        arcs[i] = {\n","\t          data: data[i],\n","\t          value: v = values[i],\n","\t          startAngle: a,\n","\t          endAngle: a += v * k + pa,\n","\t          padAngle: p\n","\t        };\n","\t      });\n","\t      return arcs;\n","\t    }\n","\t    pie.value = function(_) {\n","\t      if (!arguments.length) return value;\n","\t      value = _;\n","\t      return pie;\n","\t    };\n","\t    pie.sort = function(_) {\n","\t      if (!arguments.length) return sort;\n","\t      sort = _;\n","\t      return pie;\n","\t    };\n","\t    pie.startAngle = function(_) {\n","\t      if (!arguments.length) return startAngle;\n","\t      startAngle = _;\n","\t      return pie;\n","\t    };\n","\t    pie.endAngle = function(_) {\n","\t      if (!arguments.length) return endAngle;\n","\t      endAngle = _;\n","\t      return pie;\n","\t    };\n","\t    pie.padAngle = function(_) {\n","\t      if (!arguments.length) return padAngle;\n","\t      padAngle = _;\n","\t      return pie;\n","\t    };\n","\t    return pie;\n","\t  };\n","\t  var d3_layout_pieSortByValue = {};\n","\t  d3.layout.stack = function() {\n","\t    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n","\t    function stack(data, index) {\n","\t      if (!(n = data.length)) return data;\n","\t      var series = data.map(function(d, i) {\n","\t        return values.call(stack, d, i);\n","\t      });\n","\t      var points = series.map(function(d) {\n","\t        return d.map(function(v, i) {\n","\t          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n","\t        });\n","\t      });\n","\t      var orders = order.call(stack, points, index);\n","\t      series = d3.permute(series, orders);\n","\t      points = d3.permute(points, orders);\n","\t      var offsets = offset.call(stack, points, index);\n","\t      var m = series[0].length, n, i, j, o;\n","\t      for (j = 0; j < m; ++j) {\n","\t        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n","\t        for (i = 1; i < n; ++i) {\n","\t          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n","\t        }\n","\t      }\n","\t      return data;\n","\t    }\n","\t    stack.values = function(x) {\n","\t      if (!arguments.length) return values;\n","\t      values = x;\n","\t      return stack;\n","\t    };\n","\t    stack.order = function(x) {\n","\t      if (!arguments.length) return order;\n","\t      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n","\t      return stack;\n","\t    };\n","\t    stack.offset = function(x) {\n","\t      if (!arguments.length) return offset;\n","\t      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n","\t      return stack;\n","\t    };\n","\t    stack.x = function(z) {\n","\t      if (!arguments.length) return x;\n","\t      x = z;\n","\t      return stack;\n","\t    };\n","\t    stack.y = function(z) {\n","\t      if (!arguments.length) return y;\n","\t      y = z;\n","\t      return stack;\n","\t    };\n","\t    stack.out = function(z) {\n","\t      if (!arguments.length) return out;\n","\t      out = z;\n","\t      return stack;\n","\t    };\n","\t    return stack;\n","\t  };\n","\t  function d3_layout_stackX(d) {\n","\t    return d.x;\n","\t  }\n","\t  function d3_layout_stackY(d) {\n","\t    return d.y;\n","\t  }\n","\t  function d3_layout_stackOut(d, y0, y) {\n","\t    d.y0 = y0;\n","\t    d.y = y;\n","\t  }\n","\t  var d3_layout_stackOrders = d3.map({\n","\t    \"inside-out\": function(data) {\n","\t      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n","\t        return max[a] - max[b];\n","\t      }), top = 0, bottom = 0, tops = [], bottoms = [];\n","\t      for (i = 0; i < n; ++i) {\n","\t        j = index[i];\n","\t        if (top < bottom) {\n","\t          top += sums[j];\n","\t          tops.push(j);\n","\t        } else {\n","\t          bottom += sums[j];\n","\t          bottoms.push(j);\n","\t        }\n","\t      }\n","\t      return bottoms.reverse().concat(tops);\n","\t    },\n","\t    reverse: function(data) {\n","\t      return d3.range(data.length).reverse();\n","\t    },\n","\t    \"default\": d3_layout_stackOrderDefault\n","\t  });\n","\t  var d3_layout_stackOffsets = d3.map({\n","\t    silhouette: function(data) {\n","\t      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n","\t      for (j = 0; j < m; ++j) {\n","\t        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n","\t        if (o > max) max = o;\n","\t        sums.push(o);\n","\t      }\n","\t      for (j = 0; j < m; ++j) {\n","\t        y0[j] = (max - sums[j]) / 2;\n","\t      }\n","\t      return y0;\n","\t    },\n","\t    wiggle: function(data) {\n","\t      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n","\t      y0[0] = o = o0 = 0;\n","\t      for (j = 1; j < m; ++j) {\n","\t        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n","\t        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n","\t          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n","\t            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n","\t          }\n","\t          s2 += s3 * data[i][j][1];\n","\t        }\n","\t        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n","\t        if (o < o0) o0 = o;\n","\t      }\n","\t      for (j = 0; j < m; ++j) y0[j] -= o0;\n","\t      return y0;\n","\t    },\n","\t    expand: function(data) {\n","\t      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n","\t      for (j = 0; j < m; ++j) {\n","\t        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n","\t        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n","\t      }\n","\t      for (j = 0; j < m; ++j) y0[j] = 0;\n","\t      return y0;\n","\t    },\n","\t    zero: d3_layout_stackOffsetZero\n","\t  });\n","\t  function d3_layout_stackOrderDefault(data) {\n","\t    return d3.range(data.length);\n","\t  }\n","\t  function d3_layout_stackOffsetZero(data) {\n","\t    var j = -1, m = data[0].length, y0 = [];\n","\t    while (++j < m) y0[j] = 0;\n","\t    return y0;\n","\t  }\n","\t  function d3_layout_stackMaxIndex(array) {\n","\t    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n","\t    for (;i < n; ++i) {\n","\t      if ((k = array[i][1]) > v) {\n","\t        j = i;\n","\t        v = k;\n","\t      }\n","\t    }\n","\t    return j;\n","\t  }\n","\t  function d3_layout_stackReduceSum(d) {\n","\t    return d.reduce(d3_layout_stackSum, 0);\n","\t  }\n","\t  function d3_layout_stackSum(p, d) {\n","\t    return p + d[1];\n","\t  }\n","\t  d3.layout.histogram = function() {\n","\t    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n","\t    function histogram(data, i) {\n","\t      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n","\t      while (++i < m) {\n","\t        bin = bins[i] = [];\n","\t        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n","\t        bin.y = 0;\n","\t      }\n","\t      if (m > 0) {\n","\t        i = -1;\n","\t        while (++i < n) {\n","\t          x = values[i];\n","\t          if (x >= range[0] && x <= range[1]) {\n","\t            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n","\t            bin.y += k;\n","\t            bin.push(data[i]);\n","\t          }\n","\t        }\n","\t      }\n","\t      return bins;\n","\t    }\n","\t    histogram.value = function(x) {\n","\t      if (!arguments.length) return valuer;\n","\t      valuer = x;\n","\t      return histogram;\n","\t    };\n","\t    histogram.range = function(x) {\n","\t      if (!arguments.length) return ranger;\n","\t      ranger = d3_functor(x);\n","\t      return histogram;\n","\t    };\n","\t    histogram.bins = function(x) {\n","\t      if (!arguments.length) return binner;\n","\t      binner = typeof x === \"number\" ? function(range) {\n","\t        return d3_layout_histogramBinFixed(range, x);\n","\t      } : d3_functor(x);\n","\t      return histogram;\n","\t    };\n","\t    histogram.frequency = function(x) {\n","\t      if (!arguments.length) return frequency;\n","\t      frequency = !!x;\n","\t      return histogram;\n","\t    };\n","\t    return histogram;\n","\t  };\n","\t  function d3_layout_histogramBinSturges(range, values) {\n","\t    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n","\t  }\n","\t  function d3_layout_histogramBinFixed(range, n) {\n","\t    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n","\t    while (++x <= n) f[x] = m * x + b;\n","\t    return f;\n","\t  }\n","\t  function d3_layout_histogramRange(values) {\n","\t    return [ d3.min(values), d3.max(values) ];\n","\t  }\n","\t  d3.layout.pack = function() {\n","\t    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n","\t    function pack(d, i) {\n","\t      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n","\t        return radius;\n","\t      };\n","\t      root.x = root.y = 0;\n","\t      d3_layout_hierarchyVisitAfter(root, function(d) {\n","\t        d.r = +r(d.value);\n","\t      });\n","\t      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n","\t      if (padding) {\n","\t        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n","\t        d3_layout_hierarchyVisitAfter(root, function(d) {\n","\t          d.r += dr;\n","\t        });\n","\t        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n","\t        d3_layout_hierarchyVisitAfter(root, function(d) {\n","\t          d.r -= dr;\n","\t        });\n","\t      }\n","\t      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n","\t      return nodes;\n","\t    }\n","\t    pack.size = function(_) {\n","\t      if (!arguments.length) return size;\n","\t      size = _;\n","\t      return pack;\n","\t    };\n","\t    pack.radius = function(_) {\n","\t      if (!arguments.length) return radius;\n","\t      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n","\t      return pack;\n","\t    };\n","\t    pack.padding = function(_) {\n","\t      if (!arguments.length) return padding;\n","\t      padding = +_;\n","\t      return pack;\n","\t    };\n","\t    return d3_layout_hierarchyRebind(pack, hierarchy);\n","\t  };\n","\t  function d3_layout_packSort(a, b) {\n","\t    return a.value - b.value;\n","\t  }\n","\t  function d3_layout_packInsert(a, b) {\n","\t    var c = a._pack_next;\n","\t    a._pack_next = b;\n","\t    b._pack_prev = a;\n","\t    b._pack_next = c;\n","\t    c._pack_prev = b;\n","\t  }\n","\t  function d3_layout_packSplice(a, b) {\n","\t    a._pack_next = b;\n","\t    b._pack_prev = a;\n","\t  }\n","\t  function d3_layout_packIntersects(a, b) {\n","\t    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n","\t    return .999 * dr * dr > dx * dx + dy * dy;\n","\t  }\n","\t  function d3_layout_packSiblings(node) {\n","\t    if (!(nodes = node.children) || !(n = nodes.length)) return;\n","\t    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n","\t    function bound(node) {\n","\t      xMin = Math.min(node.x - node.r, xMin);\n","\t      xMax = Math.max(node.x + node.r, xMax);\n","\t      yMin = Math.min(node.y - node.r, yMin);\n","\t      yMax = Math.max(node.y + node.r, yMax);\n","\t    }\n","\t    nodes.forEach(d3_layout_packLink);\n","\t    a = nodes[0];\n","\t    a.x = -a.r;\n","\t    a.y = 0;\n","\t    bound(a);\n","\t    if (n > 1) {\n","\t      b = nodes[1];\n","\t      b.x = b.r;\n","\t      b.y = 0;\n","\t      bound(b);\n","\t      if (n > 2) {\n","\t        c = nodes[2];\n","\t        d3_layout_packPlace(a, b, c);\n","\t        bound(c);\n","\t        d3_layout_packInsert(a, c);\n","\t        a._pack_prev = c;\n","\t        d3_layout_packInsert(c, b);\n","\t        b = a._pack_next;\n","\t        for (i = 3; i < n; i++) {\n","\t          d3_layout_packPlace(a, b, c = nodes[i]);\n","\t          var isect = 0, s1 = 1, s2 = 1;\n","\t          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n","\t            if (d3_layout_packIntersects(j, c)) {\n","\t              isect = 1;\n","\t              break;\n","\t            }\n","\t          }\n","\t          if (isect == 1) {\n","\t            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n","\t              if (d3_layout_packIntersects(k, c)) {\n","\t                break;\n","\t              }\n","\t            }\n","\t          }\n","\t          if (isect) {\n","\t            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n","\t            i--;\n","\t          } else {\n","\t            d3_layout_packInsert(a, c);\n","\t            b = c;\n","\t            bound(c);\n","\t          }\n","\t        }\n","\t      }\n","\t    }\n","\t    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n","\t    for (i = 0; i < n; i++) {\n","\t      c = nodes[i];\n","\t      c.x -= cx;\n","\t      c.y -= cy;\n","\t      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n","\t    }\n","\t    node.r = cr;\n","\t    nodes.forEach(d3_layout_packUnlink);\n","\t  }\n","\t  function d3_layout_packLink(node) {\n","\t    node._pack_next = node._pack_prev = node;\n","\t  }\n","\t  function d3_layout_packUnlink(node) {\n","\t    delete node._pack_next;\n","\t    delete node._pack_prev;\n","\t  }\n","\t  function d3_layout_packTransform(node, x, y, k) {\n","\t    var children = node.children;\n","\t    node.x = x += k * node.x;\n","\t    node.y = y += k * node.y;\n","\t    node.r *= k;\n","\t    if (children) {\n","\t      var i = -1, n = children.length;\n","\t      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n","\t    }\n","\t  }\n","\t  function d3_layout_packPlace(a, b, c) {\n","\t    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n","\t    if (db && (dx || dy)) {\n","\t      var da = b.r + c.r, dc = dx * dx + dy * dy;\n","\t      da *= da;\n","\t      db *= db;\n","\t      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n","\t      c.x = a.x + x * dx + y * dy;\n","\t      c.y = a.y + x * dy - y * dx;\n","\t    } else {\n","\t      c.x = a.x + db;\n","\t      c.y = a.y;\n","\t    }\n","\t  }\n","\t  d3.layout.tree = function() {\n","\t    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n","\t    function tree(d, i) {\n","\t      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n","\t      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n","\t      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n","\t      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n","\t        var left = root0, right = root0, bottom = root0;\n","\t        d3_layout_hierarchyVisitBefore(root0, function(node) {\n","\t          if (node.x < left.x) left = node;\n","\t          if (node.x > right.x) right = node;\n","\t          if (node.depth > bottom.depth) bottom = node;\n","\t        });\n","\t        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n","\t        d3_layout_hierarchyVisitBefore(root0, function(node) {\n","\t          node.x = (node.x + tx) * kx;\n","\t          node.y = node.depth * ky;\n","\t        });\n","\t      }\n","\t      return nodes;\n","\t    }\n","\t    function wrapTree(root0) {\n","\t      var root1 = {\n","\t        A: null,\n","\t        children: [ root0 ]\n","\t      }, queue = [ root1 ], node1;\n","\t      while ((node1 = queue.pop()) != null) {\n","\t        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n","\t          queue.push((children[i] = child = {\n","\t            _: children[i],\n","\t            parent: node1,\n","\t            children: (child = children[i].children) && child.slice() || [],\n","\t            A: null,\n","\t            a: null,\n","\t            z: 0,\n","\t            m: 0,\n","\t            c: 0,\n","\t            s: 0,\n","\t            t: null,\n","\t            i: i\n","\t          }).a = child);\n","\t        }\n","\t      }\n","\t      return root1.children[0];\n","\t    }\n","\t    function firstWalk(v) {\n","\t      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n","\t      if (children.length) {\n","\t        d3_layout_treeShift(v);\n","\t        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n","\t        if (w) {\n","\t          v.z = w.z + separation(v._, w._);\n","\t          v.m = v.z - midpoint;\n","\t        } else {\n","\t          v.z = midpoint;\n","\t        }\n","\t      } else if (w) {\n","\t        v.z = w.z + separation(v._, w._);\n","\t      }\n","\t      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n","\t    }\n","\t    function secondWalk(v) {\n","\t      v._.x = v.z + v.parent.m;\n","\t      v.m += v.parent.m;\n","\t    }\n","\t    function apportion(v, w, ancestor) {\n","\t      if (w) {\n","\t        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n","\t        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n","\t          vom = d3_layout_treeLeft(vom);\n","\t          vop = d3_layout_treeRight(vop);\n","\t          vop.a = v;\n","\t          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n","\t          if (shift > 0) {\n","\t            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n","\t            sip += shift;\n","\t            sop += shift;\n","\t          }\n","\t          sim += vim.m;\n","\t          sip += vip.m;\n","\t          som += vom.m;\n","\t          sop += vop.m;\n","\t        }\n","\t        if (vim && !d3_layout_treeRight(vop)) {\n","\t          vop.t = vim;\n","\t          vop.m += sim - sop;\n","\t        }\n","\t        if (vip && !d3_layout_treeLeft(vom)) {\n","\t          vom.t = vip;\n","\t          vom.m += sip - som;\n","\t          ancestor = v;\n","\t        }\n","\t      }\n","\t      return ancestor;\n","\t    }\n","\t    function sizeNode(node) {\n","\t      node.x *= size[0];\n","\t      node.y = node.depth * size[1];\n","\t    }\n","\t    tree.separation = function(x) {\n","\t      if (!arguments.length) return separation;\n","\t      separation = x;\n","\t      return tree;\n","\t    };\n","\t    tree.size = function(x) {\n","\t      if (!arguments.length) return nodeSize ? null : size;\n","\t      nodeSize = (size = x) == null ? sizeNode : null;\n","\t      return tree;\n","\t    };\n","\t    tree.nodeSize = function(x) {\n","\t      if (!arguments.length) return nodeSize ? size : null;\n","\t      nodeSize = (size = x) == null ? null : sizeNode;\n","\t      return tree;\n","\t    };\n","\t    return d3_layout_hierarchyRebind(tree, hierarchy);\n","\t  };\n","\t  function d3_layout_treeSeparation(a, b) {\n","\t    return a.parent == b.parent ? 1 : 2;\n","\t  }\n","\t  function d3_layout_treeLeft(v) {\n","\t    var children = v.children;\n","\t    return children.length ? children[0] : v.t;\n","\t  }\n","\t  function d3_layout_treeRight(v) {\n","\t    var children = v.children, n;\n","\t    return (n = children.length) ? children[n - 1] : v.t;\n","\t  }\n","\t  function d3_layout_treeMove(wm, wp, shift) {\n","\t    var change = shift / (wp.i - wm.i);\n","\t    wp.c -= change;\n","\t    wp.s += shift;\n","\t    wm.c += change;\n","\t    wp.z += shift;\n","\t    wp.m += shift;\n","\t  }\n","\t  function d3_layout_treeShift(v) {\n","\t    var shift = 0, change = 0, children = v.children, i = children.length, w;\n","\t    while (--i >= 0) {\n","\t      w = children[i];\n","\t      w.z += shift;\n","\t      w.m += shift;\n","\t      shift += w.s + (change += w.c);\n","\t    }\n","\t  }\n","\t  function d3_layout_treeAncestor(vim, v, ancestor) {\n","\t    return vim.a.parent === v.parent ? vim.a : ancestor;\n","\t  }\n","\t  d3.layout.cluster = function() {\n","\t    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n","\t    function cluster(d, i) {\n","\t      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n","\t      d3_layout_hierarchyVisitAfter(root, function(node) {\n","\t        var children = node.children;\n","\t        if (children && children.length) {\n","\t          node.x = d3_layout_clusterX(children);\n","\t          node.y = d3_layout_clusterY(children);\n","\t        } else {\n","\t          node.x = previousNode ? x += separation(node, previousNode) : 0;\n","\t          node.y = 0;\n","\t          previousNode = node;\n","\t        }\n","\t      });\n","\t      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n","\t      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n","\t        node.x = (node.x - root.x) * size[0];\n","\t        node.y = (root.y - node.y) * size[1];\n","\t      } : function(node) {\n","\t        node.x = (node.x - x0) / (x1 - x0) * size[0];\n","\t        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n","\t      });\n","\t      return nodes;\n","\t    }\n","\t    cluster.separation = function(x) {\n","\t      if (!arguments.length) return separation;\n","\t      separation = x;\n","\t      return cluster;\n","\t    };\n","\t    cluster.size = function(x) {\n","\t      if (!arguments.length) return nodeSize ? null : size;\n","\t      nodeSize = (size = x) == null;\n","\t      return cluster;\n","\t    };\n","\t    cluster.nodeSize = function(x) {\n","\t      if (!arguments.length) return nodeSize ? size : null;\n","\t      nodeSize = (size = x) != null;\n","\t      return cluster;\n","\t    };\n","\t    return d3_layout_hierarchyRebind(cluster, hierarchy);\n","\t  };\n","\t  function d3_layout_clusterY(children) {\n","\t    return 1 + d3.max(children, function(child) {\n","\t      return child.y;\n","\t    });\n","\t  }\n","\t  function d3_layout_clusterX(children) {\n","\t    return children.reduce(function(x, child) {\n","\t      return x + child.x;\n","\t    }, 0) / children.length;\n","\t  }\n","\t  function d3_layout_clusterLeft(node) {\n","\t    var children = node.children;\n","\t    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n","\t  }\n","\t  function d3_layout_clusterRight(node) {\n","\t    var children = node.children, n;\n","\t    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n","\t  }\n","\t  d3.layout.treemap = function() {\n","\t    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n","\t    function scale(children, k) {\n","\t      var i = -1, n = children.length, child, area;\n","\t      while (++i < n) {\n","\t        area = (child = children[i]).value * (k < 0 ? 0 : k);\n","\t        child.area = isNaN(area) || area <= 0 ? 0 : area;\n","\t      }\n","\t    }\n","\t    function squarify(node) {\n","\t      var children = node.children;\n","\t      if (children && children.length) {\n","\t        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n","\t        scale(remaining, rect.dx * rect.dy / node.value);\n","\t        row.area = 0;\n","\t        while ((n = remaining.length) > 0) {\n","\t          row.push(child = remaining[n - 1]);\n","\t          row.area += child.area;\n","\t          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n","\t            remaining.pop();\n","\t            best = score;\n","\t          } else {\n","\t            row.area -= row.pop().area;\n","\t            position(row, u, rect, false);\n","\t            u = Math.min(rect.dx, rect.dy);\n","\t            row.length = row.area = 0;\n","\t            best = Infinity;\n","\t          }\n","\t        }\n","\t        if (row.length) {\n","\t          position(row, u, rect, true);\n","\t          row.length = row.area = 0;\n","\t        }\n","\t        children.forEach(squarify);\n","\t      }\n","\t    }\n","\t    function stickify(node) {\n","\t      var children = node.children;\n","\t      if (children && children.length) {\n","\t        var rect = pad(node), remaining = children.slice(), child, row = [];\n","\t        scale(remaining, rect.dx * rect.dy / node.value);\n","\t        row.area = 0;\n","\t        while (child = remaining.pop()) {\n","\t          row.push(child);\n","\t          row.area += child.area;\n","\t          if (child.z != null) {\n","\t            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n","\t            row.length = row.area = 0;\n","\t          }\n","\t        }\n","\t        children.forEach(stickify);\n","\t      }\n","\t    }\n","\t    function worst(row, u) {\n","\t      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n","\t      while (++i < n) {\n","\t        if (!(r = row[i].area)) continue;\n","\t        if (r < rmin) rmin = r;\n","\t        if (r > rmax) rmax = r;\n","\t      }\n","\t      s *= s;\n","\t      u *= u;\n","\t      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n","\t    }\n","\t    function position(row, u, rect, flush) {\n","\t      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n","\t      if (u == rect.dx) {\n","\t        if (flush || v > rect.dy) v = rect.dy;\n","\t        while (++i < n) {\n","\t          o = row[i];\n","\t          o.x = x;\n","\t          o.y = y;\n","\t          o.dy = v;\n","\t          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n","\t        }\n","\t        o.z = true;\n","\t        o.dx += rect.x + rect.dx - x;\n","\t        rect.y += v;\n","\t        rect.dy -= v;\n","\t      } else {\n","\t        if (flush || v > rect.dx) v = rect.dx;\n","\t        while (++i < n) {\n","\t          o = row[i];\n","\t          o.x = x;\n","\t          o.y = y;\n","\t          o.dx = v;\n","\t          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n","\t        }\n","\t        o.z = false;\n","\t        o.dy += rect.y + rect.dy - y;\n","\t        rect.x += v;\n","\t        rect.dx -= v;\n","\t      }\n","\t    }\n","\t    function treemap(d) {\n","\t      var nodes = stickies || hierarchy(d), root = nodes[0];\n","\t      root.x = root.y = 0;\n","\t      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n","\t      if (stickies) hierarchy.revalue(root);\n","\t      scale([ root ], root.dx * root.dy / root.value);\n","\t      (stickies ? stickify : squarify)(root);\n","\t      if (sticky) stickies = nodes;\n","\t      return nodes;\n","\t    }\n","\t    treemap.size = function(x) {\n","\t      if (!arguments.length) return size;\n","\t      size = x;\n","\t      return treemap;\n","\t    };\n","\t    treemap.padding = function(x) {\n","\t      if (!arguments.length) return padding;\n","\t      function padFunction(node) {\n","\t        var p = x.call(treemap, node, node.depth);\n","\t        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n","\t      }\n","\t      function padConstant(node) {\n","\t        return d3_layout_treemapPad(node, x);\n","\t      }\n","\t      var type;\n","\t      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n","\t      padConstant) : padConstant;\n","\t      return treemap;\n","\t    };\n","\t    treemap.round = function(x) {\n","\t      if (!arguments.length) return round != Number;\n","\t      round = x ? Math.round : Number;\n","\t      return treemap;\n","\t    };\n","\t    treemap.sticky = function(x) {\n","\t      if (!arguments.length) return sticky;\n","\t      sticky = x;\n","\t      stickies = null;\n","\t      return treemap;\n","\t    };\n","\t    treemap.ratio = function(x) {\n","\t      if (!arguments.length) return ratio;\n","\t      ratio = x;\n","\t      return treemap;\n","\t    };\n","\t    treemap.mode = function(x) {\n","\t      if (!arguments.length) return mode;\n","\t      mode = x + \"\";\n","\t      return treemap;\n","\t    };\n","\t    return d3_layout_hierarchyRebind(treemap, hierarchy);\n","\t  };\n","\t  function d3_layout_treemapPadNull(node) {\n","\t    return {\n","\t      x: node.x,\n","\t      y: node.y,\n","\t      dx: node.dx,\n","\t      dy: node.dy\n","\t    };\n","\t  }\n","\t  function d3_layout_treemapPad(node, padding) {\n","\t    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n","\t    if (dx < 0) {\n","\t      x += dx / 2;\n","\t      dx = 0;\n","\t    }\n","\t    if (dy < 0) {\n","\t      y += dy / 2;\n","\t      dy = 0;\n","\t    }\n","\t    return {\n","\t      x: x,\n","\t      y: y,\n","\t      dx: dx,\n","\t      dy: dy\n","\t    };\n","\t  }\n","\t  d3.random = {\n","\t    normal: function(µ, σ) {\n","\t      var n = arguments.length;\n","\t      if (n < 2) σ = 1;\n","\t      if (n < 1) µ = 0;\n","\t      return function() {\n","\t        var x, y, r;\n","\t        do {\n","\t          x = Math.random() * 2 - 1;\n","\t          y = Math.random() * 2 - 1;\n","\t          r = x * x + y * y;\n","\t        } while (!r || r > 1);\n","\t        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n","\t      };\n","\t    },\n","\t    logNormal: function() {\n","\t      var random = d3.random.normal.apply(d3, arguments);\n","\t      return function() {\n","\t        return Math.exp(random());\n","\t      };\n","\t    },\n","\t    bates: function(m) {\n","\t      var random = d3.random.irwinHall(m);\n","\t      return function() {\n","\t        return random() / m;\n","\t      };\n","\t    },\n","\t    irwinHall: function(m) {\n","\t      return function() {\n","\t        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n","\t        return s;\n","\t      };\n","\t    }\n","\t  };\n","\t  d3.scale = {};\n","\t  function d3_scaleExtent(domain) {\n","\t    var start = domain[0], stop = domain[domain.length - 1];\n","\t    return start < stop ? [ start, stop ] : [ stop, start ];\n","\t  }\n","\t  function d3_scaleRange(scale) {\n","\t    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n","\t  }\n","\t  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n","\t    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n","\t    return function(x) {\n","\t      return i(u(x));\n","\t    };\n","\t  }\n","\t  function d3_scale_nice(domain, nice) {\n","\t    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n","\t    if (x1 < x0) {\n","\t      dx = i0, i0 = i1, i1 = dx;\n","\t      dx = x0, x0 = x1, x1 = dx;\n","\t    }\n","\t    domain[i0] = nice.floor(x0);\n","\t    domain[i1] = nice.ceil(x1);\n","\t    return domain;\n","\t  }\n","\t  function d3_scale_niceStep(step) {\n","\t    return step ? {\n","\t      floor: function(x) {\n","\t        return Math.floor(x / step) * step;\n","\t      },\n","\t      ceil: function(x) {\n","\t        return Math.ceil(x / step) * step;\n","\t      }\n","\t    } : d3_scale_niceIdentity;\n","\t  }\n","\t  var d3_scale_niceIdentity = {\n","\t    floor: d3_identity,\n","\t    ceil: d3_identity\n","\t  };\n","\t  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n","\t    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n","\t    if (domain[k] < domain[0]) {\n","\t      domain = domain.slice().reverse();\n","\t      range = range.slice().reverse();\n","\t    }\n","\t    while (++j <= k) {\n","\t      u.push(uninterpolate(domain[j - 1], domain[j]));\n","\t      i.push(interpolate(range[j - 1], range[j]));\n","\t    }\n","\t    return function(x) {\n","\t      var j = d3.bisect(domain, x, 1, k) - 1;\n","\t      return i[j](u[j](x));\n","\t    };\n","\t  }\n","\t  d3.scale.linear = function() {\n","\t    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n","\t  };\n","\t  function d3_scale_linear(domain, range, interpolate, clamp) {\n","\t    var output, input;\n","\t    function rescale() {\n","\t      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n","\t      output = linear(domain, range, uninterpolate, interpolate);\n","\t      input = linear(range, domain, uninterpolate, d3_interpolate);\n","\t      return scale;\n","\t    }\n","\t    function scale(x) {\n","\t      return output(x);\n","\t    }\n","\t    scale.invert = function(y) {\n","\t      return input(y);\n","\t    };\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      domain = x.map(Number);\n","\t      return rescale();\n","\t    };\n","\t    scale.range = function(x) {\n","\t      if (!arguments.length) return range;\n","\t      range = x;\n","\t      return rescale();\n","\t    };\n","\t    scale.rangeRound = function(x) {\n","\t      return scale.range(x).interpolate(d3_interpolateRound);\n","\t    };\n","\t    scale.clamp = function(x) {\n","\t      if (!arguments.length) return clamp;\n","\t      clamp = x;\n","\t      return rescale();\n","\t    };\n","\t    scale.interpolate = function(x) {\n","\t      if (!arguments.length) return interpolate;\n","\t      interpolate = x;\n","\t      return rescale();\n","\t    };\n","\t    scale.ticks = function(m) {\n","\t      return d3_scale_linearTicks(domain, m);\n","\t    };\n","\t    scale.tickFormat = function(m, format) {\n","\t      return d3_scale_linearTickFormat(domain, m, format);\n","\t    };\n","\t    scale.nice = function(m) {\n","\t      d3_scale_linearNice(domain, m);\n","\t      return rescale();\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_linear(domain, range, interpolate, clamp);\n","\t    };\n","\t    return rescale();\n","\t  }\n","\t  function d3_scale_linearRebind(scale, linear) {\n","\t    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n","\t  }\n","\t  function d3_scale_linearNice(domain, m) {\n","\t    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n","\t    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n","\t    return domain;\n","\t  }\n","\t  function d3_scale_linearTickRange(domain, m) {\n","\t    if (m == null) m = 10;\n","\t    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n","\t    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n","\t    extent[0] = Math.ceil(extent[0] / step) * step;\n","\t    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n","\t    extent[2] = step;\n","\t    return extent;\n","\t  }\n","\t  function d3_scale_linearTicks(domain, m) {\n","\t    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n","\t  }\n","\t  function d3_scale_linearTickFormat(domain, m, format) {\n","\t    var range = d3_scale_linearTickRange(domain, m);\n","\t    if (format) {\n","\t      var match = d3_format_re.exec(format);\n","\t      match.shift();\n","\t      if (match[8] === \"s\") {\n","\t        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n","\t        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n","\t        match[8] = \"f\";\n","\t        format = d3.format(match.join(\"\"));\n","\t        return function(d) {\n","\t          return format(prefix.scale(d)) + prefix.symbol;\n","\t        };\n","\t      }\n","\t      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n","\t      format = match.join(\"\");\n","\t    } else {\n","\t      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n","\t    }\n","\t    return d3.format(format);\n","\t  }\n","\t  var d3_scale_linearFormatSignificant = {\n","\t    s: 1,\n","\t    g: 1,\n","\t    p: 1,\n","\t    r: 1,\n","\t    e: 1\n","\t  };\n","\t  function d3_scale_linearPrecision(value) {\n","\t    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n","\t  }\n","\t  function d3_scale_linearFormatPrecision(type, range) {\n","\t    var p = d3_scale_linearPrecision(range[2]);\n","\t    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n","\t  }\n","\t  d3.scale.log = function() {\n","\t    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n","\t  };\n","\t  function d3_scale_log(linear, base, positive, domain) {\n","\t    function log(x) {\n","\t      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n","\t    }\n","\t    function pow(x) {\n","\t      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n","\t    }\n","\t    function scale(x) {\n","\t      return linear(log(x));\n","\t    }\n","\t    scale.invert = function(x) {\n","\t      return pow(linear.invert(x));\n","\t    };\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      positive = x[0] >= 0;\n","\t      linear.domain((domain = x.map(Number)).map(log));\n","\t      return scale;\n","\t    };\n","\t    scale.base = function(_) {\n","\t      if (!arguments.length) return base;\n","\t      base = +_;\n","\t      linear.domain(domain.map(log));\n","\t      return scale;\n","\t    };\n","\t    scale.nice = function() {\n","\t      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n","\t      linear.domain(niced);\n","\t      domain = niced.map(pow);\n","\t      return scale;\n","\t    };\n","\t    scale.ticks = function() {\n","\t      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n","\t      if (isFinite(j - i)) {\n","\t        if (positive) {\n","\t          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n","\t          ticks.push(pow(i));\n","\t        } else {\n","\t          ticks.push(pow(i));\n","\t          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n","\t        }\n","\t        for (i = 0; ticks[i] < u; i++) {}\n","\t        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n","\t        ticks = ticks.slice(i, j);\n","\t      }\n","\t      return ticks;\n","\t    };\n","\t    scale.tickFormat = function(n, format) {\n","\t      if (!arguments.length) return d3_scale_logFormat;\n","\t      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n","\t      var k = Math.max(1, base * n / scale.ticks().length);\n","\t      return function(d) {\n","\t        var i = d / pow(Math.round(log(d)));\n","\t        if (i * base < base - .5) i *= base;\n","\t        return i <= k ? format(d) : \"\";\n","\t      };\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_log(linear.copy(), base, positive, domain);\n","\t    };\n","\t    return d3_scale_linearRebind(scale, linear);\n","\t  }\n","\t  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n","\t    floor: function(x) {\n","\t      return -Math.ceil(-x);\n","\t    },\n","\t    ceil: function(x) {\n","\t      return -Math.floor(-x);\n","\t    }\n","\t  };\n","\t  d3.scale.pow = function() {\n","\t    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n","\t  };\n","\t  function d3_scale_pow(linear, exponent, domain) {\n","\t    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n","\t    function scale(x) {\n","\t      return linear(powp(x));\n","\t    }\n","\t    scale.invert = function(x) {\n","\t      return powb(linear.invert(x));\n","\t    };\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      linear.domain((domain = x.map(Number)).map(powp));\n","\t      return scale;\n","\t    };\n","\t    scale.ticks = function(m) {\n","\t      return d3_scale_linearTicks(domain, m);\n","\t    };\n","\t    scale.tickFormat = function(m, format) {\n","\t      return d3_scale_linearTickFormat(domain, m, format);\n","\t    };\n","\t    scale.nice = function(m) {\n","\t      return scale.domain(d3_scale_linearNice(domain, m));\n","\t    };\n","\t    scale.exponent = function(x) {\n","\t      if (!arguments.length) return exponent;\n","\t      powp = d3_scale_powPow(exponent = x);\n","\t      powb = d3_scale_powPow(1 / exponent);\n","\t      linear.domain(domain.map(powp));\n","\t      return scale;\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_pow(linear.copy(), exponent, domain);\n","\t    };\n","\t    return d3_scale_linearRebind(scale, linear);\n","\t  }\n","\t  function d3_scale_powPow(e) {\n","\t    return function(x) {\n","\t      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n","\t    };\n","\t  }\n","\t  d3.scale.sqrt = function() {\n","\t    return d3.scale.pow().exponent(.5);\n","\t  };\n","\t  d3.scale.ordinal = function() {\n","\t    return d3_scale_ordinal([], {\n","\t      t: \"range\",\n","\t      a: [ [] ]\n","\t    });\n","\t  };\n","\t  function d3_scale_ordinal(domain, ranger) {\n","\t    var index, range, rangeBand;\n","\t    function scale(x) {\n","\t      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n","\t    }\n","\t    function steps(start, step) {\n","\t      return d3.range(domain.length).map(function(i) {\n","\t        return start + step * i;\n","\t      });\n","\t    }\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      domain = [];\n","\t      index = new d3_Map();\n","\t      var i = -1, n = x.length, xi;\n","\t      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n","\t      return scale[ranger.t].apply(scale, ranger.a);\n","\t    };\n","\t    scale.range = function(x) {\n","\t      if (!arguments.length) return range;\n","\t      range = x;\n","\t      rangeBand = 0;\n","\t      ranger = {\n","\t        t: \"range\",\n","\t        a: arguments\n","\t      };\n","\t      return scale;\n","\t    };\n","\t    scale.rangePoints = function(x, padding) {\n","\t      if (arguments.length < 2) padding = 0;\n","\t      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n","\t      0) : (stop - start) / (domain.length - 1 + padding);\n","\t      range = steps(start + step * padding / 2, step);\n","\t      rangeBand = 0;\n","\t      ranger = {\n","\t        t: \"rangePoints\",\n","\t        a: arguments\n","\t      };\n","\t      return scale;\n","\t    };\n","\t    scale.rangeRoundPoints = function(x, padding) {\n","\t      if (arguments.length < 2) padding = 0;\n","\t      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n","\t      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n","\t      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n","\t      rangeBand = 0;\n","\t      ranger = {\n","\t        t: \"rangeRoundPoints\",\n","\t        a: arguments\n","\t      };\n","\t      return scale;\n","\t    };\n","\t    scale.rangeBands = function(x, padding, outerPadding) {\n","\t      if (arguments.length < 2) padding = 0;\n","\t      if (arguments.length < 3) outerPadding = padding;\n","\t      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n","\t      range = steps(start + step * outerPadding, step);\n","\t      if (reverse) range.reverse();\n","\t      rangeBand = step * (1 - padding);\n","\t      ranger = {\n","\t        t: \"rangeBands\",\n","\t        a: arguments\n","\t      };\n","\t      return scale;\n","\t    };\n","\t    scale.rangeRoundBands = function(x, padding, outerPadding) {\n","\t      if (arguments.length < 2) padding = 0;\n","\t      if (arguments.length < 3) outerPadding = padding;\n","\t      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n","\t      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n","\t      if (reverse) range.reverse();\n","\t      rangeBand = Math.round(step * (1 - padding));\n","\t      ranger = {\n","\t        t: \"rangeRoundBands\",\n","\t        a: arguments\n","\t      };\n","\t      return scale;\n","\t    };\n","\t    scale.rangeBand = function() {\n","\t      return rangeBand;\n","\t    };\n","\t    scale.rangeExtent = function() {\n","\t      return d3_scaleExtent(ranger.a[0]);\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_ordinal(domain, ranger);\n","\t    };\n","\t    return scale.domain(domain);\n","\t  }\n","\t  d3.scale.category10 = function() {\n","\t    return d3.scale.ordinal().range(d3_category10);\n","\t  };\n","\t  d3.scale.category20 = function() {\n","\t    return d3.scale.ordinal().range(d3_category20);\n","\t  };\n","\t  d3.scale.category20b = function() {\n","\t    return d3.scale.ordinal().range(d3_category20b);\n","\t  };\n","\t  d3.scale.category20c = function() {\n","\t    return d3.scale.ordinal().range(d3_category20c);\n","\t  };\n","\t  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n","\t  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n","\t  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n","\t  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n","\t  d3.scale.quantile = function() {\n","\t    return d3_scale_quantile([], []);\n","\t  };\n","\t  function d3_scale_quantile(domain, range) {\n","\t    var thresholds;\n","\t    function rescale() {\n","\t      var k = 0, q = range.length;\n","\t      thresholds = [];\n","\t      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n","\t      return scale;\n","\t    }\n","\t    function scale(x) {\n","\t      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n","\t    }\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n","\t      return rescale();\n","\t    };\n","\t    scale.range = function(x) {\n","\t      if (!arguments.length) return range;\n","\t      range = x;\n","\t      return rescale();\n","\t    };\n","\t    scale.quantiles = function() {\n","\t      return thresholds;\n","\t    };\n","\t    scale.invertExtent = function(y) {\n","\t      y = range.indexOf(y);\n","\t      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_quantile(domain, range);\n","\t    };\n","\t    return rescale();\n","\t  }\n","\t  d3.scale.quantize = function() {\n","\t    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n","\t  };\n","\t  function d3_scale_quantize(x0, x1, range) {\n","\t    var kx, i;\n","\t    function scale(x) {\n","\t      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n","\t    }\n","\t    function rescale() {\n","\t      kx = range.length / (x1 - x0);\n","\t      i = range.length - 1;\n","\t      return scale;\n","\t    }\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return [ x0, x1 ];\n","\t      x0 = +x[0];\n","\t      x1 = +x[x.length - 1];\n","\t      return rescale();\n","\t    };\n","\t    scale.range = function(x) {\n","\t      if (!arguments.length) return range;\n","\t      range = x;\n","\t      return rescale();\n","\t    };\n","\t    scale.invertExtent = function(y) {\n","\t      y = range.indexOf(y);\n","\t      y = y < 0 ? NaN : y / kx + x0;\n","\t      return [ y, y + 1 / kx ];\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_quantize(x0, x1, range);\n","\t    };\n","\t    return rescale();\n","\t  }\n","\t  d3.scale.threshold = function() {\n","\t    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n","\t  };\n","\t  function d3_scale_threshold(domain, range) {\n","\t    function scale(x) {\n","\t      if (x <= x) return range[d3.bisect(domain, x)];\n","\t    }\n","\t    scale.domain = function(_) {\n","\t      if (!arguments.length) return domain;\n","\t      domain = _;\n","\t      return scale;\n","\t    };\n","\t    scale.range = function(_) {\n","\t      if (!arguments.length) return range;\n","\t      range = _;\n","\t      return scale;\n","\t    };\n","\t    scale.invertExtent = function(y) {\n","\t      y = range.indexOf(y);\n","\t      return [ domain[y - 1], domain[y] ];\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_scale_threshold(domain, range);\n","\t    };\n","\t    return scale;\n","\t  }\n","\t  d3.scale.identity = function() {\n","\t    return d3_scale_identity([ 0, 1 ]);\n","\t  };\n","\t  function d3_scale_identity(domain) {\n","\t    function identity(x) {\n","\t      return +x;\n","\t    }\n","\t    identity.invert = identity;\n","\t    identity.domain = identity.range = function(x) {\n","\t      if (!arguments.length) return domain;\n","\t      domain = x.map(identity);\n","\t      return identity;\n","\t    };\n","\t    identity.ticks = function(m) {\n","\t      return d3_scale_linearTicks(domain, m);\n","\t    };\n","\t    identity.tickFormat = function(m, format) {\n","\t      return d3_scale_linearTickFormat(domain, m, format);\n","\t    };\n","\t    identity.copy = function() {\n","\t      return d3_scale_identity(domain);\n","\t    };\n","\t    return identity;\n","\t  }\n","\t  d3.svg = {};\n","\t  function d3_zero() {\n","\t    return 0;\n","\t  }\n","\t  d3.svg.arc = function() {\n","\t    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n","\t    function arc() {\n","\t      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n","\t      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n","\t      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n","\t      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n","\t      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n","\t        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n","\t        if (!cw) p1 *= -1;\n","\t        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n","\t        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n","\t      }\n","\t      if (r1) {\n","\t        x0 = r1 * Math.cos(a0 + p1);\n","\t        y0 = r1 * Math.sin(a0 + p1);\n","\t        x1 = r1 * Math.cos(a1 - p1);\n","\t        y1 = r1 * Math.sin(a1 - p1);\n","\t        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n","\t        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n","\t          var h1 = (a0 + a1) / 2;\n","\t          x0 = r1 * Math.cos(h1);\n","\t          y0 = r1 * Math.sin(h1);\n","\t          x1 = y1 = null;\n","\t        }\n","\t      } else {\n","\t        x0 = y0 = 0;\n","\t      }\n","\t      if (r0) {\n","\t        x2 = r0 * Math.cos(a1 - p0);\n","\t        y2 = r0 * Math.sin(a1 - p0);\n","\t        x3 = r0 * Math.cos(a0 + p0);\n","\t        y3 = r0 * Math.sin(a0 + p0);\n","\t        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n","\t        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n","\t          var h0 = (a0 + a1) / 2;\n","\t          x2 = r0 * Math.cos(h0);\n","\t          y2 = r0 * Math.sin(h0);\n","\t          x3 = y3 = null;\n","\t        }\n","\t      } else {\n","\t        x2 = y2 = 0;\n","\t      }\n","\t      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n","\t        cr = r0 < r1 ^ cw ? 0 : 1;\n","\t        var rc1 = rc, rc0 = rc;\n","\t        if (da < π) {\n","\t          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n","\t          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n","\t          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n","\t        }\n","\t        if (x1 != null) {\n","\t          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n","\t          if (rc === rc1) {\n","\t            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n","\t          } else {\n","\t            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n","\t          }\n","\t        } else {\n","\t          path.push(\"M\", x0, \",\", y0);\n","\t        }\n","\t        if (x3 != null) {\n","\t          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n","\t          if (rc === rc0) {\n","\t            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n","\t          } else {\n","\t            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n","\t          }\n","\t        } else {\n","\t          path.push(\"L\", x2, \",\", y2);\n","\t        }\n","\t      } else {\n","\t        path.push(\"M\", x0, \",\", y0);\n","\t        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n","\t        path.push(\"L\", x2, \",\", y2);\n","\t        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n","\t      }\n","\t      path.push(\"Z\");\n","\t      return path.join(\"\");\n","\t    }\n","\t    function circleSegment(r1, cw) {\n","\t      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n","\t    }\n","\t    arc.innerRadius = function(v) {\n","\t      if (!arguments.length) return innerRadius;\n","\t      innerRadius = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.outerRadius = function(v) {\n","\t      if (!arguments.length) return outerRadius;\n","\t      outerRadius = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.cornerRadius = function(v) {\n","\t      if (!arguments.length) return cornerRadius;\n","\t      cornerRadius = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.padRadius = function(v) {\n","\t      if (!arguments.length) return padRadius;\n","\t      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.startAngle = function(v) {\n","\t      if (!arguments.length) return startAngle;\n","\t      startAngle = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.endAngle = function(v) {\n","\t      if (!arguments.length) return endAngle;\n","\t      endAngle = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.padAngle = function(v) {\n","\t      if (!arguments.length) return padAngle;\n","\t      padAngle = d3_functor(v);\n","\t      return arc;\n","\t    };\n","\t    arc.centroid = function() {\n","\t      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n","\t      return [ Math.cos(a) * r, Math.sin(a) * r ];\n","\t    };\n","\t    return arc;\n","\t  };\n","\t  var d3_svg_arcAuto = \"auto\";\n","\t  function d3_svg_arcInnerRadius(d) {\n","\t    return d.innerRadius;\n","\t  }\n","\t  function d3_svg_arcOuterRadius(d) {\n","\t    return d.outerRadius;\n","\t  }\n","\t  function d3_svg_arcStartAngle(d) {\n","\t    return d.startAngle;\n","\t  }\n","\t  function d3_svg_arcEndAngle(d) {\n","\t    return d.endAngle;\n","\t  }\n","\t  function d3_svg_arcPadAngle(d) {\n","\t    return d && d.padAngle;\n","\t  }\n","\t  function d3_svg_arcSweep(x0, y0, x1, y1) {\n","\t    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n","\t  }\n","\t  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n","\t    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n","\t    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n","\t    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n","\t  }\n","\t  function d3_svg_line(projection) {\n","\t    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n","\t    function line(data) {\n","\t      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n","\t      function segment() {\n","\t        segments.push(\"M\", interpolate(projection(points), tension));\n","\t      }\n","\t      while (++i < n) {\n","\t        if (defined.call(this, d = data[i], i)) {\n","\t          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n","\t        } else if (points.length) {\n","\t          segment();\n","\t          points = [];\n","\t        }\n","\t      }\n","\t      if (points.length) segment();\n","\t      return segments.length ? segments.join(\"\") : null;\n","\t    }\n","\t    line.x = function(_) {\n","\t      if (!arguments.length) return x;\n","\t      x = _;\n","\t      return line;\n","\t    };\n","\t    line.y = function(_) {\n","\t      if (!arguments.length) return y;\n","\t      y = _;\n","\t      return line;\n","\t    };\n","\t    line.defined = function(_) {\n","\t      if (!arguments.length) return defined;\n","\t      defined = _;\n","\t      return line;\n","\t    };\n","\t    line.interpolate = function(_) {\n","\t      if (!arguments.length) return interpolateKey;\n","\t      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n","\t      return line;\n","\t    };\n","\t    line.tension = function(_) {\n","\t      if (!arguments.length) return tension;\n","\t      tension = _;\n","\t      return line;\n","\t    };\n","\t    return line;\n","\t  }\n","\t  d3.svg.line = function() {\n","\t    return d3_svg_line(d3_identity);\n","\t  };\n","\t  var d3_svg_lineInterpolators = d3.map({\n","\t    linear: d3_svg_lineLinear,\n","\t    \"linear-closed\": d3_svg_lineLinearClosed,\n","\t    step: d3_svg_lineStep,\n","\t    \"step-before\": d3_svg_lineStepBefore,\n","\t    \"step-after\": d3_svg_lineStepAfter,\n","\t    basis: d3_svg_lineBasis,\n","\t    \"basis-open\": d3_svg_lineBasisOpen,\n","\t    \"basis-closed\": d3_svg_lineBasisClosed,\n","\t    bundle: d3_svg_lineBundle,\n","\t    cardinal: d3_svg_lineCardinal,\n","\t    \"cardinal-open\": d3_svg_lineCardinalOpen,\n","\t    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n","\t    monotone: d3_svg_lineMonotone\n","\t  });\n","\t  d3_svg_lineInterpolators.forEach(function(key, value) {\n","\t    value.key = key;\n","\t    value.closed = /-closed$/.test(key);\n","\t  });\n","\t  function d3_svg_lineLinear(points) {\n","\t    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n","\t  }\n","\t  function d3_svg_lineLinearClosed(points) {\n","\t    return points.join(\"L\") + \"Z\";\n","\t  }\n","\t  function d3_svg_lineStep(points) {\n","\t    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n","\t    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n","\t    if (n > 1) path.push(\"H\", p[0]);\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineStepBefore(points) {\n","\t    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n","\t    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineStepAfter(points) {\n","\t    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n","\t    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineCardinalOpen(points, tension) {\n","\t    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n","\t  }\n","\t  function d3_svg_lineCardinalClosed(points, tension) {\n","\t    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n","\t    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n","\t  }\n","\t  function d3_svg_lineCardinal(points, tension) {\n","\t    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n","\t  }\n","\t  function d3_svg_lineHermite(points, tangents) {\n","\t    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n","\t      return d3_svg_lineLinear(points);\n","\t    }\n","\t    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n","\t    if (quad) {\n","\t      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n","\t      p0 = points[1];\n","\t      pi = 2;\n","\t    }\n","\t    if (tangents.length > 1) {\n","\t      t = tangents[1];\n","\t      p = points[pi];\n","\t      pi++;\n","\t      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n","\t      for (var i = 2; i < tangents.length; i++, pi++) {\n","\t        p = points[pi];\n","\t        t = tangents[i];\n","\t        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n","\t      }\n","\t    }\n","\t    if (quad) {\n","\t      var lp = points[pi];\n","\t      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n","\t    }\n","\t    return path;\n","\t  }\n","\t  function d3_svg_lineCardinalTangents(points, tension) {\n","\t    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n","\t    while (++i < n) {\n","\t      p0 = p1;\n","\t      p1 = p2;\n","\t      p2 = points[i];\n","\t      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n","\t    }\n","\t    return tangents;\n","\t  }\n","\t  function d3_svg_lineBasis(points) {\n","\t    if (points.length < 3) return d3_svg_lineLinear(points);\n","\t    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n","\t    points.push(points[n - 1]);\n","\t    while (++i <= n) {\n","\t      pi = points[i];\n","\t      px.shift();\n","\t      px.push(pi[0]);\n","\t      py.shift();\n","\t      py.push(pi[1]);\n","\t      d3_svg_lineBasisBezier(path, px, py);\n","\t    }\n","\t    points.pop();\n","\t    path.push(\"L\", pi);\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineBasisOpen(points) {\n","\t    if (points.length < 4) return d3_svg_lineLinear(points);\n","\t    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n","\t    while (++i < 3) {\n","\t      pi = points[i];\n","\t      px.push(pi[0]);\n","\t      py.push(pi[1]);\n","\t    }\n","\t    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n","\t    --i;\n","\t    while (++i < n) {\n","\t      pi = points[i];\n","\t      px.shift();\n","\t      px.push(pi[0]);\n","\t      py.shift();\n","\t      py.push(pi[1]);\n","\t      d3_svg_lineBasisBezier(path, px, py);\n","\t    }\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineBasisClosed(points) {\n","\t    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n","\t    while (++i < 4) {\n","\t      pi = points[i % n];\n","\t      px.push(pi[0]);\n","\t      py.push(pi[1]);\n","\t    }\n","\t    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n","\t    --i;\n","\t    while (++i < m) {\n","\t      pi = points[i % n];\n","\t      px.shift();\n","\t      px.push(pi[0]);\n","\t      py.shift();\n","\t      py.push(pi[1]);\n","\t      d3_svg_lineBasisBezier(path, px, py);\n","\t    }\n","\t    return path.join(\"\");\n","\t  }\n","\t  function d3_svg_lineBundle(points, tension) {\n","\t    var n = points.length - 1;\n","\t    if (n) {\n","\t      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n","\t      while (++i <= n) {\n","\t        p = points[i];\n","\t        t = i / n;\n","\t        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n","\t        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n","\t      }\n","\t    }\n","\t    return d3_svg_lineBasis(points);\n","\t  }\n","\t  function d3_svg_lineDot4(a, b) {\n","\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n","\t  }\n","\t  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n","\t  function d3_svg_lineBasisBezier(path, x, y) {\n","\t    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n","\t  }\n","\t  function d3_svg_lineSlope(p0, p1) {\n","\t    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n","\t  }\n","\t  function d3_svg_lineFiniteDifferences(points) {\n","\t    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n","\t    while (++i < j) {\n","\t      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n","\t    }\n","\t    m[i] = d;\n","\t    return m;\n","\t  }\n","\t  function d3_svg_lineMonotoneTangents(points) {\n","\t    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n","\t    while (++i < j) {\n","\t      d = d3_svg_lineSlope(points[i], points[i + 1]);\n","\t      if (abs(d) < ε) {\n","\t        m[i] = m[i + 1] = 0;\n","\t      } else {\n","\t        a = m[i] / d;\n","\t        b = m[i + 1] / d;\n","\t        s = a * a + b * b;\n","\t        if (s > 9) {\n","\t          s = d * 3 / Math.sqrt(s);\n","\t          m[i] = s * a;\n","\t          m[i + 1] = s * b;\n","\t        }\n","\t      }\n","\t    }\n","\t    i = -1;\n","\t    while (++i <= j) {\n","\t      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n","\t      tangents.push([ s || 0, m[i] * s || 0 ]);\n","\t    }\n","\t    return tangents;\n","\t  }\n","\t  function d3_svg_lineMonotone(points) {\n","\t    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n","\t  }\n","\t  d3.svg.line.radial = function() {\n","\t    var line = d3_svg_line(d3_svg_lineRadial);\n","\t    line.radius = line.x, delete line.x;\n","\t    line.angle = line.y, delete line.y;\n","\t    return line;\n","\t  };\n","\t  function d3_svg_lineRadial(points) {\n","\t    var point, i = -1, n = points.length, r, a;\n","\t    while (++i < n) {\n","\t      point = points[i];\n","\t      r = point[0];\n","\t      a = point[1] - halfπ;\n","\t      point[0] = r * Math.cos(a);\n","\t      point[1] = r * Math.sin(a);\n","\t    }\n","\t    return points;\n","\t  }\n","\t  function d3_svg_area(projection) {\n","\t    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n","\t    function area(data) {\n","\t      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n","\t        return x;\n","\t      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n","\t        return y;\n","\t      } : d3_functor(y1), x, y;\n","\t      function segment() {\n","\t        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n","\t      }\n","\t      while (++i < n) {\n","\t        if (defined.call(this, d = data[i], i)) {\n","\t          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n","\t          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n","\t        } else if (points0.length) {\n","\t          segment();\n","\t          points0 = [];\n","\t          points1 = [];\n","\t        }\n","\t      }\n","\t      if (points0.length) segment();\n","\t      return segments.length ? segments.join(\"\") : null;\n","\t    }\n","\t    area.x = function(_) {\n","\t      if (!arguments.length) return x1;\n","\t      x0 = x1 = _;\n","\t      return area;\n","\t    };\n","\t    area.x0 = function(_) {\n","\t      if (!arguments.length) return x0;\n","\t      x0 = _;\n","\t      return area;\n","\t    };\n","\t    area.x1 = function(_) {\n","\t      if (!arguments.length) return x1;\n","\t      x1 = _;\n","\t      return area;\n","\t    };\n","\t    area.y = function(_) {\n","\t      if (!arguments.length) return y1;\n","\t      y0 = y1 = _;\n","\t      return area;\n","\t    };\n","\t    area.y0 = function(_) {\n","\t      if (!arguments.length) return y0;\n","\t      y0 = _;\n","\t      return area;\n","\t    };\n","\t    area.y1 = function(_) {\n","\t      if (!arguments.length) return y1;\n","\t      y1 = _;\n","\t      return area;\n","\t    };\n","\t    area.defined = function(_) {\n","\t      if (!arguments.length) return defined;\n","\t      defined = _;\n","\t      return area;\n","\t    };\n","\t    area.interpolate = function(_) {\n","\t      if (!arguments.length) return interpolateKey;\n","\t      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n","\t      interpolateReverse = interpolate.reverse || interpolate;\n","\t      L = interpolate.closed ? \"M\" : \"L\";\n","\t      return area;\n","\t    };\n","\t    area.tension = function(_) {\n","\t      if (!arguments.length) return tension;\n","\t      tension = _;\n","\t      return area;\n","\t    };\n","\t    return area;\n","\t  }\n","\t  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n","\t  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n","\t  d3.svg.area = function() {\n","\t    return d3_svg_area(d3_identity);\n","\t  };\n","\t  d3.svg.area.radial = function() {\n","\t    var area = d3_svg_area(d3_svg_lineRadial);\n","\t    area.radius = area.x, delete area.x;\n","\t    area.innerRadius = area.x0, delete area.x0;\n","\t    area.outerRadius = area.x1, delete area.x1;\n","\t    area.angle = area.y, delete area.y;\n","\t    area.startAngle = area.y0, delete area.y0;\n","\t    area.endAngle = area.y1, delete area.y1;\n","\t    return area;\n","\t  };\n","\t  d3.svg.chord = function() {\n","\t    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n","\t    function chord(d, i) {\n","\t      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n","\t      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n","\t    }\n","\t    function subgroup(self, f, d, i) {\n","\t      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n","\t      return {\n","\t        r: r,\n","\t        a0: a0,\n","\t        a1: a1,\n","\t        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n","\t        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n","\t      };\n","\t    }\n","\t    function equals(a, b) {\n","\t      return a.a0 == b.a0 && a.a1 == b.a1;\n","\t    }\n","\t    function arc(r, p, a) {\n","\t      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n","\t    }\n","\t    function curve(r0, p0, r1, p1) {\n","\t      return \"Q 0,0 \" + p1;\n","\t    }\n","\t    chord.radius = function(v) {\n","\t      if (!arguments.length) return radius;\n","\t      radius = d3_functor(v);\n","\t      return chord;\n","\t    };\n","\t    chord.source = function(v) {\n","\t      if (!arguments.length) return source;\n","\t      source = d3_functor(v);\n","\t      return chord;\n","\t    };\n","\t    chord.target = function(v) {\n","\t      if (!arguments.length) return target;\n","\t      target = d3_functor(v);\n","\t      return chord;\n","\t    };\n","\t    chord.startAngle = function(v) {\n","\t      if (!arguments.length) return startAngle;\n","\t      startAngle = d3_functor(v);\n","\t      return chord;\n","\t    };\n","\t    chord.endAngle = function(v) {\n","\t      if (!arguments.length) return endAngle;\n","\t      endAngle = d3_functor(v);\n","\t      return chord;\n","\t    };\n","\t    return chord;\n","\t  };\n","\t  function d3_svg_chordRadius(d) {\n","\t    return d.radius;\n","\t  }\n","\t  d3.svg.diagonal = function() {\n","\t    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n","\t    function diagonal(d, i) {\n","\t      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n","\t        x: p0.x,\n","\t        y: m\n","\t      }, {\n","\t        x: p3.x,\n","\t        y: m\n","\t      }, p3 ];\n","\t      p = p.map(projection);\n","\t      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n","\t    }\n","\t    diagonal.source = function(x) {\n","\t      if (!arguments.length) return source;\n","\t      source = d3_functor(x);\n","\t      return diagonal;\n","\t    };\n","\t    diagonal.target = function(x) {\n","\t      if (!arguments.length) return target;\n","\t      target = d3_functor(x);\n","\t      return diagonal;\n","\t    };\n","\t    diagonal.projection = function(x) {\n","\t      if (!arguments.length) return projection;\n","\t      projection = x;\n","\t      return diagonal;\n","\t    };\n","\t    return diagonal;\n","\t  };\n","\t  function d3_svg_diagonalProjection(d) {\n","\t    return [ d.x, d.y ];\n","\t  }\n","\t  d3.svg.diagonal.radial = function() {\n","\t    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n","\t    diagonal.projection = function(x) {\n","\t      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n","\t    };\n","\t    return diagonal;\n","\t  };\n","\t  function d3_svg_diagonalRadialProjection(projection) {\n","\t    return function() {\n","\t      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n","\t      return [ r * Math.cos(a), r * Math.sin(a) ];\n","\t    };\n","\t  }\n","\t  d3.svg.symbol = function() {\n","\t    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n","\t    function symbol(d, i) {\n","\t      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n","\t    }\n","\t    symbol.type = function(x) {\n","\t      if (!arguments.length) return type;\n","\t      type = d3_functor(x);\n","\t      return symbol;\n","\t    };\n","\t    symbol.size = function(x) {\n","\t      if (!arguments.length) return size;\n","\t      size = d3_functor(x);\n","\t      return symbol;\n","\t    };\n","\t    return symbol;\n","\t  };\n","\t  function d3_svg_symbolSize() {\n","\t    return 64;\n","\t  }\n","\t  function d3_svg_symbolType() {\n","\t    return \"circle\";\n","\t  }\n","\t  function d3_svg_symbolCircle(size) {\n","\t    var r = Math.sqrt(size / π);\n","\t    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n","\t  }\n","\t  var d3_svg_symbols = d3.map({\n","\t    circle: d3_svg_symbolCircle,\n","\t    cross: function(size) {\n","\t      var r = Math.sqrt(size / 5) / 2;\n","\t      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n","\t    },\n","\t    diamond: function(size) {\n","\t      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n","\t      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n","\t    },\n","\t    square: function(size) {\n","\t      var r = Math.sqrt(size) / 2;\n","\t      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n","\t    },\n","\t    \"triangle-down\": function(size) {\n","\t      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n","\t      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n","\t    },\n","\t    \"triangle-up\": function(size) {\n","\t      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n","\t      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n","\t    }\n","\t  });\n","\t  d3.svg.symbolTypes = d3_svg_symbols.keys();\n","\t  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n","\t  d3_selectionPrototype.transition = function(name) {\n","\t    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n","\t      time: Date.now(),\n","\t      ease: d3_ease_cubicInOut,\n","\t      delay: 0,\n","\t      duration: 250\n","\t    };\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      subgroups.push(subgroup = []);\n","\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n","\t        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n","\t        subgroup.push(node);\n","\t      }\n","\t    }\n","\t    return d3_transition(subgroups, ns, id);\n","\t  };\n","\t  d3_selectionPrototype.interrupt = function(name) {\n","\t    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n","\t  };\n","\t  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n","\t  function d3_selection_interruptNS(ns) {\n","\t    return function() {\n","\t      var lock, activeId, active;\n","\t      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n","\t        active.timer.c = null;\n","\t        active.timer.t = NaN;\n","\t        if (--lock.count) delete lock[activeId]; else delete this[ns];\n","\t        lock.active += .5;\n","\t        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n","\t      }\n","\t    };\n","\t  }\n","\t  function d3_transition(groups, ns, id) {\n","\t    d3_subclass(groups, d3_transitionPrototype);\n","\t    groups.namespace = ns;\n","\t    groups.id = id;\n","\t    return groups;\n","\t  }\n","\t  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n","\t  d3_transitionPrototype.call = d3_selectionPrototype.call;\n","\t  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n","\t  d3_transitionPrototype.node = d3_selectionPrototype.node;\n","\t  d3_transitionPrototype.size = d3_selectionPrototype.size;\n","\t  d3.transition = function(selection, name) {\n","\t    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n","\t  };\n","\t  d3.transition.prototype = d3_transitionPrototype;\n","\t  d3_transitionPrototype.select = function(selector) {\n","\t    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n","\t    selector = d3_selection_selector(selector);\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      subgroups.push(subgroup = []);\n","\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n","\t        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n","\t          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n","\t          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n","\t          subgroup.push(subnode);\n","\t        } else {\n","\t          subgroup.push(null);\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_transition(subgroups, ns, id);\n","\t  };\n","\t  d3_transitionPrototype.selectAll = function(selector) {\n","\t    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n","\t    selector = d3_selection_selectorAll(selector);\n","\t    for (var j = -1, m = this.length; ++j < m; ) {\n","\t      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n","\t        if (node = group[i]) {\n","\t          transition = node[ns][id];\n","\t          subnodes = selector.call(node, node.__data__, i, j);\n","\t          subgroups.push(subgroup = []);\n","\t          for (var k = -1, o = subnodes.length; ++k < o; ) {\n","\t            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n","\t            subgroup.push(subnode);\n","\t          }\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_transition(subgroups, ns, id);\n","\t  };\n","\t  d3_transitionPrototype.filter = function(filter) {\n","\t    var subgroups = [], subgroup, group, node;\n","\t    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n","\t    for (var j = 0, m = this.length; j < m; j++) {\n","\t      subgroups.push(subgroup = []);\n","\t      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n","\t        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n","\t          subgroup.push(node);\n","\t        }\n","\t      }\n","\t    }\n","\t    return d3_transition(subgroups, this.namespace, this.id);\n","\t  };\n","\t  d3_transitionPrototype.tween = function(name, tween) {\n","\t    var id = this.id, ns = this.namespace;\n","\t    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n","\t    return d3_selection_each(this, tween == null ? function(node) {\n","\t      node[ns][id].tween.remove(name);\n","\t    } : function(node) {\n","\t      node[ns][id].tween.set(name, tween);\n","\t    });\n","\t  };\n","\t  function d3_transition_tween(groups, name, value, tween) {\n","\t    var id = groups.id, ns = groups.namespace;\n","\t    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n","\t      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n","\t    } : (value = tween(value), function(node) {\n","\t      node[ns][id].tween.set(name, value);\n","\t    }));\n","\t  }\n","\t  d3_transitionPrototype.attr = function(nameNS, value) {\n","\t    if (arguments.length < 2) {\n","\t      for (value in nameNS) this.attr(value, nameNS[value]);\n","\t      return this;\n","\t    }\n","\t    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n","\t    function attrNull() {\n","\t      this.removeAttribute(name);\n","\t    }\n","\t    function attrNullNS() {\n","\t      this.removeAttributeNS(name.space, name.local);\n","\t    }\n","\t    function attrTween(b) {\n","\t      return b == null ? attrNull : (b += \"\", function() {\n","\t        var a = this.getAttribute(name), i;\n","\t        return a !== b && (i = interpolate(a, b), function(t) {\n","\t          this.setAttribute(name, i(t));\n","\t        });\n","\t      });\n","\t    }\n","\t    function attrTweenNS(b) {\n","\t      return b == null ? attrNullNS : (b += \"\", function() {\n","\t        var a = this.getAttributeNS(name.space, name.local), i;\n","\t        return a !== b && (i = interpolate(a, b), function(t) {\n","\t          this.setAttributeNS(name.space, name.local, i(t));\n","\t        });\n","\t      });\n","\t    }\n","\t    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n","\t  };\n","\t  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n","\t    var name = d3.ns.qualify(nameNS);\n","\t    function attrTween(d, i) {\n","\t      var f = tween.call(this, d, i, this.getAttribute(name));\n","\t      return f && function(t) {\n","\t        this.setAttribute(name, f(t));\n","\t      };\n","\t    }\n","\t    function attrTweenNS(d, i) {\n","\t      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n","\t      return f && function(t) {\n","\t        this.setAttributeNS(name.space, name.local, f(t));\n","\t      };\n","\t    }\n","\t    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n","\t  };\n","\t  d3_transitionPrototype.style = function(name, value, priority) {\n","\t    var n = arguments.length;\n","\t    if (n < 3) {\n","\t      if (typeof name !== \"string\") {\n","\t        if (n < 2) value = \"\";\n","\t        for (priority in name) this.style(priority, name[priority], value);\n","\t        return this;\n","\t      }\n","\t      priority = \"\";\n","\t    }\n","\t    function styleNull() {\n","\t      this.style.removeProperty(name);\n","\t    }\n","\t    function styleString(b) {\n","\t      return b == null ? styleNull : (b += \"\", function() {\n","\t        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n","\t        return a !== b && (i = d3_interpolate(a, b), function(t) {\n","\t          this.style.setProperty(name, i(t), priority);\n","\t        });\n","\t      });\n","\t    }\n","\t    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n","\t  };\n","\t  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n","\t    if (arguments.length < 3) priority = \"\";\n","\t    function styleTween(d, i) {\n","\t      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n","\t      return f && function(t) {\n","\t        this.style.setProperty(name, f(t), priority);\n","\t      };\n","\t    }\n","\t    return this.tween(\"style.\" + name, styleTween);\n","\t  };\n","\t  d3_transitionPrototype.text = function(value) {\n","\t    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n","\t  };\n","\t  function d3_transition_text(b) {\n","\t    if (b == null) b = \"\";\n","\t    return function() {\n","\t      this.textContent = b;\n","\t    };\n","\t  }\n","\t  d3_transitionPrototype.remove = function() {\n","\t    var ns = this.namespace;\n","\t    return this.each(\"end.transition\", function() {\n","\t      var p;\n","\t      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n","\t    });\n","\t  };\n","\t  d3_transitionPrototype.ease = function(value) {\n","\t    var id = this.id, ns = this.namespace;\n","\t    if (arguments.length < 1) return this.node()[ns][id].ease;\n","\t    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n","\t    return d3_selection_each(this, function(node) {\n","\t      node[ns][id].ease = value;\n","\t    });\n","\t  };\n","\t  d3_transitionPrototype.delay = function(value) {\n","\t    var id = this.id, ns = this.namespace;\n","\t    if (arguments.length < 1) return this.node()[ns][id].delay;\n","\t    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n","\t      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n","\t    } : (value = +value, function(node) {\n","\t      node[ns][id].delay = value;\n","\t    }));\n","\t  };\n","\t  d3_transitionPrototype.duration = function(value) {\n","\t    var id = this.id, ns = this.namespace;\n","\t    if (arguments.length < 1) return this.node()[ns][id].duration;\n","\t    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n","\t      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n","\t    } : (value = Math.max(1, value), function(node) {\n","\t      node[ns][id].duration = value;\n","\t    }));\n","\t  };\n","\t  d3_transitionPrototype.each = function(type, listener) {\n","\t    var id = this.id, ns = this.namespace;\n","\t    if (arguments.length < 2) {\n","\t      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n","\t      try {\n","\t        d3_transitionInheritId = id;\n","\t        d3_selection_each(this, function(node, i, j) {\n","\t          d3_transitionInherit = node[ns][id];\n","\t          type.call(node, node.__data__, i, j);\n","\t        });\n","\t      } finally {\n","\t        d3_transitionInherit = inherit;\n","\t        d3_transitionInheritId = inheritId;\n","\t      }\n","\t    } else {\n","\t      d3_selection_each(this, function(node) {\n","\t        var transition = node[ns][id];\n","\t        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n","\t      });\n","\t    }\n","\t    return this;\n","\t  };\n","\t  d3_transitionPrototype.transition = function() {\n","\t    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n","\t    for (var j = 0, m = this.length; j < m; j++) {\n","\t      subgroups.push(subgroup = []);\n","\t      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n","\t        if (node = group[i]) {\n","\t          transition = node[ns][id0];\n","\t          d3_transitionNode(node, i, ns, id1, {\n","\t            time: transition.time,\n","\t            ease: transition.ease,\n","\t            delay: transition.delay + transition.duration,\n","\t            duration: transition.duration\n","\t          });\n","\t        }\n","\t        subgroup.push(node);\n","\t      }\n","\t    }\n","\t    return d3_transition(subgroups, ns, id1);\n","\t  };\n","\t  function d3_transitionNamespace(name) {\n","\t    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n","\t  }\n","\t  function d3_transitionNode(node, i, ns, id, inherit) {\n","\t    var lock = node[ns] || (node[ns] = {\n","\t      active: 0,\n","\t      count: 0\n","\t    }), transition = lock[id], time, timer, duration, ease, tweens;\n","\t    function schedule(elapsed) {\n","\t      var delay = transition.delay;\n","\t      timer.t = delay + time;\n","\t      if (delay <= elapsed) return start(elapsed - delay);\n","\t      timer.c = start;\n","\t    }\n","\t    function start(elapsed) {\n","\t      var activeId = lock.active, active = lock[activeId];\n","\t      if (active) {\n","\t        active.timer.c = null;\n","\t        active.timer.t = NaN;\n","\t        --lock.count;\n","\t        delete lock[activeId];\n","\t        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n","\t      }\n","\t      for (var cancelId in lock) {\n","\t        if (+cancelId < id) {\n","\t          var cancel = lock[cancelId];\n","\t          cancel.timer.c = null;\n","\t          cancel.timer.t = NaN;\n","\t          --lock.count;\n","\t          delete lock[cancelId];\n","\t        }\n","\t      }\n","\t      timer.c = tick;\n","\t      d3_timer(function() {\n","\t        if (timer.c && tick(elapsed || 1)) {\n","\t          timer.c = null;\n","\t          timer.t = NaN;\n","\t        }\n","\t        return 1;\n","\t      }, 0, time);\n","\t      lock.active = id;\n","\t      transition.event && transition.event.start.call(node, node.__data__, i);\n","\t      tweens = [];\n","\t      transition.tween.forEach(function(key, value) {\n","\t        if (value = value.call(node, node.__data__, i)) {\n","\t          tweens.push(value);\n","\t        }\n","\t      });\n","\t      ease = transition.ease;\n","\t      duration = transition.duration;\n","\t    }\n","\t    function tick(elapsed) {\n","\t      var t = elapsed / duration, e = ease(t), n = tweens.length;\n","\t      while (n > 0) {\n","\t        tweens[--n].call(node, e);\n","\t      }\n","\t      if (t >= 1) {\n","\t        transition.event && transition.event.end.call(node, node.__data__, i);\n","\t        if (--lock.count) delete lock[id]; else delete node[ns];\n","\t        return 1;\n","\t      }\n","\t    }\n","\t    if (!transition) {\n","\t      time = inherit.time;\n","\t      timer = d3_timer(schedule, 0, time);\n","\t      transition = lock[id] = {\n","\t        tween: new d3_Map(),\n","\t        time: time,\n","\t        timer: timer,\n","\t        delay: inherit.delay,\n","\t        duration: inherit.duration,\n","\t        ease: inherit.ease,\n","\t        index: i\n","\t      };\n","\t      inherit = null;\n","\t      ++lock.count;\n","\t    }\n","\t  }\n","\t  d3.svg.axis = function() {\n","\t    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n","\t    function axis(g) {\n","\t      g.each(function() {\n","\t        var g = d3.select(this);\n","\t        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n","\t        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n","\t        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n","\t        d3.transition(path));\n","\t        tickEnter.append(\"line\");\n","\t        tickEnter.append(\"text\");\n","\t        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n","\t        if (orient === \"bottom\" || orient === \"top\") {\n","\t          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n","\t          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n","\t          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n","\t        } else {\n","\t          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n","\t          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n","\t          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n","\t        }\n","\t        lineEnter.attr(y2, sign * innerTickSize);\n","\t        textEnter.attr(y1, sign * tickSpacing);\n","\t        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n","\t        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n","\t        if (scale1.rangeBand) {\n","\t          var x = scale1, dx = x.rangeBand() / 2;\n","\t          scale0 = scale1 = function(d) {\n","\t            return x(d) + dx;\n","\t          };\n","\t        } else if (scale0.rangeBand) {\n","\t          scale0 = scale1;\n","\t        } else {\n","\t          tickExit.call(tickTransform, scale1, scale0);\n","\t        }\n","\t        tickEnter.call(tickTransform, scale0, scale1);\n","\t        tickUpdate.call(tickTransform, scale1, scale1);\n","\t      });\n","\t    }\n","\t    axis.scale = function(x) {\n","\t      if (!arguments.length) return scale;\n","\t      scale = x;\n","\t      return axis;\n","\t    };\n","\t    axis.orient = function(x) {\n","\t      if (!arguments.length) return orient;\n","\t      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n","\t      return axis;\n","\t    };\n","\t    axis.ticks = function() {\n","\t      if (!arguments.length) return tickArguments_;\n","\t      tickArguments_ = d3_array(arguments);\n","\t      return axis;\n","\t    };\n","\t    axis.tickValues = function(x) {\n","\t      if (!arguments.length) return tickValues;\n","\t      tickValues = x;\n","\t      return axis;\n","\t    };\n","\t    axis.tickFormat = function(x) {\n","\t      if (!arguments.length) return tickFormat_;\n","\t      tickFormat_ = x;\n","\t      return axis;\n","\t    };\n","\t    axis.tickSize = function(x) {\n","\t      var n = arguments.length;\n","\t      if (!n) return innerTickSize;\n","\t      innerTickSize = +x;\n","\t      outerTickSize = +arguments[n - 1];\n","\t      return axis;\n","\t    };\n","\t    axis.innerTickSize = function(x) {\n","\t      if (!arguments.length) return innerTickSize;\n","\t      innerTickSize = +x;\n","\t      return axis;\n","\t    };\n","\t    axis.outerTickSize = function(x) {\n","\t      if (!arguments.length) return outerTickSize;\n","\t      outerTickSize = +x;\n","\t      return axis;\n","\t    };\n","\t    axis.tickPadding = function(x) {\n","\t      if (!arguments.length) return tickPadding;\n","\t      tickPadding = +x;\n","\t      return axis;\n","\t    };\n","\t    axis.tickSubdivide = function() {\n","\t      return arguments.length && axis;\n","\t    };\n","\t    return axis;\n","\t  };\n","\t  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n","\t    top: 1,\n","\t    right: 1,\n","\t    bottom: 1,\n","\t    left: 1\n","\t  };\n","\t  function d3_svg_axisX(selection, x0, x1) {\n","\t    selection.attr(\"transform\", function(d) {\n","\t      var v0 = x0(d);\n","\t      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n","\t    });\n","\t  }\n","\t  function d3_svg_axisY(selection, y0, y1) {\n","\t    selection.attr(\"transform\", function(d) {\n","\t      var v0 = y0(d);\n","\t      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n","\t    });\n","\t  }\n","\t  d3.svg.brush = function() {\n","\t    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n","\t    function brush(g) {\n","\t      g.each(function() {\n","\t        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n","\t        var background = g.selectAll(\".background\").data([ 0 ]);\n","\t        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n","\t        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n","\t        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n","\t        resize.exit().remove();\n","\t        resize.enter().append(\"g\").attr(\"class\", function(d) {\n","\t          return \"resize \" + d;\n","\t        }).style(\"cursor\", function(d) {\n","\t          return d3_svg_brushCursor[d];\n","\t        }).append(\"rect\").attr(\"x\", function(d) {\n","\t          return /[ew]$/.test(d) ? -3 : null;\n","\t        }).attr(\"y\", function(d) {\n","\t          return /^[ns]/.test(d) ? -3 : null;\n","\t        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n","\t        resize.style(\"display\", brush.empty() ? \"none\" : null);\n","\t        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n","\t        if (x) {\n","\t          range = d3_scaleRange(x);\n","\t          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n","\t          redrawX(gUpdate);\n","\t        }\n","\t        if (y) {\n","\t          range = d3_scaleRange(y);\n","\t          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n","\t          redrawY(gUpdate);\n","\t        }\n","\t        redraw(gUpdate);\n","\t      });\n","\t    }\n","\t    brush.event = function(g) {\n","\t      g.each(function() {\n","\t        var event_ = event.of(this, arguments), extent1 = {\n","\t          x: xExtent,\n","\t          y: yExtent,\n","\t          i: xExtentDomain,\n","\t          j: yExtentDomain\n","\t        }, extent0 = this.__chart__ || extent1;\n","\t        this.__chart__ = extent1;\n","\t        if (d3_transitionInheritId) {\n","\t          d3.select(this).transition().each(\"start.brush\", function() {\n","\t            xExtentDomain = extent0.i;\n","\t            yExtentDomain = extent0.j;\n","\t            xExtent = extent0.x;\n","\t            yExtent = extent0.y;\n","\t            event_({\n","\t              type: \"brushstart\"\n","\t            });\n","\t          }).tween(\"brush:brush\", function() {\n","\t            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n","\t            xExtentDomain = yExtentDomain = null;\n","\t            return function(t) {\n","\t              xExtent = extent1.x = xi(t);\n","\t              yExtent = extent1.y = yi(t);\n","\t              event_({\n","\t                type: \"brush\",\n","\t                mode: \"resize\"\n","\t              });\n","\t            };\n","\t          }).each(\"end.brush\", function() {\n","\t            xExtentDomain = extent1.i;\n","\t            yExtentDomain = extent1.j;\n","\t            event_({\n","\t              type: \"brush\",\n","\t              mode: \"resize\"\n","\t            });\n","\t            event_({\n","\t              type: \"brushend\"\n","\t            });\n","\t          });\n","\t        } else {\n","\t          event_({\n","\t            type: \"brushstart\"\n","\t          });\n","\t          event_({\n","\t            type: \"brush\",\n","\t            mode: \"resize\"\n","\t          });\n","\t          event_({\n","\t            type: \"brushend\"\n","\t          });\n","\t        }\n","\t      });\n","\t    };\n","\t    function redraw(g) {\n","\t      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n","\t        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n","\t      });\n","\t    }\n","\t    function redrawX(g) {\n","\t      g.select(\".extent\").attr(\"x\", xExtent[0]);\n","\t      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n","\t    }\n","\t    function redrawY(g) {\n","\t      g.select(\".extent\").attr(\"y\", yExtent[0]);\n","\t      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n","\t    }\n","\t    function brushstart() {\n","\t      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n","\t      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n","\t      if (d3.event.changedTouches) {\n","\t        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n","\t      } else {\n","\t        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n","\t      }\n","\t      g.interrupt().selectAll(\"*\").interrupt();\n","\t      if (dragging) {\n","\t        origin[0] = xExtent[0] - origin[0];\n","\t        origin[1] = yExtent[0] - origin[1];\n","\t      } else if (resizing) {\n","\t        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n","\t        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n","\t        origin[0] = xExtent[ex];\n","\t        origin[1] = yExtent[ey];\n","\t      } else if (d3.event.altKey) center = origin.slice();\n","\t      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n","\t      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n","\t      event_({\n","\t        type: \"brushstart\"\n","\t      });\n","\t      brushmove();\n","\t      function keydown() {\n","\t        if (d3.event.keyCode == 32) {\n","\t          if (!dragging) {\n","\t            center = null;\n","\t            origin[0] -= xExtent[1];\n","\t            origin[1] -= yExtent[1];\n","\t            dragging = 2;\n","\t          }\n","\t          d3_eventPreventDefault();\n","\t        }\n","\t      }\n","\t      function keyup() {\n","\t        if (d3.event.keyCode == 32 && dragging == 2) {\n","\t          origin[0] += xExtent[1];\n","\t          origin[1] += yExtent[1];\n","\t          dragging = 0;\n","\t          d3_eventPreventDefault();\n","\t        }\n","\t      }\n","\t      function brushmove() {\n","\t        var point = d3.mouse(target), moved = false;\n","\t        if (offset) {\n","\t          point[0] += offset[0];\n","\t          point[1] += offset[1];\n","\t        }\n","\t        if (!dragging) {\n","\t          if (d3.event.altKey) {\n","\t            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n","\t            origin[0] = xExtent[+(point[0] < center[0])];\n","\t            origin[1] = yExtent[+(point[1] < center[1])];\n","\t          } else center = null;\n","\t        }\n","\t        if (resizingX && move1(point, x, 0)) {\n","\t          redrawX(g);\n","\t          moved = true;\n","\t        }\n","\t        if (resizingY && move1(point, y, 1)) {\n","\t          redrawY(g);\n","\t          moved = true;\n","\t        }\n","\t        if (moved) {\n","\t          redraw(g);\n","\t          event_({\n","\t            type: \"brush\",\n","\t            mode: dragging ? \"move\" : \"resize\"\n","\t          });\n","\t        }\n","\t      }\n","\t      function move1(point, scale, i) {\n","\t        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n","\t        if (dragging) {\n","\t          r0 -= position;\n","\t          r1 -= size + position;\n","\t        }\n","\t        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n","\t        if (dragging) {\n","\t          max = (min += position) + size;\n","\t        } else {\n","\t          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n","\t          if (position < min) {\n","\t            max = min;\n","\t            min = position;\n","\t          } else {\n","\t            max = position;\n","\t          }\n","\t        }\n","\t        if (extent[0] != min || extent[1] != max) {\n","\t          if (i) yExtentDomain = null; else xExtentDomain = null;\n","\t          extent[0] = min;\n","\t          extent[1] = max;\n","\t          return true;\n","\t        }\n","\t      }\n","\t      function brushend() {\n","\t        brushmove();\n","\t        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n","\t        d3.select(\"body\").style(\"cursor\", null);\n","\t        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n","\t        dragRestore();\n","\t        event_({\n","\t          type: \"brushend\"\n","\t        });\n","\t      }\n","\t    }\n","\t    brush.x = function(z) {\n","\t      if (!arguments.length) return x;\n","\t      x = z;\n","\t      resizes = d3_svg_brushResizes[!x << 1 | !y];\n","\t      return brush;\n","\t    };\n","\t    brush.y = function(z) {\n","\t      if (!arguments.length) return y;\n","\t      y = z;\n","\t      resizes = d3_svg_brushResizes[!x << 1 | !y];\n","\t      return brush;\n","\t    };\n","\t    brush.clamp = function(z) {\n","\t      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n","\t      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n","\t      return brush;\n","\t    };\n","\t    brush.extent = function(z) {\n","\t      var x0, x1, y0, y1, t;\n","\t      if (!arguments.length) {\n","\t        if (x) {\n","\t          if (xExtentDomain) {\n","\t            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n","\t          } else {\n","\t            x0 = xExtent[0], x1 = xExtent[1];\n","\t            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n","\t            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n","\t          }\n","\t        }\n","\t        if (y) {\n","\t          if (yExtentDomain) {\n","\t            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n","\t          } else {\n","\t            y0 = yExtent[0], y1 = yExtent[1];\n","\t            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n","\t            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n","\t          }\n","\t        }\n","\t        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n","\t      }\n","\t      if (x) {\n","\t        x0 = z[0], x1 = z[1];\n","\t        if (y) x0 = x0[0], x1 = x1[0];\n","\t        xExtentDomain = [ x0, x1 ];\n","\t        if (x.invert) x0 = x(x0), x1 = x(x1);\n","\t        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n","\t        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n","\t      }\n","\t      if (y) {\n","\t        y0 = z[0], y1 = z[1];\n","\t        if (x) y0 = y0[1], y1 = y1[1];\n","\t        yExtentDomain = [ y0, y1 ];\n","\t        if (y.invert) y0 = y(y0), y1 = y(y1);\n","\t        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n","\t        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n","\t      }\n","\t      return brush;\n","\t    };\n","\t    brush.clear = function() {\n","\t      if (!brush.empty()) {\n","\t        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n","\t        xExtentDomain = yExtentDomain = null;\n","\t      }\n","\t      return brush;\n","\t    };\n","\t    brush.empty = function() {\n","\t      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n","\t    };\n","\t    return d3.rebind(brush, event, \"on\");\n","\t  };\n","\t  var d3_svg_brushCursor = {\n","\t    n: \"ns-resize\",\n","\t    e: \"ew-resize\",\n","\t    s: \"ns-resize\",\n","\t    w: \"ew-resize\",\n","\t    nw: \"nwse-resize\",\n","\t    ne: \"nesw-resize\",\n","\t    se: \"nwse-resize\",\n","\t    sw: \"nesw-resize\"\n","\t  };\n","\t  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n","\t  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n","\t  var d3_time_formatUtc = d3_time_format.utc;\n","\t  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n","\t  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n","\t  function d3_time_formatIsoNative(date) {\n","\t    return date.toISOString();\n","\t  }\n","\t  d3_time_formatIsoNative.parse = function(string) {\n","\t    var date = new Date(string);\n","\t    return isNaN(date) ? null : date;\n","\t  };\n","\t  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n","\t  d3_time.second = d3_time_interval(function(date) {\n","\t    return new d3_date(Math.floor(date / 1e3) * 1e3);\n","\t  }, function(date, offset) {\n","\t    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n","\t  }, function(date) {\n","\t    return date.getSeconds();\n","\t  });\n","\t  d3_time.seconds = d3_time.second.range;\n","\t  d3_time.seconds.utc = d3_time.second.utc.range;\n","\t  d3_time.minute = d3_time_interval(function(date) {\n","\t    return new d3_date(Math.floor(date / 6e4) * 6e4);\n","\t  }, function(date, offset) {\n","\t    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n","\t  }, function(date) {\n","\t    return date.getMinutes();\n","\t  });\n","\t  d3_time.minutes = d3_time.minute.range;\n","\t  d3_time.minutes.utc = d3_time.minute.utc.range;\n","\t  d3_time.hour = d3_time_interval(function(date) {\n","\t    var timezone = date.getTimezoneOffset() / 60;\n","\t    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n","\t  }, function(date, offset) {\n","\t    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n","\t  }, function(date) {\n","\t    return date.getHours();\n","\t  });\n","\t  d3_time.hours = d3_time.hour.range;\n","\t  d3_time.hours.utc = d3_time.hour.utc.range;\n","\t  d3_time.month = d3_time_interval(function(date) {\n","\t    date = d3_time.day(date);\n","\t    date.setDate(1);\n","\t    return date;\n","\t  }, function(date, offset) {\n","\t    date.setMonth(date.getMonth() + offset);\n","\t  }, function(date) {\n","\t    return date.getMonth();\n","\t  });\n","\t  d3_time.months = d3_time.month.range;\n","\t  d3_time.months.utc = d3_time.month.utc.range;\n","\t  function d3_time_scale(linear, methods, format) {\n","\t    function scale(x) {\n","\t      return linear(x);\n","\t    }\n","\t    scale.invert = function(x) {\n","\t      return d3_time_scaleDate(linear.invert(x));\n","\t    };\n","\t    scale.domain = function(x) {\n","\t      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n","\t      linear.domain(x);\n","\t      return scale;\n","\t    };\n","\t    function tickMethod(extent, count) {\n","\t      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n","\t      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n","\t        return d / 31536e6;\n","\t      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n","\t    }\n","\t    scale.nice = function(interval, skip) {\n","\t      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n","\t      if (method) interval = method[0], skip = method[1];\n","\t      function skipped(date) {\n","\t        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n","\t      }\n","\t      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n","\t        floor: function(date) {\n","\t          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n","\t          return date;\n","\t        },\n","\t        ceil: function(date) {\n","\t          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n","\t          return date;\n","\t        }\n","\t      } : interval));\n","\t    };\n","\t    scale.ticks = function(interval, skip) {\n","\t      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n","\t        range: interval\n","\t      }, skip ];\n","\t      if (method) interval = method[0], skip = method[1];\n","\t      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n","\t    };\n","\t    scale.tickFormat = function() {\n","\t      return format;\n","\t    };\n","\t    scale.copy = function() {\n","\t      return d3_time_scale(linear.copy(), methods, format);\n","\t    };\n","\t    return d3_scale_linearRebind(scale, linear);\n","\t  }\n","\t  function d3_time_scaleDate(t) {\n","\t    return new Date(t);\n","\t  }\n","\t  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n","\t  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n","\t  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n","\t    return d.getMilliseconds();\n","\t  } ], [ \":%S\", function(d) {\n","\t    return d.getSeconds();\n","\t  } ], [ \"%I:%M\", function(d) {\n","\t    return d.getMinutes();\n","\t  } ], [ \"%I %p\", function(d) {\n","\t    return d.getHours();\n","\t  } ], [ \"%a %d\", function(d) {\n","\t    return d.getDay() && d.getDate() != 1;\n","\t  } ], [ \"%b %d\", function(d) {\n","\t    return d.getDate() != 1;\n","\t  } ], [ \"%B\", function(d) {\n","\t    return d.getMonth();\n","\t  } ], [ \"%Y\", d3_true ] ]);\n","\t  var d3_time_scaleMilliseconds = {\n","\t    range: function(start, stop, step) {\n","\t      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n","\t    },\n","\t    floor: d3_identity,\n","\t    ceil: d3_identity\n","\t  };\n","\t  d3_time_scaleLocalMethods.year = d3_time.year;\n","\t  d3_time.scale = function() {\n","\t    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n","\t  };\n","\t  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n","\t    return [ m[0].utc, m[1] ];\n","\t  });\n","\t  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n","\t    return d.getUTCMilliseconds();\n","\t  } ], [ \":%S\", function(d) {\n","\t    return d.getUTCSeconds();\n","\t  } ], [ \"%I:%M\", function(d) {\n","\t    return d.getUTCMinutes();\n","\t  } ], [ \"%I %p\", function(d) {\n","\t    return d.getUTCHours();\n","\t  } ], [ \"%a %d\", function(d) {\n","\t    return d.getUTCDay() && d.getUTCDate() != 1;\n","\t  } ], [ \"%b %d\", function(d) {\n","\t    return d.getUTCDate() != 1;\n","\t  } ], [ \"%B\", function(d) {\n","\t    return d.getUTCMonth();\n","\t  } ], [ \"%Y\", d3_true ] ]);\n","\t  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n","\t  d3_time.scale.utc = function() {\n","\t    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n","\t  };\n","\t  d3.text = d3_xhrType(function(request) {\n","\t    return request.responseText;\n","\t  });\n","\t  d3.json = function(url, callback) {\n","\t    return d3_xhr(url, \"application/json\", d3_json, callback);\n","\t  };\n","\t  function d3_json(request) {\n","\t    return JSON.parse(request.responseText);\n","\t  }\n","\t  d3.html = function(url, callback) {\n","\t    return d3_xhr(url, \"text/html\", d3_html, callback);\n","\t  };\n","\t  function d3_html(request) {\n","\t    var range = d3_document.createRange();\n","\t    range.selectNode(d3_document.body);\n","\t    return range.createContextualFragment(request.responseText);\n","\t  }\n","\t  d3.xml = d3_xhrType(function(request) {\n","\t    return request.responseXML;\n","\t  });\n","\t  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === \"object\" && module.exports) module.exports = d3; else this.d3 = d3;\n","\t}();\n","\n","/***/ }),\n","/* 3 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tObject.defineProperty(exports, \"__esModule\", {\n","\t  value: true\n","\t});\n","\t\n","\tvar _d = __webpack_require__(2);\n","\t\n","\tvar _d2 = _interopRequireDefault(_d);\n","\t\n","\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n","\t\n","\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n","\t\n","\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n","\t\n","\tvar Barchart =\n","\t// svg: d3 object with the svg in question\n","\t// exp_array: list of (feature_name, weight)\n","\tfunction Barchart(svg, exp_array) {\n","\t  var two_sided = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n","\t  var titles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n","\t  var colors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ['red', 'green'];\n","\t  var show_numbers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n","\t  var bar_height = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 5;\n","\t\n","\t  _classCallCheck(this, Barchart);\n","\t\n","\t  var svg_width = Math.min(600, parseInt(svg.style('width')));\n","\t  var bar_width = two_sided ? svg_width / 2 : svg_width;\n","\t  if (titles === undefined) {\n","\t    titles = two_sided ? ['Cons', 'Pros'] : 'Pros';\n","\t  }\n","\t  if (show_numbers) {\n","\t    bar_width = bar_width - 30;\n","\t  }\n","\t  var x_offset = two_sided ? svg_width / 2 : 10;\n","\t  // 13.1 is +- the width of W, the widest letter.\n","\t  if (two_sided && titles.length == 2) {\n","\t    svg.append('text').attr('x', svg_width / 4).attr('y', 15).attr('font-size', '20').attr('text-anchor', 'middle').style('fill', colors[0]).text(titles[0]);\n","\t\n","\t    svg.append('text').attr('x', svg_width / 4 * 3).attr('y', 15).attr('font-size', '20').attr('text-anchor', 'middle').style('fill', colors[1]).text(titles[1]);\n","\t  } else {\n","\t    var pos = two_sided ? svg_width / 2 : x_offset;\n","\t    var anchor = two_sided ? 'middle' : 'begin';\n","\t    svg.append('text').attr('x', pos).attr('y', 15).attr('font-size', '20').attr('text-anchor', anchor).text(titles);\n","\t  }\n","\t  var yshift = 20;\n","\t  var space_between_bars = 0;\n","\t  var text_height = 16;\n","\t  var space_between_bar_and_text = 3;\n","\t  var total_bar_height = text_height + space_between_bar_and_text + bar_height + space_between_bars;\n","\t  var total_height = total_bar_height * exp_array.length;\n","\t  this.svg_height = total_height + yshift;\n","\t  var yscale = _d2.default.scale.linear().domain([0, exp_array.length]).range([yshift, yshift + total_height]);\n","\t  var names = exp_array.map(function (v) {\n","\t    return v[0];\n","\t  });\n","\t  var weights = exp_array.map(function (v) {\n","\t    return v[1];\n","\t  });\n","\t  var max_weight = Math.max.apply(Math, _toConsumableArray(weights.map(function (v) {\n","\t    return Math.abs(v);\n","\t  })));\n","\t  var xscale = _d2.default.scale.linear().domain([0, Math.max(1, max_weight)]).range([0, bar_width]);\n","\t\n","\t  for (var i = 0; i < exp_array.length; ++i) {\n","\t    var name = names[i];\n","\t    var weight = weights[i];\n","\t    var size = xscale(Math.abs(weight));\n","\t    var to_the_right = weight > 0 || !two_sided;\n","\t    var text = svg.append('text').attr('x', to_the_right ? x_offset + 2 : x_offset - 2).attr('y', yscale(i) + text_height).attr('text-anchor', to_the_right ? 'begin' : 'end').attr('font-size', '14').text(name);\n","\t    while (text.node().getBBox()['width'] + 1 > bar_width) {\n","\t      var cur_text = text.text().slice(0, text.text().length - 5);\n","\t      text.text(cur_text + '...');\n","\t      if (text === '...') {\n","\t        break;\n","\t      }\n","\t    }\n","\t    var bar = svg.append('rect').attr('height', bar_height).attr('x', to_the_right ? x_offset : x_offset - size).attr('y', text_height + yscale(i) + space_between_bar_and_text) // + bar_height)\n","\t    .attr('width', size).style('fill', weight > 0 ? colors[1] : colors[0]);\n","\t    if (show_numbers) {\n","\t      var bartext = svg.append('text').attr('x', to_the_right ? x_offset + size + 1 : x_offset - size - 1).attr('text-anchor', weight > 0 || !two_sided ? 'begin' : 'end').attr('y', bar_height + yscale(i) + text_height + space_between_bar_and_text).attr('font-size', '10').text(Math.abs(weight).toFixed(2));\n","\t    }\n","\t  }\n","\t  var line = svg.append(\"line\").attr(\"x1\", x_offset).attr(\"x2\", x_offset).attr(\"y1\", bar_height + yshift).attr(\"y2\", Math.max(bar_height, yscale(exp_array.length))).style(\"stroke-width\", 2).style(\"stroke\", \"black\");\n","\t};\n","\t\n","\texports.default = Barchart;\n","\n","/***/ }),\n","/* 4 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {/**\n","\t * @license\n","\t * Lodash <https://lodash.com/>\n","\t * Copyright JS Foundation and other contributors <https://js.foundation/>\n","\t * Released under MIT license <https://lodash.com/license>\n","\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n","\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n","\t */\n","\t;(function() {\n","\t\n","\t  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n","\t  var undefined;\n","\t\n","\t  /** Used as the semantic version number. */\n","\t  var VERSION = '4.17.11';\n","\t\n","\t  /** Used as the size to enable large array optimizations. */\n","\t  var LARGE_ARRAY_SIZE = 200;\n","\t\n","\t  /** Error message constants. */\n","\t  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n","\t      FUNC_ERROR_TEXT = 'Expected a function';\n","\t\n","\t  /** Used to stand-in for `undefined` hash values. */\n","\t  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n","\t\n","\t  /** Used as the maximum memoize cache size. */\n","\t  var MAX_MEMOIZE_SIZE = 500;\n","\t\n","\t  /** Used as the internal argument placeholder. */\n","\t  var PLACEHOLDER = '__lodash_placeholder__';\n","\t\n","\t  /** Used to compose bitmasks for cloning. */\n","\t  var CLONE_DEEP_FLAG = 1,\n","\t      CLONE_FLAT_FLAG = 2,\n","\t      CLONE_SYMBOLS_FLAG = 4;\n","\t\n","\t  /** Used to compose bitmasks for value comparisons. */\n","\t  var COMPARE_PARTIAL_FLAG = 1,\n","\t      COMPARE_UNORDERED_FLAG = 2;\n","\t\n","\t  /** Used to compose bitmasks for function metadata. */\n","\t  var WRAP_BIND_FLAG = 1,\n","\t      WRAP_BIND_KEY_FLAG = 2,\n","\t      WRAP_CURRY_BOUND_FLAG = 4,\n","\t      WRAP_CURRY_FLAG = 8,\n","\t      WRAP_CURRY_RIGHT_FLAG = 16,\n","\t      WRAP_PARTIAL_FLAG = 32,\n","\t      WRAP_PARTIAL_RIGHT_FLAG = 64,\n","\t      WRAP_ARY_FLAG = 128,\n","\t      WRAP_REARG_FLAG = 256,\n","\t      WRAP_FLIP_FLAG = 512;\n","\t\n","\t  /** Used as default options for `_.truncate`. */\n","\t  var DEFAULT_TRUNC_LENGTH = 30,\n","\t      DEFAULT_TRUNC_OMISSION = '...';\n","\t\n","\t  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n","\t  var HOT_COUNT = 800,\n","\t      HOT_SPAN = 16;\n","\t\n","\t  /** Used to indicate the type of lazy iteratees. */\n","\t  var LAZY_FILTER_FLAG = 1,\n","\t      LAZY_MAP_FLAG = 2,\n","\t      LAZY_WHILE_FLAG = 3;\n","\t\n","\t  /** Used as references for various `Number` constants. */\n","\t  var INFINITY = 1 / 0,\n","\t      MAX_SAFE_INTEGER = 9007199254740991,\n","\t      MAX_INTEGER = 1.7976931348623157e+308,\n","\t      NAN = 0 / 0;\n","\t\n","\t  /** Used as references for the maximum length and index of an array. */\n","\t  var MAX_ARRAY_LENGTH = 4294967295,\n","\t      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n","\t      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n","\t\n","\t  /** Used to associate wrap methods with their bit flags. */\n","\t  var wrapFlags = [\n","\t    ['ary', WRAP_ARY_FLAG],\n","\t    ['bind', WRAP_BIND_FLAG],\n","\t    ['bindKey', WRAP_BIND_KEY_FLAG],\n","\t    ['curry', WRAP_CURRY_FLAG],\n","\t    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n","\t    ['flip', WRAP_FLIP_FLAG],\n","\t    ['partial', WRAP_PARTIAL_FLAG],\n","\t    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n","\t    ['rearg', WRAP_REARG_FLAG]\n","\t  ];\n","\t\n","\t  /** `Object#toString` result references. */\n","\t  var argsTag = '[object Arguments]',\n","\t      arrayTag = '[object Array]',\n","\t      asyncTag = '[object AsyncFunction]',\n","\t      boolTag = '[object Boolean]',\n","\t      dateTag = '[object Date]',\n","\t      domExcTag = '[object DOMException]',\n","\t      errorTag = '[object Error]',\n","\t      funcTag = '[object Function]',\n","\t      genTag = '[object GeneratorFunction]',\n","\t      mapTag = '[object Map]',\n","\t      numberTag = '[object Number]',\n","\t      nullTag = '[object Null]',\n","\t      objectTag = '[object Object]',\n","\t      promiseTag = '[object Promise]',\n","\t      proxyTag = '[object Proxy]',\n","\t      regexpTag = '[object RegExp]',\n","\t      setTag = '[object Set]',\n","\t      stringTag = '[object String]',\n","\t      symbolTag = '[object Symbol]',\n","\t      undefinedTag = '[object Undefined]',\n","\t      weakMapTag = '[object WeakMap]',\n","\t      weakSetTag = '[object WeakSet]';\n","\t\n","\t  var arrayBufferTag = '[object ArrayBuffer]',\n","\t      dataViewTag = '[object DataView]',\n","\t      float32Tag = '[object Float32Array]',\n","\t      float64Tag = '[object Float64Array]',\n","\t      int8Tag = '[object Int8Array]',\n","\t      int16Tag = '[object Int16Array]',\n","\t      int32Tag = '[object Int32Array]',\n","\t      uint8Tag = '[object Uint8Array]',\n","\t      uint8ClampedTag = '[object Uint8ClampedArray]',\n","\t      uint16Tag = '[object Uint16Array]',\n","\t      uint32Tag = '[object Uint32Array]';\n","\t\n","\t  /** Used to match empty string literals in compiled template source. */\n","\t  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n","\t      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n","\t      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n","\t\n","\t  /** Used to match HTML entities and HTML characters. */\n","\t  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n","\t      reUnescapedHtml = /[&<>\"']/g,\n","\t      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n","\t      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n","\t\n","\t  /** Used to match template delimiters. */\n","\t  var reEscape = /<%-([\\s\\S]+?)%>/g,\n","\t      reEvaluate = /<%([\\s\\S]+?)%>/g,\n","\t      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n","\t\n","\t  /** Used to match property names within property paths. */\n","\t  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n","\t      reIsPlainProp = /^\\w*$/,\n","\t      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n","\t\n","\t  /**\n","\t   * Used to match `RegExp`\n","\t   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n","\t   */\n","\t  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n","\t      reHasRegExpChar = RegExp(reRegExpChar.source);\n","\t\n","\t  /** Used to match leading and trailing whitespace. */\n","\t  var reTrim = /^\\s+|\\s+$/g,\n","\t      reTrimStart = /^\\s+/,\n","\t      reTrimEnd = /\\s+$/;\n","\t\n","\t  /** Used to match wrap detail comments. */\n","\t  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n","\t      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n","\t      reSplitDetails = /,? & /;\n","\t\n","\t  /** Used to match words composed of alphanumeric characters. */\n","\t  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n","\t\n","\t  /** Used to match backslashes in property paths. */\n","\t  var reEscapeChar = /\\\\(\\\\)?/g;\n","\t\n","\t  /**\n","\t   * Used to match\n","\t   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n","\t   */\n","\t  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n","\t\n","\t  /** Used to match `RegExp` flags from their coerced string values. */\n","\t  var reFlags = /\\w*$/;\n","\t\n","\t  /** Used to detect bad signed hexadecimal string values. */\n","\t  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n","\t\n","\t  /** Used to detect binary string values. */\n","\t  var reIsBinary = /^0b[01]+$/i;\n","\t\n","\t  /** Used to detect host constructors (Safari). */\n","\t  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n","\t\n","\t  /** Used to detect octal string values. */\n","\t  var reIsOctal = /^0o[0-7]+$/i;\n","\t\n","\t  /** Used to detect unsigned integer values. */\n","\t  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n","\t\n","\t  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n","\t  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n","\t\n","\t  /** Used to ensure capturing order of template delimiters. */\n","\t  var reNoMatch = /($^)/;\n","\t\n","\t  /** Used to match unescaped characters in compiled string literals. */\n","\t  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n","\t\n","\t  /** Used to compose unicode character classes. */\n","\t  var rsAstralRange = '\\\\ud800-\\\\udfff',\n","\t      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n","\t      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n","\t      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n","\t      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n","\t      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n","\t      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n","\t      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n","\t      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n","\t      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n","\t      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n","\t      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n","\t      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n","\t      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n","\t\n","\t  /** Used to compose unicode capture groups. */\n","\t  var rsApos = \"['\\u2019]\",\n","\t      rsAstral = '[' + rsAstralRange + ']',\n","\t      rsBreak = '[' + rsBreakRange + ']',\n","\t      rsCombo = '[' + rsComboRange + ']',\n","\t      rsDigits = '\\\\d+',\n","\t      rsDingbat = '[' + rsDingbatRange + ']',\n","\t      rsLower = '[' + rsLowerRange + ']',\n","\t      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n","\t      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n","\t      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n","\t      rsNonAstral = '[^' + rsAstralRange + ']',\n","\t      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n","\t      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n","\t      rsUpper = '[' + rsUpperRange + ']',\n","\t      rsZWJ = '\\\\u200d';\n","\t\n","\t  /** Used to compose unicode regexes. */\n","\t  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n","\t      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n","\t      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n","\t      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n","\t      reOptMod = rsModifier + '?',\n","\t      rsOptVar = '[' + rsVarRange + ']?',\n","\t      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n","\t      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n","\t      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n","\t      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n","\t      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n","\t      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n","\t\n","\t  /** Used to match apostrophes. */\n","\t  var reApos = RegExp(rsApos, 'g');\n","\t\n","\t  /**\n","\t   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n","\t   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n","\t   */\n","\t  var reComboMark = RegExp(rsCombo, 'g');\n","\t\n","\t  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n","\t  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n","\t\n","\t  /** Used to match complex or compound words. */\n","\t  var reUnicodeWord = RegExp([\n","\t    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n","\t    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n","\t    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n","\t    rsUpper + '+' + rsOptContrUpper,\n","\t    rsOrdUpper,\n","\t    rsOrdLower,\n","\t    rsDigits,\n","\t    rsEmoji\n","\t  ].join('|'), 'g');\n","\t\n","\t  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n","\t  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n","\t\n","\t  /** Used to detect strings that need a more robust regexp to match words. */\n","\t  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n","\t\n","\t  /** Used to assign default `context` object properties. */\n","\t  var contextProps = [\n","\t    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n","\t    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n","\t    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n","\t    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n","\t    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n","\t  ];\n","\t\n","\t  /** Used to make template sourceURLs easier to identify. */\n","\t  var templateCounter = -1;\n","\t\n","\t  /** Used to identify `toStringTag` values of typed arrays. */\n","\t  var typedArrayTags = {};\n","\t  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n","\t  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n","\t  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n","\t  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n","\t  typedArrayTags[uint32Tag] = true;\n","\t  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n","\t  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n","\t  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n","\t  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n","\t  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n","\t  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n","\t  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n","\t  typedArrayTags[weakMapTag] = false;\n","\t\n","\t  /** Used to identify `toStringTag` values supported by `_.clone`. */\n","\t  var cloneableTags = {};\n","\t  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n","\t  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n","\t  cloneableTags[boolTag] = cloneableTags[dateTag] =\n","\t  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n","\t  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n","\t  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n","\t  cloneableTags[numberTag] = cloneableTags[objectTag] =\n","\t  cloneableTags[regexpTag] = cloneableTags[setTag] =\n","\t  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n","\t  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n","\t  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n","\t  cloneableTags[errorTag] = cloneableTags[funcTag] =\n","\t  cloneableTags[weakMapTag] = false;\n","\t\n","\t  /** Used to map Latin Unicode letters to basic Latin letters. */\n","\t  var deburredLetters = {\n","\t    // Latin-1 Supplement block.\n","\t    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n","\t    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n","\t    '\\xc7': 'C',  '\\xe7': 'c',\n","\t    '\\xd0': 'D',  '\\xf0': 'd',\n","\t    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n","\t    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n","\t    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n","\t    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n","\t    '\\xd1': 'N',  '\\xf1': 'n',\n","\t    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n","\t    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n","\t    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n","\t    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n","\t    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n","\t    '\\xc6': 'Ae', '\\xe6': 'ae',\n","\t    '\\xde': 'Th', '\\xfe': 'th',\n","\t    '\\xdf': 'ss',\n","\t    // Latin Extended-A block.\n","\t    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n","\t    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n","\t    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n","\t    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n","\t    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n","\t    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n","\t    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n","\t    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n","\t    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n","\t    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n","\t    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n","\t    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n","\t    '\\u0134': 'J',  '\\u0135': 'j',\n","\t    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n","\t    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n","\t    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n","\t    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n","\t    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n","\t    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n","\t    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n","\t    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n","\t    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n","\t    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n","\t    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n","\t    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n","\t    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n","\t    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n","\t    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n","\t    '\\u0174': 'W',  '\\u0175': 'w',\n","\t    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n","\t    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n","\t    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n","\t    '\\u0132': 'IJ', '\\u0133': 'ij',\n","\t    '\\u0152': 'Oe', '\\u0153': 'oe',\n","\t    '\\u0149': \"'n\", '\\u017f': 's'\n","\t  };\n","\t\n","\t  /** Used to map characters to HTML entities. */\n","\t  var htmlEscapes = {\n","\t    '&': '&amp;',\n","\t    '<': '&lt;',\n","\t    '>': '&gt;',\n","\t    '\"': '&quot;',\n","\t    \"'\": '&#39;'\n","\t  };\n","\t\n","\t  /** Used to map HTML entities to characters. */\n","\t  var htmlUnescapes = {\n","\t    '&amp;': '&',\n","\t    '&lt;': '<',\n","\t    '&gt;': '>',\n","\t    '&quot;': '\"',\n","\t    '&#39;': \"'\"\n","\t  };\n","\t\n","\t  /** Used to escape characters for inclusion in compiled string literals. */\n","\t  var stringEscapes = {\n","\t    '\\\\': '\\\\',\n","\t    \"'\": \"'\",\n","\t    '\\n': 'n',\n","\t    '\\r': 'r',\n","\t    '\\u2028': 'u2028',\n","\t    '\\u2029': 'u2029'\n","\t  };\n","\t\n","\t  /** Built-in method references without a dependency on `root`. */\n","\t  var freeParseFloat = parseFloat,\n","\t      freeParseInt = parseInt;\n","\t\n","\t  /** Detect free variable `global` from Node.js. */\n","\t  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n","\t\n","\t  /** Detect free variable `self`. */\n","\t  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n","\t\n","\t  /** Used as a reference to the global object. */\n","\t  var root = freeGlobal || freeSelf || Function('return this')();\n","\t\n","\t  /** Detect free variable `exports`. */\n","\t  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n","\t\n","\t  /** Detect free variable `module`. */\n","\t  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n","\t\n","\t  /** Detect the popular CommonJS extension `module.exports`. */\n","\t  var moduleExports = freeModule && freeModule.exports === freeExports;\n","\t\n","\t  /** Detect free variable `process` from Node.js. */\n","\t  var freeProcess = moduleExports && freeGlobal.process;\n","\t\n","\t  /** Used to access faster Node.js helpers. */\n","\t  var nodeUtil = (function() {\n","\t    try {\n","\t      // Use `util.types` for Node.js 10+.\n","\t      var types = freeModule && freeModule.require && freeModule.require('util').types;\n","\t\n","\t      if (types) {\n","\t        return types;\n","\t      }\n","\t\n","\t      // Legacy `process.binding('util')` for Node.js < 10.\n","\t      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n","\t    } catch (e) {}\n","\t  }());\n","\t\n","\t  /* Node.js helper references. */\n","\t  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n","\t      nodeIsDate = nodeUtil && nodeUtil.isDate,\n","\t      nodeIsMap = nodeUtil && nodeUtil.isMap,\n","\t      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n","\t      nodeIsSet = nodeUtil && nodeUtil.isSet,\n","\t      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n","\t\n","\t  /*--------------------------------------------------------------------------*/\n","\t\n","\t  /**\n","\t   * A faster alternative to `Function#apply`, this function invokes `func`\n","\t   * with the `this` binding of `thisArg` and the arguments of `args`.\n","\t   *\n","\t   * @private\n","\t   * @param {Function} func The function to invoke.\n","\t   * @param {*} thisArg The `this` binding of `func`.\n","\t   * @param {Array} args The arguments to invoke `func` with.\n","\t   * @returns {*} Returns the result of `func`.\n","\t   */\n","\t  function apply(func, thisArg, args) {\n","\t    switch (args.length) {\n","\t      case 0: return func.call(thisArg);\n","\t      case 1: return func.call(thisArg, args[0]);\n","\t      case 2: return func.call(thisArg, args[0], args[1]);\n","\t      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n","\t    }\n","\t    return func.apply(thisArg, args);\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `baseAggregator` for arrays.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} setter The function to set `accumulator` values.\n","\t   * @param {Function} iteratee The iteratee to transform keys.\n","\t   * @param {Object} accumulator The initial aggregated object.\n","\t   * @returns {Function} Returns `accumulator`.\n","\t   */\n","\t  function arrayAggregator(array, setter, iteratee, accumulator) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    while (++index < length) {\n","\t      var value = array[index];\n","\t      setter(accumulator, value, iteratee(value), array);\n","\t    }\n","\t    return accumulator;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.forEach` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {Array} Returns `array`.\n","\t   */\n","\t  function arrayEach(array, iteratee) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (iteratee(array[index], index, array) === false) {\n","\t        break;\n","\t      }\n","\t    }\n","\t    return array;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.forEachRight` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {Array} Returns `array`.\n","\t   */\n","\t  function arrayEachRight(array, iteratee) {\n","\t    var length = array == null ? 0 : array.length;\n","\t\n","\t    while (length--) {\n","\t      if (iteratee(array[length], length, array) === false) {\n","\t        break;\n","\t      }\n","\t    }\n","\t    return array;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.every` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} predicate The function invoked per iteration.\n","\t   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n","\t   *  else `false`.\n","\t   */\n","\t  function arrayEvery(array, predicate) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (!predicate(array[index], index, array)) {\n","\t        return false;\n","\t      }\n","\t    }\n","\t    return true;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.filter` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} predicate The function invoked per iteration.\n","\t   * @returns {Array} Returns the new filtered array.\n","\t   */\n","\t  function arrayFilter(array, predicate) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length,\n","\t        resIndex = 0,\n","\t        result = [];\n","\t\n","\t    while (++index < length) {\n","\t      var value = array[index];\n","\t      if (predicate(value, index, array)) {\n","\t        result[resIndex++] = value;\n","\t      }\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.includes` for arrays without support for\n","\t   * specifying an index to search from.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to inspect.\n","\t   * @param {*} target The value to search for.\n","\t   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n","\t   */\n","\t  function arrayIncludes(array, value) {\n","\t    var length = array == null ? 0 : array.length;\n","\t    return !!length && baseIndexOf(array, value, 0) > -1;\n","\t  }\n","\t\n","\t  /**\n","\t   * This function is like `arrayIncludes` except that it accepts a comparator.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to inspect.\n","\t   * @param {*} target The value to search for.\n","\t   * @param {Function} comparator The comparator invoked per element.\n","\t   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n","\t   */\n","\t  function arrayIncludesWith(array, value, comparator) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (comparator(value, array[index])) {\n","\t        return true;\n","\t      }\n","\t    }\n","\t    return false;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.map` for arrays without support for iteratee\n","\t   * shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {Array} Returns the new mapped array.\n","\t   */\n","\t  function arrayMap(array, iteratee) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length,\n","\t        result = Array(length);\n","\t\n","\t    while (++index < length) {\n","\t      result[index] = iteratee(array[index], index, array);\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Appends the elements of `values` to `array`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to modify.\n","\t   * @param {Array} values The values to append.\n","\t   * @returns {Array} Returns `array`.\n","\t   */\n","\t  function arrayPush(array, values) {\n","\t    var index = -1,\n","\t        length = values.length,\n","\t        offset = array.length;\n","\t\n","\t    while (++index < length) {\n","\t      array[offset + index] = values[index];\n","\t    }\n","\t    return array;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.reduce` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @param {*} [accumulator] The initial value.\n","\t   * @param {boolean} [initAccum] Specify using the first element of `array` as\n","\t   *  the initial value.\n","\t   * @returns {*} Returns the accumulated value.\n","\t   */\n","\t  function arrayReduce(array, iteratee, accumulator, initAccum) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    if (initAccum && length) {\n","\t      accumulator = array[++index];\n","\t    }\n","\t    while (++index < length) {\n","\t      accumulator = iteratee(accumulator, array[index], index, array);\n","\t    }\n","\t    return accumulator;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.reduceRight` for arrays without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @param {*} [accumulator] The initial value.\n","\t   * @param {boolean} [initAccum] Specify using the last element of `array` as\n","\t   *  the initial value.\n","\t   * @returns {*} Returns the accumulated value.\n","\t   */\n","\t  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n","\t    var length = array == null ? 0 : array.length;\n","\t    if (initAccum && length) {\n","\t      accumulator = array[--length];\n","\t    }\n","\t    while (length--) {\n","\t      accumulator = iteratee(accumulator, array[length], length, array);\n","\t    }\n","\t    return accumulator;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.some` for arrays without support for iteratee\n","\t   * shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} [array] The array to iterate over.\n","\t   * @param {Function} predicate The function invoked per iteration.\n","\t   * @returns {boolean} Returns `true` if any element passes the predicate check,\n","\t   *  else `false`.\n","\t   */\n","\t  function arraySome(array, predicate) {\n","\t    var index = -1,\n","\t        length = array == null ? 0 : array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (predicate(array[index], index, array)) {\n","\t        return true;\n","\t      }\n","\t    }\n","\t    return false;\n","\t  }\n","\t\n","\t  /**\n","\t   * Gets the size of an ASCII `string`.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string inspect.\n","\t   * @returns {number} Returns the string size.\n","\t   */\n","\t  var asciiSize = baseProperty('length');\n","\t\n","\t  /**\n","\t   * Converts an ASCII `string` to an array.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to convert.\n","\t   * @returns {Array} Returns the converted array.\n","\t   */\n","\t  function asciiToArray(string) {\n","\t    return string.split('');\n","\t  }\n","\t\n","\t  /**\n","\t   * Splits an ASCII `string` into an array of its words.\n","\t   *\n","\t   * @private\n","\t   * @param {string} The string to inspect.\n","\t   * @returns {Array} Returns the words of `string`.\n","\t   */\n","\t  function asciiWords(string) {\n","\t    return string.match(reAsciiWord) || [];\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n","\t   * without support for iteratee shorthands, which iterates over `collection`\n","\t   * using `eachFunc`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array|Object} collection The collection to inspect.\n","\t   * @param {Function} predicate The function invoked per iteration.\n","\t   * @param {Function} eachFunc The function to iterate over `collection`.\n","\t   * @returns {*} Returns the found element or its key, else `undefined`.\n","\t   */\n","\t  function baseFindKey(collection, predicate, eachFunc) {\n","\t    var result;\n","\t    eachFunc(collection, function(value, key, collection) {\n","\t      if (predicate(value, key, collection)) {\n","\t        result = key;\n","\t        return false;\n","\t      }\n","\t    });\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n","\t   * support for iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {Function} predicate The function invoked per iteration.\n","\t   * @param {number} fromIndex The index to search from.\n","\t   * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t   * @returns {number} Returns the index of the matched value, else `-1`.\n","\t   */\n","\t  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n","\t    var length = array.length,\n","\t        index = fromIndex + (fromRight ? 1 : -1);\n","\t\n","\t    while ((fromRight ? index-- : ++index < length)) {\n","\t      if (predicate(array[index], index, array)) {\n","\t        return index;\n","\t      }\n","\t    }\n","\t    return -1;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {*} value The value to search for.\n","\t   * @param {number} fromIndex The index to search from.\n","\t   * @returns {number} Returns the index of the matched value, else `-1`.\n","\t   */\n","\t  function baseIndexOf(array, value, fromIndex) {\n","\t    return value === value\n","\t      ? strictIndexOf(array, value, fromIndex)\n","\t      : baseFindIndex(array, baseIsNaN, fromIndex);\n","\t  }\n","\t\n","\t  /**\n","\t   * This function is like `baseIndexOf` except that it accepts a comparator.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {*} value The value to search for.\n","\t   * @param {number} fromIndex The index to search from.\n","\t   * @param {Function} comparator The comparator invoked per element.\n","\t   * @returns {number} Returns the index of the matched value, else `-1`.\n","\t   */\n","\t  function baseIndexOfWith(array, value, fromIndex, comparator) {\n","\t    var index = fromIndex - 1,\n","\t        length = array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (comparator(array[index], value)) {\n","\t        return index;\n","\t      }\n","\t    }\n","\t    return -1;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.isNaN` without support for number objects.\n","\t   *\n","\t   * @private\n","\t   * @param {*} value The value to check.\n","\t   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n","\t   */\n","\t  function baseIsNaN(value) {\n","\t    return value !== value;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.mean` and `_.meanBy` without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {number} Returns the mean.\n","\t   */\n","\t  function baseMean(array, iteratee) {\n","\t    var length = array == null ? 0 : array.length;\n","\t    return length ? (baseSum(array, iteratee) / length) : NAN;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.property` without support for deep paths.\n","\t   *\n","\t   * @private\n","\t   * @param {string} key The key of the property to get.\n","\t   * @returns {Function} Returns the new accessor function.\n","\t   */\n","\t  function baseProperty(key) {\n","\t    return function(object) {\n","\t      return object == null ? undefined : object[key];\n","\t    };\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.propertyOf` without support for deep paths.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} object The object to query.\n","\t   * @returns {Function} Returns the new accessor function.\n","\t   */\n","\t  function basePropertyOf(object) {\n","\t    return function(key) {\n","\t      return object == null ? undefined : object[key];\n","\t    };\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n","\t   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array|Object} collection The collection to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @param {*} accumulator The initial value.\n","\t   * @param {boolean} initAccum Specify using the first or last element of\n","\t   *  `collection` as the initial value.\n","\t   * @param {Function} eachFunc The function to iterate over `collection`.\n","\t   * @returns {*} Returns the accumulated value.\n","\t   */\n","\t  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n","\t    eachFunc(collection, function(value, index, collection) {\n","\t      accumulator = initAccum\n","\t        ? (initAccum = false, value)\n","\t        : iteratee(accumulator, value, index, collection);\n","\t    });\n","\t    return accumulator;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.sortBy` which uses `comparer` to define the\n","\t   * sort order of `array` and replaces criteria objects with their corresponding\n","\t   * values.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to sort.\n","\t   * @param {Function} comparer The function to define sort order.\n","\t   * @returns {Array} Returns `array`.\n","\t   */\n","\t  function baseSortBy(array, comparer) {\n","\t    var length = array.length;\n","\t\n","\t    array.sort(comparer);\n","\t    while (length--) {\n","\t      array[length] = array[length].value;\n","\t    }\n","\t    return array;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.sum` and `_.sumBy` without support for\n","\t   * iteratee shorthands.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to iterate over.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {number} Returns the sum.\n","\t   */\n","\t  function baseSum(array, iteratee) {\n","\t    var result,\n","\t        index = -1,\n","\t        length = array.length;\n","\t\n","\t    while (++index < length) {\n","\t      var current = iteratee(array[index]);\n","\t      if (current !== undefined) {\n","\t        result = result === undefined ? current : (result + current);\n","\t      }\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.times` without support for iteratee shorthands\n","\t   * or max array length checks.\n","\t   *\n","\t   * @private\n","\t   * @param {number} n The number of times to invoke `iteratee`.\n","\t   * @param {Function} iteratee The function invoked per iteration.\n","\t   * @returns {Array} Returns the array of results.\n","\t   */\n","\t  function baseTimes(n, iteratee) {\n","\t    var index = -1,\n","\t        result = Array(n);\n","\t\n","\t    while (++index < n) {\n","\t      result[index] = iteratee(index);\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n","\t   * of key-value pairs for `object` corresponding to the property names of `props`.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} object The object to query.\n","\t   * @param {Array} props The property names to get values for.\n","\t   * @returns {Object} Returns the key-value pairs.\n","\t   */\n","\t  function baseToPairs(object, props) {\n","\t    return arrayMap(props, function(key) {\n","\t      return [key, object[key]];\n","\t    });\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.unary` without support for storing metadata.\n","\t   *\n","\t   * @private\n","\t   * @param {Function} func The function to cap arguments for.\n","\t   * @returns {Function} Returns the new capped function.\n","\t   */\n","\t  function baseUnary(func) {\n","\t    return function(value) {\n","\t      return func(value);\n","\t    };\n","\t  }\n","\t\n","\t  /**\n","\t   * The base implementation of `_.values` and `_.valuesIn` which creates an\n","\t   * array of `object` property values corresponding to the property names\n","\t   * of `props`.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} object The object to query.\n","\t   * @param {Array} props The property names to get values for.\n","\t   * @returns {Object} Returns the array of property values.\n","\t   */\n","\t  function baseValues(object, props) {\n","\t    return arrayMap(props, function(key) {\n","\t      return object[key];\n","\t    });\n","\t  }\n","\t\n","\t  /**\n","\t   * Checks if a `cache` value for `key` exists.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} cache The cache to query.\n","\t   * @param {string} key The key of the entry to check.\n","\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n","\t   */\n","\t  function cacheHas(cache, key) {\n","\t    return cache.has(key);\n","\t  }\n","\t\n","\t  /**\n","\t   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n","\t   * that is not found in the character symbols.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} strSymbols The string symbols to inspect.\n","\t   * @param {Array} chrSymbols The character symbols to find.\n","\t   * @returns {number} Returns the index of the first unmatched string symbol.\n","\t   */\n","\t  function charsStartIndex(strSymbols, chrSymbols) {\n","\t    var index = -1,\n","\t        length = strSymbols.length;\n","\t\n","\t    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n","\t    return index;\n","\t  }\n","\t\n","\t  /**\n","\t   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n","\t   * that is not found in the character symbols.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} strSymbols The string symbols to inspect.\n","\t   * @param {Array} chrSymbols The character symbols to find.\n","\t   * @returns {number} Returns the index of the last unmatched string symbol.\n","\t   */\n","\t  function charsEndIndex(strSymbols, chrSymbols) {\n","\t    var index = strSymbols.length;\n","\t\n","\t    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n","\t    return index;\n","\t  }\n","\t\n","\t  /**\n","\t   * Gets the number of `placeholder` occurrences in `array`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {*} placeholder The placeholder to search for.\n","\t   * @returns {number} Returns the placeholder count.\n","\t   */\n","\t  function countHolders(array, placeholder) {\n","\t    var length = array.length,\n","\t        result = 0;\n","\t\n","\t    while (length--) {\n","\t      if (array[length] === placeholder) {\n","\t        ++result;\n","\t      }\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n","\t   * letters to basic Latin letters.\n","\t   *\n","\t   * @private\n","\t   * @param {string} letter The matched letter to deburr.\n","\t   * @returns {string} Returns the deburred letter.\n","\t   */\n","\t  var deburrLetter = basePropertyOf(deburredLetters);\n","\t\n","\t  /**\n","\t   * Used by `_.escape` to convert characters to HTML entities.\n","\t   *\n","\t   * @private\n","\t   * @param {string} chr The matched character to escape.\n","\t   * @returns {string} Returns the escaped character.\n","\t   */\n","\t  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n","\t\n","\t  /**\n","\t   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n","\t   *\n","\t   * @private\n","\t   * @param {string} chr The matched character to escape.\n","\t   * @returns {string} Returns the escaped character.\n","\t   */\n","\t  function escapeStringChar(chr) {\n","\t    return '\\\\' + stringEscapes[chr];\n","\t  }\n","\t\n","\t  /**\n","\t   * Gets the value at `key` of `object`.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} [object] The object to query.\n","\t   * @param {string} key The key of the property to get.\n","\t   * @returns {*} Returns the property value.\n","\t   */\n","\t  function getValue(object, key) {\n","\t    return object == null ? undefined : object[key];\n","\t  }\n","\t\n","\t  /**\n","\t   * Checks if `string` contains Unicode symbols.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to inspect.\n","\t   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n","\t   */\n","\t  function hasUnicode(string) {\n","\t    return reHasUnicode.test(string);\n","\t  }\n","\t\n","\t  /**\n","\t   * Checks if `string` contains a word composed of Unicode symbols.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to inspect.\n","\t   * @returns {boolean} Returns `true` if a word is found, else `false`.\n","\t   */\n","\t  function hasUnicodeWord(string) {\n","\t    return reHasUnicodeWord.test(string);\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts `iterator` to an array.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} iterator The iterator to convert.\n","\t   * @returns {Array} Returns the converted array.\n","\t   */\n","\t  function iteratorToArray(iterator) {\n","\t    var data,\n","\t        result = [];\n","\t\n","\t    while (!(data = iterator.next()).done) {\n","\t      result.push(data.value);\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts `map` to its key-value pairs.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} map The map to convert.\n","\t   * @returns {Array} Returns the key-value pairs.\n","\t   */\n","\t  function mapToArray(map) {\n","\t    var index = -1,\n","\t        result = Array(map.size);\n","\t\n","\t    map.forEach(function(value, key) {\n","\t      result[++index] = [key, value];\n","\t    });\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Creates a unary function that invokes `func` with its argument transformed.\n","\t   *\n","\t   * @private\n","\t   * @param {Function} func The function to wrap.\n","\t   * @param {Function} transform The argument transform.\n","\t   * @returns {Function} Returns the new function.\n","\t   */\n","\t  function overArg(func, transform) {\n","\t    return function(arg) {\n","\t      return func(transform(arg));\n","\t    };\n","\t  }\n","\t\n","\t  /**\n","\t   * Replaces all `placeholder` elements in `array` with an internal placeholder\n","\t   * and returns an array of their indexes.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to modify.\n","\t   * @param {*} placeholder The placeholder to replace.\n","\t   * @returns {Array} Returns the new array of placeholder indexes.\n","\t   */\n","\t  function replaceHolders(array, placeholder) {\n","\t    var index = -1,\n","\t        length = array.length,\n","\t        resIndex = 0,\n","\t        result = [];\n","\t\n","\t    while (++index < length) {\n","\t      var value = array[index];\n","\t      if (value === placeholder || value === PLACEHOLDER) {\n","\t        array[index] = PLACEHOLDER;\n","\t        result[resIndex++] = index;\n","\t      }\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts `set` to an array of its values.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} set The set to convert.\n","\t   * @returns {Array} Returns the values.\n","\t   */\n","\t  function setToArray(set) {\n","\t    var index = -1,\n","\t        result = Array(set.size);\n","\t\n","\t    set.forEach(function(value) {\n","\t      result[++index] = value;\n","\t    });\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts `set` to its value-value pairs.\n","\t   *\n","\t   * @private\n","\t   * @param {Object} set The set to convert.\n","\t   * @returns {Array} Returns the value-value pairs.\n","\t   */\n","\t  function setToPairs(set) {\n","\t    var index = -1,\n","\t        result = Array(set.size);\n","\t\n","\t    set.forEach(function(value) {\n","\t      result[++index] = [value, value];\n","\t    });\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.indexOf` which performs strict equality\n","\t   * comparisons of values, i.e. `===`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {*} value The value to search for.\n","\t   * @param {number} fromIndex The index to search from.\n","\t   * @returns {number} Returns the index of the matched value, else `-1`.\n","\t   */\n","\t  function strictIndexOf(array, value, fromIndex) {\n","\t    var index = fromIndex - 1,\n","\t        length = array.length;\n","\t\n","\t    while (++index < length) {\n","\t      if (array[index] === value) {\n","\t        return index;\n","\t      }\n","\t    }\n","\t    return -1;\n","\t  }\n","\t\n","\t  /**\n","\t   * A specialized version of `_.lastIndexOf` which performs strict equality\n","\t   * comparisons of values, i.e. `===`.\n","\t   *\n","\t   * @private\n","\t   * @param {Array} array The array to inspect.\n","\t   * @param {*} value The value to search for.\n","\t   * @param {number} fromIndex The index to search from.\n","\t   * @returns {number} Returns the index of the matched value, else `-1`.\n","\t   */\n","\t  function strictLastIndexOf(array, value, fromIndex) {\n","\t    var index = fromIndex + 1;\n","\t    while (index--) {\n","\t      if (array[index] === value) {\n","\t        return index;\n","\t      }\n","\t    }\n","\t    return index;\n","\t  }\n","\t\n","\t  /**\n","\t   * Gets the number of symbols in `string`.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to inspect.\n","\t   * @returns {number} Returns the string size.\n","\t   */\n","\t  function stringSize(string) {\n","\t    return hasUnicode(string)\n","\t      ? unicodeSize(string)\n","\t      : asciiSize(string);\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts `string` to an array.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to convert.\n","\t   * @returns {Array} Returns the converted array.\n","\t   */\n","\t  function stringToArray(string) {\n","\t    return hasUnicode(string)\n","\t      ? unicodeToArray(string)\n","\t      : asciiToArray(string);\n","\t  }\n","\t\n","\t  /**\n","\t   * Used by `_.unescape` to convert HTML entities to characters.\n","\t   *\n","\t   * @private\n","\t   * @param {string} chr The matched character to unescape.\n","\t   * @returns {string} Returns the unescaped character.\n","\t   */\n","\t  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n","\t\n","\t  /**\n","\t   * Gets the size of a Unicode `string`.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string inspect.\n","\t   * @returns {number} Returns the string size.\n","\t   */\n","\t  function unicodeSize(string) {\n","\t    var result = reUnicode.lastIndex = 0;\n","\t    while (reUnicode.test(string)) {\n","\t      ++result;\n","\t    }\n","\t    return result;\n","\t  }\n","\t\n","\t  /**\n","\t   * Converts a Unicode `string` to an array.\n","\t   *\n","\t   * @private\n","\t   * @param {string} string The string to convert.\n","\t   * @returns {Array} Returns the converted array.\n","\t   */\n","\t  function unicodeToArray(string) {\n","\t    return string.match(reUnicode) || [];\n","\t  }\n","\t\n","\t  /**\n","\t   * Splits a Unicode `string` into an array of its words.\n","\t   *\n","\t   * @private\n","\t   * @param {string} The string to inspect.\n","\t   * @returns {Array} Returns the words of `string`.\n","\t   */\n","\t  function unicodeWords(string) {\n","\t    return string.match(reUnicodeWord) || [];\n","\t  }\n","\t\n","\t  /*--------------------------------------------------------------------------*/\n","\t\n","\t  /**\n","\t   * Create a new pristine `lodash` function using the `context` object.\n","\t   *\n","\t   * @static\n","\t   * @memberOf _\n","\t   * @since 1.1.0\n","\t   * @category Util\n","\t   * @param {Object} [context=root] The context object.\n","\t   * @returns {Function} Returns a new `lodash` function.\n","\t   * @example\n","\t   *\n","\t   * _.mixin({ 'foo': _.constant('foo') });\n","\t   *\n","\t   * var lodash = _.runInContext();\n","\t   * lodash.mixin({ 'bar': lodash.constant('bar') });\n","\t   *\n","\t   * _.isFunction(_.foo);\n","\t   * // => true\n","\t   * _.isFunction(_.bar);\n","\t   * // => false\n","\t   *\n","\t   * lodash.isFunction(lodash.foo);\n","\t   * // => false\n","\t   * lodash.isFunction(lodash.bar);\n","\t   * // => true\n","\t   *\n","\t   * // Create a suped-up `defer` in Node.js.\n","\t   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n","\t   */\n","\t  var runInContext = (function runInContext(context) {\n","\t    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n","\t\n","\t    /** Built-in constructor references. */\n","\t    var Array = context.Array,\n","\t        Date = context.Date,\n","\t        Error = context.Error,\n","\t        Function = context.Function,\n","\t        Math = context.Math,\n","\t        Object = context.Object,\n","\t        RegExp = context.RegExp,\n","\t        String = context.String,\n","\t        TypeError = context.TypeError;\n","\t\n","\t    /** Used for built-in method references. */\n","\t    var arrayProto = Array.prototype,\n","\t        funcProto = Function.prototype,\n","\t        objectProto = Object.prototype;\n","\t\n","\t    /** Used to detect overreaching core-js shims. */\n","\t    var coreJsData = context['__core-js_shared__'];\n","\t\n","\t    /** Used to resolve the decompiled source of functions. */\n","\t    var funcToString = funcProto.toString;\n","\t\n","\t    /** Used to check objects for own properties. */\n","\t    var hasOwnProperty = objectProto.hasOwnProperty;\n","\t\n","\t    /** Used to generate unique IDs. */\n","\t    var idCounter = 0;\n","\t\n","\t    /** Used to detect methods masquerading as native. */\n","\t    var maskSrcKey = (function() {\n","\t      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n","\t      return uid ? ('Symbol(src)_1.' + uid) : '';\n","\t    }());\n","\t\n","\t    /**\n","\t     * Used to resolve the\n","\t     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n","\t     * of values.\n","\t     */\n","\t    var nativeObjectToString = objectProto.toString;\n","\t\n","\t    /** Used to infer the `Object` constructor. */\n","\t    var objectCtorString = funcToString.call(Object);\n","\t\n","\t    /** Used to restore the original `_` reference in `_.noConflict`. */\n","\t    var oldDash = root._;\n","\t\n","\t    /** Used to detect if a method is native. */\n","\t    var reIsNative = RegExp('^' +\n","\t      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n","\t      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n","\t    );\n","\t\n","\t    /** Built-in value references. */\n","\t    var Buffer = moduleExports ? context.Buffer : undefined,\n","\t        Symbol = context.Symbol,\n","\t        Uint8Array = context.Uint8Array,\n","\t        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n","\t        getPrototype = overArg(Object.getPrototypeOf, Object),\n","\t        objectCreate = Object.create,\n","\t        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n","\t        splice = arrayProto.splice,\n","\t        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n","\t        symIterator = Symbol ? Symbol.iterator : undefined,\n","\t        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n","\t\n","\t    var defineProperty = (function() {\n","\t      try {\n","\t        var func = getNative(Object, 'defineProperty');\n","\t        func({}, '', {});\n","\t        return func;\n","\t      } catch (e) {}\n","\t    }());\n","\t\n","\t    /** Mocked built-ins. */\n","\t    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n","\t        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n","\t        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n","\t\n","\t    /* Built-in method references for those with the same name as other `lodash` methods. */\n","\t    var nativeCeil = Math.ceil,\n","\t        nativeFloor = Math.floor,\n","\t        nativeGetSymbols = Object.getOwnPropertySymbols,\n","\t        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n","\t        nativeIsFinite = context.isFinite,\n","\t        nativeJoin = arrayProto.join,\n","\t        nativeKeys = overArg(Object.keys, Object),\n","\t        nativeMax = Math.max,\n","\t        nativeMin = Math.min,\n","\t        nativeNow = Date.now,\n","\t        nativeParseInt = context.parseInt,\n","\t        nativeRandom = Math.random,\n","\t        nativeReverse = arrayProto.reverse;\n","\t\n","\t    /* Built-in method references that are verified to be native. */\n","\t    var DataView = getNative(context, 'DataView'),\n","\t        Map = getNative(context, 'Map'),\n","\t        Promise = getNative(context, 'Promise'),\n","\t        Set = getNative(context, 'Set'),\n","\t        WeakMap = getNative(context, 'WeakMap'),\n","\t        nativeCreate = getNative(Object, 'create');\n","\t\n","\t    /** Used to store function metadata. */\n","\t    var metaMap = WeakMap && new WeakMap;\n","\t\n","\t    /** Used to lookup unminified function names. */\n","\t    var realNames = {};\n","\t\n","\t    /** Used to detect maps, sets, and weakmaps. */\n","\t    var dataViewCtorString = toSource(DataView),\n","\t        mapCtorString = toSource(Map),\n","\t        promiseCtorString = toSource(Promise),\n","\t        setCtorString = toSource(Set),\n","\t        weakMapCtorString = toSource(WeakMap);\n","\t\n","\t    /** Used to convert symbols to primitives and strings. */\n","\t    var symbolProto = Symbol ? Symbol.prototype : undefined,\n","\t        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n","\t        symbolToString = symbolProto ? symbolProto.toString : undefined;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a `lodash` object which wraps `value` to enable implicit method\n","\t     * chain sequences. Methods that operate on and return arrays, collections,\n","\t     * and functions can be chained together. Methods that retrieve a single value\n","\t     * or may return a primitive value will automatically end the chain sequence\n","\t     * and return the unwrapped value. Otherwise, the value must be unwrapped\n","\t     * with `_#value`.\n","\t     *\n","\t     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n","\t     * enabled using `_.chain`.\n","\t     *\n","\t     * The execution of chained methods is lazy, that is, it's deferred until\n","\t     * `_#value` is implicitly or explicitly called.\n","\t     *\n","\t     * Lazy evaluation allows several methods to support shortcut fusion.\n","\t     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n","\t     * the creation of intermediate arrays and can greatly reduce the number of\n","\t     * iteratee executions. Sections of a chain sequence qualify for shortcut\n","\t     * fusion if the section is applied to an array and iteratees accept only\n","\t     * one argument. The heuristic for whether a section qualifies for shortcut\n","\t     * fusion is subject to change.\n","\t     *\n","\t     * Chaining is supported in custom builds as long as the `_#value` method is\n","\t     * directly or indirectly included in the build.\n","\t     *\n","\t     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n","\t     *\n","\t     * The wrapper `Array` methods are:\n","\t     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n","\t     *\n","\t     * The wrapper `String` methods are:\n","\t     * `replace` and `split`\n","\t     *\n","\t     * The wrapper methods that support shortcut fusion are:\n","\t     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n","\t     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n","\t     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n","\t     *\n","\t     * The chainable wrapper methods are:\n","\t     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n","\t     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n","\t     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n","\t     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n","\t     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n","\t     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n","\t     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n","\t     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n","\t     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n","\t     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n","\t     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n","\t     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n","\t     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n","\t     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n","\t     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n","\t     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n","\t     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n","\t     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n","\t     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n","\t     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n","\t     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n","\t     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n","\t     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n","\t     * `zipObject`, `zipObjectDeep`, and `zipWith`\n","\t     *\n","\t     * The wrapper methods that are **not** chainable by default are:\n","\t     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n","\t     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n","\t     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n","\t     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n","\t     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n","\t     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n","\t     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n","\t     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n","\t     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n","\t     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n","\t     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n","\t     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n","\t     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n","\t     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n","\t     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n","\t     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n","\t     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n","\t     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n","\t     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n","\t     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n","\t     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n","\t     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n","\t     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n","\t     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n","\t     * `upperFirst`, `value`, and `words`\n","\t     *\n","\t     * @name _\n","\t     * @constructor\n","\t     * @category Seq\n","\t     * @param {*} value The value to wrap in a `lodash` instance.\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * var wrapped = _([1, 2, 3]);\n","\t     *\n","\t     * // Returns an unwrapped value.\n","\t     * wrapped.reduce(_.add);\n","\t     * // => 6\n","\t     *\n","\t     * // Returns a wrapped value.\n","\t     * var squares = wrapped.map(square);\n","\t     *\n","\t     * _.isArray(squares);\n","\t     * // => false\n","\t     *\n","\t     * _.isArray(squares.value());\n","\t     * // => true\n","\t     */\n","\t    function lodash(value) {\n","\t      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n","\t        if (value instanceof LodashWrapper) {\n","\t          return value;\n","\t        }\n","\t        if (hasOwnProperty.call(value, '__wrapped__')) {\n","\t          return wrapperClone(value);\n","\t        }\n","\t      }\n","\t      return new LodashWrapper(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.create` without support for assigning\n","\t     * properties to the created object.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} proto The object to inherit from.\n","\t     * @returns {Object} Returns the new object.\n","\t     */\n","\t    var baseCreate = (function() {\n","\t      function object() {}\n","\t      return function(proto) {\n","\t        if (!isObject(proto)) {\n","\t          return {};\n","\t        }\n","\t        if (objectCreate) {\n","\t          return objectCreate(proto);\n","\t        }\n","\t        object.prototype = proto;\n","\t        var result = new object;\n","\t        object.prototype = undefined;\n","\t        return result;\n","\t      };\n","\t    }());\n","\t\n","\t    /**\n","\t     * The function whose prototype chain sequence wrappers inherit from.\n","\t     *\n","\t     * @private\n","\t     */\n","\t    function baseLodash() {\n","\t      // No operation performed.\n","\t    }\n","\t\n","\t    /**\n","\t     * The base constructor for creating `lodash` wrapper objects.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to wrap.\n","\t     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n","\t     */\n","\t    function LodashWrapper(value, chainAll) {\n","\t      this.__wrapped__ = value;\n","\t      this.__actions__ = [];\n","\t      this.__chain__ = !!chainAll;\n","\t      this.__index__ = 0;\n","\t      this.__values__ = undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * By default, the template delimiters used by lodash are like those in\n","\t     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n","\t     * following template settings to use alternative delimiters.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @type {Object}\n","\t     */\n","\t    lodash.templateSettings = {\n","\t\n","\t      /**\n","\t       * Used to detect `data` property values to be HTML-escaped.\n","\t       *\n","\t       * @memberOf _.templateSettings\n","\t       * @type {RegExp}\n","\t       */\n","\t      'escape': reEscape,\n","\t\n","\t      /**\n","\t       * Used to detect code to be evaluated.\n","\t       *\n","\t       * @memberOf _.templateSettings\n","\t       * @type {RegExp}\n","\t       */\n","\t      'evaluate': reEvaluate,\n","\t\n","\t      /**\n","\t       * Used to detect `data` property values to inject.\n","\t       *\n","\t       * @memberOf _.templateSettings\n","\t       * @type {RegExp}\n","\t       */\n","\t      'interpolate': reInterpolate,\n","\t\n","\t      /**\n","\t       * Used to reference the data object in the template text.\n","\t       *\n","\t       * @memberOf _.templateSettings\n","\t       * @type {string}\n","\t       */\n","\t      'variable': '',\n","\t\n","\t      /**\n","\t       * Used to import variables into the compiled template.\n","\t       *\n","\t       * @memberOf _.templateSettings\n","\t       * @type {Object}\n","\t       */\n","\t      'imports': {\n","\t\n","\t        /**\n","\t         * A reference to the `lodash` function.\n","\t         *\n","\t         * @memberOf _.templateSettings.imports\n","\t         * @type {Function}\n","\t         */\n","\t        '_': lodash\n","\t      }\n","\t    };\n","\t\n","\t    // Ensure wrappers are instances of `baseLodash`.\n","\t    lodash.prototype = baseLodash.prototype;\n","\t    lodash.prototype.constructor = lodash;\n","\t\n","\t    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n","\t    LodashWrapper.prototype.constructor = LodashWrapper;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {*} value The value to wrap.\n","\t     */\n","\t    function LazyWrapper(value) {\n","\t      this.__wrapped__ = value;\n","\t      this.__actions__ = [];\n","\t      this.__dir__ = 1;\n","\t      this.__filtered__ = false;\n","\t      this.__iteratees__ = [];\n","\t      this.__takeCount__ = MAX_ARRAY_LENGTH;\n","\t      this.__views__ = [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of the lazy wrapper object.\n","\t     *\n","\t     * @private\n","\t     * @name clone\n","\t     * @memberOf LazyWrapper\n","\t     * @returns {Object} Returns the cloned `LazyWrapper` object.\n","\t     */\n","\t    function lazyClone() {\n","\t      var result = new LazyWrapper(this.__wrapped__);\n","\t      result.__actions__ = copyArray(this.__actions__);\n","\t      result.__dir__ = this.__dir__;\n","\t      result.__filtered__ = this.__filtered__;\n","\t      result.__iteratees__ = copyArray(this.__iteratees__);\n","\t      result.__takeCount__ = this.__takeCount__;\n","\t      result.__views__ = copyArray(this.__views__);\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Reverses the direction of lazy iteration.\n","\t     *\n","\t     * @private\n","\t     * @name reverse\n","\t     * @memberOf LazyWrapper\n","\t     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n","\t     */\n","\t    function lazyReverse() {\n","\t      if (this.__filtered__) {\n","\t        var result = new LazyWrapper(this);\n","\t        result.__dir__ = -1;\n","\t        result.__filtered__ = true;\n","\t      } else {\n","\t        result = this.clone();\n","\t        result.__dir__ *= -1;\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Extracts the unwrapped value from its lazy wrapper.\n","\t     *\n","\t     * @private\n","\t     * @name value\n","\t     * @memberOf LazyWrapper\n","\t     * @returns {*} Returns the unwrapped value.\n","\t     */\n","\t    function lazyValue() {\n","\t      var array = this.__wrapped__.value(),\n","\t          dir = this.__dir__,\n","\t          isArr = isArray(array),\n","\t          isRight = dir < 0,\n","\t          arrLength = isArr ? array.length : 0,\n","\t          view = getView(0, arrLength, this.__views__),\n","\t          start = view.start,\n","\t          end = view.end,\n","\t          length = end - start,\n","\t          index = isRight ? end : (start - 1),\n","\t          iteratees = this.__iteratees__,\n","\t          iterLength = iteratees.length,\n","\t          resIndex = 0,\n","\t          takeCount = nativeMin(length, this.__takeCount__);\n","\t\n","\t      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n","\t        return baseWrapperValue(array, this.__actions__);\n","\t      }\n","\t      var result = [];\n","\t\n","\t      outer:\n","\t      while (length-- && resIndex < takeCount) {\n","\t        index += dir;\n","\t\n","\t        var iterIndex = -1,\n","\t            value = array[index];\n","\t\n","\t        while (++iterIndex < iterLength) {\n","\t          var data = iteratees[iterIndex],\n","\t              iteratee = data.iteratee,\n","\t              type = data.type,\n","\t              computed = iteratee(value);\n","\t\n","\t          if (type == LAZY_MAP_FLAG) {\n","\t            value = computed;\n","\t          } else if (!computed) {\n","\t            if (type == LAZY_FILTER_FLAG) {\n","\t              continue outer;\n","\t            } else {\n","\t              break outer;\n","\t            }\n","\t          }\n","\t        }\n","\t        result[resIndex++] = value;\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n","\t    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n","\t    LazyWrapper.prototype.constructor = LazyWrapper;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a hash object.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {Array} [entries] The key-value pairs to cache.\n","\t     */\n","\t    function Hash(entries) {\n","\t      var index = -1,\n","\t          length = entries == null ? 0 : entries.length;\n","\t\n","\t      this.clear();\n","\t      while (++index < length) {\n","\t        var entry = entries[index];\n","\t        this.set(entry[0], entry[1]);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes all key-value entries from the hash.\n","\t     *\n","\t     * @private\n","\t     * @name clear\n","\t     * @memberOf Hash\n","\t     */\n","\t    function hashClear() {\n","\t      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n","\t      this.size = 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes `key` and its value from the hash.\n","\t     *\n","\t     * @private\n","\t     * @name delete\n","\t     * @memberOf Hash\n","\t     * @param {Object} hash The hash to modify.\n","\t     * @param {string} key The key of the value to remove.\n","\t     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n","\t     */\n","\t    function hashDelete(key) {\n","\t      var result = this.has(key) && delete this.__data__[key];\n","\t      this.size -= result ? 1 : 0;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the hash value for `key`.\n","\t     *\n","\t     * @private\n","\t     * @name get\n","\t     * @memberOf Hash\n","\t     * @param {string} key The key of the value to get.\n","\t     * @returns {*} Returns the entry value.\n","\t     */\n","\t    function hashGet(key) {\n","\t      var data = this.__data__;\n","\t      if (nativeCreate) {\n","\t        var result = data[key];\n","\t        return result === HASH_UNDEFINED ? undefined : result;\n","\t      }\n","\t      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if a hash value for `key` exists.\n","\t     *\n","\t     * @private\n","\t     * @name has\n","\t     * @memberOf Hash\n","\t     * @param {string} key The key of the entry to check.\n","\t     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n","\t     */\n","\t    function hashHas(key) {\n","\t      var data = this.__data__;\n","\t      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets the hash `key` to `value`.\n","\t     *\n","\t     * @private\n","\t     * @name set\n","\t     * @memberOf Hash\n","\t     * @param {string} key The key of the value to set.\n","\t     * @param {*} value The value to set.\n","\t     * @returns {Object} Returns the hash instance.\n","\t     */\n","\t    function hashSet(key, value) {\n","\t      var data = this.__data__;\n","\t      this.size += this.has(key) ? 0 : 1;\n","\t      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n","\t      return this;\n","\t    }\n","\t\n","\t    // Add methods to `Hash`.\n","\t    Hash.prototype.clear = hashClear;\n","\t    Hash.prototype['delete'] = hashDelete;\n","\t    Hash.prototype.get = hashGet;\n","\t    Hash.prototype.has = hashHas;\n","\t    Hash.prototype.set = hashSet;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates an list cache object.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {Array} [entries] The key-value pairs to cache.\n","\t     */\n","\t    function ListCache(entries) {\n","\t      var index = -1,\n","\t          length = entries == null ? 0 : entries.length;\n","\t\n","\t      this.clear();\n","\t      while (++index < length) {\n","\t        var entry = entries[index];\n","\t        this.set(entry[0], entry[1]);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes all key-value entries from the list cache.\n","\t     *\n","\t     * @private\n","\t     * @name clear\n","\t     * @memberOf ListCache\n","\t     */\n","\t    function listCacheClear() {\n","\t      this.__data__ = [];\n","\t      this.size = 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes `key` and its value from the list cache.\n","\t     *\n","\t     * @private\n","\t     * @name delete\n","\t     * @memberOf ListCache\n","\t     * @param {string} key The key of the value to remove.\n","\t     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n","\t     */\n","\t    function listCacheDelete(key) {\n","\t      var data = this.__data__,\n","\t          index = assocIndexOf(data, key);\n","\t\n","\t      if (index < 0) {\n","\t        return false;\n","\t      }\n","\t      var lastIndex = data.length - 1;\n","\t      if (index == lastIndex) {\n","\t        data.pop();\n","\t      } else {\n","\t        splice.call(data, index, 1);\n","\t      }\n","\t      --this.size;\n","\t      return true;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the list cache value for `key`.\n","\t     *\n","\t     * @private\n","\t     * @name get\n","\t     * @memberOf ListCache\n","\t     * @param {string} key The key of the value to get.\n","\t     * @returns {*} Returns the entry value.\n","\t     */\n","\t    function listCacheGet(key) {\n","\t      var data = this.__data__,\n","\t          index = assocIndexOf(data, key);\n","\t\n","\t      return index < 0 ? undefined : data[index][1];\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if a list cache value for `key` exists.\n","\t     *\n","\t     * @private\n","\t     * @name has\n","\t     * @memberOf ListCache\n","\t     * @param {string} key The key of the entry to check.\n","\t     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n","\t     */\n","\t    function listCacheHas(key) {\n","\t      return assocIndexOf(this.__data__, key) > -1;\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets the list cache `key` to `value`.\n","\t     *\n","\t     * @private\n","\t     * @name set\n","\t     * @memberOf ListCache\n","\t     * @param {string} key The key of the value to set.\n","\t     * @param {*} value The value to set.\n","\t     * @returns {Object} Returns the list cache instance.\n","\t     */\n","\t    function listCacheSet(key, value) {\n","\t      var data = this.__data__,\n","\t          index = assocIndexOf(data, key);\n","\t\n","\t      if (index < 0) {\n","\t        ++this.size;\n","\t        data.push([key, value]);\n","\t      } else {\n","\t        data[index][1] = value;\n","\t      }\n","\t      return this;\n","\t    }\n","\t\n","\t    // Add methods to `ListCache`.\n","\t    ListCache.prototype.clear = listCacheClear;\n","\t    ListCache.prototype['delete'] = listCacheDelete;\n","\t    ListCache.prototype.get = listCacheGet;\n","\t    ListCache.prototype.has = listCacheHas;\n","\t    ListCache.prototype.set = listCacheSet;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a map cache object to store key-value pairs.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {Array} [entries] The key-value pairs to cache.\n","\t     */\n","\t    function MapCache(entries) {\n","\t      var index = -1,\n","\t          length = entries == null ? 0 : entries.length;\n","\t\n","\t      this.clear();\n","\t      while (++index < length) {\n","\t        var entry = entries[index];\n","\t        this.set(entry[0], entry[1]);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes all key-value entries from the map.\n","\t     *\n","\t     * @private\n","\t     * @name clear\n","\t     * @memberOf MapCache\n","\t     */\n","\t    function mapCacheClear() {\n","\t      this.size = 0;\n","\t      this.__data__ = {\n","\t        'hash': new Hash,\n","\t        'map': new (Map || ListCache),\n","\t        'string': new Hash\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes `key` and its value from the map.\n","\t     *\n","\t     * @private\n","\t     * @name delete\n","\t     * @memberOf MapCache\n","\t     * @param {string} key The key of the value to remove.\n","\t     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n","\t     */\n","\t    function mapCacheDelete(key) {\n","\t      var result = getMapData(this, key)['delete'](key);\n","\t      this.size -= result ? 1 : 0;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the map value for `key`.\n","\t     *\n","\t     * @private\n","\t     * @name get\n","\t     * @memberOf MapCache\n","\t     * @param {string} key The key of the value to get.\n","\t     * @returns {*} Returns the entry value.\n","\t     */\n","\t    function mapCacheGet(key) {\n","\t      return getMapData(this, key).get(key);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if a map value for `key` exists.\n","\t     *\n","\t     * @private\n","\t     * @name has\n","\t     * @memberOf MapCache\n","\t     * @param {string} key The key of the entry to check.\n","\t     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n","\t     */\n","\t    function mapCacheHas(key) {\n","\t      return getMapData(this, key).has(key);\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets the map `key` to `value`.\n","\t     *\n","\t     * @private\n","\t     * @name set\n","\t     * @memberOf MapCache\n","\t     * @param {string} key The key of the value to set.\n","\t     * @param {*} value The value to set.\n","\t     * @returns {Object} Returns the map cache instance.\n","\t     */\n","\t    function mapCacheSet(key, value) {\n","\t      var data = getMapData(this, key),\n","\t          size = data.size;\n","\t\n","\t      data.set(key, value);\n","\t      this.size += data.size == size ? 0 : 1;\n","\t      return this;\n","\t    }\n","\t\n","\t    // Add methods to `MapCache`.\n","\t    MapCache.prototype.clear = mapCacheClear;\n","\t    MapCache.prototype['delete'] = mapCacheDelete;\n","\t    MapCache.prototype.get = mapCacheGet;\n","\t    MapCache.prototype.has = mapCacheHas;\n","\t    MapCache.prototype.set = mapCacheSet;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     *\n","\t     * Creates an array cache object to store unique values.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {Array} [values] The values to cache.\n","\t     */\n","\t    function SetCache(values) {\n","\t      var index = -1,\n","\t          length = values == null ? 0 : values.length;\n","\t\n","\t      this.__data__ = new MapCache;\n","\t      while (++index < length) {\n","\t        this.add(values[index]);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Adds `value` to the array cache.\n","\t     *\n","\t     * @private\n","\t     * @name add\n","\t     * @memberOf SetCache\n","\t     * @alias push\n","\t     * @param {*} value The value to cache.\n","\t     * @returns {Object} Returns the cache instance.\n","\t     */\n","\t    function setCacheAdd(value) {\n","\t      this.__data__.set(value, HASH_UNDEFINED);\n","\t      return this;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is in the array cache.\n","\t     *\n","\t     * @private\n","\t     * @name has\n","\t     * @memberOf SetCache\n","\t     * @param {*} value The value to search for.\n","\t     * @returns {number} Returns `true` if `value` is found, else `false`.\n","\t     */\n","\t    function setCacheHas(value) {\n","\t      return this.__data__.has(value);\n","\t    }\n","\t\n","\t    // Add methods to `SetCache`.\n","\t    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n","\t    SetCache.prototype.has = setCacheHas;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a stack cache object to store key-value pairs.\n","\t     *\n","\t     * @private\n","\t     * @constructor\n","\t     * @param {Array} [entries] The key-value pairs to cache.\n","\t     */\n","\t    function Stack(entries) {\n","\t      var data = this.__data__ = new ListCache(entries);\n","\t      this.size = data.size;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes all key-value entries from the stack.\n","\t     *\n","\t     * @private\n","\t     * @name clear\n","\t     * @memberOf Stack\n","\t     */\n","\t    function stackClear() {\n","\t      this.__data__ = new ListCache;\n","\t      this.size = 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes `key` and its value from the stack.\n","\t     *\n","\t     * @private\n","\t     * @name delete\n","\t     * @memberOf Stack\n","\t     * @param {string} key The key of the value to remove.\n","\t     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n","\t     */\n","\t    function stackDelete(key) {\n","\t      var data = this.__data__,\n","\t          result = data['delete'](key);\n","\t\n","\t      this.size = data.size;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the stack value for `key`.\n","\t     *\n","\t     * @private\n","\t     * @name get\n","\t     * @memberOf Stack\n","\t     * @param {string} key The key of the value to get.\n","\t     * @returns {*} Returns the entry value.\n","\t     */\n","\t    function stackGet(key) {\n","\t      return this.__data__.get(key);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if a stack value for `key` exists.\n","\t     *\n","\t     * @private\n","\t     * @name has\n","\t     * @memberOf Stack\n","\t     * @param {string} key The key of the entry to check.\n","\t     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n","\t     */\n","\t    function stackHas(key) {\n","\t      return this.__data__.has(key);\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets the stack `key` to `value`.\n","\t     *\n","\t     * @private\n","\t     * @name set\n","\t     * @memberOf Stack\n","\t     * @param {string} key The key of the value to set.\n","\t     * @param {*} value The value to set.\n","\t     * @returns {Object} Returns the stack cache instance.\n","\t     */\n","\t    function stackSet(key, value) {\n","\t      var data = this.__data__;\n","\t      if (data instanceof ListCache) {\n","\t        var pairs = data.__data__;\n","\t        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n","\t          pairs.push([key, value]);\n","\t          this.size = ++data.size;\n","\t          return this;\n","\t        }\n","\t        data = this.__data__ = new MapCache(pairs);\n","\t      }\n","\t      data.set(key, value);\n","\t      this.size = data.size;\n","\t      return this;\n","\t    }\n","\t\n","\t    // Add methods to `Stack`.\n","\t    Stack.prototype.clear = stackClear;\n","\t    Stack.prototype['delete'] = stackDelete;\n","\t    Stack.prototype.get = stackGet;\n","\t    Stack.prototype.has = stackHas;\n","\t    Stack.prototype.set = stackSet;\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates an array of the enumerable property names of the array-like `value`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to query.\n","\t     * @param {boolean} inherited Specify returning inherited property names.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     */\n","\t    function arrayLikeKeys(value, inherited) {\n","\t      var isArr = isArray(value),\n","\t          isArg = !isArr && isArguments(value),\n","\t          isBuff = !isArr && !isArg && isBuffer(value),\n","\t          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n","\t          skipIndexes = isArr || isArg || isBuff || isType,\n","\t          result = skipIndexes ? baseTimes(value.length, String) : [],\n","\t          length = result.length;\n","\t\n","\t      for (var key in value) {\n","\t        if ((inherited || hasOwnProperty.call(value, key)) &&\n","\t            !(skipIndexes && (\n","\t               // Safari 9 has enumerable `arguments.length` in strict mode.\n","\t               key == 'length' ||\n","\t               // Node.js 0.10 has enumerable non-index properties on buffers.\n","\t               (isBuff && (key == 'offset' || key == 'parent')) ||\n","\t               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n","\t               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n","\t               // Skip index properties.\n","\t               isIndex(key, length)\n","\t            ))) {\n","\t          result.push(key);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `_.sample` for arrays.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to sample.\n","\t     * @returns {*} Returns the random element.\n","\t     */\n","\t    function arraySample(array) {\n","\t      var length = array.length;\n","\t      return length ? array[baseRandom(0, length - 1)] : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `_.sampleSize` for arrays.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to sample.\n","\t     * @param {number} n The number of elements to sample.\n","\t     * @returns {Array} Returns the random elements.\n","\t     */\n","\t    function arraySampleSize(array, n) {\n","\t      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `_.shuffle` for arrays.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to shuffle.\n","\t     * @returns {Array} Returns the new shuffled array.\n","\t     */\n","\t    function arrayShuffle(array) {\n","\t      return shuffleSelf(copyArray(array));\n","\t    }\n","\t\n","\t    /**\n","\t     * This function is like `assignValue` except that it doesn't assign\n","\t     * `undefined` values.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {string} key The key of the property to assign.\n","\t     * @param {*} value The value to assign.\n","\t     */\n","\t    function assignMergeValue(object, key, value) {\n","\t      if ((value !== undefined && !eq(object[key], value)) ||\n","\t          (value === undefined && !(key in object))) {\n","\t        baseAssignValue(object, key, value);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n","\t     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {string} key The key of the property to assign.\n","\t     * @param {*} value The value to assign.\n","\t     */\n","\t    function assignValue(object, key, value) {\n","\t      var objValue = object[key];\n","\t      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n","\t          (value === undefined && !(key in object))) {\n","\t        baseAssignValue(object, key, value);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the index at which the `key` is found in `array` of key-value pairs.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {*} key The key to search for.\n","\t     * @returns {number} Returns the index of the matched value, else `-1`.\n","\t     */\n","\t    function assocIndexOf(array, key) {\n","\t      var length = array.length;\n","\t      while (length--) {\n","\t        if (eq(array[length][0], key)) {\n","\t          return length;\n","\t        }\n","\t      }\n","\t      return -1;\n","\t    }\n","\t\n","\t    /**\n","\t     * Aggregates elements of `collection` on `accumulator` with keys transformed\n","\t     * by `iteratee` and values set by `setter`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} setter The function to set `accumulator` values.\n","\t     * @param {Function} iteratee The iteratee to transform keys.\n","\t     * @param {Object} accumulator The initial aggregated object.\n","\t     * @returns {Function} Returns `accumulator`.\n","\t     */\n","\t    function baseAggregator(collection, setter, iteratee, accumulator) {\n","\t      baseEach(collection, function(value, key, collection) {\n","\t        setter(accumulator, value, iteratee(value), collection);\n","\t      });\n","\t      return accumulator;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.assign` without support for multiple sources\n","\t     * or `customizer` functions.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The destination object.\n","\t     * @param {Object} source The source object.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseAssign(object, source) {\n","\t      return object && copyObject(source, keys(source), object);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.assignIn` without support for multiple sources\n","\t     * or `customizer` functions.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The destination object.\n","\t     * @param {Object} source The source object.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseAssignIn(object, source) {\n","\t      return object && copyObject(source, keysIn(source), object);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `assignValue` and `assignMergeValue` without\n","\t     * value checks.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {string} key The key of the property to assign.\n","\t     * @param {*} value The value to assign.\n","\t     */\n","\t    function baseAssignValue(object, key, value) {\n","\t      if (key == '__proto__' && defineProperty) {\n","\t        defineProperty(object, key, {\n","\t          'configurable': true,\n","\t          'enumerable': true,\n","\t          'value': value,\n","\t          'writable': true\n","\t        });\n","\t      } else {\n","\t        object[key] = value;\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.at` without support for individual paths.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {string[]} paths The property paths to pick.\n","\t     * @returns {Array} Returns the picked elements.\n","\t     */\n","\t    function baseAt(object, paths) {\n","\t      var index = -1,\n","\t          length = paths.length,\n","\t          result = Array(length),\n","\t          skip = object == null;\n","\t\n","\t      while (++index < length) {\n","\t        result[index] = skip ? undefined : get(object, paths[index]);\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.clamp` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {number} number The number to clamp.\n","\t     * @param {number} [lower] The lower bound.\n","\t     * @param {number} upper The upper bound.\n","\t     * @returns {number} Returns the clamped number.\n","\t     */\n","\t    function baseClamp(number, lower, upper) {\n","\t      if (number === number) {\n","\t        if (upper !== undefined) {\n","\t          number = number <= upper ? number : upper;\n","\t        }\n","\t        if (lower !== undefined) {\n","\t          number = number >= lower ? number : lower;\n","\t        }\n","\t      }\n","\t      return number;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n","\t     * traversed objects.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to clone.\n","\t     * @param {boolean} bitmask The bitmask flags.\n","\t     *  1 - Deep clone\n","\t     *  2 - Flatten inherited properties\n","\t     *  4 - Clone symbols\n","\t     * @param {Function} [customizer] The function to customize cloning.\n","\t     * @param {string} [key] The key of `value`.\n","\t     * @param {Object} [object] The parent object of `value`.\n","\t     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n","\t     * @returns {*} Returns the cloned value.\n","\t     */\n","\t    function baseClone(value, bitmask, customizer, key, object, stack) {\n","\t      var result,\n","\t          isDeep = bitmask & CLONE_DEEP_FLAG,\n","\t          isFlat = bitmask & CLONE_FLAT_FLAG,\n","\t          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n","\t\n","\t      if (customizer) {\n","\t        result = object ? customizer(value, key, object, stack) : customizer(value);\n","\t      }\n","\t      if (result !== undefined) {\n","\t        return result;\n","\t      }\n","\t      if (!isObject(value)) {\n","\t        return value;\n","\t      }\n","\t      var isArr = isArray(value);\n","\t      if (isArr) {\n","\t        result = initCloneArray(value);\n","\t        if (!isDeep) {\n","\t          return copyArray(value, result);\n","\t        }\n","\t      } else {\n","\t        var tag = getTag(value),\n","\t            isFunc = tag == funcTag || tag == genTag;\n","\t\n","\t        if (isBuffer(value)) {\n","\t          return cloneBuffer(value, isDeep);\n","\t        }\n","\t        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n","\t          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n","\t          if (!isDeep) {\n","\t            return isFlat\n","\t              ? copySymbolsIn(value, baseAssignIn(result, value))\n","\t              : copySymbols(value, baseAssign(result, value));\n","\t          }\n","\t        } else {\n","\t          if (!cloneableTags[tag]) {\n","\t            return object ? value : {};\n","\t          }\n","\t          result = initCloneByTag(value, tag, isDeep);\n","\t        }\n","\t      }\n","\t      // Check for circular references and return its corresponding clone.\n","\t      stack || (stack = new Stack);\n","\t      var stacked = stack.get(value);\n","\t      if (stacked) {\n","\t        return stacked;\n","\t      }\n","\t      stack.set(value, result);\n","\t\n","\t      if (isSet(value)) {\n","\t        value.forEach(function(subValue) {\n","\t          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n","\t        });\n","\t\n","\t        return result;\n","\t      }\n","\t\n","\t      if (isMap(value)) {\n","\t        value.forEach(function(subValue, key) {\n","\t          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n","\t        });\n","\t\n","\t        return result;\n","\t      }\n","\t\n","\t      var keysFunc = isFull\n","\t        ? (isFlat ? getAllKeysIn : getAllKeys)\n","\t        : (isFlat ? keysIn : keys);\n","\t\n","\t      var props = isArr ? undefined : keysFunc(value);\n","\t      arrayEach(props || value, function(subValue, key) {\n","\t        if (props) {\n","\t          key = subValue;\n","\t          subValue = value[key];\n","\t        }\n","\t        // Recursively populate clone (susceptible to call stack limits).\n","\t        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.conforms` which doesn't clone `source`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} source The object of property predicates to conform to.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     */\n","\t    function baseConforms(source) {\n","\t      var props = keys(source);\n","\t      return function(object) {\n","\t        return baseConformsTo(object, source, props);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.conformsTo` which accepts `props` to check.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Object} source The object of property predicates to conform to.\n","\t     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n","\t     */\n","\t    function baseConformsTo(object, source, props) {\n","\t      var length = props.length;\n","\t      if (object == null) {\n","\t        return !length;\n","\t      }\n","\t      object = Object(object);\n","\t      while (length--) {\n","\t        var key = props[length],\n","\t            predicate = source[key],\n","\t            value = object[key];\n","\t\n","\t        if ((value === undefined && !(key in object)) || !predicate(value)) {\n","\t          return false;\n","\t        }\n","\t      }\n","\t      return true;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n","\t     * to provide to `func`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to delay.\n","\t     * @param {number} wait The number of milliseconds to delay invocation.\n","\t     * @param {Array} args The arguments to provide to `func`.\n","\t     * @returns {number|Object} Returns the timer id or timeout object.\n","\t     */\n","\t    function baseDelay(func, wait, args) {\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      return setTimeout(function() { func.apply(undefined, args); }, wait);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of methods like `_.difference` without support\n","\t     * for excluding multiple arrays or iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Array} values The values to exclude.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     */\n","\t    function baseDifference(array, values, iteratee, comparator) {\n","\t      var index = -1,\n","\t          includes = arrayIncludes,\n","\t          isCommon = true,\n","\t          length = array.length,\n","\t          result = [],\n","\t          valuesLength = values.length;\n","\t\n","\t      if (!length) {\n","\t        return result;\n","\t      }\n","\t      if (iteratee) {\n","\t        values = arrayMap(values, baseUnary(iteratee));\n","\t      }\n","\t      if (comparator) {\n","\t        includes = arrayIncludesWith;\n","\t        isCommon = false;\n","\t      }\n","\t      else if (values.length >= LARGE_ARRAY_SIZE) {\n","\t        includes = cacheHas;\n","\t        isCommon = false;\n","\t        values = new SetCache(values);\n","\t      }\n","\t      outer:\n","\t      while (++index < length) {\n","\t        var value = array[index],\n","\t            computed = iteratee == null ? value : iteratee(value);\n","\t\n","\t        value = (comparator || value !== 0) ? value : 0;\n","\t        if (isCommon && computed === computed) {\n","\t          var valuesIndex = valuesLength;\n","\t          while (valuesIndex--) {\n","\t            if (values[valuesIndex] === computed) {\n","\t              continue outer;\n","\t            }\n","\t          }\n","\t          result.push(value);\n","\t        }\n","\t        else if (!includes(values, computed, comparator)) {\n","\t          result.push(value);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.forEach` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @returns {Array|Object} Returns `collection`.\n","\t     */\n","\t    var baseEach = createBaseEach(baseForOwn);\n","\t\n","\t    /**\n","\t     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @returns {Array|Object} Returns `collection`.\n","\t     */\n","\t    var baseEachRight = createBaseEach(baseForOwnRight, true);\n","\t\n","\t    /**\n","\t     * The base implementation of `_.every` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} predicate The function invoked per iteration.\n","\t     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n","\t     *  else `false`\n","\t     */\n","\t    function baseEvery(collection, predicate) {\n","\t      var result = true;\n","\t      baseEach(collection, function(value, index, collection) {\n","\t        result = !!predicate(value, index, collection);\n","\t        return result;\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of methods like `_.max` and `_.min` which accepts a\n","\t     * `comparator` to determine the extremum value.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @param {Function} iteratee The iteratee invoked per iteration.\n","\t     * @param {Function} comparator The comparator used to compare values.\n","\t     * @returns {*} Returns the extremum value.\n","\t     */\n","\t    function baseExtremum(array, iteratee, comparator) {\n","\t      var index = -1,\n","\t          length = array.length;\n","\t\n","\t      while (++index < length) {\n","\t        var value = array[index],\n","\t            current = iteratee(value);\n","\t\n","\t        if (current != null && (computed === undefined\n","\t              ? (current === current && !isSymbol(current))\n","\t              : comparator(current, computed)\n","\t            )) {\n","\t          var computed = current,\n","\t              result = value;\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.fill` without an iteratee call guard.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to fill.\n","\t     * @param {*} value The value to fill `array` with.\n","\t     * @param {number} [start=0] The start position.\n","\t     * @param {number} [end=array.length] The end position.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function baseFill(array, value, start, end) {\n","\t      var length = array.length;\n","\t\n","\t      start = toInteger(start);\n","\t      if (start < 0) {\n","\t        start = -start > length ? 0 : (length + start);\n","\t      }\n","\t      end = (end === undefined || end > length) ? length : toInteger(end);\n","\t      if (end < 0) {\n","\t        end += length;\n","\t      }\n","\t      end = start > end ? 0 : toLength(end);\n","\t      while (start < end) {\n","\t        array[start++] = value;\n","\t      }\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.filter` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} predicate The function invoked per iteration.\n","\t     * @returns {Array} Returns the new filtered array.\n","\t     */\n","\t    function baseFilter(collection, predicate) {\n","\t      var result = [];\n","\t      baseEach(collection, function(value, index, collection) {\n","\t        if (predicate(value, index, collection)) {\n","\t          result.push(value);\n","\t        }\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.flatten` with support for restricting flattening.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to flatten.\n","\t     * @param {number} depth The maximum recursion depth.\n","\t     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n","\t     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n","\t     * @param {Array} [result=[]] The initial result value.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     */\n","\t    function baseFlatten(array, depth, predicate, isStrict, result) {\n","\t      var index = -1,\n","\t          length = array.length;\n","\t\n","\t      predicate || (predicate = isFlattenable);\n","\t      result || (result = []);\n","\t\n","\t      while (++index < length) {\n","\t        var value = array[index];\n","\t        if (depth > 0 && predicate(value)) {\n","\t          if (depth > 1) {\n","\t            // Recursively flatten arrays (susceptible to call stack limits).\n","\t            baseFlatten(value, depth - 1, predicate, isStrict, result);\n","\t          } else {\n","\t            arrayPush(result, value);\n","\t          }\n","\t        } else if (!isStrict) {\n","\t          result[result.length] = value;\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `baseForOwn` which iterates over `object`\n","\t     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n","\t     * Iteratee functions may exit iteration early by explicitly returning `false`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @param {Function} keysFunc The function to get the keys of `object`.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    var baseFor = createBaseFor();\n","\t\n","\t    /**\n","\t     * This function is like `baseFor` except that it iterates over properties\n","\t     * in the opposite order.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @param {Function} keysFunc The function to get the keys of `object`.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    var baseForRight = createBaseFor(true);\n","\t\n","\t    /**\n","\t     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseForOwn(object, iteratee) {\n","\t      return object && baseFor(object, iteratee, keys);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseForOwnRight(object, iteratee) {\n","\t      return object && baseForRight(object, iteratee, keys);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.functions` which creates an array of\n","\t     * `object` function property names filtered from `props`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Array} props The property names to filter.\n","\t     * @returns {Array} Returns the function names.\n","\t     */\n","\t    function baseFunctions(object, props) {\n","\t      return arrayFilter(props, function(key) {\n","\t        return isFunction(object[key]);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.get` without support for default values.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path of the property to get.\n","\t     * @returns {*} Returns the resolved value.\n","\t     */\n","\t    function baseGet(object, path) {\n","\t      path = castPath(path, object);\n","\t\n","\t      var index = 0,\n","\t          length = path.length;\n","\t\n","\t      while (object != null && index < length) {\n","\t        object = object[toKey(path[index++])];\n","\t      }\n","\t      return (index && index == length) ? object : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n","\t     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n","\t     * symbols of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Function} keysFunc The function to get the keys of `object`.\n","\t     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n","\t     * @returns {Array} Returns the array of property names and symbols.\n","\t     */\n","\t    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n","\t      var result = keysFunc(object);\n","\t      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `getTag` without fallbacks for buggy environments.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to query.\n","\t     * @returns {string} Returns the `toStringTag`.\n","\t     */\n","\t    function baseGetTag(value) {\n","\t      if (value == null) {\n","\t        return value === undefined ? undefinedTag : nullTag;\n","\t      }\n","\t      return (symToStringTag && symToStringTag in Object(value))\n","\t        ? getRawTag(value)\n","\t        : objectToString(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.gt` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n","\t     *  else `false`.\n","\t     */\n","\t    function baseGt(value, other) {\n","\t      return value > other;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.has` without support for deep paths.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} [object] The object to query.\n","\t     * @param {Array|string} key The key to check.\n","\t     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n","\t     */\n","\t    function baseHas(object, key) {\n","\t      return object != null && hasOwnProperty.call(object, key);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.hasIn` without support for deep paths.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} [object] The object to query.\n","\t     * @param {Array|string} key The key to check.\n","\t     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n","\t     */\n","\t    function baseHasIn(object, key) {\n","\t      return object != null && key in Object(object);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.inRange` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {number} number The number to check.\n","\t     * @param {number} start The start of the range.\n","\t     * @param {number} end The end of the range.\n","\t     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n","\t     */\n","\t    function baseInRange(number, start, end) {\n","\t      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of methods like `_.intersection`, without support\n","\t     * for iteratee shorthands, that accepts an array of arrays to inspect.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} arrays The arrays to inspect.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of shared values.\n","\t     */\n","\t    function baseIntersection(arrays, iteratee, comparator) {\n","\t      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n","\t          length = arrays[0].length,\n","\t          othLength = arrays.length,\n","\t          othIndex = othLength,\n","\t          caches = Array(othLength),\n","\t          maxLength = Infinity,\n","\t          result = [];\n","\t\n","\t      while (othIndex--) {\n","\t        var array = arrays[othIndex];\n","\t        if (othIndex && iteratee) {\n","\t          array = arrayMap(array, baseUnary(iteratee));\n","\t        }\n","\t        maxLength = nativeMin(array.length, maxLength);\n","\t        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n","\t          ? new SetCache(othIndex && array)\n","\t          : undefined;\n","\t      }\n","\t      array = arrays[0];\n","\t\n","\t      var index = -1,\n","\t          seen = caches[0];\n","\t\n","\t      outer:\n","\t      while (++index < length && result.length < maxLength) {\n","\t        var value = array[index],\n","\t            computed = iteratee ? iteratee(value) : value;\n","\t\n","\t        value = (comparator || value !== 0) ? value : 0;\n","\t        if (!(seen\n","\t              ? cacheHas(seen, computed)\n","\t              : includes(result, computed, comparator)\n","\t            )) {\n","\t          othIndex = othLength;\n","\t          while (--othIndex) {\n","\t            var cache = caches[othIndex];\n","\t            if (!(cache\n","\t                  ? cacheHas(cache, computed)\n","\t                  : includes(arrays[othIndex], computed, comparator))\n","\t                ) {\n","\t              continue outer;\n","\t            }\n","\t          }\n","\t          if (seen) {\n","\t            seen.push(computed);\n","\t          }\n","\t          result.push(value);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.invert` and `_.invertBy` which inverts\n","\t     * `object` with values transformed by `iteratee` and set by `setter`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} setter The function to set `accumulator` values.\n","\t     * @param {Function} iteratee The iteratee to transform values.\n","\t     * @param {Object} accumulator The initial inverted object.\n","\t     * @returns {Function} Returns `accumulator`.\n","\t     */\n","\t    function baseInverter(object, setter, iteratee, accumulator) {\n","\t      baseForOwn(object, function(value, key, object) {\n","\t        setter(accumulator, iteratee(value), key, object);\n","\t      });\n","\t      return accumulator;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.invoke` without support for individual\n","\t     * method arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path of the method to invoke.\n","\t     * @param {Array} args The arguments to invoke the method with.\n","\t     * @returns {*} Returns the result of the invoked method.\n","\t     */\n","\t    function baseInvoke(object, path, args) {\n","\t      path = castPath(path, object);\n","\t      object = parent(object, path);\n","\t      var func = object == null ? object : object[toKey(last(path))];\n","\t      return func == null ? undefined : apply(func, object, args);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isArguments`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n","\t     */\n","\t    function baseIsArguments(value) {\n","\t      return isObjectLike(value) && baseGetTag(value) == argsTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n","\t     */\n","\t    function baseIsArrayBuffer(value) {\n","\t      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isDate` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n","\t     */\n","\t    function baseIsDate(value) {\n","\t      return isObjectLike(value) && baseGetTag(value) == dateTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isEqual` which supports partial comparisons\n","\t     * and tracks traversed objects.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @param {boolean} bitmask The bitmask flags.\n","\t     *  1 - Unordered comparison\n","\t     *  2 - Partial comparison\n","\t     * @param {Function} [customizer] The function to customize comparisons.\n","\t     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n","\t     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n","\t     */\n","\t    function baseIsEqual(value, other, bitmask, customizer, stack) {\n","\t      if (value === other) {\n","\t        return true;\n","\t      }\n","\t      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n","\t        return value !== value && other !== other;\n","\t      }\n","\t      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseIsEqual` for arrays and objects which performs\n","\t     * deep comparisons and tracks traversed objects enabling objects with circular\n","\t     * references to be compared.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to compare.\n","\t     * @param {Object} other The other object to compare.\n","\t     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n","\t     * @param {Function} customizer The function to customize comparisons.\n","\t     * @param {Function} equalFunc The function to determine equivalents of values.\n","\t     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n","\t     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n","\t     */\n","\t    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n","\t      var objIsArr = isArray(object),\n","\t          othIsArr = isArray(other),\n","\t          objTag = objIsArr ? arrayTag : getTag(object),\n","\t          othTag = othIsArr ? arrayTag : getTag(other);\n","\t\n","\t      objTag = objTag == argsTag ? objectTag : objTag;\n","\t      othTag = othTag == argsTag ? objectTag : othTag;\n","\t\n","\t      var objIsObj = objTag == objectTag,\n","\t          othIsObj = othTag == objectTag,\n","\t          isSameTag = objTag == othTag;\n","\t\n","\t      if (isSameTag && isBuffer(object)) {\n","\t        if (!isBuffer(other)) {\n","\t          return false;\n","\t        }\n","\t        objIsArr = true;\n","\t        objIsObj = false;\n","\t      }\n","\t      if (isSameTag && !objIsObj) {\n","\t        stack || (stack = new Stack);\n","\t        return (objIsArr || isTypedArray(object))\n","\t          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n","\t          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n","\t      }\n","\t      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n","\t        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n","\t            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n","\t\n","\t        if (objIsWrapped || othIsWrapped) {\n","\t          var objUnwrapped = objIsWrapped ? object.value() : object,\n","\t              othUnwrapped = othIsWrapped ? other.value() : other;\n","\t\n","\t          stack || (stack = new Stack);\n","\t          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n","\t        }\n","\t      }\n","\t      if (!isSameTag) {\n","\t        return false;\n","\t      }\n","\t      stack || (stack = new Stack);\n","\t      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isMap` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n","\t     */\n","\t    function baseIsMap(value) {\n","\t      return isObjectLike(value) && getTag(value) == mapTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Object} source The object of property values to match.\n","\t     * @param {Array} matchData The property names, values, and compare flags to match.\n","\t     * @param {Function} [customizer] The function to customize comparisons.\n","\t     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n","\t     */\n","\t    function baseIsMatch(object, source, matchData, customizer) {\n","\t      var index = matchData.length,\n","\t          length = index,\n","\t          noCustomizer = !customizer;\n","\t\n","\t      if (object == null) {\n","\t        return !length;\n","\t      }\n","\t      object = Object(object);\n","\t      while (index--) {\n","\t        var data = matchData[index];\n","\t        if ((noCustomizer && data[2])\n","\t              ? data[1] !== object[data[0]]\n","\t              : !(data[0] in object)\n","\t            ) {\n","\t          return false;\n","\t        }\n","\t      }\n","\t      while (++index < length) {\n","\t        data = matchData[index];\n","\t        var key = data[0],\n","\t            objValue = object[key],\n","\t            srcValue = data[1];\n","\t\n","\t        if (noCustomizer && data[2]) {\n","\t          if (objValue === undefined && !(key in object)) {\n","\t            return false;\n","\t          }\n","\t        } else {\n","\t          var stack = new Stack;\n","\t          if (customizer) {\n","\t            var result = customizer(objValue, srcValue, key, object, source, stack);\n","\t          }\n","\t          if (!(result === undefined\n","\t                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n","\t                : result\n","\t              )) {\n","\t            return false;\n","\t          }\n","\t        }\n","\t      }\n","\t      return true;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isNative` without bad shim checks.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a native function,\n","\t     *  else `false`.\n","\t     */\n","\t    function baseIsNative(value) {\n","\t      if (!isObject(value) || isMasked(value)) {\n","\t        return false;\n","\t      }\n","\t      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n","\t      return pattern.test(toSource(value));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isRegExp` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n","\t     */\n","\t    function baseIsRegExp(value) {\n","\t      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isSet` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n","\t     */\n","\t    function baseIsSet(value) {\n","\t      return isObjectLike(value) && getTag(value) == setTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n","\t     */\n","\t    function baseIsTypedArray(value) {\n","\t      return isObjectLike(value) &&\n","\t        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.iteratee`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} [value=_.identity] The value to convert to an iteratee.\n","\t     * @returns {Function} Returns the iteratee.\n","\t     */\n","\t    function baseIteratee(value) {\n","\t      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n","\t      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n","\t      if (typeof value == 'function') {\n","\t        return value;\n","\t      }\n","\t      if (value == null) {\n","\t        return identity;\n","\t      }\n","\t      if (typeof value == 'object') {\n","\t        return isArray(value)\n","\t          ? baseMatchesProperty(value[0], value[1])\n","\t          : baseMatches(value);\n","\t      }\n","\t      return property(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     */\n","\t    function baseKeys(object) {\n","\t      if (!isPrototype(object)) {\n","\t        return nativeKeys(object);\n","\t      }\n","\t      var result = [];\n","\t      for (var key in Object(object)) {\n","\t        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n","\t          result.push(key);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     */\n","\t    function baseKeysIn(object) {\n","\t      if (!isObject(object)) {\n","\t        return nativeKeysIn(object);\n","\t      }\n","\t      var isProto = isPrototype(object),\n","\t          result = [];\n","\t\n","\t      for (var key in object) {\n","\t        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n","\t          result.push(key);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.lt` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is less than `other`,\n","\t     *  else `false`.\n","\t     */\n","\t    function baseLt(value, other) {\n","\t      return value < other;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.map` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} iteratee The function invoked per iteration.\n","\t     * @returns {Array} Returns the new mapped array.\n","\t     */\n","\t    function baseMap(collection, iteratee) {\n","\t      var index = -1,\n","\t          result = isArrayLike(collection) ? Array(collection.length) : [];\n","\t\n","\t      baseEach(collection, function(value, key, collection) {\n","\t        result[++index] = iteratee(value, key, collection);\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.matches` which doesn't clone `source`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} source The object of property values to match.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     */\n","\t    function baseMatches(source) {\n","\t      var matchData = getMatchData(source);\n","\t      if (matchData.length == 1 && matchData[0][2]) {\n","\t        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n","\t      }\n","\t      return function(object) {\n","\t        return object === source || baseIsMatch(object, source, matchData);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n","\t     *\n","\t     * @private\n","\t     * @param {string} path The path of the property to get.\n","\t     * @param {*} srcValue The value to match.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     */\n","\t    function baseMatchesProperty(path, srcValue) {\n","\t      if (isKey(path) && isStrictComparable(srcValue)) {\n","\t        return matchesStrictComparable(toKey(path), srcValue);\n","\t      }\n","\t      return function(object) {\n","\t        var objValue = get(object, path);\n","\t        return (objValue === undefined && objValue === srcValue)\n","\t          ? hasIn(object, path)\n","\t          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.merge` without support for multiple sources.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The destination object.\n","\t     * @param {Object} source The source object.\n","\t     * @param {number} srcIndex The index of `source`.\n","\t     * @param {Function} [customizer] The function to customize merged values.\n","\t     * @param {Object} [stack] Tracks traversed source values and their merged\n","\t     *  counterparts.\n","\t     */\n","\t    function baseMerge(object, source, srcIndex, customizer, stack) {\n","\t      if (object === source) {\n","\t        return;\n","\t      }\n","\t      baseFor(source, function(srcValue, key) {\n","\t        if (isObject(srcValue)) {\n","\t          stack || (stack = new Stack);\n","\t          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n","\t        }\n","\t        else {\n","\t          var newValue = customizer\n","\t            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n","\t            : undefined;\n","\t\n","\t          if (newValue === undefined) {\n","\t            newValue = srcValue;\n","\t          }\n","\t          assignMergeValue(object, key, newValue);\n","\t        }\n","\t      }, keysIn);\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseMerge` for arrays and objects which performs\n","\t     * deep merges and tracks traversed objects enabling objects with circular\n","\t     * references to be merged.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The destination object.\n","\t     * @param {Object} source The source object.\n","\t     * @param {string} key The key of the value to merge.\n","\t     * @param {number} srcIndex The index of `source`.\n","\t     * @param {Function} mergeFunc The function to merge values.\n","\t     * @param {Function} [customizer] The function to customize assigned values.\n","\t     * @param {Object} [stack] Tracks traversed source values and their merged\n","\t     *  counterparts.\n","\t     */\n","\t    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n","\t      var objValue = safeGet(object, key),\n","\t          srcValue = safeGet(source, key),\n","\t          stacked = stack.get(srcValue);\n","\t\n","\t      if (stacked) {\n","\t        assignMergeValue(object, key, stacked);\n","\t        return;\n","\t      }\n","\t      var newValue = customizer\n","\t        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n","\t        : undefined;\n","\t\n","\t      var isCommon = newValue === undefined;\n","\t\n","\t      if (isCommon) {\n","\t        var isArr = isArray(srcValue),\n","\t            isBuff = !isArr && isBuffer(srcValue),\n","\t            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n","\t\n","\t        newValue = srcValue;\n","\t        if (isArr || isBuff || isTyped) {\n","\t          if (isArray(objValue)) {\n","\t            newValue = objValue;\n","\t          }\n","\t          else if (isArrayLikeObject(objValue)) {\n","\t            newValue = copyArray(objValue);\n","\t          }\n","\t          else if (isBuff) {\n","\t            isCommon = false;\n","\t            newValue = cloneBuffer(srcValue, true);\n","\t          }\n","\t          else if (isTyped) {\n","\t            isCommon = false;\n","\t            newValue = cloneTypedArray(srcValue, true);\n","\t          }\n","\t          else {\n","\t            newValue = [];\n","\t          }\n","\t        }\n","\t        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n","\t          newValue = objValue;\n","\t          if (isArguments(objValue)) {\n","\t            newValue = toPlainObject(objValue);\n","\t          }\n","\t          else if (!isObject(objValue) || isFunction(objValue)) {\n","\t            newValue = initCloneObject(srcValue);\n","\t          }\n","\t        }\n","\t        else {\n","\t          isCommon = false;\n","\t        }\n","\t      }\n","\t      if (isCommon) {\n","\t        // Recursively merge objects and arrays (susceptible to call stack limits).\n","\t        stack.set(srcValue, newValue);\n","\t        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n","\t        stack['delete'](srcValue);\n","\t      }\n","\t      assignMergeValue(object, key, newValue);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.nth` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} n The index of the element to return.\n","\t     * @returns {*} Returns the nth element of `array`.\n","\t     */\n","\t    function baseNth(array, n) {\n","\t      var length = array.length;\n","\t      if (!length) {\n","\t        return;\n","\t      }\n","\t      n += n < 0 ? length : 0;\n","\t      return isIndex(n, length) ? array[n] : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.orderBy` without param guards.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n","\t     * @param {string[]} orders The sort orders of `iteratees`.\n","\t     * @returns {Array} Returns the new sorted array.\n","\t     */\n","\t    function baseOrderBy(collection, iteratees, orders) {\n","\t      var index = -1;\n","\t      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n","\t\n","\t      var result = baseMap(collection, function(value, key, collection) {\n","\t        var criteria = arrayMap(iteratees, function(iteratee) {\n","\t          return iteratee(value);\n","\t        });\n","\t        return { 'criteria': criteria, 'index': ++index, 'value': value };\n","\t      });\n","\t\n","\t      return baseSortBy(result, function(object, other) {\n","\t        return compareMultiple(object, other, orders);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.pick` without support for individual\n","\t     * property identifiers.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The source object.\n","\t     * @param {string[]} paths The property paths to pick.\n","\t     * @returns {Object} Returns the new object.\n","\t     */\n","\t    function basePick(object, paths) {\n","\t      return basePickBy(object, paths, function(value, path) {\n","\t        return hasIn(object, path);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The source object.\n","\t     * @param {string[]} paths The property paths to pick.\n","\t     * @param {Function} predicate The function invoked per property.\n","\t     * @returns {Object} Returns the new object.\n","\t     */\n","\t    function basePickBy(object, paths, predicate) {\n","\t      var index = -1,\n","\t          length = paths.length,\n","\t          result = {};\n","\t\n","\t      while (++index < length) {\n","\t        var path = paths[index],\n","\t            value = baseGet(object, path);\n","\t\n","\t        if (predicate(value, path)) {\n","\t          baseSet(result, castPath(path, object), value);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseProperty` which supports deep paths.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|string} path The path of the property to get.\n","\t     * @returns {Function} Returns the new accessor function.\n","\t     */\n","\t    function basePropertyDeep(path) {\n","\t      return function(object) {\n","\t        return baseGet(object, path);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.pullAllBy` without support for iteratee\n","\t     * shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {Array} values The values to remove.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function basePullAll(array, values, iteratee, comparator) {\n","\t      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n","\t          index = -1,\n","\t          length = values.length,\n","\t          seen = array;\n","\t\n","\t      if (array === values) {\n","\t        values = copyArray(values);\n","\t      }\n","\t      if (iteratee) {\n","\t        seen = arrayMap(array, baseUnary(iteratee));\n","\t      }\n","\t      while (++index < length) {\n","\t        var fromIndex = 0,\n","\t            value = values[index],\n","\t            computed = iteratee ? iteratee(value) : value;\n","\t\n","\t        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n","\t          if (seen !== array) {\n","\t            splice.call(seen, fromIndex, 1);\n","\t          }\n","\t          splice.call(array, fromIndex, 1);\n","\t        }\n","\t      }\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.pullAt` without support for individual\n","\t     * indexes or capturing the removed elements.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {number[]} indexes The indexes of elements to remove.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function basePullAt(array, indexes) {\n","\t      var length = array ? indexes.length : 0,\n","\t          lastIndex = length - 1;\n","\t\n","\t      while (length--) {\n","\t        var index = indexes[length];\n","\t        if (length == lastIndex || index !== previous) {\n","\t          var previous = index;\n","\t          if (isIndex(index)) {\n","\t            splice.call(array, index, 1);\n","\t          } else {\n","\t            baseUnset(array, index);\n","\t          }\n","\t        }\n","\t      }\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.random` without support for returning\n","\t     * floating-point numbers.\n","\t     *\n","\t     * @private\n","\t     * @param {number} lower The lower bound.\n","\t     * @param {number} upper The upper bound.\n","\t     * @returns {number} Returns the random number.\n","\t     */\n","\t    function baseRandom(lower, upper) {\n","\t      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n","\t     * coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {number} start The start of the range.\n","\t     * @param {number} end The end of the range.\n","\t     * @param {number} step The value to increment or decrement by.\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Array} Returns the range of numbers.\n","\t     */\n","\t    function baseRange(start, end, step, fromRight) {\n","\t      var index = -1,\n","\t          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n","\t          result = Array(length);\n","\t\n","\t      while (length--) {\n","\t        result[fromRight ? length : ++index] = start;\n","\t        start += step;\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.repeat` which doesn't coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {string} string The string to repeat.\n","\t     * @param {number} n The number of times to repeat the string.\n","\t     * @returns {string} Returns the repeated string.\n","\t     */\n","\t    function baseRepeat(string, n) {\n","\t      var result = '';\n","\t      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n","\t        return result;\n","\t      }\n","\t      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n","\t      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n","\t      do {\n","\t        if (n % 2) {\n","\t          result += string;\n","\t        }\n","\t        n = nativeFloor(n / 2);\n","\t        if (n) {\n","\t          string += string;\n","\t        }\n","\t      } while (n);\n","\t\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to apply a rest parameter to.\n","\t     * @param {number} [start=func.length-1] The start position of the rest parameter.\n","\t     * @returns {Function} Returns the new function.\n","\t     */\n","\t    function baseRest(func, start) {\n","\t      return setToString(overRest(func, start, identity), func + '');\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.sample`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to sample.\n","\t     * @returns {*} Returns the random element.\n","\t     */\n","\t    function baseSample(collection) {\n","\t      return arraySample(values(collection));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.sampleSize` without param guards.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to sample.\n","\t     * @param {number} n The number of elements to sample.\n","\t     * @returns {Array} Returns the random elements.\n","\t     */\n","\t    function baseSampleSize(collection, n) {\n","\t      var array = values(collection);\n","\t      return shuffleSelf(array, baseClamp(n, 0, array.length));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.set`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to set.\n","\t     * @param {*} value The value to set.\n","\t     * @param {Function} [customizer] The function to customize path creation.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseSet(object, path, value, customizer) {\n","\t      if (!isObject(object)) {\n","\t        return object;\n","\t      }\n","\t      path = castPath(path, object);\n","\t\n","\t      var index = -1,\n","\t          length = path.length,\n","\t          lastIndex = length - 1,\n","\t          nested = object;\n","\t\n","\t      while (nested != null && ++index < length) {\n","\t        var key = toKey(path[index]),\n","\t            newValue = value;\n","\t\n","\t        if (index != lastIndex) {\n","\t          var objValue = nested[key];\n","\t          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n","\t          if (newValue === undefined) {\n","\t            newValue = isObject(objValue)\n","\t              ? objValue\n","\t              : (isIndex(path[index + 1]) ? [] : {});\n","\t          }\n","\t        }\n","\t        assignValue(nested, key, newValue);\n","\t        nested = nested[key];\n","\t      }\n","\t      return object;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `setData` without support for hot loop shorting.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to associate metadata with.\n","\t     * @param {*} data The metadata.\n","\t     * @returns {Function} Returns `func`.\n","\t     */\n","\t    var baseSetData = !metaMap ? identity : function(func, data) {\n","\t      metaMap.set(func, data);\n","\t      return func;\n","\t    };\n","\t\n","\t    /**\n","\t     * The base implementation of `setToString` without support for hot loop shorting.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to modify.\n","\t     * @param {Function} string The `toString` result.\n","\t     * @returns {Function} Returns `func`.\n","\t     */\n","\t    var baseSetToString = !defineProperty ? identity : function(func, string) {\n","\t      return defineProperty(func, 'toString', {\n","\t        'configurable': true,\n","\t        'enumerable': false,\n","\t        'value': constant(string),\n","\t        'writable': true\n","\t      });\n","\t    };\n","\t\n","\t    /**\n","\t     * The base implementation of `_.shuffle`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to shuffle.\n","\t     * @returns {Array} Returns the new shuffled array.\n","\t     */\n","\t    function baseShuffle(collection) {\n","\t      return shuffleSelf(values(collection));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.slice` without an iteratee call guard.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to slice.\n","\t     * @param {number} [start=0] The start position.\n","\t     * @param {number} [end=array.length] The end position.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     */\n","\t    function baseSlice(array, start, end) {\n","\t      var index = -1,\n","\t          length = array.length;\n","\t\n","\t      if (start < 0) {\n","\t        start = -start > length ? 0 : (length + start);\n","\t      }\n","\t      end = end > length ? length : end;\n","\t      if (end < 0) {\n","\t        end += length;\n","\t      }\n","\t      length = start > end ? 0 : ((end - start) >>> 0);\n","\t      start >>>= 0;\n","\t\n","\t      var result = Array(length);\n","\t      while (++index < length) {\n","\t        result[index] = array[index + start];\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.some` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} predicate The function invoked per iteration.\n","\t     * @returns {boolean} Returns `true` if any element passes the predicate check,\n","\t     *  else `false`.\n","\t     */\n","\t    function baseSome(collection, predicate) {\n","\t      var result;\n","\t\n","\t      baseEach(collection, function(value, index, collection) {\n","\t        result = predicate(value, index, collection);\n","\t        return !result;\n","\t      });\n","\t      return !!result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n","\t     * performs a binary search of `array` to determine the index at which `value`\n","\t     * should be inserted into `array` in order to maintain its sort order.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     */\n","\t    function baseSortedIndex(array, value, retHighest) {\n","\t      var low = 0,\n","\t          high = array == null ? low : array.length;\n","\t\n","\t      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n","\t        while (low < high) {\n","\t          var mid = (low + high) >>> 1,\n","\t              computed = array[mid];\n","\t\n","\t          if (computed !== null && !isSymbol(computed) &&\n","\t              (retHighest ? (computed <= value) : (computed < value))) {\n","\t            low = mid + 1;\n","\t          } else {\n","\t            high = mid;\n","\t          }\n","\t        }\n","\t        return high;\n","\t      }\n","\t      return baseSortedIndexBy(array, value, identity, retHighest);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n","\t     * which invokes `iteratee` for `value` and each element of `array` to compute\n","\t     * their sort ranking. The iteratee is invoked with one argument; (value).\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @param {Function} iteratee The iteratee invoked per element.\n","\t     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     */\n","\t    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n","\t      value = iteratee(value);\n","\t\n","\t      var low = 0,\n","\t          high = array == null ? 0 : array.length,\n","\t          valIsNaN = value !== value,\n","\t          valIsNull = value === null,\n","\t          valIsSymbol = isSymbol(value),\n","\t          valIsUndefined = value === undefined;\n","\t\n","\t      while (low < high) {\n","\t        var mid = nativeFloor((low + high) / 2),\n","\t            computed = iteratee(array[mid]),\n","\t            othIsDefined = computed !== undefined,\n","\t            othIsNull = computed === null,\n","\t            othIsReflexive = computed === computed,\n","\t            othIsSymbol = isSymbol(computed);\n","\t\n","\t        if (valIsNaN) {\n","\t          var setLow = retHighest || othIsReflexive;\n","\t        } else if (valIsUndefined) {\n","\t          setLow = othIsReflexive && (retHighest || othIsDefined);\n","\t        } else if (valIsNull) {\n","\t          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n","\t        } else if (valIsSymbol) {\n","\t          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n","\t        } else if (othIsNull || othIsSymbol) {\n","\t          setLow = false;\n","\t        } else {\n","\t          setLow = retHighest ? (computed <= value) : (computed < value);\n","\t        }\n","\t        if (setLow) {\n","\t          low = mid + 1;\n","\t        } else {\n","\t          high = mid;\n","\t        }\n","\t      }\n","\t      return nativeMin(high, MAX_ARRAY_INDEX);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n","\t     * support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     */\n","\t    function baseSortedUniq(array, iteratee) {\n","\t      var index = -1,\n","\t          length = array.length,\n","\t          resIndex = 0,\n","\t          result = [];\n","\t\n","\t      while (++index < length) {\n","\t        var value = array[index],\n","\t            computed = iteratee ? iteratee(value) : value;\n","\t\n","\t        if (!index || !eq(computed, seen)) {\n","\t          var seen = computed;\n","\t          result[resIndex++] = value === 0 ? 0 : value;\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.toNumber` which doesn't ensure correct\n","\t     * conversions of binary, hexadecimal, or octal string values.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to process.\n","\t     * @returns {number} Returns the number.\n","\t     */\n","\t    function baseToNumber(value) {\n","\t      if (typeof value == 'number') {\n","\t        return value;\n","\t      }\n","\t      if (isSymbol(value)) {\n","\t        return NAN;\n","\t      }\n","\t      return +value;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.toString` which doesn't convert nullish\n","\t     * values to empty strings.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to process.\n","\t     * @returns {string} Returns the string.\n","\t     */\n","\t    function baseToString(value) {\n","\t      // Exit early for strings to avoid a performance hit in some environments.\n","\t      if (typeof value == 'string') {\n","\t        return value;\n","\t      }\n","\t      if (isArray(value)) {\n","\t        // Recursively convert values (susceptible to call stack limits).\n","\t        return arrayMap(value, baseToString) + '';\n","\t      }\n","\t      if (isSymbol(value)) {\n","\t        return symbolToString ? symbolToString.call(value) : '';\n","\t      }\n","\t      var result = (value + '');\n","\t      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     */\n","\t    function baseUniq(array, iteratee, comparator) {\n","\t      var index = -1,\n","\t          includes = arrayIncludes,\n","\t          length = array.length,\n","\t          isCommon = true,\n","\t          result = [],\n","\t          seen = result;\n","\t\n","\t      if (comparator) {\n","\t        isCommon = false;\n","\t        includes = arrayIncludesWith;\n","\t      }\n","\t      else if (length >= LARGE_ARRAY_SIZE) {\n","\t        var set = iteratee ? null : createSet(array);\n","\t        if (set) {\n","\t          return setToArray(set);\n","\t        }\n","\t        isCommon = false;\n","\t        includes = cacheHas;\n","\t        seen = new SetCache;\n","\t      }\n","\t      else {\n","\t        seen = iteratee ? [] : result;\n","\t      }\n","\t      outer:\n","\t      while (++index < length) {\n","\t        var value = array[index],\n","\t            computed = iteratee ? iteratee(value) : value;\n","\t\n","\t        value = (comparator || value !== 0) ? value : 0;\n","\t        if (isCommon && computed === computed) {\n","\t          var seenIndex = seen.length;\n","\t          while (seenIndex--) {\n","\t            if (seen[seenIndex] === computed) {\n","\t              continue outer;\n","\t            }\n","\t          }\n","\t          if (iteratee) {\n","\t            seen.push(computed);\n","\t          }\n","\t          result.push(value);\n","\t        }\n","\t        else if (!includes(seen, computed, comparator)) {\n","\t          if (seen !== result) {\n","\t            seen.push(computed);\n","\t          }\n","\t          result.push(value);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.unset`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The property path to unset.\n","\t     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n","\t     */\n","\t    function baseUnset(object, path) {\n","\t      path = castPath(path, object);\n","\t      object = parent(object, path);\n","\t      return object == null || delete object[toKey(last(path))];\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `_.update`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to update.\n","\t     * @param {Function} updater The function to produce the updated value.\n","\t     * @param {Function} [customizer] The function to customize path creation.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function baseUpdate(object, path, updater, customizer) {\n","\t      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n","\t     * without support for iteratee shorthands.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to query.\n","\t     * @param {Function} predicate The function invoked per iteration.\n","\t     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     */\n","\t    function baseWhile(array, predicate, isDrop, fromRight) {\n","\t      var length = array.length,\n","\t          index = fromRight ? length : -1;\n","\t\n","\t      while ((fromRight ? index-- : ++index < length) &&\n","\t        predicate(array[index], index, array)) {}\n","\t\n","\t      return isDrop\n","\t        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n","\t        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of `wrapperValue` which returns the result of\n","\t     * performing a sequence of actions on the unwrapped `value`, where each\n","\t     * successive action is supplied the return value of the previous.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The unwrapped value.\n","\t     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n","\t     * @returns {*} Returns the resolved value.\n","\t     */\n","\t    function baseWrapperValue(value, actions) {\n","\t      var result = value;\n","\t      if (result instanceof LazyWrapper) {\n","\t        result = result.value();\n","\t      }\n","\t      return arrayReduce(actions, function(result, action) {\n","\t        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n","\t      }, result);\n","\t    }\n","\t\n","\t    /**\n","\t     * The base implementation of methods like `_.xor`, without support for\n","\t     * iteratee shorthands, that accepts an array of arrays to inspect.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} arrays The arrays to inspect.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of values.\n","\t     */\n","\t    function baseXor(arrays, iteratee, comparator) {\n","\t      var length = arrays.length;\n","\t      if (length < 2) {\n","\t        return length ? baseUniq(arrays[0]) : [];\n","\t      }\n","\t      var index = -1,\n","\t          result = Array(length);\n","\t\n","\t      while (++index < length) {\n","\t        var array = arrays[index],\n","\t            othIndex = -1;\n","\t\n","\t        while (++othIndex < length) {\n","\t          if (othIndex != index) {\n","\t            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n","\t          }\n","\t        }\n","\t      }\n","\t      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n","\t    }\n","\t\n","\t    /**\n","\t     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} props The property identifiers.\n","\t     * @param {Array} values The property values.\n","\t     * @param {Function} assignFunc The function to assign values.\n","\t     * @returns {Object} Returns the new object.\n","\t     */\n","\t    function baseZipObject(props, values, assignFunc) {\n","\t      var index = -1,\n","\t          length = props.length,\n","\t          valsLength = values.length,\n","\t          result = {};\n","\t\n","\t      while (++index < length) {\n","\t        var value = index < valsLength ? values[index] : undefined;\n","\t        assignFunc(result, props[index], value);\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Casts `value` to an empty array if it's not an array like object.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to inspect.\n","\t     * @returns {Array|Object} Returns the cast array-like object.\n","\t     */\n","\t    function castArrayLikeObject(value) {\n","\t      return isArrayLikeObject(value) ? value : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Casts `value` to `identity` if it's not a function.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to inspect.\n","\t     * @returns {Function} Returns cast function.\n","\t     */\n","\t    function castFunction(value) {\n","\t      return typeof value == 'function' ? value : identity;\n","\t    }\n","\t\n","\t    /**\n","\t     * Casts `value` to a path array if it's not one.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to inspect.\n","\t     * @param {Object} [object] The object to query keys on.\n","\t     * @returns {Array} Returns the cast property path array.\n","\t     */\n","\t    function castPath(value, object) {\n","\t      if (isArray(value)) {\n","\t        return value;\n","\t      }\n","\t      return isKey(value, object) ? [value] : stringToPath(toString(value));\n","\t    }\n","\t\n","\t    /**\n","\t     * A `baseRest` alias which can be replaced with `identity` by module\n","\t     * replacement plugins.\n","\t     *\n","\t     * @private\n","\t     * @type {Function}\n","\t     * @param {Function} func The function to apply a rest parameter to.\n","\t     * @returns {Function} Returns the new function.\n","\t     */\n","\t    var castRest = baseRest;\n","\t\n","\t    /**\n","\t     * Casts `array` to a slice if it's needed.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {number} start The start position.\n","\t     * @param {number} [end=array.length] The end position.\n","\t     * @returns {Array} Returns the cast slice.\n","\t     */\n","\t    function castSlice(array, start, end) {\n","\t      var length = array.length;\n","\t      end = end === undefined ? length : end;\n","\t      return (!start && end >= length) ? array : baseSlice(array, start, end);\n","\t    }\n","\t\n","\t    /**\n","\t     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n","\t     *\n","\t     * @private\n","\t     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n","\t     */\n","\t    var clearTimeout = ctxClearTimeout || function(id) {\n","\t      return root.clearTimeout(id);\n","\t    };\n","\t\n","\t    /**\n","\t     * Creates a clone of  `buffer`.\n","\t     *\n","\t     * @private\n","\t     * @param {Buffer} buffer The buffer to clone.\n","\t     * @param {boolean} [isDeep] Specify a deep clone.\n","\t     * @returns {Buffer} Returns the cloned buffer.\n","\t     */\n","\t    function cloneBuffer(buffer, isDeep) {\n","\t      if (isDeep) {\n","\t        return buffer.slice();\n","\t      }\n","\t      var length = buffer.length,\n","\t          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n","\t\n","\t      buffer.copy(result);\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of `arrayBuffer`.\n","\t     *\n","\t     * @private\n","\t     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n","\t     * @returns {ArrayBuffer} Returns the cloned array buffer.\n","\t     */\n","\t    function cloneArrayBuffer(arrayBuffer) {\n","\t      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n","\t      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of `dataView`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} dataView The data view to clone.\n","\t     * @param {boolean} [isDeep] Specify a deep clone.\n","\t     * @returns {Object} Returns the cloned data view.\n","\t     */\n","\t    function cloneDataView(dataView, isDeep) {\n","\t      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n","\t      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of `regexp`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} regexp The regexp to clone.\n","\t     * @returns {Object} Returns the cloned regexp.\n","\t     */\n","\t    function cloneRegExp(regexp) {\n","\t      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n","\t      result.lastIndex = regexp.lastIndex;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of the `symbol` object.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} symbol The symbol object to clone.\n","\t     * @returns {Object} Returns the cloned symbol object.\n","\t     */\n","\t    function cloneSymbol(symbol) {\n","\t      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of `typedArray`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} typedArray The typed array to clone.\n","\t     * @param {boolean} [isDeep] Specify a deep clone.\n","\t     * @returns {Object} Returns the cloned typed array.\n","\t     */\n","\t    function cloneTypedArray(typedArray, isDeep) {\n","\t      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n","\t      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n","\t    }\n","\t\n","\t    /**\n","\t     * Compares values to sort them in ascending order.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {number} Returns the sort order indicator for `value`.\n","\t     */\n","\t    function compareAscending(value, other) {\n","\t      if (value !== other) {\n","\t        var valIsDefined = value !== undefined,\n","\t            valIsNull = value === null,\n","\t            valIsReflexive = value === value,\n","\t            valIsSymbol = isSymbol(value);\n","\t\n","\t        var othIsDefined = other !== undefined,\n","\t            othIsNull = other === null,\n","\t            othIsReflexive = other === other,\n","\t            othIsSymbol = isSymbol(other);\n","\t\n","\t        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n","\t            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n","\t            (valIsNull && othIsDefined && othIsReflexive) ||\n","\t            (!valIsDefined && othIsReflexive) ||\n","\t            !valIsReflexive) {\n","\t          return 1;\n","\t        }\n","\t        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n","\t            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n","\t            (othIsNull && valIsDefined && valIsReflexive) ||\n","\t            (!othIsDefined && valIsReflexive) ||\n","\t            !othIsReflexive) {\n","\t          return -1;\n","\t        }\n","\t      }\n","\t      return 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Used by `_.orderBy` to compare multiple properties of a value to another\n","\t     * and stable sort them.\n","\t     *\n","\t     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n","\t     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n","\t     * of corresponding values.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to compare.\n","\t     * @param {Object} other The other object to compare.\n","\t     * @param {boolean[]|string[]} orders The order to sort by for each property.\n","\t     * @returns {number} Returns the sort order indicator for `object`.\n","\t     */\n","\t    function compareMultiple(object, other, orders) {\n","\t      var index = -1,\n","\t          objCriteria = object.criteria,\n","\t          othCriteria = other.criteria,\n","\t          length = objCriteria.length,\n","\t          ordersLength = orders.length;\n","\t\n","\t      while (++index < length) {\n","\t        var result = compareAscending(objCriteria[index], othCriteria[index]);\n","\t        if (result) {\n","\t          if (index >= ordersLength) {\n","\t            return result;\n","\t          }\n","\t          var order = orders[index];\n","\t          return result * (order == 'desc' ? -1 : 1);\n","\t        }\n","\t      }\n","\t      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n","\t      // that causes it, under certain circumstances, to provide the same value for\n","\t      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n","\t      // for more details.\n","\t      //\n","\t      // This also ensures a stable sort in V8 and other engines.\n","\t      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n","\t      return object.index - other.index;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array that is the composition of partially applied arguments,\n","\t     * placeholders, and provided arguments into a single array of arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} args The provided arguments.\n","\t     * @param {Array} partials The arguments to prepend to those provided.\n","\t     * @param {Array} holders The `partials` placeholder indexes.\n","\t     * @params {boolean} [isCurried] Specify composing for a curried function.\n","\t     * @returns {Array} Returns the new array of composed arguments.\n","\t     */\n","\t    function composeArgs(args, partials, holders, isCurried) {\n","\t      var argsIndex = -1,\n","\t          argsLength = args.length,\n","\t          holdersLength = holders.length,\n","\t          leftIndex = -1,\n","\t          leftLength = partials.length,\n","\t          rangeLength = nativeMax(argsLength - holdersLength, 0),\n","\t          result = Array(leftLength + rangeLength),\n","\t          isUncurried = !isCurried;\n","\t\n","\t      while (++leftIndex < leftLength) {\n","\t        result[leftIndex] = partials[leftIndex];\n","\t      }\n","\t      while (++argsIndex < holdersLength) {\n","\t        if (isUncurried || argsIndex < argsLength) {\n","\t          result[holders[argsIndex]] = args[argsIndex];\n","\t        }\n","\t      }\n","\t      while (rangeLength--) {\n","\t        result[leftIndex++] = args[argsIndex++];\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * This function is like `composeArgs` except that the arguments composition\n","\t     * is tailored for `_.partialRight`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} args The provided arguments.\n","\t     * @param {Array} partials The arguments to append to those provided.\n","\t     * @param {Array} holders The `partials` placeholder indexes.\n","\t     * @params {boolean} [isCurried] Specify composing for a curried function.\n","\t     * @returns {Array} Returns the new array of composed arguments.\n","\t     */\n","\t    function composeArgsRight(args, partials, holders, isCurried) {\n","\t      var argsIndex = -1,\n","\t          argsLength = args.length,\n","\t          holdersIndex = -1,\n","\t          holdersLength = holders.length,\n","\t          rightIndex = -1,\n","\t          rightLength = partials.length,\n","\t          rangeLength = nativeMax(argsLength - holdersLength, 0),\n","\t          result = Array(rangeLength + rightLength),\n","\t          isUncurried = !isCurried;\n","\t\n","\t      while (++argsIndex < rangeLength) {\n","\t        result[argsIndex] = args[argsIndex];\n","\t      }\n","\t      var offset = argsIndex;\n","\t      while (++rightIndex < rightLength) {\n","\t        result[offset + rightIndex] = partials[rightIndex];\n","\t      }\n","\t      while (++holdersIndex < holdersLength) {\n","\t        if (isUncurried || argsIndex < argsLength) {\n","\t          result[offset + holders[holdersIndex]] = args[argsIndex++];\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Copies the values of `source` to `array`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} source The array to copy values from.\n","\t     * @param {Array} [array=[]] The array to copy values to.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function copyArray(source, array) {\n","\t      var index = -1,\n","\t          length = source.length;\n","\t\n","\t      array || (array = Array(length));\n","\t      while (++index < length) {\n","\t        array[index] = source[index];\n","\t      }\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * Copies properties of `source` to `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} source The object to copy properties from.\n","\t     * @param {Array} props The property identifiers to copy.\n","\t     * @param {Object} [object={}] The object to copy properties to.\n","\t     * @param {Function} [customizer] The function to customize copied values.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function copyObject(source, props, object, customizer) {\n","\t      var isNew = !object;\n","\t      object || (object = {});\n","\t\n","\t      var index = -1,\n","\t          length = props.length;\n","\t\n","\t      while (++index < length) {\n","\t        var key = props[index];\n","\t\n","\t        var newValue = customizer\n","\t          ? customizer(object[key], source[key], key, object, source)\n","\t          : undefined;\n","\t\n","\t        if (newValue === undefined) {\n","\t          newValue = source[key];\n","\t        }\n","\t        if (isNew) {\n","\t          baseAssignValue(object, key, newValue);\n","\t        } else {\n","\t          assignValue(object, key, newValue);\n","\t        }\n","\t      }\n","\t      return object;\n","\t    }\n","\t\n","\t    /**\n","\t     * Copies own symbols of `source` to `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} source The object to copy symbols from.\n","\t     * @param {Object} [object={}] The object to copy symbols to.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function copySymbols(source, object) {\n","\t      return copyObject(source, getSymbols(source), object);\n","\t    }\n","\t\n","\t    /**\n","\t     * Copies own and inherited symbols of `source` to `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} source The object to copy symbols from.\n","\t     * @param {Object} [object={}] The object to copy symbols to.\n","\t     * @returns {Object} Returns `object`.\n","\t     */\n","\t    function copySymbolsIn(source, object) {\n","\t      return copyObject(source, getSymbolsIn(source), object);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.groupBy`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} setter The function to set accumulator values.\n","\t     * @param {Function} [initializer] The accumulator object initializer.\n","\t     * @returns {Function} Returns the new aggregator function.\n","\t     */\n","\t    function createAggregator(setter, initializer) {\n","\t      return function(collection, iteratee) {\n","\t        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n","\t            accumulator = initializer ? initializer() : {};\n","\t\n","\t        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.assign`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} assigner The function to assign values.\n","\t     * @returns {Function} Returns the new assigner function.\n","\t     */\n","\t    function createAssigner(assigner) {\n","\t      return baseRest(function(object, sources) {\n","\t        var index = -1,\n","\t            length = sources.length,\n","\t            customizer = length > 1 ? sources[length - 1] : undefined,\n","\t            guard = length > 2 ? sources[2] : undefined;\n","\t\n","\t        customizer = (assigner.length > 3 && typeof customizer == 'function')\n","\t          ? (length--, customizer)\n","\t          : undefined;\n","\t\n","\t        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n","\t          customizer = length < 3 ? undefined : customizer;\n","\t          length = 1;\n","\t        }\n","\t        object = Object(object);\n","\t        while (++index < length) {\n","\t          var source = sources[index];\n","\t          if (source) {\n","\t            assigner(object, source, index, customizer);\n","\t          }\n","\t        }\n","\t        return object;\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a `baseEach` or `baseEachRight` function.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} eachFunc The function to iterate over a collection.\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Function} Returns the new base function.\n","\t     */\n","\t    function createBaseEach(eachFunc, fromRight) {\n","\t      return function(collection, iteratee) {\n","\t        if (collection == null) {\n","\t          return collection;\n","\t        }\n","\t        if (!isArrayLike(collection)) {\n","\t          return eachFunc(collection, iteratee);\n","\t        }\n","\t        var length = collection.length,\n","\t            index = fromRight ? length : -1,\n","\t            iterable = Object(collection);\n","\t\n","\t        while ((fromRight ? index-- : ++index < length)) {\n","\t          if (iteratee(iterable[index], index, iterable) === false) {\n","\t            break;\n","\t          }\n","\t        }\n","\t        return collection;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n","\t     *\n","\t     * @private\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Function} Returns the new base function.\n","\t     */\n","\t    function createBaseFor(fromRight) {\n","\t      return function(object, iteratee, keysFunc) {\n","\t        var index = -1,\n","\t            iterable = Object(object),\n","\t            props = keysFunc(object),\n","\t            length = props.length;\n","\t\n","\t        while (length--) {\n","\t          var key = props[fromRight ? length : ++index];\n","\t          if (iteratee(iterable[key], key, iterable) === false) {\n","\t            break;\n","\t          }\n","\t        }\n","\t        return object;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that wraps `func` to invoke it with the optional `this`\n","\t     * binding of `thisArg`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to wrap.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @param {*} [thisArg] The `this` binding of `func`.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createBind(func, bitmask, thisArg) {\n","\t      var isBind = bitmask & WRAP_BIND_FLAG,\n","\t          Ctor = createCtor(func);\n","\t\n","\t      function wrapper() {\n","\t        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n","\t        return fn.apply(isBind ? thisArg : this, arguments);\n","\t      }\n","\t      return wrapper;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.lowerFirst`.\n","\t     *\n","\t     * @private\n","\t     * @param {string} methodName The name of the `String` case method to use.\n","\t     * @returns {Function} Returns the new case function.\n","\t     */\n","\t    function createCaseFirst(methodName) {\n","\t      return function(string) {\n","\t        string = toString(string);\n","\t\n","\t        var strSymbols = hasUnicode(string)\n","\t          ? stringToArray(string)\n","\t          : undefined;\n","\t\n","\t        var chr = strSymbols\n","\t          ? strSymbols[0]\n","\t          : string.charAt(0);\n","\t\n","\t        var trailing = strSymbols\n","\t          ? castSlice(strSymbols, 1).join('')\n","\t          : string.slice(1);\n","\t\n","\t        return chr[methodName]() + trailing;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.camelCase`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} callback The function to combine each word.\n","\t     * @returns {Function} Returns the new compounder function.\n","\t     */\n","\t    function createCompounder(callback) {\n","\t      return function(string) {\n","\t        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that produces an instance of `Ctor` regardless of\n","\t     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} Ctor The constructor to wrap.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createCtor(Ctor) {\n","\t      return function() {\n","\t        // Use a `switch` statement to work with class constructors. See\n","\t        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n","\t        // for more details.\n","\t        var args = arguments;\n","\t        switch (args.length) {\n","\t          case 0: return new Ctor;\n","\t          case 1: return new Ctor(args[0]);\n","\t          case 2: return new Ctor(args[0], args[1]);\n","\t          case 3: return new Ctor(args[0], args[1], args[2]);\n","\t          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n","\t          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n","\t          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n","\t          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n","\t        }\n","\t        var thisBinding = baseCreate(Ctor.prototype),\n","\t            result = Ctor.apply(thisBinding, args);\n","\t\n","\t        // Mimic the constructor's `return` behavior.\n","\t        // See https://es5.github.io/#x13.2.2 for more details.\n","\t        return isObject(result) ? result : thisBinding;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that wraps `func` to enable currying.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to wrap.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @param {number} arity The arity of `func`.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createCurry(func, bitmask, arity) {\n","\t      var Ctor = createCtor(func);\n","\t\n","\t      function wrapper() {\n","\t        var length = arguments.length,\n","\t            args = Array(length),\n","\t            index = length,\n","\t            placeholder = getHolder(wrapper);\n","\t\n","\t        while (index--) {\n","\t          args[index] = arguments[index];\n","\t        }\n","\t        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n","\t          ? []\n","\t          : replaceHolders(args, placeholder);\n","\t\n","\t        length -= holders.length;\n","\t        if (length < arity) {\n","\t          return createRecurry(\n","\t            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n","\t            args, holders, undefined, undefined, arity - length);\n","\t        }\n","\t        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n","\t        return apply(fn, this, args);\n","\t      }\n","\t      return wrapper;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a `_.find` or `_.findLast` function.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} findIndexFunc The function to find the collection index.\n","\t     * @returns {Function} Returns the new find function.\n","\t     */\n","\t    function createFind(findIndexFunc) {\n","\t      return function(collection, predicate, fromIndex) {\n","\t        var iterable = Object(collection);\n","\t        if (!isArrayLike(collection)) {\n","\t          var iteratee = getIteratee(predicate, 3);\n","\t          collection = keys(collection);\n","\t          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n","\t        }\n","\t        var index = findIndexFunc(collection, predicate, fromIndex);\n","\t        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a `_.flow` or `_.flowRight` function.\n","\t     *\n","\t     * @private\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Function} Returns the new flow function.\n","\t     */\n","\t    function createFlow(fromRight) {\n","\t      return flatRest(function(funcs) {\n","\t        var length = funcs.length,\n","\t            index = length,\n","\t            prereq = LodashWrapper.prototype.thru;\n","\t\n","\t        if (fromRight) {\n","\t          funcs.reverse();\n","\t        }\n","\t        while (index--) {\n","\t          var func = funcs[index];\n","\t          if (typeof func != 'function') {\n","\t            throw new TypeError(FUNC_ERROR_TEXT);\n","\t          }\n","\t          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n","\t            var wrapper = new LodashWrapper([], true);\n","\t          }\n","\t        }\n","\t        index = wrapper ? index : length;\n","\t        while (++index < length) {\n","\t          func = funcs[index];\n","\t\n","\t          var funcName = getFuncName(func),\n","\t              data = funcName == 'wrapper' ? getData(func) : undefined;\n","\t\n","\t          if (data && isLaziable(data[0]) &&\n","\t                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n","\t                !data[4].length && data[9] == 1\n","\t              ) {\n","\t            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n","\t          } else {\n","\t            wrapper = (func.length == 1 && isLaziable(func))\n","\t              ? wrapper[funcName]()\n","\t              : wrapper.thru(func);\n","\t          }\n","\t        }\n","\t        return function() {\n","\t          var args = arguments,\n","\t              value = args[0];\n","\t\n","\t          if (wrapper && args.length == 1 && isArray(value)) {\n","\t            return wrapper.plant(value).value();\n","\t          }\n","\t          var index = 0,\n","\t              result = length ? funcs[index].apply(this, args) : value;\n","\t\n","\t          while (++index < length) {\n","\t            result = funcs[index].call(this, result);\n","\t          }\n","\t          return result;\n","\t        };\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that wraps `func` to invoke it with optional `this`\n","\t     * binding of `thisArg`, partial application, and currying.\n","\t     *\n","\t     * @private\n","\t     * @param {Function|string} func The function or method name to wrap.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @param {*} [thisArg] The `this` binding of `func`.\n","\t     * @param {Array} [partials] The arguments to prepend to those provided to\n","\t     *  the new function.\n","\t     * @param {Array} [holders] The `partials` placeholder indexes.\n","\t     * @param {Array} [partialsRight] The arguments to append to those provided\n","\t     *  to the new function.\n","\t     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n","\t     * @param {Array} [argPos] The argument positions of the new function.\n","\t     * @param {number} [ary] The arity cap of `func`.\n","\t     * @param {number} [arity] The arity of `func`.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n","\t      var isAry = bitmask & WRAP_ARY_FLAG,\n","\t          isBind = bitmask & WRAP_BIND_FLAG,\n","\t          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n","\t          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n","\t          isFlip = bitmask & WRAP_FLIP_FLAG,\n","\t          Ctor = isBindKey ? undefined : createCtor(func);\n","\t\n","\t      function wrapper() {\n","\t        var length = arguments.length,\n","\t            args = Array(length),\n","\t            index = length;\n","\t\n","\t        while (index--) {\n","\t          args[index] = arguments[index];\n","\t        }\n","\t        if (isCurried) {\n","\t          var placeholder = getHolder(wrapper),\n","\t              holdersCount = countHolders(args, placeholder);\n","\t        }\n","\t        if (partials) {\n","\t          args = composeArgs(args, partials, holders, isCurried);\n","\t        }\n","\t        if (partialsRight) {\n","\t          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n","\t        }\n","\t        length -= holdersCount;\n","\t        if (isCurried && length < arity) {\n","\t          var newHolders = replaceHolders(args, placeholder);\n","\t          return createRecurry(\n","\t            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n","\t            args, newHolders, argPos, ary, arity - length\n","\t          );\n","\t        }\n","\t        var thisBinding = isBind ? thisArg : this,\n","\t            fn = isBindKey ? thisBinding[func] : func;\n","\t\n","\t        length = args.length;\n","\t        if (argPos) {\n","\t          args = reorder(args, argPos);\n","\t        } else if (isFlip && length > 1) {\n","\t          args.reverse();\n","\t        }\n","\t        if (isAry && ary < length) {\n","\t          args.length = ary;\n","\t        }\n","\t        if (this && this !== root && this instanceof wrapper) {\n","\t          fn = Ctor || createCtor(fn);\n","\t        }\n","\t        return fn.apply(thisBinding, args);\n","\t      }\n","\t      return wrapper;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.invertBy`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} setter The function to set accumulator values.\n","\t     * @param {Function} toIteratee The function to resolve iteratees.\n","\t     * @returns {Function} Returns the new inverter function.\n","\t     */\n","\t    function createInverter(setter, toIteratee) {\n","\t      return function(object, iteratee) {\n","\t        return baseInverter(object, setter, toIteratee(iteratee), {});\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that performs a mathematical operation on two values.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} operator The function to perform the operation.\n","\t     * @param {number} [defaultValue] The value used for `undefined` arguments.\n","\t     * @returns {Function} Returns the new mathematical operation function.\n","\t     */\n","\t    function createMathOperation(operator, defaultValue) {\n","\t      return function(value, other) {\n","\t        var result;\n","\t        if (value === undefined && other === undefined) {\n","\t          return defaultValue;\n","\t        }\n","\t        if (value !== undefined) {\n","\t          result = value;\n","\t        }\n","\t        if (other !== undefined) {\n","\t          if (result === undefined) {\n","\t            return other;\n","\t          }\n","\t          if (typeof value == 'string' || typeof other == 'string') {\n","\t            value = baseToString(value);\n","\t            other = baseToString(other);\n","\t          } else {\n","\t            value = baseToNumber(value);\n","\t            other = baseToNumber(other);\n","\t          }\n","\t          result = operator(value, other);\n","\t        }\n","\t        return result;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.over`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} arrayFunc The function to iterate over iteratees.\n","\t     * @returns {Function} Returns the new over function.\n","\t     */\n","\t    function createOver(arrayFunc) {\n","\t      return flatRest(function(iteratees) {\n","\t        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n","\t        return baseRest(function(args) {\n","\t          var thisArg = this;\n","\t          return arrayFunc(iteratees, function(iteratee) {\n","\t            return apply(iteratee, thisArg, args);\n","\t          });\n","\t        });\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates the padding for `string` based on `length`. The `chars` string\n","\t     * is truncated if the number of characters exceeds `length`.\n","\t     *\n","\t     * @private\n","\t     * @param {number} length The padding length.\n","\t     * @param {string} [chars=' '] The string used as padding.\n","\t     * @returns {string} Returns the padding for `string`.\n","\t     */\n","\t    function createPadding(length, chars) {\n","\t      chars = chars === undefined ? ' ' : baseToString(chars);\n","\t\n","\t      var charsLength = chars.length;\n","\t      if (charsLength < 2) {\n","\t        return charsLength ? baseRepeat(chars, length) : chars;\n","\t      }\n","\t      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n","\t      return hasUnicode(chars)\n","\t        ? castSlice(stringToArray(result), 0, length).join('')\n","\t        : result.slice(0, length);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that wraps `func` to invoke it with the `this` binding\n","\t     * of `thisArg` and `partials` prepended to the arguments it receives.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to wrap.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @param {*} thisArg The `this` binding of `func`.\n","\t     * @param {Array} partials The arguments to prepend to those provided to\n","\t     *  the new function.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createPartial(func, bitmask, thisArg, partials) {\n","\t      var isBind = bitmask & WRAP_BIND_FLAG,\n","\t          Ctor = createCtor(func);\n","\t\n","\t      function wrapper() {\n","\t        var argsIndex = -1,\n","\t            argsLength = arguments.length,\n","\t            leftIndex = -1,\n","\t            leftLength = partials.length,\n","\t            args = Array(leftLength + argsLength),\n","\t            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n","\t\n","\t        while (++leftIndex < leftLength) {\n","\t          args[leftIndex] = partials[leftIndex];\n","\t        }\n","\t        while (argsLength--) {\n","\t          args[leftIndex++] = arguments[++argsIndex];\n","\t        }\n","\t        return apply(fn, isBind ? thisArg : this, args);\n","\t      }\n","\t      return wrapper;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a `_.range` or `_.rangeRight` function.\n","\t     *\n","\t     * @private\n","\t     * @param {boolean} [fromRight] Specify iterating from right to left.\n","\t     * @returns {Function} Returns the new range function.\n","\t     */\n","\t    function createRange(fromRight) {\n","\t      return function(start, end, step) {\n","\t        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n","\t          end = step = undefined;\n","\t        }\n","\t        // Ensure the sign of `-0` is preserved.\n","\t        start = toFinite(start);\n","\t        if (end === undefined) {\n","\t          end = start;\n","\t          start = 0;\n","\t        } else {\n","\t          end = toFinite(end);\n","\t        }\n","\t        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n","\t        return baseRange(start, end, step, fromRight);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that performs a relational operation on two values.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} operator The function to perform the operation.\n","\t     * @returns {Function} Returns the new relational operation function.\n","\t     */\n","\t    function createRelationalOperation(operator) {\n","\t      return function(value, other) {\n","\t        if (!(typeof value == 'string' && typeof other == 'string')) {\n","\t          value = toNumber(value);\n","\t          other = toNumber(other);\n","\t        }\n","\t        return operator(value, other);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that wraps `func` to continue currying.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to wrap.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @param {Function} wrapFunc The function to create the `func` wrapper.\n","\t     * @param {*} placeholder The placeholder value.\n","\t     * @param {*} [thisArg] The `this` binding of `func`.\n","\t     * @param {Array} [partials] The arguments to prepend to those provided to\n","\t     *  the new function.\n","\t     * @param {Array} [holders] The `partials` placeholder indexes.\n","\t     * @param {Array} [argPos] The argument positions of the new function.\n","\t     * @param {number} [ary] The arity cap of `func`.\n","\t     * @param {number} [arity] The arity of `func`.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n","\t      var isCurry = bitmask & WRAP_CURRY_FLAG,\n","\t          newHolders = isCurry ? holders : undefined,\n","\t          newHoldersRight = isCurry ? undefined : holders,\n","\t          newPartials = isCurry ? partials : undefined,\n","\t          newPartialsRight = isCurry ? undefined : partials;\n","\t\n","\t      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n","\t      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n","\t\n","\t      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n","\t        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n","\t      }\n","\t      var newData = [\n","\t        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n","\t        newHoldersRight, argPos, ary, arity\n","\t      ];\n","\t\n","\t      var result = wrapFunc.apply(undefined, newData);\n","\t      if (isLaziable(func)) {\n","\t        setData(result, newData);\n","\t      }\n","\t      result.placeholder = placeholder;\n","\t      return setWrapToString(result, func, bitmask);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function like `_.round`.\n","\t     *\n","\t     * @private\n","\t     * @param {string} methodName The name of the `Math` method to use when rounding.\n","\t     * @returns {Function} Returns the new round function.\n","\t     */\n","\t    function createRound(methodName) {\n","\t      var func = Math[methodName];\n","\t      return function(number, precision) {\n","\t        number = toNumber(number);\n","\t        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n","\t        if (precision) {\n","\t          // Shift with exponential notation to avoid floating-point issues.\n","\t          // See [MDN](https://mdn.io/round#Examples) for more details.\n","\t          var pair = (toString(number) + 'e').split('e'),\n","\t              value = func(pair[0] + 'e' + (+pair[1] + precision));\n","\t\n","\t          pair = (toString(value) + 'e').split('e');\n","\t          return +(pair[0] + 'e' + (+pair[1] - precision));\n","\t        }\n","\t        return func(number);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a set object of `values`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} values The values to add to the set.\n","\t     * @returns {Object} Returns the new set.\n","\t     */\n","\t    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n","\t      return new Set(values);\n","\t    };\n","\t\n","\t    /**\n","\t     * Creates a `_.toPairs` or `_.toPairsIn` function.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} keysFunc The function to get the keys of a given object.\n","\t     * @returns {Function} Returns the new pairs function.\n","\t     */\n","\t    function createToPairs(keysFunc) {\n","\t      return function(object) {\n","\t        var tag = getTag(object);\n","\t        if (tag == mapTag) {\n","\t          return mapToArray(object);\n","\t        }\n","\t        if (tag == setTag) {\n","\t          return setToPairs(object);\n","\t        }\n","\t        return baseToPairs(object, keysFunc(object));\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that either curries or invokes `func` with optional\n","\t     * `this` binding and partially applied arguments.\n","\t     *\n","\t     * @private\n","\t     * @param {Function|string} func The function or method name to wrap.\n","\t     * @param {number} bitmask The bitmask flags.\n","\t     *    1 - `_.bind`\n","\t     *    2 - `_.bindKey`\n","\t     *    4 - `_.curry` or `_.curryRight` of a bound function\n","\t     *    8 - `_.curry`\n","\t     *   16 - `_.curryRight`\n","\t     *   32 - `_.partial`\n","\t     *   64 - `_.partialRight`\n","\t     *  128 - `_.rearg`\n","\t     *  256 - `_.ary`\n","\t     *  512 - `_.flip`\n","\t     * @param {*} [thisArg] The `this` binding of `func`.\n","\t     * @param {Array} [partials] The arguments to be partially applied.\n","\t     * @param {Array} [holders] The `partials` placeholder indexes.\n","\t     * @param {Array} [argPos] The argument positions of the new function.\n","\t     * @param {number} [ary] The arity cap of `func`.\n","\t     * @param {number} [arity] The arity of `func`.\n","\t     * @returns {Function} Returns the new wrapped function.\n","\t     */\n","\t    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n","\t      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n","\t      if (!isBindKey && typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      var length = partials ? partials.length : 0;\n","\t      if (!length) {\n","\t        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n","\t        partials = holders = undefined;\n","\t      }\n","\t      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n","\t      arity = arity === undefined ? arity : toInteger(arity);\n","\t      length -= holders ? holders.length : 0;\n","\t\n","\t      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n","\t        var partialsRight = partials,\n","\t            holdersRight = holders;\n","\t\n","\t        partials = holders = undefined;\n","\t      }\n","\t      var data = isBindKey ? undefined : getData(func);\n","\t\n","\t      var newData = [\n","\t        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n","\t        argPos, ary, arity\n","\t      ];\n","\t\n","\t      if (data) {\n","\t        mergeData(newData, data);\n","\t      }\n","\t      func = newData[0];\n","\t      bitmask = newData[1];\n","\t      thisArg = newData[2];\n","\t      partials = newData[3];\n","\t      holders = newData[4];\n","\t      arity = newData[9] = newData[9] === undefined\n","\t        ? (isBindKey ? 0 : func.length)\n","\t        : nativeMax(newData[9] - length, 0);\n","\t\n","\t      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n","\t        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n","\t      }\n","\t      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n","\t        var result = createBind(func, bitmask, thisArg);\n","\t      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n","\t        result = createCurry(func, bitmask, arity);\n","\t      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n","\t        result = createPartial(func, bitmask, thisArg, partials);\n","\t      } else {\n","\t        result = createHybrid.apply(undefined, newData);\n","\t      }\n","\t      var setter = data ? baseSetData : setData;\n","\t      return setWrapToString(setter(result, newData), func, bitmask);\n","\t    }\n","\t\n","\t    /**\n","\t     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n","\t     * of source objects to the destination object for all destination properties\n","\t     * that resolve to `undefined`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} objValue The destination value.\n","\t     * @param {*} srcValue The source value.\n","\t     * @param {string} key The key of the property to assign.\n","\t     * @param {Object} object The parent object of `objValue`.\n","\t     * @returns {*} Returns the value to assign.\n","\t     */\n","\t    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n","\t      if (objValue === undefined ||\n","\t          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n","\t        return srcValue;\n","\t      }\n","\t      return objValue;\n","\t    }\n","\t\n","\t    /**\n","\t     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n","\t     * objects into destination objects that are passed thru.\n","\t     *\n","\t     * @private\n","\t     * @param {*} objValue The destination value.\n","\t     * @param {*} srcValue The source value.\n","\t     * @param {string} key The key of the property to merge.\n","\t     * @param {Object} object The parent object of `objValue`.\n","\t     * @param {Object} source The parent object of `srcValue`.\n","\t     * @param {Object} [stack] Tracks traversed source values and their merged\n","\t     *  counterparts.\n","\t     * @returns {*} Returns the value to assign.\n","\t     */\n","\t    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n","\t      if (isObject(objValue) && isObject(srcValue)) {\n","\t        // Recursively merge objects and arrays (susceptible to call stack limits).\n","\t        stack.set(srcValue, objValue);\n","\t        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n","\t        stack['delete'](srcValue);\n","\t      }\n","\t      return objValue;\n","\t    }\n","\t\n","\t    /**\n","\t     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n","\t     * objects.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to inspect.\n","\t     * @param {string} key The key of the property to inspect.\n","\t     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n","\t     */\n","\t    function customOmitClone(value) {\n","\t      return isPlainObject(value) ? undefined : value;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseIsEqualDeep` for arrays with support for\n","\t     * partial deep comparisons.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to compare.\n","\t     * @param {Array} other The other array to compare.\n","\t     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n","\t     * @param {Function} customizer The function to customize comparisons.\n","\t     * @param {Function} equalFunc The function to determine equivalents of values.\n","\t     * @param {Object} stack Tracks traversed `array` and `other` objects.\n","\t     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n","\t     */\n","\t    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n","\t      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n","\t          arrLength = array.length,\n","\t          othLength = other.length;\n","\t\n","\t      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n","\t        return false;\n","\t      }\n","\t      // Assume cyclic values are equal.\n","\t      var stacked = stack.get(array);\n","\t      if (stacked && stack.get(other)) {\n","\t        return stacked == other;\n","\t      }\n","\t      var index = -1,\n","\t          result = true,\n","\t          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n","\t\n","\t      stack.set(array, other);\n","\t      stack.set(other, array);\n","\t\n","\t      // Ignore non-index properties.\n","\t      while (++index < arrLength) {\n","\t        var arrValue = array[index],\n","\t            othValue = other[index];\n","\t\n","\t        if (customizer) {\n","\t          var compared = isPartial\n","\t            ? customizer(othValue, arrValue, index, other, array, stack)\n","\t            : customizer(arrValue, othValue, index, array, other, stack);\n","\t        }\n","\t        if (compared !== undefined) {\n","\t          if (compared) {\n","\t            continue;\n","\t          }\n","\t          result = false;\n","\t          break;\n","\t        }\n","\t        // Recursively compare arrays (susceptible to call stack limits).\n","\t        if (seen) {\n","\t          if (!arraySome(other, function(othValue, othIndex) {\n","\t                if (!cacheHas(seen, othIndex) &&\n","\t                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n","\t                  return seen.push(othIndex);\n","\t                }\n","\t              })) {\n","\t            result = false;\n","\t            break;\n","\t          }\n","\t        } else if (!(\n","\t              arrValue === othValue ||\n","\t                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n","\t            )) {\n","\t          result = false;\n","\t          break;\n","\t        }\n","\t      }\n","\t      stack['delete'](array);\n","\t      stack['delete'](other);\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseIsEqualDeep` for comparing objects of\n","\t     * the same `toStringTag`.\n","\t     *\n","\t     * **Note:** This function only supports comparing values with tags of\n","\t     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to compare.\n","\t     * @param {Object} other The other object to compare.\n","\t     * @param {string} tag The `toStringTag` of the objects to compare.\n","\t     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n","\t     * @param {Function} customizer The function to customize comparisons.\n","\t     * @param {Function} equalFunc The function to determine equivalents of values.\n","\t     * @param {Object} stack Tracks traversed `object` and `other` objects.\n","\t     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n","\t     */\n","\t    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n","\t      switch (tag) {\n","\t        case dataViewTag:\n","\t          if ((object.byteLength != other.byteLength) ||\n","\t              (object.byteOffset != other.byteOffset)) {\n","\t            return false;\n","\t          }\n","\t          object = object.buffer;\n","\t          other = other.buffer;\n","\t\n","\t        case arrayBufferTag:\n","\t          if ((object.byteLength != other.byteLength) ||\n","\t              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n","\t            return false;\n","\t          }\n","\t          return true;\n","\t\n","\t        case boolTag:\n","\t        case dateTag:\n","\t        case numberTag:\n","\t          // Coerce booleans to `1` or `0` and dates to milliseconds.\n","\t          // Invalid dates are coerced to `NaN`.\n","\t          return eq(+object, +other);\n","\t\n","\t        case errorTag:\n","\t          return object.name == other.name && object.message == other.message;\n","\t\n","\t        case regexpTag:\n","\t        case stringTag:\n","\t          // Coerce regexes to strings and treat strings, primitives and objects,\n","\t          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n","\t          // for more details.\n","\t          return object == (other + '');\n","\t\n","\t        case mapTag:\n","\t          var convert = mapToArray;\n","\t\n","\t        case setTag:\n","\t          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n","\t          convert || (convert = setToArray);\n","\t\n","\t          if (object.size != other.size && !isPartial) {\n","\t            return false;\n","\t          }\n","\t          // Assume cyclic values are equal.\n","\t          var stacked = stack.get(object);\n","\t          if (stacked) {\n","\t            return stacked == other;\n","\t          }\n","\t          bitmask |= COMPARE_UNORDERED_FLAG;\n","\t\n","\t          // Recursively compare objects (susceptible to call stack limits).\n","\t          stack.set(object, other);\n","\t          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n","\t          stack['delete'](object);\n","\t          return result;\n","\t\n","\t        case symbolTag:\n","\t          if (symbolValueOf) {\n","\t            return symbolValueOf.call(object) == symbolValueOf.call(other);\n","\t          }\n","\t      }\n","\t      return false;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseIsEqualDeep` for objects with support for\n","\t     * partial deep comparisons.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to compare.\n","\t     * @param {Object} other The other object to compare.\n","\t     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n","\t     * @param {Function} customizer The function to customize comparisons.\n","\t     * @param {Function} equalFunc The function to determine equivalents of values.\n","\t     * @param {Object} stack Tracks traversed `object` and `other` objects.\n","\t     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n","\t     */\n","\t    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n","\t      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n","\t          objProps = getAllKeys(object),\n","\t          objLength = objProps.length,\n","\t          othProps = getAllKeys(other),\n","\t          othLength = othProps.length;\n","\t\n","\t      if (objLength != othLength && !isPartial) {\n","\t        return false;\n","\t      }\n","\t      var index = objLength;\n","\t      while (index--) {\n","\t        var key = objProps[index];\n","\t        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n","\t          return false;\n","\t        }\n","\t      }\n","\t      // Assume cyclic values are equal.\n","\t      var stacked = stack.get(object);\n","\t      if (stacked && stack.get(other)) {\n","\t        return stacked == other;\n","\t      }\n","\t      var result = true;\n","\t      stack.set(object, other);\n","\t      stack.set(other, object);\n","\t\n","\t      var skipCtor = isPartial;\n","\t      while (++index < objLength) {\n","\t        key = objProps[index];\n","\t        var objValue = object[key],\n","\t            othValue = other[key];\n","\t\n","\t        if (customizer) {\n","\t          var compared = isPartial\n","\t            ? customizer(othValue, objValue, key, other, object, stack)\n","\t            : customizer(objValue, othValue, key, object, other, stack);\n","\t        }\n","\t        // Recursively compare objects (susceptible to call stack limits).\n","\t        if (!(compared === undefined\n","\t              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n","\t              : compared\n","\t            )) {\n","\t          result = false;\n","\t          break;\n","\t        }\n","\t        skipCtor || (skipCtor = key == 'constructor');\n","\t      }\n","\t      if (result && !skipCtor) {\n","\t        var objCtor = object.constructor,\n","\t            othCtor = other.constructor;\n","\t\n","\t        // Non `Object` object instances with different constructors are not equal.\n","\t        if (objCtor != othCtor &&\n","\t            ('constructor' in object && 'constructor' in other) &&\n","\t            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n","\t              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n","\t          result = false;\n","\t        }\n","\t      }\n","\t      stack['delete'](object);\n","\t      stack['delete'](other);\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseRest` which flattens the rest array.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to apply a rest parameter to.\n","\t     * @returns {Function} Returns the new function.\n","\t     */\n","\t    function flatRest(func) {\n","\t      return setToString(overRest(func, undefined, flatten), func + '');\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of own enumerable property names and symbols of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names and symbols.\n","\t     */\n","\t    function getAllKeys(object) {\n","\t      return baseGetAllKeys(object, keys, getSymbols);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of own and inherited enumerable property names and\n","\t     * symbols of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names and symbols.\n","\t     */\n","\t    function getAllKeysIn(object) {\n","\t      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets metadata for `func`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to query.\n","\t     * @returns {*} Returns the metadata for `func`.\n","\t     */\n","\t    var getData = !metaMap ? noop : function(func) {\n","\t      return metaMap.get(func);\n","\t    };\n","\t\n","\t    /**\n","\t     * Gets the name of `func`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to query.\n","\t     * @returns {string} Returns the function name.\n","\t     */\n","\t    function getFuncName(func) {\n","\t      var result = (func.name + ''),\n","\t          array = realNames[result],\n","\t          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n","\t\n","\t      while (length--) {\n","\t        var data = array[length],\n","\t            otherFunc = data.func;\n","\t        if (otherFunc == null || otherFunc == func) {\n","\t          return data.name;\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the argument placeholder value for `func`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to inspect.\n","\t     * @returns {*} Returns the placeholder value.\n","\t     */\n","\t    function getHolder(func) {\n","\t      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n","\t      return object.placeholder;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n","\t     * this function returns the custom method, otherwise it returns `baseIteratee`.\n","\t     * If arguments are provided, the chosen function is invoked with them and\n","\t     * its result is returned.\n","\t     *\n","\t     * @private\n","\t     * @param {*} [value] The value to convert to an iteratee.\n","\t     * @param {number} [arity] The arity of the created iteratee.\n","\t     * @returns {Function} Returns the chosen function or its result.\n","\t     */\n","\t    function getIteratee() {\n","\t      var result = lodash.iteratee || iteratee;\n","\t      result = result === iteratee ? baseIteratee : result;\n","\t      return arguments.length ? result(arguments[0], arguments[1]) : result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the data for `map`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} map The map to query.\n","\t     * @param {string} key The reference key.\n","\t     * @returns {*} Returns the map data.\n","\t     */\n","\t    function getMapData(map, key) {\n","\t      var data = map.__data__;\n","\t      return isKeyable(key)\n","\t        ? data[typeof key == 'string' ? 'string' : 'hash']\n","\t        : data.map;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the property names, values, and compare flags of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the match data of `object`.\n","\t     */\n","\t    function getMatchData(object) {\n","\t      var result = keys(object),\n","\t          length = result.length;\n","\t\n","\t      while (length--) {\n","\t        var key = result[length],\n","\t            value = object[key];\n","\t\n","\t        result[length] = [key, value, isStrictComparable(value)];\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the native function at `key` of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {string} key The key of the method to get.\n","\t     * @returns {*} Returns the function if it's native, else `undefined`.\n","\t     */\n","\t    function getNative(object, key) {\n","\t      var value = getValue(object, key);\n","\t      return baseIsNative(value) ? value : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to query.\n","\t     * @returns {string} Returns the raw `toStringTag`.\n","\t     */\n","\t    function getRawTag(value) {\n","\t      var isOwn = hasOwnProperty.call(value, symToStringTag),\n","\t          tag = value[symToStringTag];\n","\t\n","\t      try {\n","\t        value[symToStringTag] = undefined;\n","\t        var unmasked = true;\n","\t      } catch (e) {}\n","\t\n","\t      var result = nativeObjectToString.call(value);\n","\t      if (unmasked) {\n","\t        if (isOwn) {\n","\t          value[symToStringTag] = tag;\n","\t        } else {\n","\t          delete value[symToStringTag];\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of the own enumerable symbols of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of symbols.\n","\t     */\n","\t    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n","\t      if (object == null) {\n","\t        return [];\n","\t      }\n","\t      object = Object(object);\n","\t      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n","\t        return propertyIsEnumerable.call(object, symbol);\n","\t      });\n","\t    };\n","\t\n","\t    /**\n","\t     * Creates an array of the own and inherited enumerable symbols of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of symbols.\n","\t     */\n","\t    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n","\t      var result = [];\n","\t      while (object) {\n","\t        arrayPush(result, getSymbols(object));\n","\t        object = getPrototype(object);\n","\t      }\n","\t      return result;\n","\t    };\n","\t\n","\t    /**\n","\t     * Gets the `toStringTag` of `value`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to query.\n","\t     * @returns {string} Returns the `toStringTag`.\n","\t     */\n","\t    var getTag = baseGetTag;\n","\t\n","\t    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n","\t    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n","\t        (Map && getTag(new Map) != mapTag) ||\n","\t        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n","\t        (Set && getTag(new Set) != setTag) ||\n","\t        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n","\t      getTag = function(value) {\n","\t        var result = baseGetTag(value),\n","\t            Ctor = result == objectTag ? value.constructor : undefined,\n","\t            ctorString = Ctor ? toSource(Ctor) : '';\n","\t\n","\t        if (ctorString) {\n","\t          switch (ctorString) {\n","\t            case dataViewCtorString: return dataViewTag;\n","\t            case mapCtorString: return mapTag;\n","\t            case promiseCtorString: return promiseTag;\n","\t            case setCtorString: return setTag;\n","\t            case weakMapCtorString: return weakMapTag;\n","\t          }\n","\t        }\n","\t        return result;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n","\t     *\n","\t     * @private\n","\t     * @param {number} start The start of the view.\n","\t     * @param {number} end The end of the view.\n","\t     * @param {Array} transforms The transformations to apply to the view.\n","\t     * @returns {Object} Returns an object containing the `start` and `end`\n","\t     *  positions of the view.\n","\t     */\n","\t    function getView(start, end, transforms) {\n","\t      var index = -1,\n","\t          length = transforms.length;\n","\t\n","\t      while (++index < length) {\n","\t        var data = transforms[index],\n","\t            size = data.size;\n","\t\n","\t        switch (data.type) {\n","\t          case 'drop':      start += size; break;\n","\t          case 'dropRight': end -= size; break;\n","\t          case 'take':      end = nativeMin(end, start + size); break;\n","\t          case 'takeRight': start = nativeMax(start, end - size); break;\n","\t        }\n","\t      }\n","\t      return { 'start': start, 'end': end };\n","\t    }\n","\t\n","\t    /**\n","\t     * Extracts wrapper details from the `source` body comment.\n","\t     *\n","\t     * @private\n","\t     * @param {string} source The source to inspect.\n","\t     * @returns {Array} Returns the wrapper details.\n","\t     */\n","\t    function getWrapDetails(source) {\n","\t      var match = source.match(reWrapDetails);\n","\t      return match ? match[1].split(reSplitDetails) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `path` exists on `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path to check.\n","\t     * @param {Function} hasFunc The function to check properties.\n","\t     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n","\t     */\n","\t    function hasPath(object, path, hasFunc) {\n","\t      path = castPath(path, object);\n","\t\n","\t      var index = -1,\n","\t          length = path.length,\n","\t          result = false;\n","\t\n","\t      while (++index < length) {\n","\t        var key = toKey(path[index]);\n","\t        if (!(result = object != null && hasFunc(object, key))) {\n","\t          break;\n","\t        }\n","\t        object = object[key];\n","\t      }\n","\t      if (result || ++index != length) {\n","\t        return result;\n","\t      }\n","\t      length = object == null ? 0 : object.length;\n","\t      return !!length && isLength(length) && isIndex(key, length) &&\n","\t        (isArray(object) || isArguments(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * Initializes an array clone.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to clone.\n","\t     * @returns {Array} Returns the initialized clone.\n","\t     */\n","\t    function initCloneArray(array) {\n","\t      var length = array.length,\n","\t          result = new array.constructor(length);\n","\t\n","\t      // Add properties assigned by `RegExp#exec`.\n","\t      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n","\t        result.index = array.index;\n","\t        result.input = array.input;\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Initializes an object clone.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to clone.\n","\t     * @returns {Object} Returns the initialized clone.\n","\t     */\n","\t    function initCloneObject(object) {\n","\t      return (typeof object.constructor == 'function' && !isPrototype(object))\n","\t        ? baseCreate(getPrototype(object))\n","\t        : {};\n","\t    }\n","\t\n","\t    /**\n","\t     * Initializes an object clone based on its `toStringTag`.\n","\t     *\n","\t     * **Note:** This function only supports cloning values with tags of\n","\t     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to clone.\n","\t     * @param {string} tag The `toStringTag` of the object to clone.\n","\t     * @param {boolean} [isDeep] Specify a deep clone.\n","\t     * @returns {Object} Returns the initialized clone.\n","\t     */\n","\t    function initCloneByTag(object, tag, isDeep) {\n","\t      var Ctor = object.constructor;\n","\t      switch (tag) {\n","\t        case arrayBufferTag:\n","\t          return cloneArrayBuffer(object);\n","\t\n","\t        case boolTag:\n","\t        case dateTag:\n","\t          return new Ctor(+object);\n","\t\n","\t        case dataViewTag:\n","\t          return cloneDataView(object, isDeep);\n","\t\n","\t        case float32Tag: case float64Tag:\n","\t        case int8Tag: case int16Tag: case int32Tag:\n","\t        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n","\t          return cloneTypedArray(object, isDeep);\n","\t\n","\t        case mapTag:\n","\t          return new Ctor;\n","\t\n","\t        case numberTag:\n","\t        case stringTag:\n","\t          return new Ctor(object);\n","\t\n","\t        case regexpTag:\n","\t          return cloneRegExp(object);\n","\t\n","\t        case setTag:\n","\t          return new Ctor;\n","\t\n","\t        case symbolTag:\n","\t          return cloneSymbol(object);\n","\t      }\n","\t    }\n","\t\n","\t    /**\n","\t     * Inserts wrapper `details` in a comment at the top of the `source` body.\n","\t     *\n","\t     * @private\n","\t     * @param {string} source The source to modify.\n","\t     * @returns {Array} details The details to insert.\n","\t     * @returns {string} Returns the modified source.\n","\t     */\n","\t    function insertWrapDetails(source, details) {\n","\t      var length = details.length;\n","\t      if (!length) {\n","\t        return source;\n","\t      }\n","\t      var lastIndex = length - 1;\n","\t      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n","\t      details = details.join(length > 2 ? ', ' : ' ');\n","\t      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a flattenable `arguments` object or array.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n","\t     */\n","\t    function isFlattenable(value) {\n","\t      return isArray(value) || isArguments(value) ||\n","\t        !!(spreadableSymbol && value && value[spreadableSymbol]);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a valid array-like index.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n","\t     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n","\t     */\n","\t    function isIndex(value, length) {\n","\t      var type = typeof value;\n","\t      length = length == null ? MAX_SAFE_INTEGER : length;\n","\t\n","\t      return !!length &&\n","\t        (type == 'number' ||\n","\t          (type != 'symbol' && reIsUint.test(value))) &&\n","\t            (value > -1 && value % 1 == 0 && value < length);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if the given arguments are from an iteratee call.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The potential iteratee value argument.\n","\t     * @param {*} index The potential iteratee index or key argument.\n","\t     * @param {*} object The potential iteratee object argument.\n","\t     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n","\t     *  else `false`.\n","\t     */\n","\t    function isIterateeCall(value, index, object) {\n","\t      if (!isObject(object)) {\n","\t        return false;\n","\t      }\n","\t      var type = typeof index;\n","\t      if (type == 'number'\n","\t            ? (isArrayLike(object) && isIndex(index, object.length))\n","\t            : (type == 'string' && index in object)\n","\t          ) {\n","\t        return eq(object[index], value);\n","\t      }\n","\t      return false;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a property name and not a property path.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @param {Object} [object] The object to query keys on.\n","\t     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n","\t     */\n","\t    function isKey(value, object) {\n","\t      if (isArray(value)) {\n","\t        return false;\n","\t      }\n","\t      var type = typeof value;\n","\t      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n","\t          value == null || isSymbol(value)) {\n","\t        return true;\n","\t      }\n","\t      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n","\t        (object != null && value in Object(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is suitable for use as unique object key.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n","\t     */\n","\t    function isKeyable(value) {\n","\t      var type = typeof value;\n","\t      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n","\t        ? (value !== '__proto__')\n","\t        : (value === null);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `func` has a lazy counterpart.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to check.\n","\t     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n","\t     *  else `false`.\n","\t     */\n","\t    function isLaziable(func) {\n","\t      var funcName = getFuncName(func),\n","\t          other = lodash[funcName];\n","\t\n","\t      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n","\t        return false;\n","\t      }\n","\t      if (func === other) {\n","\t        return true;\n","\t      }\n","\t      var data = getData(other);\n","\t      return !!data && func === data[0];\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `func` has its source masked.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to check.\n","\t     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n","\t     */\n","\t    function isMasked(func) {\n","\t      return !!maskSrcKey && (maskSrcKey in func);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `func` is capable of being masked.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n","\t     */\n","\t    var isMaskable = coreJsData ? isFunction : stubFalse;\n","\t\n","\t    /**\n","\t     * Checks if `value` is likely a prototype object.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n","\t     */\n","\t    function isPrototype(value) {\n","\t      var Ctor = value && value.constructor,\n","\t          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n","\t\n","\t      return value === proto;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` if suitable for strict\n","\t     *  equality comparisons, else `false`.\n","\t     */\n","\t    function isStrictComparable(value) {\n","\t      return value === value && !isObject(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `matchesProperty` for source values suitable\n","\t     * for strict equality comparisons, i.e. `===`.\n","\t     *\n","\t     * @private\n","\t     * @param {string} key The key of the property to get.\n","\t     * @param {*} srcValue The value to match.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     */\n","\t    function matchesStrictComparable(key, srcValue) {\n","\t      return function(object) {\n","\t        if (object == null) {\n","\t          return false;\n","\t        }\n","\t        return object[key] === srcValue &&\n","\t          (srcValue !== undefined || (key in Object(object)));\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `_.memoize` which clears the memoized function's\n","\t     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to have its output memoized.\n","\t     * @returns {Function} Returns the new memoized function.\n","\t     */\n","\t    function memoizeCapped(func) {\n","\t      var result = memoize(func, function(key) {\n","\t        if (cache.size === MAX_MEMOIZE_SIZE) {\n","\t          cache.clear();\n","\t        }\n","\t        return key;\n","\t      });\n","\t\n","\t      var cache = result.cache;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Merges the function metadata of `source` into `data`.\n","\t     *\n","\t     * Merging metadata reduces the number of wrappers used to invoke a function.\n","\t     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n","\t     * may be applied regardless of execution order. Methods like `_.ary` and\n","\t     * `_.rearg` modify function arguments, making the order in which they are\n","\t     * executed important, preventing the merging of metadata. However, we make\n","\t     * an exception for a safe combined case where curried functions have `_.ary`\n","\t     * and or `_.rearg` applied.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} data The destination metadata.\n","\t     * @param {Array} source The source metadata.\n","\t     * @returns {Array} Returns `data`.\n","\t     */\n","\t    function mergeData(data, source) {\n","\t      var bitmask = data[1],\n","\t          srcBitmask = source[1],\n","\t          newBitmask = bitmask | srcBitmask,\n","\t          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n","\t\n","\t      var isCombo =\n","\t        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n","\t        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n","\t        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n","\t\n","\t      // Exit early if metadata can't be merged.\n","\t      if (!(isCommon || isCombo)) {\n","\t        return data;\n","\t      }\n","\t      // Use source `thisArg` if available.\n","\t      if (srcBitmask & WRAP_BIND_FLAG) {\n","\t        data[2] = source[2];\n","\t        // Set when currying a bound function.\n","\t        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n","\t      }\n","\t      // Compose partial arguments.\n","\t      var value = source[3];\n","\t      if (value) {\n","\t        var partials = data[3];\n","\t        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n","\t        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n","\t      }\n","\t      // Compose partial right arguments.\n","\t      value = source[5];\n","\t      if (value) {\n","\t        partials = data[5];\n","\t        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n","\t        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n","\t      }\n","\t      // Use source `argPos` if available.\n","\t      value = source[7];\n","\t      if (value) {\n","\t        data[7] = value;\n","\t      }\n","\t      // Use source `ary` if it's smaller.\n","\t      if (srcBitmask & WRAP_ARY_FLAG) {\n","\t        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n","\t      }\n","\t      // Use source `arity` if one is not provided.\n","\t      if (data[9] == null) {\n","\t        data[9] = source[9];\n","\t      }\n","\t      // Use source `func` and merge bitmasks.\n","\t      data[0] = source[0];\n","\t      data[1] = newBitmask;\n","\t\n","\t      return data;\n","\t    }\n","\t\n","\t    /**\n","\t     * This function is like\n","\t     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n","\t     * except that it includes inherited enumerable properties.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     */\n","\t    function nativeKeysIn(object) {\n","\t      var result = [];\n","\t      if (object != null) {\n","\t        for (var key in Object(object)) {\n","\t          result.push(key);\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a string using `Object.prototype.toString`.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {string} Returns the converted string.\n","\t     */\n","\t    function objectToString(value) {\n","\t      return nativeObjectToString.call(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `baseRest` which transforms the rest array.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to apply a rest parameter to.\n","\t     * @param {number} [start=func.length-1] The start position of the rest parameter.\n","\t     * @param {Function} transform The rest array transform.\n","\t     * @returns {Function} Returns the new function.\n","\t     */\n","\t    function overRest(func, start, transform) {\n","\t      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n","\t      return function() {\n","\t        var args = arguments,\n","\t            index = -1,\n","\t            length = nativeMax(args.length - start, 0),\n","\t            array = Array(length);\n","\t\n","\t        while (++index < length) {\n","\t          array[index] = args[start + index];\n","\t        }\n","\t        index = -1;\n","\t        var otherArgs = Array(start + 1);\n","\t        while (++index < start) {\n","\t          otherArgs[index] = args[index];\n","\t        }\n","\t        otherArgs[start] = transform(array);\n","\t        return apply(func, this, otherArgs);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the parent value at `path` of `object`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array} path The path to get the parent value of.\n","\t     * @returns {*} Returns the parent value.\n","\t     */\n","\t    function parent(object, path) {\n","\t      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n","\t    }\n","\t\n","\t    /**\n","\t     * Reorder `array` according to the specified indexes where the element at\n","\t     * the first index is assigned as the first element, the element at\n","\t     * the second index is assigned as the second element, and so on.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to reorder.\n","\t     * @param {Array} indexes The arranged array indexes.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function reorder(array, indexes) {\n","\t      var arrLength = array.length,\n","\t          length = nativeMin(indexes.length, arrLength),\n","\t          oldArray = copyArray(array);\n","\t\n","\t      while (length--) {\n","\t        var index = indexes[length];\n","\t        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n","\t      }\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the value at `key`, unless `key` is \"__proto__\".\n","\t     *\n","\t     * @private\n","\t     * @param {Object} object The object to query.\n","\t     * @param {string} key The key of the property to get.\n","\t     * @returns {*} Returns the property value.\n","\t     */\n","\t    function safeGet(object, key) {\n","\t      if (key == '__proto__') {\n","\t        return;\n","\t      }\n","\t\n","\t      return object[key];\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets metadata for `func`.\n","\t     *\n","\t     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n","\t     * period of time, it will trip its breaker and transition to an identity\n","\t     * function to avoid garbage collection pauses in V8. See\n","\t     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n","\t     * for more details.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to associate metadata with.\n","\t     * @param {*} data The metadata.\n","\t     * @returns {Function} Returns `func`.\n","\t     */\n","\t    var setData = shortOut(baseSetData);\n","\t\n","\t    /**\n","\t     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to delay.\n","\t     * @param {number} wait The number of milliseconds to delay invocation.\n","\t     * @returns {number|Object} Returns the timer id or timeout object.\n","\t     */\n","\t    var setTimeout = ctxSetTimeout || function(func, wait) {\n","\t      return root.setTimeout(func, wait);\n","\t    };\n","\t\n","\t    /**\n","\t     * Sets the `toString` method of `func` to return `string`.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to modify.\n","\t     * @param {Function} string The `toString` result.\n","\t     * @returns {Function} Returns `func`.\n","\t     */\n","\t    var setToString = shortOut(baseSetToString);\n","\t\n","\t    /**\n","\t     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n","\t     * with wrapper details in a comment at the top of the source body.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} wrapper The function to modify.\n","\t     * @param {Function} reference The reference function.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @returns {Function} Returns `wrapper`.\n","\t     */\n","\t    function setWrapToString(wrapper, reference, bitmask) {\n","\t      var source = (reference + '');\n","\t      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that'll short out and invoke `identity` instead\n","\t     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n","\t     * milliseconds.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to restrict.\n","\t     * @returns {Function} Returns the new shortable function.\n","\t     */\n","\t    function shortOut(func) {\n","\t      var count = 0,\n","\t          lastCalled = 0;\n","\t\n","\t      return function() {\n","\t        var stamp = nativeNow(),\n","\t            remaining = HOT_SPAN - (stamp - lastCalled);\n","\t\n","\t        lastCalled = stamp;\n","\t        if (remaining > 0) {\n","\t          if (++count >= HOT_COUNT) {\n","\t            return arguments[0];\n","\t          }\n","\t        } else {\n","\t          count = 0;\n","\t        }\n","\t        return func.apply(undefined, arguments);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n","\t     *\n","\t     * @private\n","\t     * @param {Array} array The array to shuffle.\n","\t     * @param {number} [size=array.length] The size of `array`.\n","\t     * @returns {Array} Returns `array`.\n","\t     */\n","\t    function shuffleSelf(array, size) {\n","\t      var index = -1,\n","\t          length = array.length,\n","\t          lastIndex = length - 1;\n","\t\n","\t      size = size === undefined ? length : size;\n","\t      while (++index < size) {\n","\t        var rand = baseRandom(index, lastIndex),\n","\t            value = array[rand];\n","\t\n","\t        array[rand] = array[index];\n","\t        array[index] = value;\n","\t      }\n","\t      array.length = size;\n","\t      return array;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string` to a property path array.\n","\t     *\n","\t     * @private\n","\t     * @param {string} string The string to convert.\n","\t     * @returns {Array} Returns the property path array.\n","\t     */\n","\t    var stringToPath = memoizeCapped(function(string) {\n","\t      var result = [];\n","\t      if (string.charCodeAt(0) === 46 /* . */) {\n","\t        result.push('');\n","\t      }\n","\t      string.replace(rePropName, function(match, number, quote, subString) {\n","\t        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n","\t      });\n","\t      return result;\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts `value` to a string key if it's not a string or symbol.\n","\t     *\n","\t     * @private\n","\t     * @param {*} value The value to inspect.\n","\t     * @returns {string|symbol} Returns the key.\n","\t     */\n","\t    function toKey(value) {\n","\t      if (typeof value == 'string' || isSymbol(value)) {\n","\t        return value;\n","\t      }\n","\t      var result = (value + '');\n","\t      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `func` to its source code.\n","\t     *\n","\t     * @private\n","\t     * @param {Function} func The function to convert.\n","\t     * @returns {string} Returns the source code.\n","\t     */\n","\t    function toSource(func) {\n","\t      if (func != null) {\n","\t        try {\n","\t          return funcToString.call(func);\n","\t        } catch (e) {}\n","\t        try {\n","\t          return (func + '');\n","\t        } catch (e) {}\n","\t      }\n","\t      return '';\n","\t    }\n","\t\n","\t    /**\n","\t     * Updates wrapper `details` based on `bitmask` flags.\n","\t     *\n","\t     * @private\n","\t     * @returns {Array} details The details to modify.\n","\t     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n","\t     * @returns {Array} Returns `details`.\n","\t     */\n","\t    function updateWrapDetails(details, bitmask) {\n","\t      arrayEach(wrapFlags, function(pair) {\n","\t        var value = '_.' + pair[0];\n","\t        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n","\t          details.push(value);\n","\t        }\n","\t      });\n","\t      return details.sort();\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of `wrapper`.\n","\t     *\n","\t     * @private\n","\t     * @param {Object} wrapper The wrapper to clone.\n","\t     * @returns {Object} Returns the cloned wrapper.\n","\t     */\n","\t    function wrapperClone(wrapper) {\n","\t      if (wrapper instanceof LazyWrapper) {\n","\t        return wrapper.clone();\n","\t      }\n","\t      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n","\t      result.__actions__ = copyArray(wrapper.__actions__);\n","\t      result.__index__  = wrapper.__index__;\n","\t      result.__values__ = wrapper.__values__;\n","\t      return result;\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates an array of elements split into groups the length of `size`.\n","\t     * If `array` can't be split evenly, the final chunk will be the remaining\n","\t     * elements.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to process.\n","\t     * @param {number} [size=1] The length of each chunk\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the new array of chunks.\n","\t     * @example\n","\t     *\n","\t     * _.chunk(['a', 'b', 'c', 'd'], 2);\n","\t     * // => [['a', 'b'], ['c', 'd']]\n","\t     *\n","\t     * _.chunk(['a', 'b', 'c', 'd'], 3);\n","\t     * // => [['a', 'b', 'c'], ['d']]\n","\t     */\n","\t    function chunk(array, size, guard) {\n","\t      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n","\t        size = 1;\n","\t      } else {\n","\t        size = nativeMax(toInteger(size), 0);\n","\t      }\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length || size < 1) {\n","\t        return [];\n","\t      }\n","\t      var index = 0,\n","\t          resIndex = 0,\n","\t          result = Array(nativeCeil(length / size));\n","\t\n","\t      while (index < length) {\n","\t        result[resIndex++] = baseSlice(array, index, (index += size));\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array with all falsey values removed. The values `false`, `null`,\n","\t     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to compact.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @example\n","\t     *\n","\t     * _.compact([0, 1, false, 2, '', 3]);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function compact(array) {\n","\t      var index = -1,\n","\t          length = array == null ? 0 : array.length,\n","\t          resIndex = 0,\n","\t          result = [];\n","\t\n","\t      while (++index < length) {\n","\t        var value = array[index];\n","\t        if (value) {\n","\t          result[resIndex++] = value;\n","\t        }\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a new array concatenating `array` with any additional arrays\n","\t     * and/or values.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to concatenate.\n","\t     * @param {...*} [values] The values to concatenate.\n","\t     * @returns {Array} Returns the new concatenated array.\n","\t     * @example\n","\t     *\n","\t     * var array = [1];\n","\t     * var other = _.concat(array, 2, [3], [[4]]);\n","\t     *\n","\t     * console.log(other);\n","\t     * // => [1, 2, 3, [4]]\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [1]\n","\t     */\n","\t    function concat() {\n","\t      var length = arguments.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      var args = Array(length - 1),\n","\t          array = arguments[0],\n","\t          index = length;\n","\t\n","\t      while (index--) {\n","\t        args[index - 1] = arguments[index];\n","\t      }\n","\t      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of `array` values not included in the other given arrays\n","\t     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons. The order and references of result values are\n","\t     * determined by the first array.\n","\t     *\n","\t     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {...Array} [values] The values to exclude.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @see _.without, _.xor\n","\t     * @example\n","\t     *\n","\t     * _.difference([2, 1], [2, 3]);\n","\t     * // => [1]\n","\t     */\n","\t    var difference = baseRest(function(array, values) {\n","\t      return isArrayLikeObject(array)\n","\t        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.difference` except that it accepts `iteratee` which\n","\t     * is invoked for each element of `array` and `values` to generate the criterion\n","\t     * by which they're compared. The order and references of result values are\n","\t     * determined by the first array. The iteratee is invoked with one argument:\n","\t     * (value).\n","\t     *\n","\t     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {...Array} [values] The values to exclude.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @example\n","\t     *\n","\t     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n","\t     * // => [1.2]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n","\t     * // => [{ 'x': 2 }]\n","\t     */\n","\t    var differenceBy = baseRest(function(array, values) {\n","\t      var iteratee = last(values);\n","\t      if (isArrayLikeObject(iteratee)) {\n","\t        iteratee = undefined;\n","\t      }\n","\t      return isArrayLikeObject(array)\n","\t        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.difference` except that it accepts `comparator`\n","\t     * which is invoked to compare elements of `array` to `values`. The order and\n","\t     * references of result values are determined by the first array. The comparator\n","\t     * is invoked with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {...Array} [values] The values to exclude.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n","\t     *\n","\t     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n","\t     * // => [{ 'x': 2, 'y': 1 }]\n","\t     */\n","\t    var differenceWith = baseRest(function(array, values) {\n","\t      var comparator = last(values);\n","\t      if (isArrayLikeObject(comparator)) {\n","\t        comparator = undefined;\n","\t      }\n","\t      return isArrayLikeObject(array)\n","\t        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with `n` elements dropped from the beginning.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.5.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} [n=1] The number of elements to drop.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.drop([1, 2, 3]);\n","\t     * // => [2, 3]\n","\t     *\n","\t     * _.drop([1, 2, 3], 2);\n","\t     * // => [3]\n","\t     *\n","\t     * _.drop([1, 2, 3], 5);\n","\t     * // => []\n","\t     *\n","\t     * _.drop([1, 2, 3], 0);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function drop(array, n, guard) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      n = (guard || n === undefined) ? 1 : toInteger(n);\n","\t      return baseSlice(array, n < 0 ? 0 : n, length);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with `n` elements dropped from the end.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} [n=1] The number of elements to drop.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.dropRight([1, 2, 3]);\n","\t     * // => [1, 2]\n","\t     *\n","\t     * _.dropRight([1, 2, 3], 2);\n","\t     * // => [1]\n","\t     *\n","\t     * _.dropRight([1, 2, 3], 5);\n","\t     * // => []\n","\t     *\n","\t     * _.dropRight([1, 2, 3], 0);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function dropRight(array, n, guard) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      n = (guard || n === undefined) ? 1 : toInteger(n);\n","\t      n = length - n;\n","\t      return baseSlice(array, 0, n < 0 ? 0 : n);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` excluding elements dropped from the end.\n","\t     * Elements are dropped until `predicate` returns falsey. The predicate is\n","\t     * invoked with three arguments: (value, index, array).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': true },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': false }\n","\t     * ];\n","\t     *\n","\t     * _.dropRightWhile(users, function(o) { return !o.active; });\n","\t     * // => objects for ['barney']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n","\t     * // => objects for ['barney', 'fred']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.dropRightWhile(users, ['active', false]);\n","\t     * // => objects for ['barney']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.dropRightWhile(users, 'active');\n","\t     * // => objects for ['barney', 'fred', 'pebbles']\n","\t     */\n","\t    function dropRightWhile(array, predicate) {\n","\t      return (array && array.length)\n","\t        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` excluding elements dropped from the beginning.\n","\t     * Elements are dropped until `predicate` returns falsey. The predicate is\n","\t     * invoked with three arguments: (value, index, array).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': false },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': true }\n","\t     * ];\n","\t     *\n","\t     * _.dropWhile(users, function(o) { return !o.active; });\n","\t     * // => objects for ['pebbles']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n","\t     * // => objects for ['fred', 'pebbles']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.dropWhile(users, ['active', false]);\n","\t     * // => objects for ['pebbles']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.dropWhile(users, 'active');\n","\t     * // => objects for ['barney', 'fred', 'pebbles']\n","\t     */\n","\t    function dropWhile(array, predicate) {\n","\t      return (array && array.length)\n","\t        ? baseWhile(array, getIteratee(predicate, 3), true)\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Fills elements of `array` with `value` from `start` up to, but not\n","\t     * including, `end`.\n","\t     *\n","\t     * **Note:** This method mutates `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.2.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to fill.\n","\t     * @param {*} value The value to fill `array` with.\n","\t     * @param {number} [start=0] The start position.\n","\t     * @param {number} [end=array.length] The end position.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, 2, 3];\n","\t     *\n","\t     * _.fill(array, 'a');\n","\t     * console.log(array);\n","\t     * // => ['a', 'a', 'a']\n","\t     *\n","\t     * _.fill(Array(3), 2);\n","\t     * // => [2, 2, 2]\n","\t     *\n","\t     * _.fill([4, 6, 8, 10], '*', 1, 3);\n","\t     * // => [4, '*', '*', 10]\n","\t     */\n","\t    function fill(array, value, start, end) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n","\t        start = 0;\n","\t        end = length;\n","\t      }\n","\t      return baseFill(array, value, start, end);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.find` except that it returns the index of the first\n","\t     * element `predicate` returns truthy for instead of the element itself.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param {number} [fromIndex=0] The index to search from.\n","\t     * @returns {number} Returns the index of the found element, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': false },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': true }\n","\t     * ];\n","\t     *\n","\t     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n","\t     * // => 0\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.findIndex(users, { 'user': 'fred', 'active': false });\n","\t     * // => 1\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.findIndex(users, ['active', false]);\n","\t     * // => 0\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.findIndex(users, 'active');\n","\t     * // => 2\n","\t     */\n","\t    function findIndex(array, predicate, fromIndex) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return -1;\n","\t      }\n","\t      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n","\t      if (index < 0) {\n","\t        index = nativeMax(length + index, 0);\n","\t      }\n","\t      return baseFindIndex(array, getIteratee(predicate, 3), index);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.findIndex` except that it iterates over elements\n","\t     * of `collection` from right to left.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param {number} [fromIndex=array.length-1] The index to search from.\n","\t     * @returns {number} Returns the index of the found element, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': true },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': false }\n","\t     * ];\n","\t     *\n","\t     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n","\t     * // => 2\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n","\t     * // => 0\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.findLastIndex(users, ['active', false]);\n","\t     * // => 2\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.findLastIndex(users, 'active');\n","\t     * // => 0\n","\t     */\n","\t    function findLastIndex(array, predicate, fromIndex) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return -1;\n","\t      }\n","\t      var index = length - 1;\n","\t      if (fromIndex !== undefined) {\n","\t        index = toInteger(fromIndex);\n","\t        index = fromIndex < 0\n","\t          ? nativeMax(length + index, 0)\n","\t          : nativeMin(index, length - 1);\n","\t      }\n","\t      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n","\t    }\n","\t\n","\t    /**\n","\t     * Flattens `array` a single level deep.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to flatten.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * _.flatten([1, [2, [3, [4]], 5]]);\n","\t     * // => [1, 2, [3, [4]], 5]\n","\t     */\n","\t    function flatten(array) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      return length ? baseFlatten(array, 1) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Recursively flattens `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to flatten.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n","\t     * // => [1, 2, 3, 4, 5]\n","\t     */\n","\t    function flattenDeep(array) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      return length ? baseFlatten(array, INFINITY) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Recursively flatten `array` up to `depth` times.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.4.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to flatten.\n","\t     * @param {number} [depth=1] The maximum recursion depth.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, [2, [3, [4]], 5]];\n","\t     *\n","\t     * _.flattenDepth(array, 1);\n","\t     * // => [1, 2, [3, [4]], 5]\n","\t     *\n","\t     * _.flattenDepth(array, 2);\n","\t     * // => [1, 2, 3, [4], 5]\n","\t     */\n","\t    function flattenDepth(array, depth) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      depth = depth === undefined ? 1 : toInteger(depth);\n","\t      return baseFlatten(array, depth);\n","\t    }\n","\t\n","\t    /**\n","\t     * The inverse of `_.toPairs`; this method returns an object composed\n","\t     * from key-value `pairs`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} pairs The key-value pairs.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * _.fromPairs([['a', 1], ['b', 2]]);\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     */\n","\t    function fromPairs(pairs) {\n","\t      var index = -1,\n","\t          length = pairs == null ? 0 : pairs.length,\n","\t          result = {};\n","\t\n","\t      while (++index < length) {\n","\t        var pair = pairs[index];\n","\t        result[pair[0]] = pair[1];\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the first element of `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @alias first\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @returns {*} Returns the first element of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.head([1, 2, 3]);\n","\t     * // => 1\n","\t     *\n","\t     * _.head([]);\n","\t     * // => undefined\n","\t     */\n","\t    function head(array) {\n","\t      return (array && array.length) ? array[0] : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the index at which the first occurrence of `value` is found in `array`\n","\t     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons. If `fromIndex` is negative, it's used as the\n","\t     * offset from the end of `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {*} value The value to search for.\n","\t     * @param {number} [fromIndex=0] The index to search from.\n","\t     * @returns {number} Returns the index of the matched value, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * _.indexOf([1, 2, 1, 2], 2);\n","\t     * // => 1\n","\t     *\n","\t     * // Search from the `fromIndex`.\n","\t     * _.indexOf([1, 2, 1, 2], 2, 2);\n","\t     * // => 3\n","\t     */\n","\t    function indexOf(array, value, fromIndex) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return -1;\n","\t      }\n","\t      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n","\t      if (index < 0) {\n","\t        index = nativeMax(length + index, 0);\n","\t      }\n","\t      return baseIndexOf(array, value, index);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets all but the last element of `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.initial([1, 2, 3]);\n","\t     * // => [1, 2]\n","\t     */\n","\t    function initial(array) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      return length ? baseSlice(array, 0, -1) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of unique values that are included in all given arrays\n","\t     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons. The order and references of result values are\n","\t     * determined by the first array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @returns {Array} Returns the new array of intersecting values.\n","\t     * @example\n","\t     *\n","\t     * _.intersection([2, 1], [2, 3]);\n","\t     * // => [2]\n","\t     */\n","\t    var intersection = baseRest(function(arrays) {\n","\t      var mapped = arrayMap(arrays, castArrayLikeObject);\n","\t      return (mapped.length && mapped[0] === arrays[0])\n","\t        ? baseIntersection(mapped)\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.intersection` except that it accepts `iteratee`\n","\t     * which is invoked for each element of each `arrays` to generate the criterion\n","\t     * by which they're compared. The order and references of result values are\n","\t     * determined by the first array. The iteratee is invoked with one argument:\n","\t     * (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new array of intersecting values.\n","\t     * @example\n","\t     *\n","\t     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n","\t     * // => [2.1]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n","\t     * // => [{ 'x': 1 }]\n","\t     */\n","\t    var intersectionBy = baseRest(function(arrays) {\n","\t      var iteratee = last(arrays),\n","\t          mapped = arrayMap(arrays, castArrayLikeObject);\n","\t\n","\t      if (iteratee === last(mapped)) {\n","\t        iteratee = undefined;\n","\t      } else {\n","\t        mapped.pop();\n","\t      }\n","\t      return (mapped.length && mapped[0] === arrays[0])\n","\t        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.intersection` except that it accepts `comparator`\n","\t     * which is invoked to compare elements of `arrays`. The order and references\n","\t     * of result values are determined by the first array. The comparator is\n","\t     * invoked with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of intersecting values.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n","\t     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n","\t     *\n","\t     * _.intersectionWith(objects, others, _.isEqual);\n","\t     * // => [{ 'x': 1, 'y': 2 }]\n","\t     */\n","\t    var intersectionWith = baseRest(function(arrays) {\n","\t      var comparator = last(arrays),\n","\t          mapped = arrayMap(arrays, castArrayLikeObject);\n","\t\n","\t      comparator = typeof comparator == 'function' ? comparator : undefined;\n","\t      if (comparator) {\n","\t        mapped.pop();\n","\t      }\n","\t      return (mapped.length && mapped[0] === arrays[0])\n","\t        ? baseIntersection(mapped, undefined, comparator)\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts all elements in `array` into a string separated by `separator`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to convert.\n","\t     * @param {string} [separator=','] The element separator.\n","\t     * @returns {string} Returns the joined string.\n","\t     * @example\n","\t     *\n","\t     * _.join(['a', 'b', 'c'], '~');\n","\t     * // => 'a~b~c'\n","\t     */\n","\t    function join(array, separator) {\n","\t      return array == null ? '' : nativeJoin.call(array, separator);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the last element of `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @returns {*} Returns the last element of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.last([1, 2, 3]);\n","\t     * // => 3\n","\t     */\n","\t    function last(array) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      return length ? array[length - 1] : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.indexOf` except that it iterates over elements of\n","\t     * `array` from right to left.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {*} value The value to search for.\n","\t     * @param {number} [fromIndex=array.length-1] The index to search from.\n","\t     * @returns {number} Returns the index of the matched value, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * _.lastIndexOf([1, 2, 1, 2], 2);\n","\t     * // => 3\n","\t     *\n","\t     * // Search from the `fromIndex`.\n","\t     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n","\t     * // => 1\n","\t     */\n","\t    function lastIndexOf(array, value, fromIndex) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return -1;\n","\t      }\n","\t      var index = length;\n","\t      if (fromIndex !== undefined) {\n","\t        index = toInteger(fromIndex);\n","\t        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n","\t      }\n","\t      return value === value\n","\t        ? strictLastIndexOf(array, value, index)\n","\t        : baseFindIndex(array, baseIsNaN, index, true);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n","\t     * element from the end is returned.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.11.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} [n=0] The index of the element to return.\n","\t     * @returns {*} Returns the nth element of `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = ['a', 'b', 'c', 'd'];\n","\t     *\n","\t     * _.nth(array, 1);\n","\t     * // => 'b'\n","\t     *\n","\t     * _.nth(array, -2);\n","\t     * // => 'c';\n","\t     */\n","\t    function nth(array, n) {\n","\t      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes all given values from `array` using\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons.\n","\t     *\n","\t     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n","\t     * to remove elements from an array by predicate.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {...*} [values] The values to remove.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n","\t     *\n","\t     * _.pull(array, 'a', 'c');\n","\t     * console.log(array);\n","\t     * // => ['b', 'b']\n","\t     */\n","\t    var pull = baseRest(pullAll);\n","\t\n","\t    /**\n","\t     * This method is like `_.pull` except that it accepts an array of values to remove.\n","\t     *\n","\t     * **Note:** Unlike `_.difference`, this method mutates `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {Array} values The values to remove.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n","\t     *\n","\t     * _.pullAll(array, ['a', 'c']);\n","\t     * console.log(array);\n","\t     * // => ['b', 'b']\n","\t     */\n","\t    function pullAll(array, values) {\n","\t      return (array && array.length && values && values.length)\n","\t        ? basePullAll(array, values)\n","\t        : array;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n","\t     * invoked for each element of `array` and `values` to generate the criterion\n","\t     * by which they're compared. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {Array} values The values to remove.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n","\t     *\n","\t     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n","\t     * console.log(array);\n","\t     * // => [{ 'x': 2 }]\n","\t     */\n","\t    function pullAllBy(array, values, iteratee) {\n","\t      return (array && array.length && values && values.length)\n","\t        ? basePullAll(array, values, getIteratee(iteratee, 2))\n","\t        : array;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.pullAll` except that it accepts `comparator` which\n","\t     * is invoked to compare elements of `array` to `values`. The comparator is\n","\t     * invoked with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.6.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {Array} values The values to remove.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n","\t     *\n","\t     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n","\t     * console.log(array);\n","\t     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n","\t     */\n","\t    function pullAllWith(array, values, comparator) {\n","\t      return (array && array.length && values && values.length)\n","\t        ? basePullAll(array, values, undefined, comparator)\n","\t        : array;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes elements from `array` corresponding to `indexes` and returns an\n","\t     * array of removed elements.\n","\t     *\n","\t     * **Note:** Unlike `_.at`, this method mutates `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n","\t     * @returns {Array} Returns the new array of removed elements.\n","\t     * @example\n","\t     *\n","\t     * var array = ['a', 'b', 'c', 'd'];\n","\t     * var pulled = _.pullAt(array, [1, 3]);\n","\t     *\n","\t     * console.log(array);\n","\t     * // => ['a', 'c']\n","\t     *\n","\t     * console.log(pulled);\n","\t     * // => ['b', 'd']\n","\t     */\n","\t    var pullAt = flatRest(function(array, indexes) {\n","\t      var length = array == null ? 0 : array.length,\n","\t          result = baseAt(array, indexes);\n","\t\n","\t      basePullAt(array, arrayMap(indexes, function(index) {\n","\t        return isIndex(index, length) ? +index : index;\n","\t      }).sort(compareAscending));\n","\t\n","\t      return result;\n","\t    });\n","\t\n","\t    /**\n","\t     * Removes all elements from `array` that `predicate` returns truthy for\n","\t     * and returns an array of the removed elements. The predicate is invoked\n","\t     * with three arguments: (value, index, array).\n","\t     *\n","\t     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n","\t     * to pull elements from an array by value.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new array of removed elements.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, 2, 3, 4];\n","\t     * var evens = _.remove(array, function(n) {\n","\t     *   return n % 2 == 0;\n","\t     * });\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [1, 3]\n","\t     *\n","\t     * console.log(evens);\n","\t     * // => [2, 4]\n","\t     */\n","\t    function remove(array, predicate) {\n","\t      var result = [];\n","\t      if (!(array && array.length)) {\n","\t        return result;\n","\t      }\n","\t      var index = -1,\n","\t          indexes = [],\n","\t          length = array.length;\n","\t\n","\t      predicate = getIteratee(predicate, 3);\n","\t      while (++index < length) {\n","\t        var value = array[index];\n","\t        if (predicate(value, index, array)) {\n","\t          result.push(value);\n","\t          indexes.push(index);\n","\t        }\n","\t      }\n","\t      basePullAt(array, indexes);\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Reverses `array` so that the first element becomes the last, the second\n","\t     * element becomes the second to last, and so on.\n","\t     *\n","\t     * **Note:** This method mutates `array` and is based on\n","\t     * [`Array#reverse`](https://mdn.io/Array/reverse).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to modify.\n","\t     * @returns {Array} Returns `array`.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, 2, 3];\n","\t     *\n","\t     * _.reverse(array);\n","\t     * // => [3, 2, 1]\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [3, 2, 1]\n","\t     */\n","\t    function reverse(array) {\n","\t      return array == null ? array : nativeReverse.call(array);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` from `start` up to, but not including, `end`.\n","\t     *\n","\t     * **Note:** This method is used instead of\n","\t     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n","\t     * returned.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to slice.\n","\t     * @param {number} [start=0] The start position.\n","\t     * @param {number} [end=array.length] The end position.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     */\n","\t    function slice(array, start, end) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n","\t        start = 0;\n","\t        end = length;\n","\t      }\n","\t      else {\n","\t        start = start == null ? 0 : toInteger(start);\n","\t        end = end === undefined ? length : toInteger(end);\n","\t      }\n","\t      return baseSlice(array, start, end);\n","\t    }\n","\t\n","\t    /**\n","\t     * Uses a binary search to determine the lowest index at which `value`\n","\t     * should be inserted into `array` in order to maintain its sort order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     * @example\n","\t     *\n","\t     * _.sortedIndex([30, 50], 40);\n","\t     * // => 1\n","\t     */\n","\t    function sortedIndex(array, value) {\n","\t      return baseSortedIndex(array, value);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n","\t     * which is invoked for `value` and each element of `array` to compute their\n","\t     * sort ranking. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n","\t     *\n","\t     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n","\t     * // => 0\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n","\t     * // => 0\n","\t     */\n","\t    function sortedIndexBy(array, value, iteratee) {\n","\t      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.indexOf` except that it performs a binary\n","\t     * search on a sorted `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {*} value The value to search for.\n","\t     * @returns {number} Returns the index of the matched value, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n","\t     * // => 1\n","\t     */\n","\t    function sortedIndexOf(array, value) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (length) {\n","\t        var index = baseSortedIndex(array, value);\n","\t        if (index < length && eq(array[index], value)) {\n","\t          return index;\n","\t        }\n","\t      }\n","\t      return -1;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.sortedIndex` except that it returns the highest\n","\t     * index at which `value` should be inserted into `array` in order to\n","\t     * maintain its sort order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     * @example\n","\t     *\n","\t     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n","\t     * // => 4\n","\t     */\n","\t    function sortedLastIndex(array, value) {\n","\t      return baseSortedIndex(array, value, true);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n","\t     * which is invoked for `value` and each element of `array` to compute their\n","\t     * sort ranking. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The sorted array to inspect.\n","\t     * @param {*} value The value to evaluate.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {number} Returns the index at which `value` should be inserted\n","\t     *  into `array`.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n","\t     *\n","\t     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n","\t     * // => 1\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n","\t     * // => 1\n","\t     */\n","\t    function sortedLastIndexBy(array, value, iteratee) {\n","\t      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.lastIndexOf` except that it performs a binary\n","\t     * search on a sorted `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {*} value The value to search for.\n","\t     * @returns {number} Returns the index of the matched value, else `-1`.\n","\t     * @example\n","\t     *\n","\t     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n","\t     * // => 3\n","\t     */\n","\t    function sortedLastIndexOf(array, value) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (length) {\n","\t        var index = baseSortedIndex(array, value, true) - 1;\n","\t        if (eq(array[index], value)) {\n","\t          return index;\n","\t        }\n","\t      }\n","\t      return -1;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.uniq` except that it's designed and optimized\n","\t     * for sorted arrays.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     * @example\n","\t     *\n","\t     * _.sortedUniq([1, 1, 2]);\n","\t     * // => [1, 2]\n","\t     */\n","\t    function sortedUniq(array) {\n","\t      return (array && array.length)\n","\t        ? baseSortedUniq(array)\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.uniqBy` except that it's designed and optimized\n","\t     * for sorted arrays.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [iteratee] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     * @example\n","\t     *\n","\t     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n","\t     * // => [1.1, 2.3]\n","\t     */\n","\t    function sortedUniqBy(array, iteratee) {\n","\t      return (array && array.length)\n","\t        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets all but the first element of `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.tail([1, 2, 3]);\n","\t     * // => [2, 3]\n","\t     */\n","\t    function tail(array) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      return length ? baseSlice(array, 1, length) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with `n` elements taken from the beginning.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} [n=1] The number of elements to take.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.take([1, 2, 3]);\n","\t     * // => [1]\n","\t     *\n","\t     * _.take([1, 2, 3], 2);\n","\t     * // => [1, 2]\n","\t     *\n","\t     * _.take([1, 2, 3], 5);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * _.take([1, 2, 3], 0);\n","\t     * // => []\n","\t     */\n","\t    function take(array, n, guard) {\n","\t      if (!(array && array.length)) {\n","\t        return [];\n","\t      }\n","\t      n = (guard || n === undefined) ? 1 : toInteger(n);\n","\t      return baseSlice(array, 0, n < 0 ? 0 : n);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with `n` elements taken from the end.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {number} [n=1] The number of elements to take.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * _.takeRight([1, 2, 3]);\n","\t     * // => [3]\n","\t     *\n","\t     * _.takeRight([1, 2, 3], 2);\n","\t     * // => [2, 3]\n","\t     *\n","\t     * _.takeRight([1, 2, 3], 5);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * _.takeRight([1, 2, 3], 0);\n","\t     * // => []\n","\t     */\n","\t    function takeRight(array, n, guard) {\n","\t      var length = array == null ? 0 : array.length;\n","\t      if (!length) {\n","\t        return [];\n","\t      }\n","\t      n = (guard || n === undefined) ? 1 : toInteger(n);\n","\t      n = length - n;\n","\t      return baseSlice(array, n < 0 ? 0 : n, length);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with elements taken from the end. Elements are\n","\t     * taken until `predicate` returns falsey. The predicate is invoked with\n","\t     * three arguments: (value, index, array).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': true },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': false }\n","\t     * ];\n","\t     *\n","\t     * _.takeRightWhile(users, function(o) { return !o.active; });\n","\t     * // => objects for ['fred', 'pebbles']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n","\t     * // => objects for ['pebbles']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.takeRightWhile(users, ['active', false]);\n","\t     * // => objects for ['fred', 'pebbles']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.takeRightWhile(users, 'active');\n","\t     * // => []\n","\t     */\n","\t    function takeRightWhile(array, predicate) {\n","\t      return (array && array.length)\n","\t        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a slice of `array` with elements taken from the beginning. Elements\n","\t     * are taken until `predicate` returns falsey. The predicate is invoked with\n","\t     * three arguments: (value, index, array).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to query.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the slice of `array`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'active': false },\n","\t     *   { 'user': 'fred',    'active': false },\n","\t     *   { 'user': 'pebbles', 'active': true }\n","\t     * ];\n","\t     *\n","\t     * _.takeWhile(users, function(o) { return !o.active; });\n","\t     * // => objects for ['barney', 'fred']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n","\t     * // => objects for ['barney']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.takeWhile(users, ['active', false]);\n","\t     * // => objects for ['barney', 'fred']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.takeWhile(users, 'active');\n","\t     * // => []\n","\t     */\n","\t    function takeWhile(array, predicate) {\n","\t      return (array && array.length)\n","\t        ? baseWhile(array, getIteratee(predicate, 3))\n","\t        : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of unique values, in order, from all given arrays using\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @returns {Array} Returns the new array of combined values.\n","\t     * @example\n","\t     *\n","\t     * _.union([2], [1, 2]);\n","\t     * // => [2, 1]\n","\t     */\n","\t    var union = baseRest(function(arrays) {\n","\t      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.union` except that it accepts `iteratee` which is\n","\t     * invoked for each element of each `arrays` to generate the criterion by\n","\t     * which uniqueness is computed. Result values are chosen from the first\n","\t     * array in which the value occurs. The iteratee is invoked with one argument:\n","\t     * (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new array of combined values.\n","\t     * @example\n","\t     *\n","\t     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n","\t     * // => [2.1, 1.2]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n","\t     * // => [{ 'x': 1 }, { 'x': 2 }]\n","\t     */\n","\t    var unionBy = baseRest(function(arrays) {\n","\t      var iteratee = last(arrays);\n","\t      if (isArrayLikeObject(iteratee)) {\n","\t        iteratee = undefined;\n","\t      }\n","\t      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.union` except that it accepts `comparator` which\n","\t     * is invoked to compare elements of `arrays`. Result values are chosen from\n","\t     * the first array in which the value occurs. The comparator is invoked\n","\t     * with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of combined values.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n","\t     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n","\t     *\n","\t     * _.unionWith(objects, others, _.isEqual);\n","\t     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n","\t     */\n","\t    var unionWith = baseRest(function(arrays) {\n","\t      var comparator = last(arrays);\n","\t      comparator = typeof comparator == 'function' ? comparator : undefined;\n","\t      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a duplicate-free version of an array, using\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons, in which only the first occurrence of each element\n","\t     * is kept. The order of result values is determined by the order they occur\n","\t     * in the array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     * @example\n","\t     *\n","\t     * _.uniq([2, 1, 2]);\n","\t     * // => [2, 1]\n","\t     */\n","\t    function uniq(array) {\n","\t      return (array && array.length) ? baseUniq(array) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.uniq` except that it accepts `iteratee` which is\n","\t     * invoked for each element in `array` to generate the criterion by which\n","\t     * uniqueness is computed. The order of result values is determined by the\n","\t     * order they occur in the array. The iteratee is invoked with one argument:\n","\t     * (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     * @example\n","\t     *\n","\t     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n","\t     * // => [2.1, 1.2]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n","\t     * // => [{ 'x': 1 }, { 'x': 2 }]\n","\t     */\n","\t    function uniqBy(array, iteratee) {\n","\t      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.uniq` except that it accepts `comparator` which\n","\t     * is invoked to compare elements of `array`. The order of result values is\n","\t     * determined by the order they occur in the array.The comparator is invoked\n","\t     * with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new duplicate free array.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n","\t     *\n","\t     * _.uniqWith(objects, _.isEqual);\n","\t     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n","\t     */\n","\t    function uniqWith(array, comparator) {\n","\t      comparator = typeof comparator == 'function' ? comparator : undefined;\n","\t      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.zip` except that it accepts an array of grouped\n","\t     * elements and creates an array regrouping the elements to their pre-zip\n","\t     * configuration.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.2.0\n","\t     * @category Array\n","\t     * @param {Array} array The array of grouped elements to process.\n","\t     * @returns {Array} Returns the new array of regrouped elements.\n","\t     * @example\n","\t     *\n","\t     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n","\t     * // => [['a', 1, true], ['b', 2, false]]\n","\t     *\n","\t     * _.unzip(zipped);\n","\t     * // => [['a', 'b'], [1, 2], [true, false]]\n","\t     */\n","\t    function unzip(array) {\n","\t      if (!(array && array.length)) {\n","\t        return [];\n","\t      }\n","\t      var length = 0;\n","\t      array = arrayFilter(array, function(group) {\n","\t        if (isArrayLikeObject(group)) {\n","\t          length = nativeMax(group.length, length);\n","\t          return true;\n","\t        }\n","\t      });\n","\t      return baseTimes(length, function(index) {\n","\t        return arrayMap(array, baseProperty(index));\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n","\t     * how regrouped values should be combined. The iteratee is invoked with the\n","\t     * elements of each group: (...group).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.8.0\n","\t     * @category Array\n","\t     * @param {Array} array The array of grouped elements to process.\n","\t     * @param {Function} [iteratee=_.identity] The function to combine\n","\t     *  regrouped values.\n","\t     * @returns {Array} Returns the new array of regrouped elements.\n","\t     * @example\n","\t     *\n","\t     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n","\t     * // => [[1, 10, 100], [2, 20, 200]]\n","\t     *\n","\t     * _.unzipWith(zipped, _.add);\n","\t     * // => [3, 30, 300]\n","\t     */\n","\t    function unzipWith(array, iteratee) {\n","\t      if (!(array && array.length)) {\n","\t        return [];\n","\t      }\n","\t      var result = unzip(array);\n","\t      if (iteratee == null) {\n","\t        return result;\n","\t      }\n","\t      return arrayMap(result, function(group) {\n","\t        return apply(iteratee, undefined, group);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array excluding all given values using\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * for equality comparisons.\n","\t     *\n","\t     * **Note:** Unlike `_.pull`, this method returns a new array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {Array} array The array to inspect.\n","\t     * @param {...*} [values] The values to exclude.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @see _.difference, _.xor\n","\t     * @example\n","\t     *\n","\t     * _.without([2, 1, 2, 3], 1, 2);\n","\t     * // => [3]\n","\t     */\n","\t    var without = baseRest(function(array, values) {\n","\t      return isArrayLikeObject(array)\n","\t        ? baseDifference(array, values)\n","\t        : [];\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an array of unique values that is the\n","\t     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n","\t     * of the given arrays. The order of result values is determined by the order\n","\t     * they occur in the arrays.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.4.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @see _.difference, _.without\n","\t     * @example\n","\t     *\n","\t     * _.xor([2, 1], [2, 3]);\n","\t     * // => [1, 3]\n","\t     */\n","\t    var xor = baseRest(function(arrays) {\n","\t      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.xor` except that it accepts `iteratee` which is\n","\t     * invoked for each element of each `arrays` to generate the criterion by\n","\t     * which by which they're compared. The order of result values is determined\n","\t     * by the order they occur in the arrays. The iteratee is invoked with one\n","\t     * argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @example\n","\t     *\n","\t     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n","\t     * // => [1.2, 3.4]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n","\t     * // => [{ 'x': 2 }]\n","\t     */\n","\t    var xorBy = baseRest(function(arrays) {\n","\t      var iteratee = last(arrays);\n","\t      if (isArrayLikeObject(iteratee)) {\n","\t        iteratee = undefined;\n","\t      }\n","\t      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.xor` except that it accepts `comparator` which is\n","\t     * invoked to compare elements of `arrays`. The order of result values is\n","\t     * determined by the order they occur in the arrays. The comparator is invoked\n","\t     * with two arguments: (arrVal, othVal).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to inspect.\n","\t     * @param {Function} [comparator] The comparator invoked per element.\n","\t     * @returns {Array} Returns the new array of filtered values.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n","\t     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n","\t     *\n","\t     * _.xorWith(objects, others, _.isEqual);\n","\t     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n","\t     */\n","\t    var xorWith = baseRest(function(arrays) {\n","\t      var comparator = last(arrays);\n","\t      comparator = typeof comparator == 'function' ? comparator : undefined;\n","\t      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an array of grouped elements, the first of which contains the\n","\t     * first elements of the given arrays, the second of which contains the\n","\t     * second elements of the given arrays, and so on.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to process.\n","\t     * @returns {Array} Returns the new array of grouped elements.\n","\t     * @example\n","\t     *\n","\t     * _.zip(['a', 'b'], [1, 2], [true, false]);\n","\t     * // => [['a', 1, true], ['b', 2, false]]\n","\t     */\n","\t    var zip = baseRest(unzip);\n","\t\n","\t    /**\n","\t     * This method is like `_.fromPairs` except that it accepts two arrays,\n","\t     * one of property identifiers and one of corresponding values.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.4.0\n","\t     * @category Array\n","\t     * @param {Array} [props=[]] The property identifiers.\n","\t     * @param {Array} [values=[]] The property values.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * _.zipObject(['a', 'b'], [1, 2]);\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     */\n","\t    function zipObject(props, values) {\n","\t      return baseZipObject(props || [], values || [], assignValue);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.zipObject` except that it supports property paths.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.1.0\n","\t     * @category Array\n","\t     * @param {Array} [props=[]] The property identifiers.\n","\t     * @param {Array} [values=[]] The property values.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n","\t     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n","\t     */\n","\t    function zipObjectDeep(props, values) {\n","\t      return baseZipObject(props || [], values || [], baseSet);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.zip` except that it accepts `iteratee` to specify\n","\t     * how grouped values should be combined. The iteratee is invoked with the\n","\t     * elements of each group: (...group).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.8.0\n","\t     * @category Array\n","\t     * @param {...Array} [arrays] The arrays to process.\n","\t     * @param {Function} [iteratee=_.identity] The function to combine\n","\t     *  grouped values.\n","\t     * @returns {Array} Returns the new array of grouped elements.\n","\t     * @example\n","\t     *\n","\t     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n","\t     *   return a + b + c;\n","\t     * });\n","\t     * // => [111, 222]\n","\t     */\n","\t    var zipWith = baseRest(function(arrays) {\n","\t      var length = arrays.length,\n","\t          iteratee = length > 1 ? arrays[length - 1] : undefined;\n","\t\n","\t      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n","\t      return unzipWith(arrays, iteratee);\n","\t    });\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n","\t     * chain sequences enabled. The result of such sequences must be unwrapped\n","\t     * with `_#value`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.3.0\n","\t     * @category Seq\n","\t     * @param {*} value The value to wrap.\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'age': 36 },\n","\t     *   { 'user': 'fred',    'age': 40 },\n","\t     *   { 'user': 'pebbles', 'age': 1 }\n","\t     * ];\n","\t     *\n","\t     * var youngest = _\n","\t     *   .chain(users)\n","\t     *   .sortBy('age')\n","\t     *   .map(function(o) {\n","\t     *     return o.user + ' is ' + o.age;\n","\t     *   })\n","\t     *   .head()\n","\t     *   .value();\n","\t     * // => 'pebbles is 1'\n","\t     */\n","\t    function chain(value) {\n","\t      var result = lodash(value);\n","\t      result.__chain__ = true;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method invokes `interceptor` and returns `value`. The interceptor\n","\t     * is invoked with one argument; (value). The purpose of this method is to\n","\t     * \"tap into\" a method chain sequence in order to modify intermediate results.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Seq\n","\t     * @param {*} value The value to provide to `interceptor`.\n","\t     * @param {Function} interceptor The function to invoke.\n","\t     * @returns {*} Returns `value`.\n","\t     * @example\n","\t     *\n","\t     * _([1, 2, 3])\n","\t     *  .tap(function(array) {\n","\t     *    // Mutate input array.\n","\t     *    array.pop();\n","\t     *  })\n","\t     *  .reverse()\n","\t     *  .value();\n","\t     * // => [2, 1]\n","\t     */\n","\t    function tap(value, interceptor) {\n","\t      interceptor(value);\n","\t      return value;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.tap` except that it returns the result of `interceptor`.\n","\t     * The purpose of this method is to \"pass thru\" values replacing intermediate\n","\t     * results in a method chain sequence.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Seq\n","\t     * @param {*} value The value to provide to `interceptor`.\n","\t     * @param {Function} interceptor The function to invoke.\n","\t     * @returns {*} Returns the result of `interceptor`.\n","\t     * @example\n","\t     *\n","\t     * _('  abc  ')\n","\t     *  .chain()\n","\t     *  .trim()\n","\t     *  .thru(function(value) {\n","\t     *    return [value];\n","\t     *  })\n","\t     *  .value();\n","\t     * // => ['abc']\n","\t     */\n","\t    function thru(value, interceptor) {\n","\t      return interceptor(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is the wrapper version of `_.at`.\n","\t     *\n","\t     * @name at\n","\t     * @memberOf _\n","\t     * @since 1.0.0\n","\t     * @category Seq\n","\t     * @param {...(string|string[])} [paths] The property paths to pick.\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n","\t     *\n","\t     * _(object).at(['a[0].b.c', 'a[1]']).value();\n","\t     * // => [3, 4]\n","\t     */\n","\t    var wrapperAt = flatRest(function(paths) {\n","\t      var length = paths.length,\n","\t          start = length ? paths[0] : 0,\n","\t          value = this.__wrapped__,\n","\t          interceptor = function(object) { return baseAt(object, paths); };\n","\t\n","\t      if (length > 1 || this.__actions__.length ||\n","\t          !(value instanceof LazyWrapper) || !isIndex(start)) {\n","\t        return this.thru(interceptor);\n","\t      }\n","\t      value = value.slice(start, +start + (length ? 1 : 0));\n","\t      value.__actions__.push({\n","\t        'func': thru,\n","\t        'args': [interceptor],\n","\t        'thisArg': undefined\n","\t      });\n","\t      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n","\t        if (length && !array.length) {\n","\t          array.push(undefined);\n","\t        }\n","\t        return array;\n","\t      });\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n","\t     *\n","\t     * @name chain\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Seq\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'age': 36 },\n","\t     *   { 'user': 'fred',   'age': 40 }\n","\t     * ];\n","\t     *\n","\t     * // A sequence without explicit chaining.\n","\t     * _(users).head();\n","\t     * // => { 'user': 'barney', 'age': 36 }\n","\t     *\n","\t     * // A sequence with explicit chaining.\n","\t     * _(users)\n","\t     *   .chain()\n","\t     *   .head()\n","\t     *   .pick('user')\n","\t     *   .value();\n","\t     * // => { 'user': 'barney' }\n","\t     */\n","\t    function wrapperChain() {\n","\t      return chain(this);\n","\t    }\n","\t\n","\t    /**\n","\t     * Executes the chain sequence and returns the wrapped result.\n","\t     *\n","\t     * @name commit\n","\t     * @memberOf _\n","\t     * @since 3.2.0\n","\t     * @category Seq\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, 2];\n","\t     * var wrapped = _(array).push(3);\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [1, 2]\n","\t     *\n","\t     * wrapped = wrapped.commit();\n","\t     * console.log(array);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * wrapped.last();\n","\t     * // => 3\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function wrapperCommit() {\n","\t      return new LodashWrapper(this.value(), this.__chain__);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the next value on a wrapped object following the\n","\t     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n","\t     *\n","\t     * @name next\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Seq\n","\t     * @returns {Object} Returns the next iterator value.\n","\t     * @example\n","\t     *\n","\t     * var wrapped = _([1, 2]);\n","\t     *\n","\t     * wrapped.next();\n","\t     * // => { 'done': false, 'value': 1 }\n","\t     *\n","\t     * wrapped.next();\n","\t     * // => { 'done': false, 'value': 2 }\n","\t     *\n","\t     * wrapped.next();\n","\t     * // => { 'done': true, 'value': undefined }\n","\t     */\n","\t    function wrapperNext() {\n","\t      if (this.__values__ === undefined) {\n","\t        this.__values__ = toArray(this.value());\n","\t      }\n","\t      var done = this.__index__ >= this.__values__.length,\n","\t          value = done ? undefined : this.__values__[this.__index__++];\n","\t\n","\t      return { 'done': done, 'value': value };\n","\t    }\n","\t\n","\t    /**\n","\t     * Enables the wrapper to be iterable.\n","\t     *\n","\t     * @name Symbol.iterator\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Seq\n","\t     * @returns {Object} Returns the wrapper object.\n","\t     * @example\n","\t     *\n","\t     * var wrapped = _([1, 2]);\n","\t     *\n","\t     * wrapped[Symbol.iterator]() === wrapped;\n","\t     * // => true\n","\t     *\n","\t     * Array.from(wrapped);\n","\t     * // => [1, 2]\n","\t     */\n","\t    function wrapperToIterator() {\n","\t      return this;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n","\t     *\n","\t     * @name plant\n","\t     * @memberOf _\n","\t     * @since 3.2.0\n","\t     * @category Seq\n","\t     * @param {*} value The value to plant.\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * var wrapped = _([1, 2]).map(square);\n","\t     * var other = wrapped.plant([3, 4]);\n","\t     *\n","\t     * other.value();\n","\t     * // => [9, 16]\n","\t     *\n","\t     * wrapped.value();\n","\t     * // => [1, 4]\n","\t     */\n","\t    function wrapperPlant(value) {\n","\t      var result,\n","\t          parent = this;\n","\t\n","\t      while (parent instanceof baseLodash) {\n","\t        var clone = wrapperClone(parent);\n","\t        clone.__index__ = 0;\n","\t        clone.__values__ = undefined;\n","\t        if (result) {\n","\t          previous.__wrapped__ = clone;\n","\t        } else {\n","\t          result = clone;\n","\t        }\n","\t        var previous = clone;\n","\t        parent = parent.__wrapped__;\n","\t      }\n","\t      previous.__wrapped__ = value;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is the wrapper version of `_.reverse`.\n","\t     *\n","\t     * **Note:** This method mutates the wrapped array.\n","\t     *\n","\t     * @name reverse\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Seq\n","\t     * @returns {Object} Returns the new `lodash` wrapper instance.\n","\t     * @example\n","\t     *\n","\t     * var array = [1, 2, 3];\n","\t     *\n","\t     * _(array).reverse().value()\n","\t     * // => [3, 2, 1]\n","\t     *\n","\t     * console.log(array);\n","\t     * // => [3, 2, 1]\n","\t     */\n","\t    function wrapperReverse() {\n","\t      var value = this.__wrapped__;\n","\t      if (value instanceof LazyWrapper) {\n","\t        var wrapped = value;\n","\t        if (this.__actions__.length) {\n","\t          wrapped = new LazyWrapper(this);\n","\t        }\n","\t        wrapped = wrapped.reverse();\n","\t        wrapped.__actions__.push({\n","\t          'func': thru,\n","\t          'args': [reverse],\n","\t          'thisArg': undefined\n","\t        });\n","\t        return new LodashWrapper(wrapped, this.__chain__);\n","\t      }\n","\t      return this.thru(reverse);\n","\t    }\n","\t\n","\t    /**\n","\t     * Executes the chain sequence to resolve the unwrapped value.\n","\t     *\n","\t     * @name value\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @alias toJSON, valueOf\n","\t     * @category Seq\n","\t     * @returns {*} Returns the resolved unwrapped value.\n","\t     * @example\n","\t     *\n","\t     * _([1, 2, 3]).value();\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function wrapperValue() {\n","\t      return baseWrapperValue(this.__wrapped__, this.__actions__);\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Creates an object composed of keys generated from the results of running\n","\t     * each element of `collection` thru `iteratee`. The corresponding value of\n","\t     * each key is the number of times the key was returned by `iteratee`. The\n","\t     * iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.5.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n","\t     * @returns {Object} Returns the composed aggregate object.\n","\t     * @example\n","\t     *\n","\t     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n","\t     * // => { '4': 1, '6': 2 }\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.countBy(['one', 'two', 'three'], 'length');\n","\t     * // => { '3': 2, '5': 1 }\n","\t     */\n","\t    var countBy = createAggregator(function(result, value, key) {\n","\t      if (hasOwnProperty.call(result, key)) {\n","\t        ++result[key];\n","\t      } else {\n","\t        baseAssignValue(result, key, 1);\n","\t      }\n","\t    });\n","\t\n","\t    /**\n","\t     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n","\t     * Iteration is stopped once `predicate` returns falsey. The predicate is\n","\t     * invoked with three arguments: (value, index|key, collection).\n","\t     *\n","\t     * **Note:** This method returns `true` for\n","\t     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n","\t     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n","\t     * elements of empty collections.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.every([true, 1, null, 'yes'], Boolean);\n","\t     * // => false\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'age': 36, 'active': false },\n","\t     *   { 'user': 'fred',   'age': 40, 'active': false }\n","\t     * ];\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.every(users, { 'user': 'barney', 'active': false });\n","\t     * // => false\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.every(users, ['active', false]);\n","\t     * // => true\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.every(users, 'active');\n","\t     * // => false\n","\t     */\n","\t    function every(collection, predicate, guard) {\n","\t      var func = isArray(collection) ? arrayEvery : baseEvery;\n","\t      if (guard && isIterateeCall(collection, predicate, guard)) {\n","\t        predicate = undefined;\n","\t      }\n","\t      return func(collection, getIteratee(predicate, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * Iterates over elements of `collection`, returning an array of all elements\n","\t     * `predicate` returns truthy for. The predicate is invoked with three\n","\t     * arguments: (value, index|key, collection).\n","\t     *\n","\t     * **Note:** Unlike `_.remove`, this method returns a new array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new filtered array.\n","\t     * @see _.reject\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'age': 36, 'active': true },\n","\t     *   { 'user': 'fred',   'age': 40, 'active': false }\n","\t     * ];\n","\t     *\n","\t     * _.filter(users, function(o) { return !o.active; });\n","\t     * // => objects for ['fred']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.filter(users, { 'age': 36, 'active': true });\n","\t     * // => objects for ['barney']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.filter(users, ['active', false]);\n","\t     * // => objects for ['fred']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.filter(users, 'active');\n","\t     * // => objects for ['barney']\n","\t     */\n","\t    function filter(collection, predicate) {\n","\t      var func = isArray(collection) ? arrayFilter : baseFilter;\n","\t      return func(collection, getIteratee(predicate, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * Iterates over elements of `collection`, returning the first element\n","\t     * `predicate` returns truthy for. The predicate is invoked with three\n","\t     * arguments: (value, index|key, collection).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param {number} [fromIndex=0] The index to search from.\n","\t     * @returns {*} Returns the matched element, else `undefined`.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'age': 36, 'active': true },\n","\t     *   { 'user': 'fred',    'age': 40, 'active': false },\n","\t     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n","\t     * ];\n","\t     *\n","\t     * _.find(users, function(o) { return o.age < 40; });\n","\t     * // => object for 'barney'\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.find(users, { 'age': 1, 'active': true });\n","\t     * // => object for 'pebbles'\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.find(users, ['active', false]);\n","\t     * // => object for 'fred'\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.find(users, 'active');\n","\t     * // => object for 'barney'\n","\t     */\n","\t    var find = createFind(findIndex);\n","\t\n","\t    /**\n","\t     * This method is like `_.find` except that it iterates over elements of\n","\t     * `collection` from right to left.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param {number} [fromIndex=collection.length-1] The index to search from.\n","\t     * @returns {*} Returns the matched element, else `undefined`.\n","\t     * @example\n","\t     *\n","\t     * _.findLast([1, 2, 3, 4], function(n) {\n","\t     *   return n % 2 == 1;\n","\t     * });\n","\t     * // => 3\n","\t     */\n","\t    var findLast = createFind(findLastIndex);\n","\t\n","\t    /**\n","\t     * Creates a flattened array of values by running each element in `collection`\n","\t     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n","\t     * with three arguments: (value, index|key, collection).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * function duplicate(n) {\n","\t     *   return [n, n];\n","\t     * }\n","\t     *\n","\t     * _.flatMap([1, 2], duplicate);\n","\t     * // => [1, 1, 2, 2]\n","\t     */\n","\t    function flatMap(collection, iteratee) {\n","\t      return baseFlatten(map(collection, iteratee), 1);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.flatMap` except that it recursively flattens the\n","\t     * mapped results.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.7.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * function duplicate(n) {\n","\t     *   return [[[n, n]]];\n","\t     * }\n","\t     *\n","\t     * _.flatMapDeep([1, 2], duplicate);\n","\t     * // => [1, 1, 2, 2]\n","\t     */\n","\t    function flatMapDeep(collection, iteratee) {\n","\t      return baseFlatten(map(collection, iteratee), INFINITY);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.flatMap` except that it recursively flattens the\n","\t     * mapped results up to `depth` times.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.7.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @param {number} [depth=1] The maximum recursion depth.\n","\t     * @returns {Array} Returns the new flattened array.\n","\t     * @example\n","\t     *\n","\t     * function duplicate(n) {\n","\t     *   return [[[n, n]]];\n","\t     * }\n","\t     *\n","\t     * _.flatMapDepth([1, 2], duplicate, 2);\n","\t     * // => [[1, 1], [2, 2]]\n","\t     */\n","\t    function flatMapDepth(collection, iteratee, depth) {\n","\t      depth = depth === undefined ? 1 : toInteger(depth);\n","\t      return baseFlatten(map(collection, iteratee), depth);\n","\t    }\n","\t\n","\t    /**\n","\t     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n","\t     * The iteratee is invoked with three arguments: (value, index|key, collection).\n","\t     * Iteratee functions may exit iteration early by explicitly returning `false`.\n","\t     *\n","\t     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n","\t     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n","\t     * or `_.forOwn` for object iteration.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @alias each\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array|Object} Returns `collection`.\n","\t     * @see _.forEachRight\n","\t     * @example\n","\t     *\n","\t     * _.forEach([1, 2], function(value) {\n","\t     *   console.log(value);\n","\t     * });\n","\t     * // => Logs `1` then `2`.\n","\t     *\n","\t     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n","\t     *   console.log(key);\n","\t     * });\n","\t     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n","\t     */\n","\t    function forEach(collection, iteratee) {\n","\t      var func = isArray(collection) ? arrayEach : baseEach;\n","\t      return func(collection, getIteratee(iteratee, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.forEach` except that it iterates over elements of\n","\t     * `collection` from right to left.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @alias eachRight\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array|Object} Returns `collection`.\n","\t     * @see _.forEach\n","\t     * @example\n","\t     *\n","\t     * _.forEachRight([1, 2], function(value) {\n","\t     *   console.log(value);\n","\t     * });\n","\t     * // => Logs `2` then `1`.\n","\t     */\n","\t    function forEachRight(collection, iteratee) {\n","\t      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n","\t      return func(collection, getIteratee(iteratee, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an object composed of keys generated from the results of running\n","\t     * each element of `collection` thru `iteratee`. The order of grouped values\n","\t     * is determined by the order they occur in `collection`. The corresponding\n","\t     * value of each key is an array of elements responsible for generating the\n","\t     * key. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n","\t     * @returns {Object} Returns the composed aggregate object.\n","\t     * @example\n","\t     *\n","\t     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n","\t     * // => { '4': [4.2], '6': [6.1, 6.3] }\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.groupBy(['one', 'two', 'three'], 'length');\n","\t     * // => { '3': ['one', 'two'], '5': ['three'] }\n","\t     */\n","\t    var groupBy = createAggregator(function(result, value, key) {\n","\t      if (hasOwnProperty.call(result, key)) {\n","\t        result[key].push(value);\n","\t      } else {\n","\t        baseAssignValue(result, key, [value]);\n","\t      }\n","\t    });\n","\t\n","\t    /**\n","\t     * Checks if `value` is in `collection`. If `collection` is a string, it's\n","\t     * checked for a substring of `value`, otherwise\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n","\t     * the offset from the end of `collection`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object|string} collection The collection to inspect.\n","\t     * @param {*} value The value to search for.\n","\t     * @param {number} [fromIndex=0] The index to search from.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n","\t     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.includes([1, 2, 3], 1);\n","\t     * // => true\n","\t     *\n","\t     * _.includes([1, 2, 3], 1, 2);\n","\t     * // => false\n","\t     *\n","\t     * _.includes({ 'a': 1, 'b': 2 }, 1);\n","\t     * // => true\n","\t     *\n","\t     * _.includes('abcd', 'bc');\n","\t     * // => true\n","\t     */\n","\t    function includes(collection, value, fromIndex, guard) {\n","\t      collection = isArrayLike(collection) ? collection : values(collection);\n","\t      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n","\t\n","\t      var length = collection.length;\n","\t      if (fromIndex < 0) {\n","\t        fromIndex = nativeMax(length + fromIndex, 0);\n","\t      }\n","\t      return isString(collection)\n","\t        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n","\t        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n","\t    }\n","\t\n","\t    /**\n","\t     * Invokes the method at `path` of each element in `collection`, returning\n","\t     * an array of the results of each invoked method. Any additional arguments\n","\t     * are provided to each invoked method. If `path` is a function, it's invoked\n","\t     * for, and `this` bound to, each element in `collection`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Array|Function|string} path The path of the method to invoke or\n","\t     *  the function invoked per iteration.\n","\t     * @param {...*} [args] The arguments to invoke each method with.\n","\t     * @returns {Array} Returns the array of results.\n","\t     * @example\n","\t     *\n","\t     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n","\t     * // => [[1, 5, 7], [1, 2, 3]]\n","\t     *\n","\t     * _.invokeMap([123, 456], String.prototype.split, '');\n","\t     * // => [['1', '2', '3'], ['4', '5', '6']]\n","\t     */\n","\t    var invokeMap = baseRest(function(collection, path, args) {\n","\t      var index = -1,\n","\t          isFunc = typeof path == 'function',\n","\t          result = isArrayLike(collection) ? Array(collection.length) : [];\n","\t\n","\t      baseEach(collection, function(value) {\n","\t        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n","\t      });\n","\t      return result;\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an object composed of keys generated from the results of running\n","\t     * each element of `collection` thru `iteratee`. The corresponding value of\n","\t     * each key is the last element responsible for generating the key. The\n","\t     * iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n","\t     * @returns {Object} Returns the composed aggregate object.\n","\t     * @example\n","\t     *\n","\t     * var array = [\n","\t     *   { 'dir': 'left', 'code': 97 },\n","\t     *   { 'dir': 'right', 'code': 100 }\n","\t     * ];\n","\t     *\n","\t     * _.keyBy(array, function(o) {\n","\t     *   return String.fromCharCode(o.code);\n","\t     * });\n","\t     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n","\t     *\n","\t     * _.keyBy(array, 'dir');\n","\t     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n","\t     */\n","\t    var keyBy = createAggregator(function(result, value, key) {\n","\t      baseAssignValue(result, key, value);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an array of values by running each element in `collection` thru\n","\t     * `iteratee`. The iteratee is invoked with three arguments:\n","\t     * (value, index|key, collection).\n","\t     *\n","\t     * Many lodash methods are guarded to work as iteratees for methods like\n","\t     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n","\t     *\n","\t     * The guarded methods are:\n","\t     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n","\t     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n","\t     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n","\t     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new mapped array.\n","\t     * @example\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * _.map([4, 8], square);\n","\t     * // => [16, 64]\n","\t     *\n","\t     * _.map({ 'a': 4, 'b': 8 }, square);\n","\t     * // => [16, 64] (iteration order is not guaranteed)\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney' },\n","\t     *   { 'user': 'fred' }\n","\t     * ];\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.map(users, 'user');\n","\t     * // => ['barney', 'fred']\n","\t     */\n","\t    function map(collection, iteratee) {\n","\t      var func = isArray(collection) ? arrayMap : baseMap;\n","\t      return func(collection, getIteratee(iteratee, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.sortBy` except that it allows specifying the sort\n","\t     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n","\t     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n","\t     * descending or \"asc\" for ascending sort order of corresponding values.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n","\t     *  The iteratees to sort by.\n","\t     * @param {string[]} [orders] The sort orders of `iteratees`.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n","\t     * @returns {Array} Returns the new sorted array.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'fred',   'age': 48 },\n","\t     *   { 'user': 'barney', 'age': 34 },\n","\t     *   { 'user': 'fred',   'age': 40 },\n","\t     *   { 'user': 'barney', 'age': 36 }\n","\t     * ];\n","\t     *\n","\t     * // Sort by `user` in ascending order and by `age` in descending order.\n","\t     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n","\t     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n","\t     */\n","\t    function orderBy(collection, iteratees, orders, guard) {\n","\t      if (collection == null) {\n","\t        return [];\n","\t      }\n","\t      if (!isArray(iteratees)) {\n","\t        iteratees = iteratees == null ? [] : [iteratees];\n","\t      }\n","\t      orders = guard ? undefined : orders;\n","\t      if (!isArray(orders)) {\n","\t        orders = orders == null ? [] : [orders];\n","\t      }\n","\t      return baseOrderBy(collection, iteratees, orders);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of elements split into two groups, the first of which\n","\t     * contains elements `predicate` returns truthy for, the second of which\n","\t     * contains elements `predicate` returns falsey for. The predicate is\n","\t     * invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the array of grouped elements.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney',  'age': 36, 'active': false },\n","\t     *   { 'user': 'fred',    'age': 40, 'active': true },\n","\t     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n","\t     * ];\n","\t     *\n","\t     * _.partition(users, function(o) { return o.active; });\n","\t     * // => objects for [['fred'], ['barney', 'pebbles']]\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.partition(users, { 'age': 1, 'active': false });\n","\t     * // => objects for [['pebbles'], ['barney', 'fred']]\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.partition(users, ['active', false]);\n","\t     * // => objects for [['barney', 'pebbles'], ['fred']]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.partition(users, 'active');\n","\t     * // => objects for [['fred'], ['barney', 'pebbles']]\n","\t     */\n","\t    var partition = createAggregator(function(result, value, key) {\n","\t      result[key ? 0 : 1].push(value);\n","\t    }, function() { return [[], []]; });\n","\t\n","\t    /**\n","\t     * Reduces `collection` to a value which is the accumulated result of running\n","\t     * each element in `collection` thru `iteratee`, where each successive\n","\t     * invocation is supplied the return value of the previous. If `accumulator`\n","\t     * is not given, the first element of `collection` is used as the initial\n","\t     * value. The iteratee is invoked with four arguments:\n","\t     * (accumulator, value, index|key, collection).\n","\t     *\n","\t     * Many lodash methods are guarded to work as iteratees for methods like\n","\t     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n","\t     *\n","\t     * The guarded methods are:\n","\t     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n","\t     * and `sortBy`\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @param {*} [accumulator] The initial value.\n","\t     * @returns {*} Returns the accumulated value.\n","\t     * @see _.reduceRight\n","\t     * @example\n","\t     *\n","\t     * _.reduce([1, 2], function(sum, n) {\n","\t     *   return sum + n;\n","\t     * }, 0);\n","\t     * // => 3\n","\t     *\n","\t     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n","\t     *   (result[value] || (result[value] = [])).push(key);\n","\t     *   return result;\n","\t     * }, {});\n","\t     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n","\t     */\n","\t    function reduce(collection, iteratee, accumulator) {\n","\t      var func = isArray(collection) ? arrayReduce : baseReduce,\n","\t          initAccum = arguments.length < 3;\n","\t\n","\t      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.reduce` except that it iterates over elements of\n","\t     * `collection` from right to left.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @param {*} [accumulator] The initial value.\n","\t     * @returns {*} Returns the accumulated value.\n","\t     * @see _.reduce\n","\t     * @example\n","\t     *\n","\t     * var array = [[0, 1], [2, 3], [4, 5]];\n","\t     *\n","\t     * _.reduceRight(array, function(flattened, other) {\n","\t     *   return flattened.concat(other);\n","\t     * }, []);\n","\t     * // => [4, 5, 2, 3, 0, 1]\n","\t     */\n","\t    function reduceRight(collection, iteratee, accumulator) {\n","\t      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n","\t          initAccum = arguments.length < 3;\n","\t\n","\t      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n","\t    }\n","\t\n","\t    /**\n","\t     * The opposite of `_.filter`; this method returns the elements of `collection`\n","\t     * that `predicate` does **not** return truthy for.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the new filtered array.\n","\t     * @see _.filter\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'age': 36, 'active': false },\n","\t     *   { 'user': 'fred',   'age': 40, 'active': true }\n","\t     * ];\n","\t     *\n","\t     * _.reject(users, function(o) { return !o.active; });\n","\t     * // => objects for ['fred']\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.reject(users, { 'age': 40, 'active': true });\n","\t     * // => objects for ['barney']\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.reject(users, ['active', false]);\n","\t     * // => objects for ['fred']\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.reject(users, 'active');\n","\t     * // => objects for ['barney']\n","\t     */\n","\t    function reject(collection, predicate) {\n","\t      var func = isArray(collection) ? arrayFilter : baseFilter;\n","\t      return func(collection, negate(getIteratee(predicate, 3)));\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets a random element from `collection`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to sample.\n","\t     * @returns {*} Returns the random element.\n","\t     * @example\n","\t     *\n","\t     * _.sample([1, 2, 3, 4]);\n","\t     * // => 2\n","\t     */\n","\t    function sample(collection) {\n","\t      var func = isArray(collection) ? arraySample : baseSample;\n","\t      return func(collection);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets `n` random elements at unique keys from `collection` up to the\n","\t     * size of `collection`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to sample.\n","\t     * @param {number} [n=1] The number of elements to sample.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the random elements.\n","\t     * @example\n","\t     *\n","\t     * _.sampleSize([1, 2, 3], 2);\n","\t     * // => [3, 1]\n","\t     *\n","\t     * _.sampleSize([1, 2, 3], 4);\n","\t     * // => [2, 3, 1]\n","\t     */\n","\t    function sampleSize(collection, n, guard) {\n","\t      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n","\t        n = 1;\n","\t      } else {\n","\t        n = toInteger(n);\n","\t      }\n","\t      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n","\t      return func(collection, n);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of shuffled values, using a version of the\n","\t     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to shuffle.\n","\t     * @returns {Array} Returns the new shuffled array.\n","\t     * @example\n","\t     *\n","\t     * _.shuffle([1, 2, 3, 4]);\n","\t     * // => [4, 1, 3, 2]\n","\t     */\n","\t    function shuffle(collection) {\n","\t      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n","\t      return func(collection);\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the size of `collection` by returning its length for array-like\n","\t     * values or the number of own enumerable string keyed properties for objects.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object|string} collection The collection to inspect.\n","\t     * @returns {number} Returns the collection size.\n","\t     * @example\n","\t     *\n","\t     * _.size([1, 2, 3]);\n","\t     * // => 3\n","\t     *\n","\t     * _.size({ 'a': 1, 'b': 2 });\n","\t     * // => 2\n","\t     *\n","\t     * _.size('pebbles');\n","\t     * // => 7\n","\t     */\n","\t    function size(collection) {\n","\t      if (collection == null) {\n","\t        return 0;\n","\t      }\n","\t      if (isArrayLike(collection)) {\n","\t        return isString(collection) ? stringSize(collection) : collection.length;\n","\t      }\n","\t      var tag = getTag(collection);\n","\t      if (tag == mapTag || tag == setTag) {\n","\t        return collection.size;\n","\t      }\n","\t      return baseKeys(collection).length;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `predicate` returns truthy for **any** element of `collection`.\n","\t     * Iteration is stopped once `predicate` returns truthy. The predicate is\n","\t     * invoked with three arguments: (value, index|key, collection).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {boolean} Returns `true` if any element passes the predicate check,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.some([null, 0, 'yes', false], Boolean);\n","\t     * // => true\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'active': true },\n","\t     *   { 'user': 'fred',   'active': false }\n","\t     * ];\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.some(users, { 'user': 'barney', 'active': false });\n","\t     * // => false\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.some(users, ['active', false]);\n","\t     * // => true\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.some(users, 'active');\n","\t     * // => true\n","\t     */\n","\t    function some(collection, predicate, guard) {\n","\t      var func = isArray(collection) ? arraySome : baseSome;\n","\t      if (guard && isIterateeCall(collection, predicate, guard)) {\n","\t        predicate = undefined;\n","\t      }\n","\t      return func(collection, getIteratee(predicate, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of elements, sorted in ascending order by the results of\n","\t     * running each element in a collection thru each iteratee. This method\n","\t     * performs a stable sort, that is, it preserves the original sort order of\n","\t     * equal elements. The iteratees are invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Collection\n","\t     * @param {Array|Object} collection The collection to iterate over.\n","\t     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n","\t     *  The iteratees to sort by.\n","\t     * @returns {Array} Returns the new sorted array.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'fred',   'age': 48 },\n","\t     *   { 'user': 'barney', 'age': 36 },\n","\t     *   { 'user': 'fred',   'age': 40 },\n","\t     *   { 'user': 'barney', 'age': 34 }\n","\t     * ];\n","\t     *\n","\t     * _.sortBy(users, [function(o) { return o.user; }]);\n","\t     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n","\t     *\n","\t     * _.sortBy(users, ['user', 'age']);\n","\t     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n","\t     */\n","\t    var sortBy = baseRest(function(collection, iteratees) {\n","\t      if (collection == null) {\n","\t        return [];\n","\t      }\n","\t      var length = iteratees.length;\n","\t      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n","\t        iteratees = [];\n","\t      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n","\t        iteratees = [iteratees[0]];\n","\t      }\n","\t      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n","\t    });\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Gets the timestamp of the number of milliseconds that have elapsed since\n","\t     * the Unix epoch (1 January 1970 00:00:00 UTC).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.4.0\n","\t     * @category Date\n","\t     * @returns {number} Returns the timestamp.\n","\t     * @example\n","\t     *\n","\t     * _.defer(function(stamp) {\n","\t     *   console.log(_.now() - stamp);\n","\t     * }, _.now());\n","\t     * // => Logs the number of milliseconds it took for the deferred invocation.\n","\t     */\n","\t    var now = ctxNow || function() {\n","\t      return root.Date.now();\n","\t    };\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * The opposite of `_.before`; this method creates a function that invokes\n","\t     * `func` once it's called `n` or more times.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {number} n The number of calls before `func` is invoked.\n","\t     * @param {Function} func The function to restrict.\n","\t     * @returns {Function} Returns the new restricted function.\n","\t     * @example\n","\t     *\n","\t     * var saves = ['profile', 'settings'];\n","\t     *\n","\t     * var done = _.after(saves.length, function() {\n","\t     *   console.log('done saving!');\n","\t     * });\n","\t     *\n","\t     * _.forEach(saves, function(type) {\n","\t     *   asyncSave({ 'type': type, 'complete': done });\n","\t     * });\n","\t     * // => Logs 'done saving!' after the two async saves have completed.\n","\t     */\n","\t    function after(n, func) {\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      n = toInteger(n);\n","\t      return function() {\n","\t        if (--n < 1) {\n","\t          return func.apply(this, arguments);\n","\t        }\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func`, with up to `n` arguments,\n","\t     * ignoring any additional arguments.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to cap arguments for.\n","\t     * @param {number} [n=func.length] The arity cap.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Function} Returns the new capped function.\n","\t     * @example\n","\t     *\n","\t     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n","\t     * // => [6, 8, 10]\n","\t     */\n","\t    function ary(func, n, guard) {\n","\t      n = guard ? undefined : n;\n","\t      n = (func && n == null) ? func.length : n;\n","\t      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func`, with the `this` binding and arguments\n","\t     * of the created function, while it's called less than `n` times. Subsequent\n","\t     * calls to the created function return the result of the last `func` invocation.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Function\n","\t     * @param {number} n The number of calls at which `func` is no longer invoked.\n","\t     * @param {Function} func The function to restrict.\n","\t     * @returns {Function} Returns the new restricted function.\n","\t     * @example\n","\t     *\n","\t     * jQuery(element).on('click', _.before(5, addContactToList));\n","\t     * // => Allows adding up to 4 contacts to the list.\n","\t     */\n","\t    function before(n, func) {\n","\t      var result;\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      n = toInteger(n);\n","\t      return function() {\n","\t        if (--n > 0) {\n","\t          result = func.apply(this, arguments);\n","\t        }\n","\t        if (n <= 1) {\n","\t          func = undefined;\n","\t        }\n","\t        return result;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n","\t     * and `partials` prepended to the arguments it receives.\n","\t     *\n","\t     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n","\t     * may be used as a placeholder for partially applied arguments.\n","\t     *\n","\t     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n","\t     * property of bound functions.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to bind.\n","\t     * @param {*} thisArg The `this` binding of `func`.\n","\t     * @param {...*} [partials] The arguments to be partially applied.\n","\t     * @returns {Function} Returns the new bound function.\n","\t     * @example\n","\t     *\n","\t     * function greet(greeting, punctuation) {\n","\t     *   return greeting + ' ' + this.user + punctuation;\n","\t     * }\n","\t     *\n","\t     * var object = { 'user': 'fred' };\n","\t     *\n","\t     * var bound = _.bind(greet, object, 'hi');\n","\t     * bound('!');\n","\t     * // => 'hi fred!'\n","\t     *\n","\t     * // Bound with placeholders.\n","\t     * var bound = _.bind(greet, object, _, '!');\n","\t     * bound('hi');\n","\t     * // => 'hi fred!'\n","\t     */\n","\t    var bind = baseRest(function(func, thisArg, partials) {\n","\t      var bitmask = WRAP_BIND_FLAG;\n","\t      if (partials.length) {\n","\t        var holders = replaceHolders(partials, getHolder(bind));\n","\t        bitmask |= WRAP_PARTIAL_FLAG;\n","\t      }\n","\t      return createWrap(func, bitmask, thisArg, partials, holders);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that invokes the method at `object[key]` with `partials`\n","\t     * prepended to the arguments it receives.\n","\t     *\n","\t     * This method differs from `_.bind` by allowing bound functions to reference\n","\t     * methods that may be redefined or don't yet exist. See\n","\t     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n","\t     * for more details.\n","\t     *\n","\t     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n","\t     * builds, may be used as a placeholder for partially applied arguments.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.10.0\n","\t     * @category Function\n","\t     * @param {Object} object The object to invoke the method on.\n","\t     * @param {string} key The key of the method.\n","\t     * @param {...*} [partials] The arguments to be partially applied.\n","\t     * @returns {Function} Returns the new bound function.\n","\t     * @example\n","\t     *\n","\t     * var object = {\n","\t     *   'user': 'fred',\n","\t     *   'greet': function(greeting, punctuation) {\n","\t     *     return greeting + ' ' + this.user + punctuation;\n","\t     *   }\n","\t     * };\n","\t     *\n","\t     * var bound = _.bindKey(object, 'greet', 'hi');\n","\t     * bound('!');\n","\t     * // => 'hi fred!'\n","\t     *\n","\t     * object.greet = function(greeting, punctuation) {\n","\t     *   return greeting + 'ya ' + this.user + punctuation;\n","\t     * };\n","\t     *\n","\t     * bound('!');\n","\t     * // => 'hiya fred!'\n","\t     *\n","\t     * // Bound with placeholders.\n","\t     * var bound = _.bindKey(object, 'greet', _, '!');\n","\t     * bound('hi');\n","\t     * // => 'hiya fred!'\n","\t     */\n","\t    var bindKey = baseRest(function(object, key, partials) {\n","\t      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n","\t      if (partials.length) {\n","\t        var holders = replaceHolders(partials, getHolder(bindKey));\n","\t        bitmask |= WRAP_PARTIAL_FLAG;\n","\t      }\n","\t      return createWrap(key, bitmask, object, partials, holders);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that accepts arguments of `func` and either invokes\n","\t     * `func` returning its result, if at least `arity` number of arguments have\n","\t     * been provided, or returns a function that accepts the remaining `func`\n","\t     * arguments, and so on. The arity of `func` may be specified if `func.length`\n","\t     * is not sufficient.\n","\t     *\n","\t     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n","\t     * may be used as a placeholder for provided arguments.\n","\t     *\n","\t     * **Note:** This method doesn't set the \"length\" property of curried functions.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to curry.\n","\t     * @param {number} [arity=func.length] The arity of `func`.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Function} Returns the new curried function.\n","\t     * @example\n","\t     *\n","\t     * var abc = function(a, b, c) {\n","\t     *   return [a, b, c];\n","\t     * };\n","\t     *\n","\t     * var curried = _.curry(abc);\n","\t     *\n","\t     * curried(1)(2)(3);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * curried(1, 2)(3);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * curried(1, 2, 3);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * // Curried with placeholders.\n","\t     * curried(1)(_, 3)(2);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function curry(func, arity, guard) {\n","\t      arity = guard ? undefined : arity;\n","\t      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n","\t      result.placeholder = curry.placeholder;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.curry` except that arguments are applied to `func`\n","\t     * in the manner of `_.partialRight` instead of `_.partial`.\n","\t     *\n","\t     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n","\t     * builds, may be used as a placeholder for provided arguments.\n","\t     *\n","\t     * **Note:** This method doesn't set the \"length\" property of curried functions.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to curry.\n","\t     * @param {number} [arity=func.length] The arity of `func`.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Function} Returns the new curried function.\n","\t     * @example\n","\t     *\n","\t     * var abc = function(a, b, c) {\n","\t     *   return [a, b, c];\n","\t     * };\n","\t     *\n","\t     * var curried = _.curryRight(abc);\n","\t     *\n","\t     * curried(3)(2)(1);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * curried(2, 3)(1);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * curried(1, 2, 3);\n","\t     * // => [1, 2, 3]\n","\t     *\n","\t     * // Curried with placeholders.\n","\t     * curried(3)(1, _)(2);\n","\t     * // => [1, 2, 3]\n","\t     */\n","\t    function curryRight(func, arity, guard) {\n","\t      arity = guard ? undefined : arity;\n","\t      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n","\t      result.placeholder = curryRight.placeholder;\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a debounced function that delays invoking `func` until after `wait`\n","\t     * milliseconds have elapsed since the last time the debounced function was\n","\t     * invoked. The debounced function comes with a `cancel` method to cancel\n","\t     * delayed `func` invocations and a `flush` method to immediately invoke them.\n","\t     * Provide `options` to indicate whether `func` should be invoked on the\n","\t     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n","\t     * with the last arguments provided to the debounced function. Subsequent\n","\t     * calls to the debounced function return the result of the last `func`\n","\t     * invocation.\n","\t     *\n","\t     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n","\t     * invoked on the trailing edge of the timeout only if the debounced function\n","\t     * is invoked more than once during the `wait` timeout.\n","\t     *\n","\t     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n","\t     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n","\t     *\n","\t     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n","\t     * for details over the differences between `_.debounce` and `_.throttle`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to debounce.\n","\t     * @param {number} [wait=0] The number of milliseconds to delay.\n","\t     * @param {Object} [options={}] The options object.\n","\t     * @param {boolean} [options.leading=false]\n","\t     *  Specify invoking on the leading edge of the timeout.\n","\t     * @param {number} [options.maxWait]\n","\t     *  The maximum time `func` is allowed to be delayed before it's invoked.\n","\t     * @param {boolean} [options.trailing=true]\n","\t     *  Specify invoking on the trailing edge of the timeout.\n","\t     * @returns {Function} Returns the new debounced function.\n","\t     * @example\n","\t     *\n","\t     * // Avoid costly calculations while the window size is in flux.\n","\t     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n","\t     *\n","\t     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n","\t     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n","\t     *   'leading': true,\n","\t     *   'trailing': false\n","\t     * }));\n","\t     *\n","\t     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n","\t     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n","\t     * var source = new EventSource('/stream');\n","\t     * jQuery(source).on('message', debounced);\n","\t     *\n","\t     * // Cancel the trailing debounced invocation.\n","\t     * jQuery(window).on('popstate', debounced.cancel);\n","\t     */\n","\t    function debounce(func, wait, options) {\n","\t      var lastArgs,\n","\t          lastThis,\n","\t          maxWait,\n","\t          result,\n","\t          timerId,\n","\t          lastCallTime,\n","\t          lastInvokeTime = 0,\n","\t          leading = false,\n","\t          maxing = false,\n","\t          trailing = true;\n","\t\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      wait = toNumber(wait) || 0;\n","\t      if (isObject(options)) {\n","\t        leading = !!options.leading;\n","\t        maxing = 'maxWait' in options;\n","\t        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n","\t        trailing = 'trailing' in options ? !!options.trailing : trailing;\n","\t      }\n","\t\n","\t      function invokeFunc(time) {\n","\t        var args = lastArgs,\n","\t            thisArg = lastThis;\n","\t\n","\t        lastArgs = lastThis = undefined;\n","\t        lastInvokeTime = time;\n","\t        result = func.apply(thisArg, args);\n","\t        return result;\n","\t      }\n","\t\n","\t      function leadingEdge(time) {\n","\t        // Reset any `maxWait` timer.\n","\t        lastInvokeTime = time;\n","\t        // Start the timer for the trailing edge.\n","\t        timerId = setTimeout(timerExpired, wait);\n","\t        // Invoke the leading edge.\n","\t        return leading ? invokeFunc(time) : result;\n","\t      }\n","\t\n","\t      function remainingWait(time) {\n","\t        var timeSinceLastCall = time - lastCallTime,\n","\t            timeSinceLastInvoke = time - lastInvokeTime,\n","\t            timeWaiting = wait - timeSinceLastCall;\n","\t\n","\t        return maxing\n","\t          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n","\t          : timeWaiting;\n","\t      }\n","\t\n","\t      function shouldInvoke(time) {\n","\t        var timeSinceLastCall = time - lastCallTime,\n","\t            timeSinceLastInvoke = time - lastInvokeTime;\n","\t\n","\t        // Either this is the first call, activity has stopped and we're at the\n","\t        // trailing edge, the system time has gone backwards and we're treating\n","\t        // it as the trailing edge, or we've hit the `maxWait` limit.\n","\t        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n","\t          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n","\t      }\n","\t\n","\t      function timerExpired() {\n","\t        var time = now();\n","\t        if (shouldInvoke(time)) {\n","\t          return trailingEdge(time);\n","\t        }\n","\t        // Restart the timer.\n","\t        timerId = setTimeout(timerExpired, remainingWait(time));\n","\t      }\n","\t\n","\t      function trailingEdge(time) {\n","\t        timerId = undefined;\n","\t\n","\t        // Only invoke if we have `lastArgs` which means `func` has been\n","\t        // debounced at least once.\n","\t        if (trailing && lastArgs) {\n","\t          return invokeFunc(time);\n","\t        }\n","\t        lastArgs = lastThis = undefined;\n","\t        return result;\n","\t      }\n","\t\n","\t      function cancel() {\n","\t        if (timerId !== undefined) {\n","\t          clearTimeout(timerId);\n","\t        }\n","\t        lastInvokeTime = 0;\n","\t        lastArgs = lastCallTime = lastThis = timerId = undefined;\n","\t      }\n","\t\n","\t      function flush() {\n","\t        return timerId === undefined ? result : trailingEdge(now());\n","\t      }\n","\t\n","\t      function debounced() {\n","\t        var time = now(),\n","\t            isInvoking = shouldInvoke(time);\n","\t\n","\t        lastArgs = arguments;\n","\t        lastThis = this;\n","\t        lastCallTime = time;\n","\t\n","\t        if (isInvoking) {\n","\t          if (timerId === undefined) {\n","\t            return leadingEdge(lastCallTime);\n","\t          }\n","\t          if (maxing) {\n","\t            // Handle invocations in a tight loop.\n","\t            timerId = setTimeout(timerExpired, wait);\n","\t            return invokeFunc(lastCallTime);\n","\t          }\n","\t        }\n","\t        if (timerId === undefined) {\n","\t          timerId = setTimeout(timerExpired, wait);\n","\t        }\n","\t        return result;\n","\t      }\n","\t      debounced.cancel = cancel;\n","\t      debounced.flush = flush;\n","\t      return debounced;\n","\t    }\n","\t\n","\t    /**\n","\t     * Defers invoking the `func` until the current call stack has cleared. Any\n","\t     * additional arguments are provided to `func` when it's invoked.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to defer.\n","\t     * @param {...*} [args] The arguments to invoke `func` with.\n","\t     * @returns {number} Returns the timer id.\n","\t     * @example\n","\t     *\n","\t     * _.defer(function(text) {\n","\t     *   console.log(text);\n","\t     * }, 'deferred');\n","\t     * // => Logs 'deferred' after one millisecond.\n","\t     */\n","\t    var defer = baseRest(function(func, args) {\n","\t      return baseDelay(func, 1, args);\n","\t    });\n","\t\n","\t    /**\n","\t     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n","\t     * provided to `func` when it's invoked.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to delay.\n","\t     * @param {number} wait The number of milliseconds to delay invocation.\n","\t     * @param {...*} [args] The arguments to invoke `func` with.\n","\t     * @returns {number} Returns the timer id.\n","\t     * @example\n","\t     *\n","\t     * _.delay(function(text) {\n","\t     *   console.log(text);\n","\t     * }, 1000, 'later');\n","\t     * // => Logs 'later' after one second.\n","\t     */\n","\t    var delay = baseRest(function(func, wait, args) {\n","\t      return baseDelay(func, toNumber(wait) || 0, args);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with arguments reversed.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to flip arguments for.\n","\t     * @returns {Function} Returns the new flipped function.\n","\t     * @example\n","\t     *\n","\t     * var flipped = _.flip(function() {\n","\t     *   return _.toArray(arguments);\n","\t     * });\n","\t     *\n","\t     * flipped('a', 'b', 'c', 'd');\n","\t     * // => ['d', 'c', 'b', 'a']\n","\t     */\n","\t    function flip(func) {\n","\t      return createWrap(func, WRAP_FLIP_FLAG);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that memoizes the result of `func`. If `resolver` is\n","\t     * provided, it determines the cache key for storing the result based on the\n","\t     * arguments provided to the memoized function. By default, the first argument\n","\t     * provided to the memoized function is used as the map cache key. The `func`\n","\t     * is invoked with the `this` binding of the memoized function.\n","\t     *\n","\t     * **Note:** The cache is exposed as the `cache` property on the memoized\n","\t     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n","\t     * constructor with one whose instances implement the\n","\t     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n","\t     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to have its output memoized.\n","\t     * @param {Function} [resolver] The function to resolve the cache key.\n","\t     * @returns {Function} Returns the new memoized function.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': 2 };\n","\t     * var other = { 'c': 3, 'd': 4 };\n","\t     *\n","\t     * var values = _.memoize(_.values);\n","\t     * values(object);\n","\t     * // => [1, 2]\n","\t     *\n","\t     * values(other);\n","\t     * // => [3, 4]\n","\t     *\n","\t     * object.a = 2;\n","\t     * values(object);\n","\t     * // => [1, 2]\n","\t     *\n","\t     * // Modify the result cache.\n","\t     * values.cache.set(object, ['a', 'b']);\n","\t     * values(object);\n","\t     * // => ['a', 'b']\n","\t     *\n","\t     * // Replace `_.memoize.Cache`.\n","\t     * _.memoize.Cache = WeakMap;\n","\t     */\n","\t    function memoize(func, resolver) {\n","\t      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      var memoized = function() {\n","\t        var args = arguments,\n","\t            key = resolver ? resolver.apply(this, args) : args[0],\n","\t            cache = memoized.cache;\n","\t\n","\t        if (cache.has(key)) {\n","\t          return cache.get(key);\n","\t        }\n","\t        var result = func.apply(this, args);\n","\t        memoized.cache = cache.set(key, result) || cache;\n","\t        return result;\n","\t      };\n","\t      memoized.cache = new (memoize.Cache || MapCache);\n","\t      return memoized;\n","\t    }\n","\t\n","\t    // Expose `MapCache`.\n","\t    memoize.Cache = MapCache;\n","\t\n","\t    /**\n","\t     * Creates a function that negates the result of the predicate `func`. The\n","\t     * `func` predicate is invoked with the `this` binding and arguments of the\n","\t     * created function.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Function\n","\t     * @param {Function} predicate The predicate to negate.\n","\t     * @returns {Function} Returns the new negated function.\n","\t     * @example\n","\t     *\n","\t     * function isEven(n) {\n","\t     *   return n % 2 == 0;\n","\t     * }\n","\t     *\n","\t     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n","\t     * // => [1, 3, 5]\n","\t     */\n","\t    function negate(predicate) {\n","\t      if (typeof predicate != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      return function() {\n","\t        var args = arguments;\n","\t        switch (args.length) {\n","\t          case 0: return !predicate.call(this);\n","\t          case 1: return !predicate.call(this, args[0]);\n","\t          case 2: return !predicate.call(this, args[0], args[1]);\n","\t          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n","\t        }\n","\t        return !predicate.apply(this, args);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that is restricted to invoking `func` once. Repeat calls\n","\t     * to the function return the value of the first invocation. The `func` is\n","\t     * invoked with the `this` binding and arguments of the created function.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to restrict.\n","\t     * @returns {Function} Returns the new restricted function.\n","\t     * @example\n","\t     *\n","\t     * var initialize = _.once(createApplication);\n","\t     * initialize();\n","\t     * initialize();\n","\t     * // => `createApplication` is invoked once\n","\t     */\n","\t    function once(func) {\n","\t      return before(2, func);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with its arguments transformed.\n","\t     *\n","\t     * @static\n","\t     * @since 4.0.0\n","\t     * @memberOf _\n","\t     * @category Function\n","\t     * @param {Function} func The function to wrap.\n","\t     * @param {...(Function|Function[])} [transforms=[_.identity]]\n","\t     *  The argument transforms.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * function doubled(n) {\n","\t     *   return n * 2;\n","\t     * }\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * var func = _.overArgs(function(x, y) {\n","\t     *   return [x, y];\n","\t     * }, [square, doubled]);\n","\t     *\n","\t     * func(9, 3);\n","\t     * // => [81, 6]\n","\t     *\n","\t     * func(10, 5);\n","\t     * // => [100, 10]\n","\t     */\n","\t    var overArgs = castRest(function(func, transforms) {\n","\t      transforms = (transforms.length == 1 && isArray(transforms[0]))\n","\t        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n","\t        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n","\t\n","\t      var funcsLength = transforms.length;\n","\t      return baseRest(function(args) {\n","\t        var index = -1,\n","\t            length = nativeMin(args.length, funcsLength);\n","\t\n","\t        while (++index < length) {\n","\t          args[index] = transforms[index].call(this, args[index]);\n","\t        }\n","\t        return apply(func, this, args);\n","\t      });\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with `partials` prepended to the\n","\t     * arguments it receives. This method is like `_.bind` except it does **not**\n","\t     * alter the `this` binding.\n","\t     *\n","\t     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n","\t     * builds, may be used as a placeholder for partially applied arguments.\n","\t     *\n","\t     * **Note:** This method doesn't set the \"length\" property of partially\n","\t     * applied functions.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.2.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to partially apply arguments to.\n","\t     * @param {...*} [partials] The arguments to be partially applied.\n","\t     * @returns {Function} Returns the new partially applied function.\n","\t     * @example\n","\t     *\n","\t     * function greet(greeting, name) {\n","\t     *   return greeting + ' ' + name;\n","\t     * }\n","\t     *\n","\t     * var sayHelloTo = _.partial(greet, 'hello');\n","\t     * sayHelloTo('fred');\n","\t     * // => 'hello fred'\n","\t     *\n","\t     * // Partially applied with placeholders.\n","\t     * var greetFred = _.partial(greet, _, 'fred');\n","\t     * greetFred('hi');\n","\t     * // => 'hi fred'\n","\t     */\n","\t    var partial = baseRest(function(func, partials) {\n","\t      var holders = replaceHolders(partials, getHolder(partial));\n","\t      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.partial` except that partially applied arguments\n","\t     * are appended to the arguments it receives.\n","\t     *\n","\t     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n","\t     * builds, may be used as a placeholder for partially applied arguments.\n","\t     *\n","\t     * **Note:** This method doesn't set the \"length\" property of partially\n","\t     * applied functions.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to partially apply arguments to.\n","\t     * @param {...*} [partials] The arguments to be partially applied.\n","\t     * @returns {Function} Returns the new partially applied function.\n","\t     * @example\n","\t     *\n","\t     * function greet(greeting, name) {\n","\t     *   return greeting + ' ' + name;\n","\t     * }\n","\t     *\n","\t     * var greetFred = _.partialRight(greet, 'fred');\n","\t     * greetFred('hi');\n","\t     * // => 'hi fred'\n","\t     *\n","\t     * // Partially applied with placeholders.\n","\t     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n","\t     * sayHelloTo('fred');\n","\t     * // => 'hello fred'\n","\t     */\n","\t    var partialRight = baseRest(function(func, partials) {\n","\t      var holders = replaceHolders(partials, getHolder(partialRight));\n","\t      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with arguments arranged according\n","\t     * to the specified `indexes` where the argument value at the first index is\n","\t     * provided as the first argument, the argument value at the second index is\n","\t     * provided as the second argument, and so on.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to rearrange arguments for.\n","\t     * @param {...(number|number[])} indexes The arranged argument indexes.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var rearged = _.rearg(function(a, b, c) {\n","\t     *   return [a, b, c];\n","\t     * }, [2, 0, 1]);\n","\t     *\n","\t     * rearged('b', 'c', 'a')\n","\t     * // => ['a', 'b', 'c']\n","\t     */\n","\t    var rearg = flatRest(function(func, indexes) {\n","\t      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with the `this` binding of the\n","\t     * created function and arguments from `start` and beyond provided as\n","\t     * an array.\n","\t     *\n","\t     * **Note:** This method is based on the\n","\t     * [rest parameter](https://mdn.io/rest_parameters).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to apply a rest parameter to.\n","\t     * @param {number} [start=func.length-1] The start position of the rest parameter.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var say = _.rest(function(what, names) {\n","\t     *   return what + ' ' + _.initial(names).join(', ') +\n","\t     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n","\t     * });\n","\t     *\n","\t     * say('hello', 'fred', 'barney', 'pebbles');\n","\t     * // => 'hello fred, barney, & pebbles'\n","\t     */\n","\t    function rest(func, start) {\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      start = start === undefined ? start : toInteger(start);\n","\t      return baseRest(func, start);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with the `this` binding of the\n","\t     * create function and an array of arguments much like\n","\t     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n","\t     *\n","\t     * **Note:** This method is based on the\n","\t     * [spread operator](https://mdn.io/spread_operator).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.2.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to spread arguments over.\n","\t     * @param {number} [start=0] The start position of the spread.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var say = _.spread(function(who, what) {\n","\t     *   return who + ' says ' + what;\n","\t     * });\n","\t     *\n","\t     * say(['fred', 'hello']);\n","\t     * // => 'fred says hello'\n","\t     *\n","\t     * var numbers = Promise.all([\n","\t     *   Promise.resolve(40),\n","\t     *   Promise.resolve(36)\n","\t     * ]);\n","\t     *\n","\t     * numbers.then(_.spread(function(x, y) {\n","\t     *   return x + y;\n","\t     * }));\n","\t     * // => a Promise of 76\n","\t     */\n","\t    function spread(func, start) {\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n","\t      return baseRest(function(args) {\n","\t        var array = args[start],\n","\t            otherArgs = castSlice(args, 0, start);\n","\t\n","\t        if (array) {\n","\t          arrayPush(otherArgs, array);\n","\t        }\n","\t        return apply(func, this, otherArgs);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a throttled function that only invokes `func` at most once per\n","\t     * every `wait` milliseconds. The throttled function comes with a `cancel`\n","\t     * method to cancel delayed `func` invocations and a `flush` method to\n","\t     * immediately invoke them. Provide `options` to indicate whether `func`\n","\t     * should be invoked on the leading and/or trailing edge of the `wait`\n","\t     * timeout. The `func` is invoked with the last arguments provided to the\n","\t     * throttled function. Subsequent calls to the throttled function return the\n","\t     * result of the last `func` invocation.\n","\t     *\n","\t     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n","\t     * invoked on the trailing edge of the timeout only if the throttled function\n","\t     * is invoked more than once during the `wait` timeout.\n","\t     *\n","\t     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n","\t     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n","\t     *\n","\t     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n","\t     * for details over the differences between `_.throttle` and `_.debounce`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to throttle.\n","\t     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n","\t     * @param {Object} [options={}] The options object.\n","\t     * @param {boolean} [options.leading=true]\n","\t     *  Specify invoking on the leading edge of the timeout.\n","\t     * @param {boolean} [options.trailing=true]\n","\t     *  Specify invoking on the trailing edge of the timeout.\n","\t     * @returns {Function} Returns the new throttled function.\n","\t     * @example\n","\t     *\n","\t     * // Avoid excessively updating the position while scrolling.\n","\t     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n","\t     *\n","\t     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n","\t     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n","\t     * jQuery(element).on('click', throttled);\n","\t     *\n","\t     * // Cancel the trailing throttled invocation.\n","\t     * jQuery(window).on('popstate', throttled.cancel);\n","\t     */\n","\t    function throttle(func, wait, options) {\n","\t      var leading = true,\n","\t          trailing = true;\n","\t\n","\t      if (typeof func != 'function') {\n","\t        throw new TypeError(FUNC_ERROR_TEXT);\n","\t      }\n","\t      if (isObject(options)) {\n","\t        leading = 'leading' in options ? !!options.leading : leading;\n","\t        trailing = 'trailing' in options ? !!options.trailing : trailing;\n","\t      }\n","\t      return debounce(func, wait, {\n","\t        'leading': leading,\n","\t        'maxWait': wait,\n","\t        'trailing': trailing\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that accepts up to one argument, ignoring any\n","\t     * additional arguments.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Function\n","\t     * @param {Function} func The function to cap arguments for.\n","\t     * @returns {Function} Returns the new capped function.\n","\t     * @example\n","\t     *\n","\t     * _.map(['6', '8', '10'], _.unary(parseInt));\n","\t     * // => [6, 8, 10]\n","\t     */\n","\t    function unary(func) {\n","\t      return ary(func, 1);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that provides `value` to `wrapper` as its first\n","\t     * argument. Any additional arguments provided to the function are appended\n","\t     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n","\t     * binding of the created function.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Function\n","\t     * @param {*} value The value to wrap.\n","\t     * @param {Function} [wrapper=identity] The wrapper function.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var p = _.wrap(_.escape, function(func, text) {\n","\t     *   return '<p>' + func(text) + '</p>';\n","\t     * });\n","\t     *\n","\t     * p('fred, barney, & pebbles');\n","\t     * // => '<p>fred, barney, &amp; pebbles</p>'\n","\t     */\n","\t    function wrap(value, wrapper) {\n","\t      return partial(castFunction(wrapper), value);\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Casts `value` as an array if it's not one.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.4.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to inspect.\n","\t     * @returns {Array} Returns the cast array.\n","\t     * @example\n","\t     *\n","\t     * _.castArray(1);\n","\t     * // => [1]\n","\t     *\n","\t     * _.castArray({ 'a': 1 });\n","\t     * // => [{ 'a': 1 }]\n","\t     *\n","\t     * _.castArray('abc');\n","\t     * // => ['abc']\n","\t     *\n","\t     * _.castArray(null);\n","\t     * // => [null]\n","\t     *\n","\t     * _.castArray(undefined);\n","\t     * // => [undefined]\n","\t     *\n","\t     * _.castArray();\n","\t     * // => []\n","\t     *\n","\t     * var array = [1, 2, 3];\n","\t     * console.log(_.castArray(array) === array);\n","\t     * // => true\n","\t     */\n","\t    function castArray() {\n","\t      if (!arguments.length) {\n","\t        return [];\n","\t      }\n","\t      var value = arguments[0];\n","\t      return isArray(value) ? value : [value];\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a shallow clone of `value`.\n","\t     *\n","\t     * **Note:** This method is loosely based on the\n","\t     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n","\t     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n","\t     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n","\t     * arrays. The own enumerable properties of `arguments` objects are cloned\n","\t     * as plain objects. An empty object is returned for uncloneable values such\n","\t     * as error objects, functions, DOM nodes, and WeakMaps.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to clone.\n","\t     * @returns {*} Returns the cloned value.\n","\t     * @see _.cloneDeep\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n","\t     *\n","\t     * var shallow = _.clone(objects);\n","\t     * console.log(shallow[0] === objects[0]);\n","\t     * // => true\n","\t     */\n","\t    function clone(value) {\n","\t      return baseClone(value, CLONE_SYMBOLS_FLAG);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.clone` except that it accepts `customizer` which\n","\t     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n","\t     * cloning is handled by the method instead. The `customizer` is invoked with\n","\t     * up to four arguments; (value [, index|key, object, stack]).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to clone.\n","\t     * @param {Function} [customizer] The function to customize cloning.\n","\t     * @returns {*} Returns the cloned value.\n","\t     * @see _.cloneDeepWith\n","\t     * @example\n","\t     *\n","\t     * function customizer(value) {\n","\t     *   if (_.isElement(value)) {\n","\t     *     return value.cloneNode(false);\n","\t     *   }\n","\t     * }\n","\t     *\n","\t     * var el = _.cloneWith(document.body, customizer);\n","\t     *\n","\t     * console.log(el === document.body);\n","\t     * // => false\n","\t     * console.log(el.nodeName);\n","\t     * // => 'BODY'\n","\t     * console.log(el.childNodes.length);\n","\t     * // => 0\n","\t     */\n","\t    function cloneWith(value, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.clone` except that it recursively clones `value`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to recursively clone.\n","\t     * @returns {*} Returns the deep cloned value.\n","\t     * @see _.clone\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n","\t     *\n","\t     * var deep = _.cloneDeep(objects);\n","\t     * console.log(deep[0] === objects[0]);\n","\t     * // => false\n","\t     */\n","\t    function cloneDeep(value) {\n","\t      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.cloneWith` except that it recursively clones `value`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to recursively clone.\n","\t     * @param {Function} [customizer] The function to customize cloning.\n","\t     * @returns {*} Returns the deep cloned value.\n","\t     * @see _.cloneWith\n","\t     * @example\n","\t     *\n","\t     * function customizer(value) {\n","\t     *   if (_.isElement(value)) {\n","\t     *     return value.cloneNode(true);\n","\t     *   }\n","\t     * }\n","\t     *\n","\t     * var el = _.cloneDeepWith(document.body, customizer);\n","\t     *\n","\t     * console.log(el === document.body);\n","\t     * // => false\n","\t     * console.log(el.nodeName);\n","\t     * // => 'BODY'\n","\t     * console.log(el.childNodes.length);\n","\t     * // => 20\n","\t     */\n","\t    function cloneDeepWith(value, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `object` conforms to `source` by invoking the predicate\n","\t     * properties of `source` with the corresponding property values of `object`.\n","\t     *\n","\t     * **Note:** This method is equivalent to `_.conforms` when `source` is\n","\t     * partially applied.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.14.0\n","\t     * @category Lang\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Object} source The object of property predicates to conform to.\n","\t     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': 2 };\n","\t     *\n","\t     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n","\t     * // => true\n","\t     *\n","\t     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n","\t     * // => false\n","\t     */\n","\t    function conformsTo(object, source) {\n","\t      return source == null || baseConformsTo(object, source, keys(source));\n","\t    }\n","\t\n","\t    /**\n","\t     * Performs a\n","\t     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n","\t     * comparison between two values to determine if they are equivalent.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1 };\n","\t     * var other = { 'a': 1 };\n","\t     *\n","\t     * _.eq(object, object);\n","\t     * // => true\n","\t     *\n","\t     * _.eq(object, other);\n","\t     * // => false\n","\t     *\n","\t     * _.eq('a', 'a');\n","\t     * // => true\n","\t     *\n","\t     * _.eq('a', Object('a'));\n","\t     * // => false\n","\t     *\n","\t     * _.eq(NaN, NaN);\n","\t     * // => true\n","\t     */\n","\t    function eq(value, other) {\n","\t      return value === other || (value !== value && other !== other);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is greater than `other`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.9.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n","\t     *  else `false`.\n","\t     * @see _.lt\n","\t     * @example\n","\t     *\n","\t     * _.gt(3, 1);\n","\t     * // => true\n","\t     *\n","\t     * _.gt(3, 3);\n","\t     * // => false\n","\t     *\n","\t     * _.gt(1, 3);\n","\t     * // => false\n","\t     */\n","\t    var gt = createRelationalOperation(baseGt);\n","\t\n","\t    /**\n","\t     * Checks if `value` is greater than or equal to `other`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.9.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n","\t     *  `other`, else `false`.\n","\t     * @see _.lte\n","\t     * @example\n","\t     *\n","\t     * _.gte(3, 1);\n","\t     * // => true\n","\t     *\n","\t     * _.gte(3, 3);\n","\t     * // => true\n","\t     *\n","\t     * _.gte(1, 3);\n","\t     * // => false\n","\t     */\n","\t    var gte = createRelationalOperation(function(value, other) {\n","\t      return value >= other;\n","\t    });\n","\t\n","\t    /**\n","\t     * Checks if `value` is likely an `arguments` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isArguments(function() { return arguments; }());\n","\t     * // => true\n","\t     *\n","\t     * _.isArguments([1, 2, 3]);\n","\t     * // => false\n","\t     */\n","\t    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n","\t      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n","\t        !propertyIsEnumerable.call(value, 'callee');\n","\t    };\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as an `Array` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isArray([1, 2, 3]);\n","\t     * // => true\n","\t     *\n","\t     * _.isArray(document.body.children);\n","\t     * // => false\n","\t     *\n","\t     * _.isArray('abc');\n","\t     * // => false\n","\t     *\n","\t     * _.isArray(_.noop);\n","\t     * // => false\n","\t     */\n","\t    var isArray = Array.isArray;\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as an `ArrayBuffer` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isArrayBuffer(new ArrayBuffer(2));\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayBuffer(new Array(2));\n","\t     * // => false\n","\t     */\n","\t    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n","\t\n","\t    /**\n","\t     * Checks if `value` is array-like. A value is considered array-like if it's\n","\t     * not a function and has a `value.length` that's an integer greater than or\n","\t     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isArrayLike([1, 2, 3]);\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayLike(document.body.children);\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayLike('abc');\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayLike(_.noop);\n","\t     * // => false\n","\t     */\n","\t    function isArrayLike(value) {\n","\t      return value != null && isLength(value.length) && !isFunction(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.isArrayLike` except that it also checks if `value`\n","\t     * is an object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an array-like object,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isArrayLikeObject([1, 2, 3]);\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayLikeObject(document.body.children);\n","\t     * // => true\n","\t     *\n","\t     * _.isArrayLikeObject('abc');\n","\t     * // => false\n","\t     *\n","\t     * _.isArrayLikeObject(_.noop);\n","\t     * // => false\n","\t     */\n","\t    function isArrayLikeObject(value) {\n","\t      return isObjectLike(value) && isArrayLike(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a boolean primitive or object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isBoolean(false);\n","\t     * // => true\n","\t     *\n","\t     * _.isBoolean(null);\n","\t     * // => false\n","\t     */\n","\t    function isBoolean(value) {\n","\t      return value === true || value === false ||\n","\t        (isObjectLike(value) && baseGetTag(value) == boolTag);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a buffer.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isBuffer(new Buffer(2));\n","\t     * // => true\n","\t     *\n","\t     * _.isBuffer(new Uint8Array(2));\n","\t     * // => false\n","\t     */\n","\t    var isBuffer = nativeIsBuffer || stubFalse;\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Date` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isDate(new Date);\n","\t     * // => true\n","\t     *\n","\t     * _.isDate('Mon April 23 2012');\n","\t     * // => false\n","\t     */\n","\t    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n","\t\n","\t    /**\n","\t     * Checks if `value` is likely a DOM element.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isElement(document.body);\n","\t     * // => true\n","\t     *\n","\t     * _.isElement('<body>');\n","\t     * // => false\n","\t     */\n","\t    function isElement(value) {\n","\t      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is an empty object, collection, map, or set.\n","\t     *\n","\t     * Objects are considered empty if they have no own enumerable string keyed\n","\t     * properties.\n","\t     *\n","\t     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n","\t     * jQuery-like collections are considered empty if they have a `length` of `0`.\n","\t     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isEmpty(null);\n","\t     * // => true\n","\t     *\n","\t     * _.isEmpty(true);\n","\t     * // => true\n","\t     *\n","\t     * _.isEmpty(1);\n","\t     * // => true\n","\t     *\n","\t     * _.isEmpty([1, 2, 3]);\n","\t     * // => false\n","\t     *\n","\t     * _.isEmpty({ 'a': 1 });\n","\t     * // => false\n","\t     */\n","\t    function isEmpty(value) {\n","\t      if (value == null) {\n","\t        return true;\n","\t      }\n","\t      if (isArrayLike(value) &&\n","\t          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n","\t            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n","\t        return !value.length;\n","\t      }\n","\t      var tag = getTag(value);\n","\t      if (tag == mapTag || tag == setTag) {\n","\t        return !value.size;\n","\t      }\n","\t      if (isPrototype(value)) {\n","\t        return !baseKeys(value).length;\n","\t      }\n","\t      for (var key in value) {\n","\t        if (hasOwnProperty.call(value, key)) {\n","\t          return false;\n","\t        }\n","\t      }\n","\t      return true;\n","\t    }\n","\t\n","\t    /**\n","\t     * Performs a deep comparison between two values to determine if they are\n","\t     * equivalent.\n","\t     *\n","\t     * **Note:** This method supports comparing arrays, array buffers, booleans,\n","\t     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n","\t     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n","\t     * by their own, not inherited, enumerable properties. Functions and DOM\n","\t     * nodes are compared by strict equality, i.e. `===`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1 };\n","\t     * var other = { 'a': 1 };\n","\t     *\n","\t     * _.isEqual(object, other);\n","\t     * // => true\n","\t     *\n","\t     * object === other;\n","\t     * // => false\n","\t     */\n","\t    function isEqual(value, other) {\n","\t      return baseIsEqual(value, other);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.isEqual` except that it accepts `customizer` which\n","\t     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n","\t     * are handled by the method instead. The `customizer` is invoked with up to\n","\t     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @param {Function} [customizer] The function to customize comparisons.\n","\t     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n","\t     * @example\n","\t     *\n","\t     * function isGreeting(value) {\n","\t     *   return /^h(?:i|ello)$/.test(value);\n","\t     * }\n","\t     *\n","\t     * function customizer(objValue, othValue) {\n","\t     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n","\t     *     return true;\n","\t     *   }\n","\t     * }\n","\t     *\n","\t     * var array = ['hello', 'goodbye'];\n","\t     * var other = ['hi', 'goodbye'];\n","\t     *\n","\t     * _.isEqualWith(array, other, customizer);\n","\t     * // => true\n","\t     */\n","\t    function isEqualWith(value, other, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      var result = customizer ? customizer(value, other) : undefined;\n","\t      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n","\t     * `SyntaxError`, `TypeError`, or `URIError` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isError(new Error);\n","\t     * // => true\n","\t     *\n","\t     * _.isError(Error);\n","\t     * // => false\n","\t     */\n","\t    function isError(value) {\n","\t      if (!isObjectLike(value)) {\n","\t        return false;\n","\t      }\n","\t      var tag = baseGetTag(value);\n","\t      return tag == errorTag || tag == domExcTag ||\n","\t        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a finite primitive number.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isFinite(3);\n","\t     * // => true\n","\t     *\n","\t     * _.isFinite(Number.MIN_VALUE);\n","\t     * // => true\n","\t     *\n","\t     * _.isFinite(Infinity);\n","\t     * // => false\n","\t     *\n","\t     * _.isFinite('3');\n","\t     * // => false\n","\t     */\n","\t    function isFinite(value) {\n","\t      return typeof value == 'number' && nativeIsFinite(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Function` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isFunction(_);\n","\t     * // => true\n","\t     *\n","\t     * _.isFunction(/abc/);\n","\t     * // => false\n","\t     */\n","\t    function isFunction(value) {\n","\t      if (!isObject(value)) {\n","\t        return false;\n","\t      }\n","\t      // The use of `Object#toString` avoids issues with the `typeof` operator\n","\t      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n","\t      var tag = baseGetTag(value);\n","\t      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is an integer.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isInteger(3);\n","\t     * // => true\n","\t     *\n","\t     * _.isInteger(Number.MIN_VALUE);\n","\t     * // => false\n","\t     *\n","\t     * _.isInteger(Infinity);\n","\t     * // => false\n","\t     *\n","\t     * _.isInteger('3');\n","\t     * // => false\n","\t     */\n","\t    function isInteger(value) {\n","\t      return typeof value == 'number' && value == toInteger(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a valid array-like length.\n","\t     *\n","\t     * **Note:** This method is loosely based on\n","\t     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isLength(3);\n","\t     * // => true\n","\t     *\n","\t     * _.isLength(Number.MIN_VALUE);\n","\t     * // => false\n","\t     *\n","\t     * _.isLength(Infinity);\n","\t     * // => false\n","\t     *\n","\t     * _.isLength('3');\n","\t     * // => false\n","\t     */\n","\t    function isLength(value) {\n","\t      return typeof value == 'number' &&\n","\t        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is the\n","\t     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n","\t     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isObject({});\n","\t     * // => true\n","\t     *\n","\t     * _.isObject([1, 2, 3]);\n","\t     * // => true\n","\t     *\n","\t     * _.isObject(_.noop);\n","\t     * // => true\n","\t     *\n","\t     * _.isObject(null);\n","\t     * // => false\n","\t     */\n","\t    function isObject(value) {\n","\t      var type = typeof value;\n","\t      return value != null && (type == 'object' || type == 'function');\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is object-like. A value is object-like if it's not `null`\n","\t     * and has a `typeof` result of \"object\".\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isObjectLike({});\n","\t     * // => true\n","\t     *\n","\t     * _.isObjectLike([1, 2, 3]);\n","\t     * // => true\n","\t     *\n","\t     * _.isObjectLike(_.noop);\n","\t     * // => false\n","\t     *\n","\t     * _.isObjectLike(null);\n","\t     * // => false\n","\t     */\n","\t    function isObjectLike(value) {\n","\t      return value != null && typeof value == 'object';\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Map` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isMap(new Map);\n","\t     * // => true\n","\t     *\n","\t     * _.isMap(new WeakMap);\n","\t     * // => false\n","\t     */\n","\t    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n","\t\n","\t    /**\n","\t     * Performs a partial deep comparison between `object` and `source` to\n","\t     * determine if `object` contains equivalent property values.\n","\t     *\n","\t     * **Note:** This method is equivalent to `_.matches` when `source` is\n","\t     * partially applied.\n","\t     *\n","\t     * Partial comparisons will match empty array and empty object `source`\n","\t     * values against any array or object value, respectively. See `_.isEqual`\n","\t     * for a list of supported value comparisons.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Lang\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Object} source The object of property values to match.\n","\t     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': 2 };\n","\t     *\n","\t     * _.isMatch(object, { 'b': 2 });\n","\t     * // => true\n","\t     *\n","\t     * _.isMatch(object, { 'b': 1 });\n","\t     * // => false\n","\t     */\n","\t    function isMatch(object, source) {\n","\t      return object === source || baseIsMatch(object, source, getMatchData(source));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.isMatch` except that it accepts `customizer` which\n","\t     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n","\t     * are handled by the method instead. The `customizer` is invoked with five\n","\t     * arguments: (objValue, srcValue, index|key, object, source).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Object} source The object of property values to match.\n","\t     * @param {Function} [customizer] The function to customize comparisons.\n","\t     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n","\t     * @example\n","\t     *\n","\t     * function isGreeting(value) {\n","\t     *   return /^h(?:i|ello)$/.test(value);\n","\t     * }\n","\t     *\n","\t     * function customizer(objValue, srcValue) {\n","\t     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n","\t     *     return true;\n","\t     *   }\n","\t     * }\n","\t     *\n","\t     * var object = { 'greeting': 'hello' };\n","\t     * var source = { 'greeting': 'hi' };\n","\t     *\n","\t     * _.isMatchWith(object, source, customizer);\n","\t     * // => true\n","\t     */\n","\t    function isMatchWith(object, source, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      return baseIsMatch(object, source, getMatchData(source), customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is `NaN`.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n","\t     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n","\t     * `undefined` and other non-number values.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isNaN(NaN);\n","\t     * // => true\n","\t     *\n","\t     * _.isNaN(new Number(NaN));\n","\t     * // => true\n","\t     *\n","\t     * isNaN(undefined);\n","\t     * // => true\n","\t     *\n","\t     * _.isNaN(undefined);\n","\t     * // => false\n","\t     */\n","\t    function isNaN(value) {\n","\t      // An `NaN` primitive is the only value that is not equal to itself.\n","\t      // Perform the `toStringTag` check first to avoid errors with some\n","\t      // ActiveX objects in IE.\n","\t      return isNumber(value) && value != +value;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a pristine native function.\n","\t     *\n","\t     * **Note:** This method can't reliably detect native functions in the presence\n","\t     * of the core-js package because core-js circumvents this kind of detection.\n","\t     * Despite multiple requests, the core-js maintainer has made it clear: any\n","\t     * attempt to fix the detection will be obstructed. As a result, we're left\n","\t     * with little choice but to throw an error. Unfortunately, this also affects\n","\t     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n","\t     * which rely on core-js.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a native function,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isNative(Array.prototype.push);\n","\t     * // => true\n","\t     *\n","\t     * _.isNative(_);\n","\t     * // => false\n","\t     */\n","\t    function isNative(value) {\n","\t      if (isMaskable(value)) {\n","\t        throw new Error(CORE_ERROR_TEXT);\n","\t      }\n","\t      return baseIsNative(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is `null`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isNull(null);\n","\t     * // => true\n","\t     *\n","\t     * _.isNull(void 0);\n","\t     * // => false\n","\t     */\n","\t    function isNull(value) {\n","\t      return value === null;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is `null` or `undefined`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isNil(null);\n","\t     * // => true\n","\t     *\n","\t     * _.isNil(void 0);\n","\t     * // => true\n","\t     *\n","\t     * _.isNil(NaN);\n","\t     * // => false\n","\t     */\n","\t    function isNil(value) {\n","\t      return value == null;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Number` primitive or object.\n","\t     *\n","\t     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n","\t     * classified as numbers, use the `_.isFinite` method.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isNumber(3);\n","\t     * // => true\n","\t     *\n","\t     * _.isNumber(Number.MIN_VALUE);\n","\t     * // => true\n","\t     *\n","\t     * _.isNumber(Infinity);\n","\t     * // => true\n","\t     *\n","\t     * _.isNumber('3');\n","\t     * // => false\n","\t     */\n","\t    function isNumber(value) {\n","\t      return typeof value == 'number' ||\n","\t        (isObjectLike(value) && baseGetTag(value) == numberTag);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is a plain object, that is, an object created by the\n","\t     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.8.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     * }\n","\t     *\n","\t     * _.isPlainObject(new Foo);\n","\t     * // => false\n","\t     *\n","\t     * _.isPlainObject([1, 2, 3]);\n","\t     * // => false\n","\t     *\n","\t     * _.isPlainObject({ 'x': 0, 'y': 0 });\n","\t     * // => true\n","\t     *\n","\t     * _.isPlainObject(Object.create(null));\n","\t     * // => true\n","\t     */\n","\t    function isPlainObject(value) {\n","\t      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n","\t        return false;\n","\t      }\n","\t      var proto = getPrototype(value);\n","\t      if (proto === null) {\n","\t        return true;\n","\t      }\n","\t      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n","\t      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n","\t        funcToString.call(Ctor) == objectCtorString;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `RegExp` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.1.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isRegExp(/abc/);\n","\t     * // => true\n","\t     *\n","\t     * _.isRegExp('/abc/');\n","\t     * // => false\n","\t     */\n","\t    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n","\t\n","\t    /**\n","\t     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n","\t     * double precision number which isn't the result of a rounded unsafe integer.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isSafeInteger(3);\n","\t     * // => true\n","\t     *\n","\t     * _.isSafeInteger(Number.MIN_VALUE);\n","\t     * // => false\n","\t     *\n","\t     * _.isSafeInteger(Infinity);\n","\t     * // => false\n","\t     *\n","\t     * _.isSafeInteger('3');\n","\t     * // => false\n","\t     */\n","\t    function isSafeInteger(value) {\n","\t      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Set` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isSet(new Set);\n","\t     * // => true\n","\t     *\n","\t     * _.isSet(new WeakSet);\n","\t     * // => false\n","\t     */\n","\t    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `String` primitive or object.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isString('abc');\n","\t     * // => true\n","\t     *\n","\t     * _.isString(1);\n","\t     * // => false\n","\t     */\n","\t    function isString(value) {\n","\t      return typeof value == 'string' ||\n","\t        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `Symbol` primitive or object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isSymbol(Symbol.iterator);\n","\t     * // => true\n","\t     *\n","\t     * _.isSymbol('abc');\n","\t     * // => false\n","\t     */\n","\t    function isSymbol(value) {\n","\t      return typeof value == 'symbol' ||\n","\t        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a typed array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isTypedArray(new Uint8Array);\n","\t     * // => true\n","\t     *\n","\t     * _.isTypedArray([]);\n","\t     * // => false\n","\t     */\n","\t    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n","\t\n","\t    /**\n","\t     * Checks if `value` is `undefined`.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isUndefined(void 0);\n","\t     * // => true\n","\t     *\n","\t     * _.isUndefined(null);\n","\t     * // => false\n","\t     */\n","\t    function isUndefined(value) {\n","\t      return value === undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `WeakMap` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isWeakMap(new WeakMap);\n","\t     * // => true\n","\t     *\n","\t     * _.isWeakMap(new Map);\n","\t     * // => false\n","\t     */\n","\t    function isWeakMap(value) {\n","\t      return isObjectLike(value) && getTag(value) == weakMapTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is classified as a `WeakSet` object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.3.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to check.\n","\t     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.isWeakSet(new WeakSet);\n","\t     * // => true\n","\t     *\n","\t     * _.isWeakSet(new Set);\n","\t     * // => false\n","\t     */\n","\t    function isWeakSet(value) {\n","\t      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `value` is less than `other`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.9.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is less than `other`,\n","\t     *  else `false`.\n","\t     * @see _.gt\n","\t     * @example\n","\t     *\n","\t     * _.lt(1, 3);\n","\t     * // => true\n","\t     *\n","\t     * _.lt(3, 3);\n","\t     * // => false\n","\t     *\n","\t     * _.lt(3, 1);\n","\t     * // => false\n","\t     */\n","\t    var lt = createRelationalOperation(baseLt);\n","\t\n","\t    /**\n","\t     * Checks if `value` is less than or equal to `other`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.9.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to compare.\n","\t     * @param {*} other The other value to compare.\n","\t     * @returns {boolean} Returns `true` if `value` is less than or equal to\n","\t     *  `other`, else `false`.\n","\t     * @see _.gte\n","\t     * @example\n","\t     *\n","\t     * _.lte(1, 3);\n","\t     * // => true\n","\t     *\n","\t     * _.lte(3, 3);\n","\t     * // => true\n","\t     *\n","\t     * _.lte(3, 1);\n","\t     * // => false\n","\t     */\n","\t    var lte = createRelationalOperation(function(value, other) {\n","\t      return value <= other;\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts `value` to an array.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {Array} Returns the converted array.\n","\t     * @example\n","\t     *\n","\t     * _.toArray({ 'a': 1, 'b': 2 });\n","\t     * // => [1, 2]\n","\t     *\n","\t     * _.toArray('abc');\n","\t     * // => ['a', 'b', 'c']\n","\t     *\n","\t     * _.toArray(1);\n","\t     * // => []\n","\t     *\n","\t     * _.toArray(null);\n","\t     * // => []\n","\t     */\n","\t    function toArray(value) {\n","\t      if (!value) {\n","\t        return [];\n","\t      }\n","\t      if (isArrayLike(value)) {\n","\t        return isString(value) ? stringToArray(value) : copyArray(value);\n","\t      }\n","\t      if (symIterator && value[symIterator]) {\n","\t        return iteratorToArray(value[symIterator]());\n","\t      }\n","\t      var tag = getTag(value),\n","\t          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n","\t\n","\t      return func(value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a finite number.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.12.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {number} Returns the converted number.\n","\t     * @example\n","\t     *\n","\t     * _.toFinite(3.2);\n","\t     * // => 3.2\n","\t     *\n","\t     * _.toFinite(Number.MIN_VALUE);\n","\t     * // => 5e-324\n","\t     *\n","\t     * _.toFinite(Infinity);\n","\t     * // => 1.7976931348623157e+308\n","\t     *\n","\t     * _.toFinite('3.2');\n","\t     * // => 3.2\n","\t     */\n","\t    function toFinite(value) {\n","\t      if (!value) {\n","\t        return value === 0 ? value : 0;\n","\t      }\n","\t      value = toNumber(value);\n","\t      if (value === INFINITY || value === -INFINITY) {\n","\t        var sign = (value < 0 ? -1 : 1);\n","\t        return sign * MAX_INTEGER;\n","\t      }\n","\t      return value === value ? value : 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to an integer.\n","\t     *\n","\t     * **Note:** This method is loosely based on\n","\t     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {number} Returns the converted integer.\n","\t     * @example\n","\t     *\n","\t     * _.toInteger(3.2);\n","\t     * // => 3\n","\t     *\n","\t     * _.toInteger(Number.MIN_VALUE);\n","\t     * // => 0\n","\t     *\n","\t     * _.toInteger(Infinity);\n","\t     * // => 1.7976931348623157e+308\n","\t     *\n","\t     * _.toInteger('3.2');\n","\t     * // => 3\n","\t     */\n","\t    function toInteger(value) {\n","\t      var result = toFinite(value),\n","\t          remainder = result % 1;\n","\t\n","\t      return result === result ? (remainder ? result - remainder : result) : 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to an integer suitable for use as the length of an\n","\t     * array-like object.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {number} Returns the converted integer.\n","\t     * @example\n","\t     *\n","\t     * _.toLength(3.2);\n","\t     * // => 3\n","\t     *\n","\t     * _.toLength(Number.MIN_VALUE);\n","\t     * // => 0\n","\t     *\n","\t     * _.toLength(Infinity);\n","\t     * // => 4294967295\n","\t     *\n","\t     * _.toLength('3.2');\n","\t     * // => 3\n","\t     */\n","\t    function toLength(value) {\n","\t      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a number.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to process.\n","\t     * @returns {number} Returns the number.\n","\t     * @example\n","\t     *\n","\t     * _.toNumber(3.2);\n","\t     * // => 3.2\n","\t     *\n","\t     * _.toNumber(Number.MIN_VALUE);\n","\t     * // => 5e-324\n","\t     *\n","\t     * _.toNumber(Infinity);\n","\t     * // => Infinity\n","\t     *\n","\t     * _.toNumber('3.2');\n","\t     * // => 3.2\n","\t     */\n","\t    function toNumber(value) {\n","\t      if (typeof value == 'number') {\n","\t        return value;\n","\t      }\n","\t      if (isSymbol(value)) {\n","\t        return NAN;\n","\t      }\n","\t      if (isObject(value)) {\n","\t        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n","\t        value = isObject(other) ? (other + '') : other;\n","\t      }\n","\t      if (typeof value != 'string') {\n","\t        return value === 0 ? value : +value;\n","\t      }\n","\t      value = value.replace(reTrim, '');\n","\t      var isBinary = reIsBinary.test(value);\n","\t      return (isBinary || reIsOctal.test(value))\n","\t        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n","\t        : (reIsBadHex.test(value) ? NAN : +value);\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a plain object flattening inherited enumerable string\n","\t     * keyed properties of `value` to own properties of the plain object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {Object} Returns the converted plain object.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.assign({ 'a': 1 }, new Foo);\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     *\n","\t     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n","\t     * // => { 'a': 1, 'b': 2, 'c': 3 }\n","\t     */\n","\t    function toPlainObject(value) {\n","\t      return copyObject(value, keysIn(value));\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a safe integer. A safe integer can be compared and\n","\t     * represented correctly.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {number} Returns the converted integer.\n","\t     * @example\n","\t     *\n","\t     * _.toSafeInteger(3.2);\n","\t     * // => 3\n","\t     *\n","\t     * _.toSafeInteger(Number.MIN_VALUE);\n","\t     * // => 0\n","\t     *\n","\t     * _.toSafeInteger(Infinity);\n","\t     * // => 9007199254740991\n","\t     *\n","\t     * _.toSafeInteger('3.2');\n","\t     * // => 3\n","\t     */\n","\t    function toSafeInteger(value) {\n","\t      return value\n","\t        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n","\t        : (value === 0 ? value : 0);\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a string. An empty string is returned for `null`\n","\t     * and `undefined` values. The sign of `-0` is preserved.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Lang\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {string} Returns the converted string.\n","\t     * @example\n","\t     *\n","\t     * _.toString(null);\n","\t     * // => ''\n","\t     *\n","\t     * _.toString(-0);\n","\t     * // => '-0'\n","\t     *\n","\t     * _.toString([1, 2, 3]);\n","\t     * // => '1,2,3'\n","\t     */\n","\t    function toString(value) {\n","\t      return value == null ? '' : baseToString(value);\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Assigns own enumerable string keyed properties of source objects to the\n","\t     * destination object. Source objects are applied from left to right.\n","\t     * Subsequent sources overwrite property assignments of previous sources.\n","\t     *\n","\t     * **Note:** This method mutates `object` and is loosely based on\n","\t     * [`Object.assign`](https://mdn.io/Object/assign).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.10.0\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} [sources] The source objects.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.assignIn\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     * }\n","\t     *\n","\t     * function Bar() {\n","\t     *   this.c = 3;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.b = 2;\n","\t     * Bar.prototype.d = 4;\n","\t     *\n","\t     * _.assign({ 'a': 0 }, new Foo, new Bar);\n","\t     * // => { 'a': 1, 'c': 3 }\n","\t     */\n","\t    var assign = createAssigner(function(object, source) {\n","\t      if (isPrototype(source) || isArrayLike(source)) {\n","\t        copyObject(source, keys(source), object);\n","\t        return;\n","\t      }\n","\t      for (var key in source) {\n","\t        if (hasOwnProperty.call(source, key)) {\n","\t          assignValue(object, key, source[key]);\n","\t        }\n","\t      }\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.assign` except that it iterates over own and\n","\t     * inherited source properties.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @alias extend\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} [sources] The source objects.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.assign\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     * }\n","\t     *\n","\t     * function Bar() {\n","\t     *   this.c = 3;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.b = 2;\n","\t     * Bar.prototype.d = 4;\n","\t     *\n","\t     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n","\t     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n","\t     */\n","\t    var assignIn = createAssigner(function(object, source) {\n","\t      copyObject(source, keysIn(source), object);\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.assignIn` except that it accepts `customizer`\n","\t     * which is invoked to produce the assigned values. If `customizer` returns\n","\t     * `undefined`, assignment is handled by the method instead. The `customizer`\n","\t     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @alias extendWith\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} sources The source objects.\n","\t     * @param {Function} [customizer] The function to customize assigned values.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.assignWith\n","\t     * @example\n","\t     *\n","\t     * function customizer(objValue, srcValue) {\n","\t     *   return _.isUndefined(objValue) ? srcValue : objValue;\n","\t     * }\n","\t     *\n","\t     * var defaults = _.partialRight(_.assignInWith, customizer);\n","\t     *\n","\t     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     */\n","\t    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n","\t      copyObject(source, keysIn(source), object, customizer);\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.assign` except that it accepts `customizer`\n","\t     * which is invoked to produce the assigned values. If `customizer` returns\n","\t     * `undefined`, assignment is handled by the method instead. The `customizer`\n","\t     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} sources The source objects.\n","\t     * @param {Function} [customizer] The function to customize assigned values.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.assignInWith\n","\t     * @example\n","\t     *\n","\t     * function customizer(objValue, srcValue) {\n","\t     *   return _.isUndefined(objValue) ? srcValue : objValue;\n","\t     * }\n","\t     *\n","\t     * var defaults = _.partialRight(_.assignWith, customizer);\n","\t     *\n","\t     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     */\n","\t    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n","\t      copyObject(source, keys(source), object, customizer);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an array of values corresponding to `paths` of `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {...(string|string[])} [paths] The property paths to pick.\n","\t     * @returns {Array} Returns the picked values.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n","\t     *\n","\t     * _.at(object, ['a[0].b.c', 'a[1]']);\n","\t     * // => [3, 4]\n","\t     */\n","\t    var at = flatRest(baseAt);\n","\t\n","\t    /**\n","\t     * Creates an object that inherits from the `prototype` object. If a\n","\t     * `properties` object is given, its own enumerable string keyed properties\n","\t     * are assigned to the created object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.3.0\n","\t     * @category Object\n","\t     * @param {Object} prototype The object to inherit from.\n","\t     * @param {Object} [properties] The properties to assign to the object.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * function Shape() {\n","\t     *   this.x = 0;\n","\t     *   this.y = 0;\n","\t     * }\n","\t     *\n","\t     * function Circle() {\n","\t     *   Shape.call(this);\n","\t     * }\n","\t     *\n","\t     * Circle.prototype = _.create(Shape.prototype, {\n","\t     *   'constructor': Circle\n","\t     * });\n","\t     *\n","\t     * var circle = new Circle;\n","\t     * circle instanceof Circle;\n","\t     * // => true\n","\t     *\n","\t     * circle instanceof Shape;\n","\t     * // => true\n","\t     */\n","\t    function create(prototype, properties) {\n","\t      var result = baseCreate(prototype);\n","\t      return properties == null ? result : baseAssign(result, properties);\n","\t    }\n","\t\n","\t    /**\n","\t     * Assigns own and inherited enumerable string keyed properties of source\n","\t     * objects to the destination object for all destination properties that\n","\t     * resolve to `undefined`. Source objects are applied from left to right.\n","\t     * Once a property is set, additional values of the same property are ignored.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} [sources] The source objects.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.defaultsDeep\n","\t     * @example\n","\t     *\n","\t     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n","\t     * // => { 'a': 1, 'b': 2 }\n","\t     */\n","\t    var defaults = baseRest(function(object, sources) {\n","\t      object = Object(object);\n","\t\n","\t      var index = -1;\n","\t      var length = sources.length;\n","\t      var guard = length > 2 ? sources[2] : undefined;\n","\t\n","\t      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n","\t        length = 1;\n","\t      }\n","\t\n","\t      while (++index < length) {\n","\t        var source = sources[index];\n","\t        var props = keysIn(source);\n","\t        var propsIndex = -1;\n","\t        var propsLength = props.length;\n","\t\n","\t        while (++propsIndex < propsLength) {\n","\t          var key = props[propsIndex];\n","\t          var value = object[key];\n","\t\n","\t          if (value === undefined ||\n","\t              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n","\t            object[key] = source[key];\n","\t          }\n","\t        }\n","\t      }\n","\t\n","\t      return object;\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.defaults` except that it recursively assigns\n","\t     * default properties.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.10.0\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} [sources] The source objects.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.defaults\n","\t     * @example\n","\t     *\n","\t     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n","\t     * // => { 'a': { 'b': 2, 'c': 3 } }\n","\t     */\n","\t    var defaultsDeep = baseRest(function(args) {\n","\t      args.push(undefined, customDefaultsMerge);\n","\t      return apply(mergeWith, undefined, args);\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.find` except that it returns the key of the first\n","\t     * element `predicate` returns truthy for instead of the element itself.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.1.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {string|undefined} Returns the key of the matched element,\n","\t     *  else `undefined`.\n","\t     * @example\n","\t     *\n","\t     * var users = {\n","\t     *   'barney':  { 'age': 36, 'active': true },\n","\t     *   'fred':    { 'age': 40, 'active': false },\n","\t     *   'pebbles': { 'age': 1,  'active': true }\n","\t     * };\n","\t     *\n","\t     * _.findKey(users, function(o) { return o.age < 40; });\n","\t     * // => 'barney' (iteration order is not guaranteed)\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.findKey(users, { 'age': 1, 'active': true });\n","\t     * // => 'pebbles'\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.findKey(users, ['active', false]);\n","\t     * // => 'fred'\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.findKey(users, 'active');\n","\t     * // => 'barney'\n","\t     */\n","\t    function findKey(object, predicate) {\n","\t      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.findKey` except that it iterates over elements of\n","\t     * a collection in the opposite order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to inspect.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n","\t     * @returns {string|undefined} Returns the key of the matched element,\n","\t     *  else `undefined`.\n","\t     * @example\n","\t     *\n","\t     * var users = {\n","\t     *   'barney':  { 'age': 36, 'active': true },\n","\t     *   'fred':    { 'age': 40, 'active': false },\n","\t     *   'pebbles': { 'age': 1,  'active': true }\n","\t     * };\n","\t     *\n","\t     * _.findLastKey(users, function(o) { return o.age < 40; });\n","\t     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.findLastKey(users, { 'age': 36, 'active': true });\n","\t     * // => 'barney'\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.findLastKey(users, ['active', false]);\n","\t     * // => 'fred'\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.findLastKey(users, 'active');\n","\t     * // => 'pebbles'\n","\t     */\n","\t    function findLastKey(object, predicate) {\n","\t      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n","\t    }\n","\t\n","\t    /**\n","\t     * Iterates over own and inherited enumerable string keyed properties of an\n","\t     * object and invokes `iteratee` for each property. The iteratee is invoked\n","\t     * with three arguments: (value, key, object). Iteratee functions may exit\n","\t     * iteration early by explicitly returning `false`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.3.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.forInRight\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.forIn(new Foo, function(value, key) {\n","\t     *   console.log(key);\n","\t     * });\n","\t     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n","\t     */\n","\t    function forIn(object, iteratee) {\n","\t      return object == null\n","\t        ? object\n","\t        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.forIn` except that it iterates over properties of\n","\t     * `object` in the opposite order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.forIn\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.forInRight(new Foo, function(value, key) {\n","\t     *   console.log(key);\n","\t     * });\n","\t     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n","\t     */\n","\t    function forInRight(object, iteratee) {\n","\t      return object == null\n","\t        ? object\n","\t        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n","\t    }\n","\t\n","\t    /**\n","\t     * Iterates over own enumerable string keyed properties of an object and\n","\t     * invokes `iteratee` for each property. The iteratee is invoked with three\n","\t     * arguments: (value, key, object). Iteratee functions may exit iteration\n","\t     * early by explicitly returning `false`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.3.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.forOwnRight\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.forOwn(new Foo, function(value, key) {\n","\t     *   console.log(key);\n","\t     * });\n","\t     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n","\t     */\n","\t    function forOwn(object, iteratee) {\n","\t      return object && baseForOwn(object, getIteratee(iteratee, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.forOwn` except that it iterates over properties of\n","\t     * `object` in the opposite order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @see _.forOwn\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.forOwnRight(new Foo, function(value, key) {\n","\t     *   console.log(key);\n","\t     * });\n","\t     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n","\t     */\n","\t    function forOwnRight(object, iteratee) {\n","\t      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of function property names from own enumerable properties\n","\t     * of `object`.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The object to inspect.\n","\t     * @returns {Array} Returns the function names.\n","\t     * @see _.functionsIn\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = _.constant('a');\n","\t     *   this.b = _.constant('b');\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = _.constant('c');\n","\t     *\n","\t     * _.functions(new Foo);\n","\t     * // => ['a', 'b']\n","\t     */\n","\t    function functions(object) {\n","\t      return object == null ? [] : baseFunctions(object, keys(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of function property names from own and inherited\n","\t     * enumerable properties of `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to inspect.\n","\t     * @returns {Array} Returns the function names.\n","\t     * @see _.functions\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = _.constant('a');\n","\t     *   this.b = _.constant('b');\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = _.constant('c');\n","\t     *\n","\t     * _.functionsIn(new Foo);\n","\t     * // => ['a', 'b', 'c']\n","\t     */\n","\t    function functionsIn(object) {\n","\t      return object == null ? [] : baseFunctions(object, keysIn(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * Gets the value at `path` of `object`. If the resolved value is\n","\t     * `undefined`, the `defaultValue` is returned in its place.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.7.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path of the property to get.\n","\t     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n","\t     * @returns {*} Returns the resolved value.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n","\t     *\n","\t     * _.get(object, 'a[0].b.c');\n","\t     * // => 3\n","\t     *\n","\t     * _.get(object, ['a', '0', 'b', 'c']);\n","\t     * // => 3\n","\t     *\n","\t     * _.get(object, 'a.b.c', 'default');\n","\t     * // => 'default'\n","\t     */\n","\t    function get(object, path, defaultValue) {\n","\t      var result = object == null ? undefined : baseGet(object, path);\n","\t      return result === undefined ? defaultValue : result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `path` is a direct property of `object`.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path to check.\n","\t     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': { 'b': 2 } };\n","\t     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n","\t     *\n","\t     * _.has(object, 'a');\n","\t     * // => true\n","\t     *\n","\t     * _.has(object, 'a.b');\n","\t     * // => true\n","\t     *\n","\t     * _.has(object, ['a', 'b']);\n","\t     * // => true\n","\t     *\n","\t     * _.has(other, 'a');\n","\t     * // => false\n","\t     */\n","\t    function has(object, path) {\n","\t      return object != null && hasPath(object, path, baseHas);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `path` is a direct or inherited property of `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path to check.\n","\t     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n","\t     *\n","\t     * _.hasIn(object, 'a');\n","\t     * // => true\n","\t     *\n","\t     * _.hasIn(object, 'a.b');\n","\t     * // => true\n","\t     *\n","\t     * _.hasIn(object, ['a', 'b']);\n","\t     * // => true\n","\t     *\n","\t     * _.hasIn(object, 'b');\n","\t     * // => false\n","\t     */\n","\t    function hasIn(object, path) {\n","\t      return object != null && hasPath(object, path, baseHasIn);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an object composed of the inverted keys and values of `object`.\n","\t     * If `object` contains duplicate values, subsequent values overwrite\n","\t     * property assignments of previous values.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.7.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to invert.\n","\t     * @returns {Object} Returns the new inverted object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n","\t     *\n","\t     * _.invert(object);\n","\t     * // => { '1': 'c', '2': 'b' }\n","\t     */\n","\t    var invert = createInverter(function(result, value, key) {\n","\t      if (value != null &&\n","\t          typeof value.toString != 'function') {\n","\t        value = nativeObjectToString.call(value);\n","\t      }\n","\t\n","\t      result[value] = key;\n","\t    }, constant(identity));\n","\t\n","\t    /**\n","\t     * This method is like `_.invert` except that the inverted object is generated\n","\t     * from the results of running each element of `object` thru `iteratee`. The\n","\t     * corresponding inverted value of each inverted key is an array of keys\n","\t     * responsible for generating the inverted value. The iteratee is invoked\n","\t     * with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.1.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to invert.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {Object} Returns the new inverted object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n","\t     *\n","\t     * _.invertBy(object);\n","\t     * // => { '1': ['a', 'c'], '2': ['b'] }\n","\t     *\n","\t     * _.invertBy(object, function(value) {\n","\t     *   return 'group' + value;\n","\t     * });\n","\t     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n","\t     */\n","\t    var invertBy = createInverter(function(result, value, key) {\n","\t      if (value != null &&\n","\t          typeof value.toString != 'function') {\n","\t        value = nativeObjectToString.call(value);\n","\t      }\n","\t\n","\t      if (hasOwnProperty.call(result, value)) {\n","\t        result[value].push(key);\n","\t      } else {\n","\t        result[value] = [key];\n","\t      }\n","\t    }, getIteratee);\n","\t\n","\t    /**\n","\t     * Invokes the method at `path` of `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path of the method to invoke.\n","\t     * @param {...*} [args] The arguments to invoke the method with.\n","\t     * @returns {*} Returns the result of the invoked method.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n","\t     *\n","\t     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n","\t     * // => [2, 3]\n","\t     */\n","\t    var invoke = baseRest(baseInvoke);\n","\t\n","\t    /**\n","\t     * Creates an array of the own enumerable property names of `object`.\n","\t     *\n","\t     * **Note:** Non-object values are coerced to objects. See the\n","\t     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n","\t     * for more details.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.keys(new Foo);\n","\t     * // => ['a', 'b'] (iteration order is not guaranteed)\n","\t     *\n","\t     * _.keys('hi');\n","\t     * // => ['0', '1']\n","\t     */\n","\t    function keys(object) {\n","\t      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of the own and inherited enumerable property names of `object`.\n","\t     *\n","\t     * **Note:** Non-object values are coerced to objects.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property names.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.keysIn(new Foo);\n","\t     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n","\t     */\n","\t    function keysIn(object) {\n","\t      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n","\t    }\n","\t\n","\t    /**\n","\t     * The opposite of `_.mapValues`; this method creates an object with the\n","\t     * same values as `object` and keys generated by running each own enumerable\n","\t     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n","\t     * with three arguments: (value, key, object).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.8.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns the new mapped object.\n","\t     * @see _.mapValues\n","\t     * @example\n","\t     *\n","\t     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n","\t     *   return key + value;\n","\t     * });\n","\t     * // => { 'a1': 1, 'b2': 2 }\n","\t     */\n","\t    function mapKeys(object, iteratee) {\n","\t      var result = {};\n","\t      iteratee = getIteratee(iteratee, 3);\n","\t\n","\t      baseForOwn(object, function(value, key, object) {\n","\t        baseAssignValue(result, iteratee(value, key, object), value);\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an object with the same keys as `object` and values generated\n","\t     * by running each own enumerable string keyed property of `object` thru\n","\t     * `iteratee`. The iteratee is invoked with three arguments:\n","\t     * (value, key, object).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.4.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Object} Returns the new mapped object.\n","\t     * @see _.mapKeys\n","\t     * @example\n","\t     *\n","\t     * var users = {\n","\t     *   'fred':    { 'user': 'fred',    'age': 40 },\n","\t     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n","\t     * };\n","\t     *\n","\t     * _.mapValues(users, function(o) { return o.age; });\n","\t     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.mapValues(users, 'age');\n","\t     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n","\t     */\n","\t    function mapValues(object, iteratee) {\n","\t      var result = {};\n","\t      iteratee = getIteratee(iteratee, 3);\n","\t\n","\t      baseForOwn(object, function(value, key, object) {\n","\t        baseAssignValue(result, key, iteratee(value, key, object));\n","\t      });\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.assign` except that it recursively merges own and\n","\t     * inherited enumerable string keyed properties of source objects into the\n","\t     * destination object. Source properties that resolve to `undefined` are\n","\t     * skipped if a destination value exists. Array and plain object properties\n","\t     * are merged recursively. Other objects and value types are overridden by\n","\t     * assignment. Source objects are applied from left to right. Subsequent\n","\t     * sources overwrite property assignments of previous sources.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.5.0\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} [sources] The source objects.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var object = {\n","\t     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n","\t     * };\n","\t     *\n","\t     * var other = {\n","\t     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n","\t     * };\n","\t     *\n","\t     * _.merge(object, other);\n","\t     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n","\t     */\n","\t    var merge = createAssigner(function(object, source, srcIndex) {\n","\t      baseMerge(object, source, srcIndex);\n","\t    });\n","\t\n","\t    /**\n","\t     * This method is like `_.merge` except that it accepts `customizer` which\n","\t     * is invoked to produce the merged values of the destination and source\n","\t     * properties. If `customizer` returns `undefined`, merging is handled by the\n","\t     * method instead. The `customizer` is invoked with six arguments:\n","\t     * (objValue, srcValue, key, object, source, stack).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The destination object.\n","\t     * @param {...Object} sources The source objects.\n","\t     * @param {Function} customizer The function to customize assigned values.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * function customizer(objValue, srcValue) {\n","\t     *   if (_.isArray(objValue)) {\n","\t     *     return objValue.concat(srcValue);\n","\t     *   }\n","\t     * }\n","\t     *\n","\t     * var object = { 'a': [1], 'b': [2] };\n","\t     * var other = { 'a': [3], 'b': [4] };\n","\t     *\n","\t     * _.mergeWith(object, other, customizer);\n","\t     * // => { 'a': [1, 3], 'b': [2, 4] }\n","\t     */\n","\t    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n","\t      baseMerge(object, source, srcIndex, customizer);\n","\t    });\n","\t\n","\t    /**\n","\t     * The opposite of `_.pick`; this method creates an object composed of the\n","\t     * own and inherited enumerable property paths of `object` that are not omitted.\n","\t     *\n","\t     * **Note:** This method is considerably slower than `_.pick`.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The source object.\n","\t     * @param {...(string|string[])} [paths] The property paths to omit.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n","\t     *\n","\t     * _.omit(object, ['a', 'c']);\n","\t     * // => { 'b': '2' }\n","\t     */\n","\t    var omit = flatRest(function(object, paths) {\n","\t      var result = {};\n","\t      if (object == null) {\n","\t        return result;\n","\t      }\n","\t      var isDeep = false;\n","\t      paths = arrayMap(paths, function(path) {\n","\t        path = castPath(path, object);\n","\t        isDeep || (isDeep = path.length > 1);\n","\t        return path;\n","\t      });\n","\t      copyObject(object, getAllKeysIn(object), result);\n","\t      if (isDeep) {\n","\t        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n","\t      }\n","\t      var length = paths.length;\n","\t      while (length--) {\n","\t        baseUnset(result, paths[length]);\n","\t      }\n","\t      return result;\n","\t    });\n","\t\n","\t    /**\n","\t     * The opposite of `_.pickBy`; this method creates an object composed of\n","\t     * the own and inherited enumerable string keyed properties of `object` that\n","\t     * `predicate` doesn't return truthy for. The predicate is invoked with two\n","\t     * arguments: (value, key).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The source object.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per property.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n","\t     *\n","\t     * _.omitBy(object, _.isNumber);\n","\t     * // => { 'b': '2' }\n","\t     */\n","\t    function omitBy(object, predicate) {\n","\t      return pickBy(object, negate(getIteratee(predicate)));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an object composed of the picked `object` properties.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The source object.\n","\t     * @param {...(string|string[])} [paths] The property paths to pick.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n","\t     *\n","\t     * _.pick(object, ['a', 'c']);\n","\t     * // => { 'a': 1, 'c': 3 }\n","\t     */\n","\t    var pick = flatRest(function(object, paths) {\n","\t      return object == null ? {} : basePick(object, paths);\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates an object composed of the `object` properties `predicate` returns\n","\t     * truthy for. The predicate is invoked with two arguments: (value, key).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The source object.\n","\t     * @param {Function} [predicate=_.identity] The function invoked per property.\n","\t     * @returns {Object} Returns the new object.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n","\t     *\n","\t     * _.pickBy(object, _.isNumber);\n","\t     * // => { 'a': 1, 'c': 3 }\n","\t     */\n","\t    function pickBy(object, predicate) {\n","\t      if (object == null) {\n","\t        return {};\n","\t      }\n","\t      var props = arrayMap(getAllKeysIn(object), function(prop) {\n","\t        return [prop];\n","\t      });\n","\t      predicate = getIteratee(predicate);\n","\t      return basePickBy(object, props, function(value, path) {\n","\t        return predicate(value, path[0]);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.get` except that if the resolved value is a\n","\t     * function it's invoked with the `this` binding of its parent object and\n","\t     * its result is returned.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @param {Array|string} path The path of the property to resolve.\n","\t     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n","\t     * @returns {*} Returns the resolved value.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n","\t     *\n","\t     * _.result(object, 'a[0].b.c1');\n","\t     * // => 3\n","\t     *\n","\t     * _.result(object, 'a[0].b.c2');\n","\t     * // => 4\n","\t     *\n","\t     * _.result(object, 'a[0].b.c3', 'default');\n","\t     * // => 'default'\n","\t     *\n","\t     * _.result(object, 'a[0].b.c3', _.constant('default'));\n","\t     * // => 'default'\n","\t     */\n","\t    function result(object, path, defaultValue) {\n","\t      path = castPath(path, object);\n","\t\n","\t      var index = -1,\n","\t          length = path.length;\n","\t\n","\t      // Ensure the loop is entered when path is empty.\n","\t      if (!length) {\n","\t        length = 1;\n","\t        object = undefined;\n","\t      }\n","\t      while (++index < length) {\n","\t        var value = object == null ? undefined : object[toKey(path[index])];\n","\t        if (value === undefined) {\n","\t          index = length;\n","\t          value = defaultValue;\n","\t        }\n","\t        object = isFunction(value) ? value.call(object) : value;\n","\t      }\n","\t      return object;\n","\t    }\n","\t\n","\t    /**\n","\t     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n","\t     * it's created. Arrays are created for missing index properties while objects\n","\t     * are created for all other missing properties. Use `_.setWith` to customize\n","\t     * `path` creation.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.7.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to set.\n","\t     * @param {*} value The value to set.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n","\t     *\n","\t     * _.set(object, 'a[0].b.c', 4);\n","\t     * console.log(object.a[0].b.c);\n","\t     * // => 4\n","\t     *\n","\t     * _.set(object, ['x', '0', 'y', 'z'], 5);\n","\t     * console.log(object.x[0].y.z);\n","\t     * // => 5\n","\t     */\n","\t    function set(object, path, value) {\n","\t      return object == null ? object : baseSet(object, path, value);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.set` except that it accepts `customizer` which is\n","\t     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n","\t     * path creation is handled by the method instead. The `customizer` is invoked\n","\t     * with three arguments: (nsValue, key, nsObject).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to set.\n","\t     * @param {*} value The value to set.\n","\t     * @param {Function} [customizer] The function to customize assigned values.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var object = {};\n","\t     *\n","\t     * _.setWith(object, '[0][1]', 'a', Object);\n","\t     * // => { '0': { '1': 'a' } }\n","\t     */\n","\t    function setWith(object, path, value, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      return object == null ? object : baseSet(object, path, value, customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of own enumerable string keyed-value pairs for `object`\n","\t     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n","\t     * entries are returned.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @alias entries\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the key-value pairs.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.toPairs(new Foo);\n","\t     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n","\t     */\n","\t    var toPairs = createToPairs(keys);\n","\t\n","\t    /**\n","\t     * Creates an array of own and inherited enumerable string keyed-value pairs\n","\t     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n","\t     * or set, its entries are returned.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @alias entriesIn\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the key-value pairs.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.toPairsIn(new Foo);\n","\t     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n","\t     */\n","\t    var toPairsIn = createToPairs(keysIn);\n","\t\n","\t    /**\n","\t     * An alternative to `_.reduce`; this method transforms `object` to a new\n","\t     * `accumulator` object which is the result of running each of its own\n","\t     * enumerable string keyed properties thru `iteratee`, with each invocation\n","\t     * potentially mutating the `accumulator` object. If `accumulator` is not\n","\t     * provided, a new object with the same `[[Prototype]]` will be used. The\n","\t     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n","\t     * Iteratee functions may exit iteration early by explicitly returning `false`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.3.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @param {*} [accumulator] The custom accumulator value.\n","\t     * @returns {*} Returns the accumulated value.\n","\t     * @example\n","\t     *\n","\t     * _.transform([2, 3, 4], function(result, n) {\n","\t     *   result.push(n *= n);\n","\t     *   return n % 2 == 0;\n","\t     * }, []);\n","\t     * // => [4, 9]\n","\t     *\n","\t     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n","\t     *   (result[value] || (result[value] = [])).push(key);\n","\t     * }, {});\n","\t     * // => { '1': ['a', 'c'], '2': ['b'] }\n","\t     */\n","\t    function transform(object, iteratee, accumulator) {\n","\t      var isArr = isArray(object),\n","\t          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n","\t\n","\t      iteratee = getIteratee(iteratee, 4);\n","\t      if (accumulator == null) {\n","\t        var Ctor = object && object.constructor;\n","\t        if (isArrLike) {\n","\t          accumulator = isArr ? new Ctor : [];\n","\t        }\n","\t        else if (isObject(object)) {\n","\t          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n","\t        }\n","\t        else {\n","\t          accumulator = {};\n","\t        }\n","\t      }\n","\t      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n","\t        return iteratee(accumulator, value, index, object);\n","\t      });\n","\t      return accumulator;\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes the property at `path` of `object`.\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to unset.\n","\t     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n","\t     * _.unset(object, 'a[0].b.c');\n","\t     * // => true\n","\t     *\n","\t     * console.log(object);\n","\t     * // => { 'a': [{ 'b': {} }] };\n","\t     *\n","\t     * _.unset(object, ['a', '0', 'b', 'c']);\n","\t     * // => true\n","\t     *\n","\t     * console.log(object);\n","\t     * // => { 'a': [{ 'b': {} }] };\n","\t     */\n","\t    function unset(object, path) {\n","\t      return object == null ? true : baseUnset(object, path);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.set` except that accepts `updater` to produce the\n","\t     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n","\t     * is invoked with one argument: (value).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.6.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to set.\n","\t     * @param {Function} updater The function to produce the updated value.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n","\t     *\n","\t     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n","\t     * console.log(object.a[0].b.c);\n","\t     * // => 9\n","\t     *\n","\t     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n","\t     * console.log(object.x[0].y.z);\n","\t     * // => 0\n","\t     */\n","\t    function update(object, path, updater) {\n","\t      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.update` except that it accepts `customizer` which is\n","\t     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n","\t     * path creation is handled by the method instead. The `customizer` is invoked\n","\t     * with three arguments: (nsValue, key, nsObject).\n","\t     *\n","\t     * **Note:** This method mutates `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.6.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to modify.\n","\t     * @param {Array|string} path The path of the property to set.\n","\t     * @param {Function} updater The function to produce the updated value.\n","\t     * @param {Function} [customizer] The function to customize assigned values.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var object = {};\n","\t     *\n","\t     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n","\t     * // => { '0': { '1': 'a' } }\n","\t     */\n","\t    function updateWith(object, path, updater, customizer) {\n","\t      customizer = typeof customizer == 'function' ? customizer : undefined;\n","\t      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of the own enumerable string keyed property values of `object`.\n","\t     *\n","\t     * **Note:** Non-object values are coerced to objects.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property values.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.values(new Foo);\n","\t     * // => [1, 2] (iteration order is not guaranteed)\n","\t     *\n","\t     * _.values('hi');\n","\t     * // => ['h', 'i']\n","\t     */\n","\t    function values(object) {\n","\t      return object == null ? [] : baseValues(object, keys(object));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of the own and inherited enumerable string keyed property\n","\t     * values of `object`.\n","\t     *\n","\t     * **Note:** Non-object values are coerced to objects.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Object\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Array} Returns the array of property values.\n","\t     * @example\n","\t     *\n","\t     * function Foo() {\n","\t     *   this.a = 1;\n","\t     *   this.b = 2;\n","\t     * }\n","\t     *\n","\t     * Foo.prototype.c = 3;\n","\t     *\n","\t     * _.valuesIn(new Foo);\n","\t     * // => [1, 2, 3] (iteration order is not guaranteed)\n","\t     */\n","\t    function valuesIn(object) {\n","\t      return object == null ? [] : baseValues(object, keysIn(object));\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Number\n","\t     * @param {number} number The number to clamp.\n","\t     * @param {number} [lower] The lower bound.\n","\t     * @param {number} upper The upper bound.\n","\t     * @returns {number} Returns the clamped number.\n","\t     * @example\n","\t     *\n","\t     * _.clamp(-10, -5, 5);\n","\t     * // => -5\n","\t     *\n","\t     * _.clamp(10, -5, 5);\n","\t     * // => 5\n","\t     */\n","\t    function clamp(number, lower, upper) {\n","\t      if (upper === undefined) {\n","\t        upper = lower;\n","\t        lower = undefined;\n","\t      }\n","\t      if (upper !== undefined) {\n","\t        upper = toNumber(upper);\n","\t        upper = upper === upper ? upper : 0;\n","\t      }\n","\t      if (lower !== undefined) {\n","\t        lower = toNumber(lower);\n","\t        lower = lower === lower ? lower : 0;\n","\t      }\n","\t      return baseClamp(toNumber(number), lower, upper);\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `n` is between `start` and up to, but not including, `end`. If\n","\t     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n","\t     * If `start` is greater than `end` the params are swapped to support\n","\t     * negative ranges.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.3.0\n","\t     * @category Number\n","\t     * @param {number} number The number to check.\n","\t     * @param {number} [start=0] The start of the range.\n","\t     * @param {number} end The end of the range.\n","\t     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n","\t     * @see _.range, _.rangeRight\n","\t     * @example\n","\t     *\n","\t     * _.inRange(3, 2, 4);\n","\t     * // => true\n","\t     *\n","\t     * _.inRange(4, 8);\n","\t     * // => true\n","\t     *\n","\t     * _.inRange(4, 2);\n","\t     * // => false\n","\t     *\n","\t     * _.inRange(2, 2);\n","\t     * // => false\n","\t     *\n","\t     * _.inRange(1.2, 2);\n","\t     * // => true\n","\t     *\n","\t     * _.inRange(5.2, 4);\n","\t     * // => false\n","\t     *\n","\t     * _.inRange(-3, -2, -6);\n","\t     * // => true\n","\t     */\n","\t    function inRange(number, start, end) {\n","\t      start = toFinite(start);\n","\t      if (end === undefined) {\n","\t        end = start;\n","\t        start = 0;\n","\t      } else {\n","\t        end = toFinite(end);\n","\t      }\n","\t      number = toNumber(number);\n","\t      return baseInRange(number, start, end);\n","\t    }\n","\t\n","\t    /**\n","\t     * Produces a random number between the inclusive `lower` and `upper` bounds.\n","\t     * If only one argument is provided a number between `0` and the given number\n","\t     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n","\t     * floats, a floating-point number is returned instead of an integer.\n","\t     *\n","\t     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n","\t     * floating-point values which can produce unexpected results.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.7.0\n","\t     * @category Number\n","\t     * @param {number} [lower=0] The lower bound.\n","\t     * @param {number} [upper=1] The upper bound.\n","\t     * @param {boolean} [floating] Specify returning a floating-point number.\n","\t     * @returns {number} Returns the random number.\n","\t     * @example\n","\t     *\n","\t     * _.random(0, 5);\n","\t     * // => an integer between 0 and 5\n","\t     *\n","\t     * _.random(5);\n","\t     * // => also an integer between 0 and 5\n","\t     *\n","\t     * _.random(5, true);\n","\t     * // => a floating-point number between 0 and 5\n","\t     *\n","\t     * _.random(1.2, 5.2);\n","\t     * // => a floating-point number between 1.2 and 5.2\n","\t     */\n","\t    function random(lower, upper, floating) {\n","\t      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n","\t        upper = floating = undefined;\n","\t      }\n","\t      if (floating === undefined) {\n","\t        if (typeof upper == 'boolean') {\n","\t          floating = upper;\n","\t          upper = undefined;\n","\t        }\n","\t        else if (typeof lower == 'boolean') {\n","\t          floating = lower;\n","\t          lower = undefined;\n","\t        }\n","\t      }\n","\t      if (lower === undefined && upper === undefined) {\n","\t        lower = 0;\n","\t        upper = 1;\n","\t      }\n","\t      else {\n","\t        lower = toFinite(lower);\n","\t        if (upper === undefined) {\n","\t          upper = lower;\n","\t          lower = 0;\n","\t        } else {\n","\t          upper = toFinite(upper);\n","\t        }\n","\t      }\n","\t      if (lower > upper) {\n","\t        var temp = lower;\n","\t        lower = upper;\n","\t        upper = temp;\n","\t      }\n","\t      if (floating || lower % 1 || upper % 1) {\n","\t        var rand = nativeRandom();\n","\t        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n","\t      }\n","\t      return baseRandom(lower, upper);\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the camel cased string.\n","\t     * @example\n","\t     *\n","\t     * _.camelCase('Foo Bar');\n","\t     * // => 'fooBar'\n","\t     *\n","\t     * _.camelCase('--foo-bar--');\n","\t     * // => 'fooBar'\n","\t     *\n","\t     * _.camelCase('__FOO_BAR__');\n","\t     * // => 'fooBar'\n","\t     */\n","\t    var camelCase = createCompounder(function(result, word, index) {\n","\t      word = word.toLowerCase();\n","\t      return result + (index ? capitalize(word) : word);\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts the first character of `string` to upper case and the remaining\n","\t     * to lower case.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to capitalize.\n","\t     * @returns {string} Returns the capitalized string.\n","\t     * @example\n","\t     *\n","\t     * _.capitalize('FRED');\n","\t     * // => 'Fred'\n","\t     */\n","\t    function capitalize(string) {\n","\t      return upperFirst(toString(string).toLowerCase());\n","\t    }\n","\t\n","\t    /**\n","\t     * Deburrs `string` by converting\n","\t     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n","\t     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n","\t     * letters to basic Latin letters and removing\n","\t     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to deburr.\n","\t     * @returns {string} Returns the deburred string.\n","\t     * @example\n","\t     *\n","\t     * _.deburr('déjà vu');\n","\t     * // => 'deja vu'\n","\t     */\n","\t    function deburr(string) {\n","\t      string = toString(string);\n","\t      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks if `string` ends with the given target string.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to inspect.\n","\t     * @param {string} [target] The string to search for.\n","\t     * @param {number} [position=string.length] The position to search up to.\n","\t     * @returns {boolean} Returns `true` if `string` ends with `target`,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.endsWith('abc', 'c');\n","\t     * // => true\n","\t     *\n","\t     * _.endsWith('abc', 'b');\n","\t     * // => false\n","\t     *\n","\t     * _.endsWith('abc', 'b', 2);\n","\t     * // => true\n","\t     */\n","\t    function endsWith(string, target, position) {\n","\t      string = toString(string);\n","\t      target = baseToString(target);\n","\t\n","\t      var length = string.length;\n","\t      position = position === undefined\n","\t        ? length\n","\t        : baseClamp(toInteger(position), 0, length);\n","\t\n","\t      var end = position;\n","\t      position -= target.length;\n","\t      return position >= 0 && string.slice(position, end) == target;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n","\t     * corresponding HTML entities.\n","\t     *\n","\t     * **Note:** No other characters are escaped. To escape additional\n","\t     * characters use a third-party library like [_he_](https://mths.be/he).\n","\t     *\n","\t     * Though the \">\" character is escaped for symmetry, characters like\n","\t     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n","\t     * unless they're part of a tag or unquoted attribute value. See\n","\t     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n","\t     * (under \"semi-related fun fact\") for more details.\n","\t     *\n","\t     * When working with HTML you should always\n","\t     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n","\t     * XSS vectors.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to escape.\n","\t     * @returns {string} Returns the escaped string.\n","\t     * @example\n","\t     *\n","\t     * _.escape('fred, barney, & pebbles');\n","\t     * // => 'fred, barney, &amp; pebbles'\n","\t     */\n","\t    function escape(string) {\n","\t      string = toString(string);\n","\t      return (string && reHasUnescapedHtml.test(string))\n","\t        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n","\t        : string;\n","\t    }\n","\t\n","\t    /**\n","\t     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n","\t     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to escape.\n","\t     * @returns {string} Returns the escaped string.\n","\t     * @example\n","\t     *\n","\t     * _.escapeRegExp('[lodash](https://lodash.com/)');\n","\t     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n","\t     */\n","\t    function escapeRegExp(string) {\n","\t      string = toString(string);\n","\t      return (string && reHasRegExpChar.test(string))\n","\t        ? string.replace(reRegExpChar, '\\\\$&')\n","\t        : string;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string` to\n","\t     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the kebab cased string.\n","\t     * @example\n","\t     *\n","\t     * _.kebabCase('Foo Bar');\n","\t     * // => 'foo-bar'\n","\t     *\n","\t     * _.kebabCase('fooBar');\n","\t     * // => 'foo-bar'\n","\t     *\n","\t     * _.kebabCase('__FOO_BAR__');\n","\t     * // => 'foo-bar'\n","\t     */\n","\t    var kebabCase = createCompounder(function(result, word, index) {\n","\t      return result + (index ? '-' : '') + word.toLowerCase();\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts `string`, as space separated words, to lower case.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the lower cased string.\n","\t     * @example\n","\t     *\n","\t     * _.lowerCase('--Foo-Bar--');\n","\t     * // => 'foo bar'\n","\t     *\n","\t     * _.lowerCase('fooBar');\n","\t     * // => 'foo bar'\n","\t     *\n","\t     * _.lowerCase('__FOO_BAR__');\n","\t     * // => 'foo bar'\n","\t     */\n","\t    var lowerCase = createCompounder(function(result, word, index) {\n","\t      return result + (index ? ' ' : '') + word.toLowerCase();\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts the first character of `string` to lower case.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the converted string.\n","\t     * @example\n","\t     *\n","\t     * _.lowerFirst('Fred');\n","\t     * // => 'fred'\n","\t     *\n","\t     * _.lowerFirst('FRED');\n","\t     * // => 'fRED'\n","\t     */\n","\t    var lowerFirst = createCaseFirst('toLowerCase');\n","\t\n","\t    /**\n","\t     * Pads `string` on the left and right sides if it's shorter than `length`.\n","\t     * Padding characters are truncated if they can't be evenly divided by `length`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to pad.\n","\t     * @param {number} [length=0] The padding length.\n","\t     * @param {string} [chars=' '] The string used as padding.\n","\t     * @returns {string} Returns the padded string.\n","\t     * @example\n","\t     *\n","\t     * _.pad('abc', 8);\n","\t     * // => '  abc   '\n","\t     *\n","\t     * _.pad('abc', 8, '_-');\n","\t     * // => '_-abc_-_'\n","\t     *\n","\t     * _.pad('abc', 3);\n","\t     * // => 'abc'\n","\t     */\n","\t    function pad(string, length, chars) {\n","\t      string = toString(string);\n","\t      length = toInteger(length);\n","\t\n","\t      var strLength = length ? stringSize(string) : 0;\n","\t      if (!length || strLength >= length) {\n","\t        return string;\n","\t      }\n","\t      var mid = (length - strLength) / 2;\n","\t      return (\n","\t        createPadding(nativeFloor(mid), chars) +\n","\t        string +\n","\t        createPadding(nativeCeil(mid), chars)\n","\t      );\n","\t    }\n","\t\n","\t    /**\n","\t     * Pads `string` on the right side if it's shorter than `length`. Padding\n","\t     * characters are truncated if they exceed `length`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to pad.\n","\t     * @param {number} [length=0] The padding length.\n","\t     * @param {string} [chars=' '] The string used as padding.\n","\t     * @returns {string} Returns the padded string.\n","\t     * @example\n","\t     *\n","\t     * _.padEnd('abc', 6);\n","\t     * // => 'abc   '\n","\t     *\n","\t     * _.padEnd('abc', 6, '_-');\n","\t     * // => 'abc_-_'\n","\t     *\n","\t     * _.padEnd('abc', 3);\n","\t     * // => 'abc'\n","\t     */\n","\t    function padEnd(string, length, chars) {\n","\t      string = toString(string);\n","\t      length = toInteger(length);\n","\t\n","\t      var strLength = length ? stringSize(string) : 0;\n","\t      return (length && strLength < length)\n","\t        ? (string + createPadding(length - strLength, chars))\n","\t        : string;\n","\t    }\n","\t\n","\t    /**\n","\t     * Pads `string` on the left side if it's shorter than `length`. Padding\n","\t     * characters are truncated if they exceed `length`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to pad.\n","\t     * @param {number} [length=0] The padding length.\n","\t     * @param {string} [chars=' '] The string used as padding.\n","\t     * @returns {string} Returns the padded string.\n","\t     * @example\n","\t     *\n","\t     * _.padStart('abc', 6);\n","\t     * // => '   abc'\n","\t     *\n","\t     * _.padStart('abc', 6, '_-');\n","\t     * // => '_-_abc'\n","\t     *\n","\t     * _.padStart('abc', 3);\n","\t     * // => 'abc'\n","\t     */\n","\t    function padStart(string, length, chars) {\n","\t      string = toString(string);\n","\t      length = toInteger(length);\n","\t\n","\t      var strLength = length ? stringSize(string) : 0;\n","\t      return (length && strLength < length)\n","\t        ? (createPadding(length - strLength, chars) + string)\n","\t        : string;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string` to an integer of the specified radix. If `radix` is\n","\t     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n","\t     * hexadecimal, in which case a `radix` of `16` is used.\n","\t     *\n","\t     * **Note:** This method aligns with the\n","\t     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 1.1.0\n","\t     * @category String\n","\t     * @param {string} string The string to convert.\n","\t     * @param {number} [radix=10] The radix to interpret `value` by.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {number} Returns the converted integer.\n","\t     * @example\n","\t     *\n","\t     * _.parseInt('08');\n","\t     * // => 8\n","\t     *\n","\t     * _.map(['6', '08', '10'], _.parseInt);\n","\t     * // => [6, 8, 10]\n","\t     */\n","\t    function parseInt(string, radix, guard) {\n","\t      if (guard || radix == null) {\n","\t        radix = 0;\n","\t      } else if (radix) {\n","\t        radix = +radix;\n","\t      }\n","\t      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n","\t    }\n","\t\n","\t    /**\n","\t     * Repeats the given string `n` times.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to repeat.\n","\t     * @param {number} [n=1] The number of times to repeat the string.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {string} Returns the repeated string.\n","\t     * @example\n","\t     *\n","\t     * _.repeat('*', 3);\n","\t     * // => '***'\n","\t     *\n","\t     * _.repeat('abc', 2);\n","\t     * // => 'abcabc'\n","\t     *\n","\t     * _.repeat('abc', 0);\n","\t     * // => ''\n","\t     */\n","\t    function repeat(string, n, guard) {\n","\t      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n","\t        n = 1;\n","\t      } else {\n","\t        n = toInteger(n);\n","\t      }\n","\t      return baseRepeat(toString(string), n);\n","\t    }\n","\t\n","\t    /**\n","\t     * Replaces matches for `pattern` in `string` with `replacement`.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`String#replace`](https://mdn.io/String/replace).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to modify.\n","\t     * @param {RegExp|string} pattern The pattern to replace.\n","\t     * @param {Function|string} replacement The match replacement.\n","\t     * @returns {string} Returns the modified string.\n","\t     * @example\n","\t     *\n","\t     * _.replace('Hi Fred', 'Fred', 'Barney');\n","\t     * // => 'Hi Barney'\n","\t     */\n","\t    function replace() {\n","\t      var args = arguments,\n","\t          string = toString(args[0]);\n","\t\n","\t      return args.length < 3 ? string : string.replace(args[1], args[2]);\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string` to\n","\t     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the snake cased string.\n","\t     * @example\n","\t     *\n","\t     * _.snakeCase('Foo Bar');\n","\t     * // => 'foo_bar'\n","\t     *\n","\t     * _.snakeCase('fooBar');\n","\t     * // => 'foo_bar'\n","\t     *\n","\t     * _.snakeCase('--FOO-BAR--');\n","\t     * // => 'foo_bar'\n","\t     */\n","\t    var snakeCase = createCompounder(function(result, word, index) {\n","\t      return result + (index ? '_' : '') + word.toLowerCase();\n","\t    });\n","\t\n","\t    /**\n","\t     * Splits `string` by `separator`.\n","\t     *\n","\t     * **Note:** This method is based on\n","\t     * [`String#split`](https://mdn.io/String/split).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to split.\n","\t     * @param {RegExp|string} separator The separator pattern to split by.\n","\t     * @param {number} [limit] The length to truncate results to.\n","\t     * @returns {Array} Returns the string segments.\n","\t     * @example\n","\t     *\n","\t     * _.split('a-b-c', '-', 2);\n","\t     * // => ['a', 'b']\n","\t     */\n","\t    function split(string, separator, limit) {\n","\t      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n","\t        separator = limit = undefined;\n","\t      }\n","\t      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n","\t      if (!limit) {\n","\t        return [];\n","\t      }\n","\t      string = toString(string);\n","\t      if (string && (\n","\t            typeof separator == 'string' ||\n","\t            (separator != null && !isRegExp(separator))\n","\t          )) {\n","\t        separator = baseToString(separator);\n","\t        if (!separator && hasUnicode(string)) {\n","\t          return castSlice(stringToArray(string), 0, limit);\n","\t        }\n","\t      }\n","\t      return string.split(separator, limit);\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string` to\n","\t     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.1.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the start cased string.\n","\t     * @example\n","\t     *\n","\t     * _.startCase('--foo-bar--');\n","\t     * // => 'Foo Bar'\n","\t     *\n","\t     * _.startCase('fooBar');\n","\t     * // => 'Foo Bar'\n","\t     *\n","\t     * _.startCase('__FOO_BAR__');\n","\t     * // => 'FOO BAR'\n","\t     */\n","\t    var startCase = createCompounder(function(result, word, index) {\n","\t      return result + (index ? ' ' : '') + upperFirst(word);\n","\t    });\n","\t\n","\t    /**\n","\t     * Checks if `string` starts with the given target string.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to inspect.\n","\t     * @param {string} [target] The string to search for.\n","\t     * @param {number} [position=0] The position to search from.\n","\t     * @returns {boolean} Returns `true` if `string` starts with `target`,\n","\t     *  else `false`.\n","\t     * @example\n","\t     *\n","\t     * _.startsWith('abc', 'a');\n","\t     * // => true\n","\t     *\n","\t     * _.startsWith('abc', 'b');\n","\t     * // => false\n","\t     *\n","\t     * _.startsWith('abc', 'b', 1);\n","\t     * // => true\n","\t     */\n","\t    function startsWith(string, target, position) {\n","\t      string = toString(string);\n","\t      position = position == null\n","\t        ? 0\n","\t        : baseClamp(toInteger(position), 0, string.length);\n","\t\n","\t      target = baseToString(target);\n","\t      return string.slice(position, position + target.length) == target;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a compiled template function that can interpolate data properties\n","\t     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n","\t     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n","\t     * properties may be accessed as free variables in the template. If a setting\n","\t     * object is given, it takes precedence over `_.templateSettings` values.\n","\t     *\n","\t     * **Note:** In the development build `_.template` utilizes\n","\t     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n","\t     * for easier debugging.\n","\t     *\n","\t     * For more information on precompiling templates see\n","\t     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n","\t     *\n","\t     * For more information on Chrome extension sandboxes see\n","\t     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category String\n","\t     * @param {string} [string=''] The template string.\n","\t     * @param {Object} [options={}] The options object.\n","\t     * @param {RegExp} [options.escape=_.templateSettings.escape]\n","\t     *  The HTML \"escape\" delimiter.\n","\t     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n","\t     *  The \"evaluate\" delimiter.\n","\t     * @param {Object} [options.imports=_.templateSettings.imports]\n","\t     *  An object to import into the template as free variables.\n","\t     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n","\t     *  The \"interpolate\" delimiter.\n","\t     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n","\t     *  The sourceURL of the compiled template.\n","\t     * @param {string} [options.variable='obj']\n","\t     *  The data object variable name.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Function} Returns the compiled template function.\n","\t     * @example\n","\t     *\n","\t     * // Use the \"interpolate\" delimiter to create a compiled template.\n","\t     * var compiled = _.template('hello <%= user %>!');\n","\t     * compiled({ 'user': 'fred' });\n","\t     * // => 'hello fred!'\n","\t     *\n","\t     * // Use the HTML \"escape\" delimiter to escape data property values.\n","\t     * var compiled = _.template('<b><%- value %></b>');\n","\t     * compiled({ 'value': '<script>' });\n","\t     * // => '<b>&lt;script&gt;</b>'\n","\t     *\n","\t     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n","\t     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n","\t     * compiled({ 'users': ['fred', 'barney'] });\n","\t     * // => '<li>fred</li><li>barney</li>'\n","\t     *\n","\t     * // Use the internal `print` function in \"evaluate\" delimiters.\n","\t     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n","\t     * compiled({ 'user': 'barney' });\n","\t     * // => 'hello barney!'\n","\t     *\n","\t     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n","\t     * // Disable support by replacing the \"interpolate\" delimiter.\n","\t     * var compiled = _.template('hello ${ user }!');\n","\t     * compiled({ 'user': 'pebbles' });\n","\t     * // => 'hello pebbles!'\n","\t     *\n","\t     * // Use backslashes to treat delimiters as plain text.\n","\t     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n","\t     * compiled({ 'value': 'ignored' });\n","\t     * // => '<%- value %>'\n","\t     *\n","\t     * // Use the `imports` option to import `jQuery` as `jq`.\n","\t     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n","\t     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n","\t     * compiled({ 'users': ['fred', 'barney'] });\n","\t     * // => '<li>fred</li><li>barney</li>'\n","\t     *\n","\t     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n","\t     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n","\t     * compiled(data);\n","\t     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n","\t     *\n","\t     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n","\t     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n","\t     * compiled.source;\n","\t     * // => function(data) {\n","\t     * //   var __t, __p = '';\n","\t     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n","\t     * //   return __p;\n","\t     * // }\n","\t     *\n","\t     * // Use custom template delimiters.\n","\t     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n","\t     * var compiled = _.template('hello {{ user }}!');\n","\t     * compiled({ 'user': 'mustache' });\n","\t     * // => 'hello mustache!'\n","\t     *\n","\t     * // Use the `source` property to inline compiled templates for meaningful\n","\t     * // line numbers in error messages and stack traces.\n","\t     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n","\t     *   var JST = {\\\n","\t     *     \"main\": ' + _.template(mainText).source + '\\\n","\t     *   };\\\n","\t     * ');\n","\t     */\n","\t    function template(string, options, guard) {\n","\t      // Based on John Resig's `tmpl` implementation\n","\t      // (http://ejohn.org/blog/javascript-micro-templating/)\n","\t      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n","\t      var settings = lodash.templateSettings;\n","\t\n","\t      if (guard && isIterateeCall(string, options, guard)) {\n","\t        options = undefined;\n","\t      }\n","\t      string = toString(string);\n","\t      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n","\t\n","\t      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n","\t          importsKeys = keys(imports),\n","\t          importsValues = baseValues(imports, importsKeys);\n","\t\n","\t      var isEscaping,\n","\t          isEvaluating,\n","\t          index = 0,\n","\t          interpolate = options.interpolate || reNoMatch,\n","\t          source = \"__p += '\";\n","\t\n","\t      // Compile the regexp to match each delimiter.\n","\t      var reDelimiters = RegExp(\n","\t        (options.escape || reNoMatch).source + '|' +\n","\t        interpolate.source + '|' +\n","\t        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n","\t        (options.evaluate || reNoMatch).source + '|$'\n","\t      , 'g');\n","\t\n","\t      // Use a sourceURL for easier debugging.\n","\t      var sourceURL = '//# sourceURL=' +\n","\t        ('sourceURL' in options\n","\t          ? options.sourceURL\n","\t          : ('lodash.templateSources[' + (++templateCounter) + ']')\n","\t        ) + '\\n';\n","\t\n","\t      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n","\t        interpolateValue || (interpolateValue = esTemplateValue);\n","\t\n","\t        // Escape characters that can't be included in string literals.\n","\t        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n","\t\n","\t        // Replace delimiters with snippets.\n","\t        if (escapeValue) {\n","\t          isEscaping = true;\n","\t          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n","\t        }\n","\t        if (evaluateValue) {\n","\t          isEvaluating = true;\n","\t          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n","\t        }\n","\t        if (interpolateValue) {\n","\t          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n","\t        }\n","\t        index = offset + match.length;\n","\t\n","\t        // The JS engine embedded in Adobe products needs `match` returned in\n","\t        // order to produce the correct `offset` value.\n","\t        return match;\n","\t      });\n","\t\n","\t      source += \"';\\n\";\n","\t\n","\t      // If `variable` is not specified wrap a with-statement around the generated\n","\t      // code to add the data object to the top of the scope chain.\n","\t      var variable = options.variable;\n","\t      if (!variable) {\n","\t        source = 'with (obj) {\\n' + source + '\\n}\\n';\n","\t      }\n","\t      // Cleanup code by stripping empty strings.\n","\t      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n","\t        .replace(reEmptyStringMiddle, '$1')\n","\t        .replace(reEmptyStringTrailing, '$1;');\n","\t\n","\t      // Frame code as the function body.\n","\t      source = 'function(' + (variable || 'obj') + ') {\\n' +\n","\t        (variable\n","\t          ? ''\n","\t          : 'obj || (obj = {});\\n'\n","\t        ) +\n","\t        \"var __t, __p = ''\" +\n","\t        (isEscaping\n","\t           ? ', __e = _.escape'\n","\t           : ''\n","\t        ) +\n","\t        (isEvaluating\n","\t          ? ', __j = Array.prototype.join;\\n' +\n","\t            \"function print() { __p += __j.call(arguments, '') }\\n\"\n","\t          : ';\\n'\n","\t        ) +\n","\t        source +\n","\t        'return __p\\n}';\n","\t\n","\t      var result = attempt(function() {\n","\t        return Function(importsKeys, sourceURL + 'return ' + source)\n","\t          .apply(undefined, importsValues);\n","\t      });\n","\t\n","\t      // Provide the compiled function's source by its `toString` method or\n","\t      // the `source` property as a convenience for inlining compiled templates.\n","\t      result.source = source;\n","\t      if (isError(result)) {\n","\t        throw result;\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string`, as a whole, to lower case just like\n","\t     * [String#toLowerCase](https://mdn.io/toLowerCase).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the lower cased string.\n","\t     * @example\n","\t     *\n","\t     * _.toLower('--Foo-Bar--');\n","\t     * // => '--foo-bar--'\n","\t     *\n","\t     * _.toLower('fooBar');\n","\t     * // => 'foobar'\n","\t     *\n","\t     * _.toLower('__FOO_BAR__');\n","\t     * // => '__foo_bar__'\n","\t     */\n","\t    function toLower(value) {\n","\t      return toString(value).toLowerCase();\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string`, as a whole, to upper case just like\n","\t     * [String#toUpperCase](https://mdn.io/toUpperCase).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the upper cased string.\n","\t     * @example\n","\t     *\n","\t     * _.toUpper('--foo-bar--');\n","\t     * // => '--FOO-BAR--'\n","\t     *\n","\t     * _.toUpper('fooBar');\n","\t     * // => 'FOOBAR'\n","\t     *\n","\t     * _.toUpper('__foo_bar__');\n","\t     * // => '__FOO_BAR__'\n","\t     */\n","\t    function toUpper(value) {\n","\t      return toString(value).toUpperCase();\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes leading and trailing whitespace or specified characters from `string`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to trim.\n","\t     * @param {string} [chars=whitespace] The characters to trim.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {string} Returns the trimmed string.\n","\t     * @example\n","\t     *\n","\t     * _.trim('  abc  ');\n","\t     * // => 'abc'\n","\t     *\n","\t     * _.trim('-_-abc-_-', '_-');\n","\t     * // => 'abc'\n","\t     *\n","\t     * _.map(['  foo  ', '  bar  '], _.trim);\n","\t     * // => ['foo', 'bar']\n","\t     */\n","\t    function trim(string, chars, guard) {\n","\t      string = toString(string);\n","\t      if (string && (guard || chars === undefined)) {\n","\t        return string.replace(reTrim, '');\n","\t      }\n","\t      if (!string || !(chars = baseToString(chars))) {\n","\t        return string;\n","\t      }\n","\t      var strSymbols = stringToArray(string),\n","\t          chrSymbols = stringToArray(chars),\n","\t          start = charsStartIndex(strSymbols, chrSymbols),\n","\t          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n","\t\n","\t      return castSlice(strSymbols, start, end).join('');\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes trailing whitespace or specified characters from `string`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to trim.\n","\t     * @param {string} [chars=whitespace] The characters to trim.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {string} Returns the trimmed string.\n","\t     * @example\n","\t     *\n","\t     * _.trimEnd('  abc  ');\n","\t     * // => '  abc'\n","\t     *\n","\t     * _.trimEnd('-_-abc-_-', '_-');\n","\t     * // => '-_-abc'\n","\t     */\n","\t    function trimEnd(string, chars, guard) {\n","\t      string = toString(string);\n","\t      if (string && (guard || chars === undefined)) {\n","\t        return string.replace(reTrimEnd, '');\n","\t      }\n","\t      if (!string || !(chars = baseToString(chars))) {\n","\t        return string;\n","\t      }\n","\t      var strSymbols = stringToArray(string),\n","\t          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n","\t\n","\t      return castSlice(strSymbols, 0, end).join('');\n","\t    }\n","\t\n","\t    /**\n","\t     * Removes leading whitespace or specified characters from `string`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to trim.\n","\t     * @param {string} [chars=whitespace] The characters to trim.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {string} Returns the trimmed string.\n","\t     * @example\n","\t     *\n","\t     * _.trimStart('  abc  ');\n","\t     * // => 'abc  '\n","\t     *\n","\t     * _.trimStart('-_-abc-_-', '_-');\n","\t     * // => 'abc-_-'\n","\t     */\n","\t    function trimStart(string, chars, guard) {\n","\t      string = toString(string);\n","\t      if (string && (guard || chars === undefined)) {\n","\t        return string.replace(reTrimStart, '');\n","\t      }\n","\t      if (!string || !(chars = baseToString(chars))) {\n","\t        return string;\n","\t      }\n","\t      var strSymbols = stringToArray(string),\n","\t          start = charsStartIndex(strSymbols, stringToArray(chars));\n","\t\n","\t      return castSlice(strSymbols, start).join('');\n","\t    }\n","\t\n","\t    /**\n","\t     * Truncates `string` if it's longer than the given maximum string length.\n","\t     * The last characters of the truncated string are replaced with the omission\n","\t     * string which defaults to \"...\".\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to truncate.\n","\t     * @param {Object} [options={}] The options object.\n","\t     * @param {number} [options.length=30] The maximum string length.\n","\t     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n","\t     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n","\t     * @returns {string} Returns the truncated string.\n","\t     * @example\n","\t     *\n","\t     * _.truncate('hi-diddly-ho there, neighborino');\n","\t     * // => 'hi-diddly-ho there, neighbo...'\n","\t     *\n","\t     * _.truncate('hi-diddly-ho there, neighborino', {\n","\t     *   'length': 24,\n","\t     *   'separator': ' '\n","\t     * });\n","\t     * // => 'hi-diddly-ho there,...'\n","\t     *\n","\t     * _.truncate('hi-diddly-ho there, neighborino', {\n","\t     *   'length': 24,\n","\t     *   'separator': /,? +/\n","\t     * });\n","\t     * // => 'hi-diddly-ho there...'\n","\t     *\n","\t     * _.truncate('hi-diddly-ho there, neighborino', {\n","\t     *   'omission': ' [...]'\n","\t     * });\n","\t     * // => 'hi-diddly-ho there, neig [...]'\n","\t     */\n","\t    function truncate(string, options) {\n","\t      var length = DEFAULT_TRUNC_LENGTH,\n","\t          omission = DEFAULT_TRUNC_OMISSION;\n","\t\n","\t      if (isObject(options)) {\n","\t        var separator = 'separator' in options ? options.separator : separator;\n","\t        length = 'length' in options ? toInteger(options.length) : length;\n","\t        omission = 'omission' in options ? baseToString(options.omission) : omission;\n","\t      }\n","\t      string = toString(string);\n","\t\n","\t      var strLength = string.length;\n","\t      if (hasUnicode(string)) {\n","\t        var strSymbols = stringToArray(string);\n","\t        strLength = strSymbols.length;\n","\t      }\n","\t      if (length >= strLength) {\n","\t        return string;\n","\t      }\n","\t      var end = length - stringSize(omission);\n","\t      if (end < 1) {\n","\t        return omission;\n","\t      }\n","\t      var result = strSymbols\n","\t        ? castSlice(strSymbols, 0, end).join('')\n","\t        : string.slice(0, end);\n","\t\n","\t      if (separator === undefined) {\n","\t        return result + omission;\n","\t      }\n","\t      if (strSymbols) {\n","\t        end += (result.length - end);\n","\t      }\n","\t      if (isRegExp(separator)) {\n","\t        if (string.slice(end).search(separator)) {\n","\t          var match,\n","\t              substring = result;\n","\t\n","\t          if (!separator.global) {\n","\t            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n","\t          }\n","\t          separator.lastIndex = 0;\n","\t          while ((match = separator.exec(substring))) {\n","\t            var newEnd = match.index;\n","\t          }\n","\t          result = result.slice(0, newEnd === undefined ? end : newEnd);\n","\t        }\n","\t      } else if (string.indexOf(baseToString(separator), end) != end) {\n","\t        var index = result.lastIndexOf(separator);\n","\t        if (index > -1) {\n","\t          result = result.slice(0, index);\n","\t        }\n","\t      }\n","\t      return result + omission;\n","\t    }\n","\t\n","\t    /**\n","\t     * The inverse of `_.escape`; this method converts the HTML entities\n","\t     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n","\t     * their corresponding characters.\n","\t     *\n","\t     * **Note:** No other HTML entities are unescaped. To unescape additional\n","\t     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 0.6.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to unescape.\n","\t     * @returns {string} Returns the unescaped string.\n","\t     * @example\n","\t     *\n","\t     * _.unescape('fred, barney, &amp; pebbles');\n","\t     * // => 'fred, barney, & pebbles'\n","\t     */\n","\t    function unescape(string) {\n","\t      string = toString(string);\n","\t      return (string && reHasEscapedHtml.test(string))\n","\t        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n","\t        : string;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `string`, as space separated words, to upper case.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the upper cased string.\n","\t     * @example\n","\t     *\n","\t     * _.upperCase('--foo-bar');\n","\t     * // => 'FOO BAR'\n","\t     *\n","\t     * _.upperCase('fooBar');\n","\t     * // => 'FOO BAR'\n","\t     *\n","\t     * _.upperCase('__foo_bar__');\n","\t     * // => 'FOO BAR'\n","\t     */\n","\t    var upperCase = createCompounder(function(result, word, index) {\n","\t      return result + (index ? ' ' : '') + word.toUpperCase();\n","\t    });\n","\t\n","\t    /**\n","\t     * Converts the first character of `string` to upper case.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to convert.\n","\t     * @returns {string} Returns the converted string.\n","\t     * @example\n","\t     *\n","\t     * _.upperFirst('fred');\n","\t     * // => 'Fred'\n","\t     *\n","\t     * _.upperFirst('FRED');\n","\t     * // => 'FRED'\n","\t     */\n","\t    var upperFirst = createCaseFirst('toUpperCase');\n","\t\n","\t    /**\n","\t     * Splits `string` into an array of its words.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category String\n","\t     * @param {string} [string=''] The string to inspect.\n","\t     * @param {RegExp|string} [pattern] The pattern to match words.\n","\t     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n","\t     * @returns {Array} Returns the words of `string`.\n","\t     * @example\n","\t     *\n","\t     * _.words('fred, barney, & pebbles');\n","\t     * // => ['fred', 'barney', 'pebbles']\n","\t     *\n","\t     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n","\t     * // => ['fred', 'barney', '&', 'pebbles']\n","\t     */\n","\t    function words(string, pattern, guard) {\n","\t      string = toString(string);\n","\t      pattern = guard ? undefined : pattern;\n","\t\n","\t      if (pattern === undefined) {\n","\t        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n","\t      }\n","\t      return string.match(pattern) || [];\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Attempts to invoke `func`, returning either the result or the caught error\n","\t     * object. Any additional arguments are provided to `func` when it's invoked.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Util\n","\t     * @param {Function} func The function to attempt.\n","\t     * @param {...*} [args] The arguments to invoke `func` with.\n","\t     * @returns {*} Returns the `func` result or error object.\n","\t     * @example\n","\t     *\n","\t     * // Avoid throwing errors for invalid selectors.\n","\t     * var elements = _.attempt(function(selector) {\n","\t     *   return document.querySelectorAll(selector);\n","\t     * }, '>_>');\n","\t     *\n","\t     * if (_.isError(elements)) {\n","\t     *   elements = [];\n","\t     * }\n","\t     */\n","\t    var attempt = baseRest(function(func, args) {\n","\t      try {\n","\t        return apply(func, undefined, args);\n","\t      } catch (e) {\n","\t        return isError(e) ? e : new Error(e);\n","\t      }\n","\t    });\n","\t\n","\t    /**\n","\t     * Binds methods of an object to the object itself, overwriting the existing\n","\t     * method.\n","\t     *\n","\t     * **Note:** This method doesn't set the \"length\" property of bound functions.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {Object} object The object to bind and assign the bound methods to.\n","\t     * @param {...(string|string[])} methodNames The object method names to bind.\n","\t     * @returns {Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * var view = {\n","\t     *   'label': 'docs',\n","\t     *   'click': function() {\n","\t     *     console.log('clicked ' + this.label);\n","\t     *   }\n","\t     * };\n","\t     *\n","\t     * _.bindAll(view, ['click']);\n","\t     * jQuery(element).on('click', view.click);\n","\t     * // => Logs 'clicked docs' when clicked.\n","\t     */\n","\t    var bindAll = flatRest(function(object, methodNames) {\n","\t      arrayEach(methodNames, function(key) {\n","\t        key = toKey(key);\n","\t        baseAssignValue(object, key, bind(object[key], object));\n","\t      });\n","\t      return object;\n","\t    });\n","\t\n","\t    /**\n","\t     * Creates a function that iterates over `pairs` and invokes the corresponding\n","\t     * function of the first predicate to return truthy. The predicate-function\n","\t     * pairs are invoked with the `this` binding and arguments of the created\n","\t     * function.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {Array} pairs The predicate-function pairs.\n","\t     * @returns {Function} Returns the new composite function.\n","\t     * @example\n","\t     *\n","\t     * var func = _.cond([\n","\t     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n","\t     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n","\t     *   [_.stubTrue,                      _.constant('no match')]\n","\t     * ]);\n","\t     *\n","\t     * func({ 'a': 1, 'b': 2 });\n","\t     * // => 'matches A'\n","\t     *\n","\t     * func({ 'a': 0, 'b': 1 });\n","\t     * // => 'matches B'\n","\t     *\n","\t     * func({ 'a': '1', 'b': '2' });\n","\t     * // => 'no match'\n","\t     */\n","\t    function cond(pairs) {\n","\t      var length = pairs == null ? 0 : pairs.length,\n","\t          toIteratee = getIteratee();\n","\t\n","\t      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n","\t        if (typeof pair[1] != 'function') {\n","\t          throw new TypeError(FUNC_ERROR_TEXT);\n","\t        }\n","\t        return [toIteratee(pair[0]), pair[1]];\n","\t      });\n","\t\n","\t      return baseRest(function(args) {\n","\t        var index = -1;\n","\t        while (++index < length) {\n","\t          var pair = pairs[index];\n","\t          if (apply(pair[0], this, args)) {\n","\t            return apply(pair[1], this, args);\n","\t          }\n","\t        }\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes the predicate properties of `source` with\n","\t     * the corresponding property values of a given object, returning `true` if\n","\t     * all predicates return truthy, else `false`.\n","\t     *\n","\t     * **Note:** The created function is equivalent to `_.conformsTo` with\n","\t     * `source` partially applied.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {Object} source The object of property predicates to conform to.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     * @example\n","\t     *\n","\t     * var objects = [\n","\t     *   { 'a': 2, 'b': 1 },\n","\t     *   { 'a': 1, 'b': 2 }\n","\t     * ];\n","\t     *\n","\t     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n","\t     * // => [{ 'a': 1, 'b': 2 }]\n","\t     */\n","\t    function conforms(source) {\n","\t      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that returns `value`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.4.0\n","\t     * @category Util\n","\t     * @param {*} value The value to return from the new function.\n","\t     * @returns {Function} Returns the new constant function.\n","\t     * @example\n","\t     *\n","\t     * var objects = _.times(2, _.constant({ 'a': 1 }));\n","\t     *\n","\t     * console.log(objects);\n","\t     * // => [{ 'a': 1 }, { 'a': 1 }]\n","\t     *\n","\t     * console.log(objects[0] === objects[1]);\n","\t     * // => true\n","\t     */\n","\t    function constant(value) {\n","\t      return function() {\n","\t        return value;\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Checks `value` to determine whether a default value should be returned in\n","\t     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n","\t     * or `undefined`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.14.0\n","\t     * @category Util\n","\t     * @param {*} value The value to check.\n","\t     * @param {*} defaultValue The default value.\n","\t     * @returns {*} Returns the resolved value.\n","\t     * @example\n","\t     *\n","\t     * _.defaultTo(1, 10);\n","\t     * // => 1\n","\t     *\n","\t     * _.defaultTo(undefined, 10);\n","\t     * // => 10\n","\t     */\n","\t    function defaultTo(value, defaultValue) {\n","\t      return (value == null || value !== value) ? defaultValue : value;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that returns the result of invoking the given functions\n","\t     * with the `this` binding of the created function, where each successive\n","\t     * invocation is supplied the return value of the previous.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Util\n","\t     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n","\t     * @returns {Function} Returns the new composite function.\n","\t     * @see _.flowRight\n","\t     * @example\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * var addSquare = _.flow([_.add, square]);\n","\t     * addSquare(1, 2);\n","\t     * // => 9\n","\t     */\n","\t    var flow = createFlow();\n","\t\n","\t    /**\n","\t     * This method is like `_.flow` except that it creates a function that\n","\t     * invokes the given functions from right to left.\n","\t     *\n","\t     * @static\n","\t     * @since 3.0.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n","\t     * @returns {Function} Returns the new composite function.\n","\t     * @see _.flow\n","\t     * @example\n","\t     *\n","\t     * function square(n) {\n","\t     *   return n * n;\n","\t     * }\n","\t     *\n","\t     * var addSquare = _.flowRight([square, _.add]);\n","\t     * addSquare(1, 2);\n","\t     * // => 9\n","\t     */\n","\t    var flowRight = createFlow(true);\n","\t\n","\t    /**\n","\t     * This method returns the first argument it receives.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {*} value Any value.\n","\t     * @returns {*} Returns `value`.\n","\t     * @example\n","\t     *\n","\t     * var object = { 'a': 1 };\n","\t     *\n","\t     * console.log(_.identity(object) === object);\n","\t     * // => true\n","\t     */\n","\t    function identity(value) {\n","\t      return value;\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `func` with the arguments of the created\n","\t     * function. If `func` is a property name, the created function returns the\n","\t     * property value for a given element. If `func` is an array or object, the\n","\t     * created function returns `true` for elements that contain the equivalent\n","\t     * source properties, otherwise it returns `false`.\n","\t     *\n","\t     * @static\n","\t     * @since 4.0.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {*} [func=_.identity] The value to convert to a callback.\n","\t     * @returns {Function} Returns the callback.\n","\t     * @example\n","\t     *\n","\t     * var users = [\n","\t     *   { 'user': 'barney', 'age': 36, 'active': true },\n","\t     *   { 'user': 'fred',   'age': 40, 'active': false }\n","\t     * ];\n","\t     *\n","\t     * // The `_.matches` iteratee shorthand.\n","\t     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n","\t     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n","\t     *\n","\t     * // The `_.matchesProperty` iteratee shorthand.\n","\t     * _.filter(users, _.iteratee(['user', 'fred']));\n","\t     * // => [{ 'user': 'fred', 'age': 40 }]\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.map(users, _.iteratee('user'));\n","\t     * // => ['barney', 'fred']\n","\t     *\n","\t     * // Create custom iteratee shorthands.\n","\t     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n","\t     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n","\t     *     return func.test(string);\n","\t     *   };\n","\t     * });\n","\t     *\n","\t     * _.filter(['abc', 'def'], /ef/);\n","\t     * // => ['def']\n","\t     */\n","\t    function iteratee(func) {\n","\t      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that performs a partial deep comparison between a given\n","\t     * object and `source`, returning `true` if the given object has equivalent\n","\t     * property values, else `false`.\n","\t     *\n","\t     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n","\t     * partially applied.\n","\t     *\n","\t     * Partial comparisons will match empty array and empty object `source`\n","\t     * values against any array or object value, respectively. See `_.isEqual`\n","\t     * for a list of supported value comparisons.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Util\n","\t     * @param {Object} source The object of property values to match.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     * @example\n","\t     *\n","\t     * var objects = [\n","\t     *   { 'a': 1, 'b': 2, 'c': 3 },\n","\t     *   { 'a': 4, 'b': 5, 'c': 6 }\n","\t     * ];\n","\t     *\n","\t     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n","\t     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n","\t     */\n","\t    function matches(source) {\n","\t      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that performs a partial deep comparison between the\n","\t     * value at `path` of a given object to `srcValue`, returning `true` if the\n","\t     * object value is equivalent, else `false`.\n","\t     *\n","\t     * **Note:** Partial comparisons will match empty array and empty object\n","\t     * `srcValue` values against any array or object value, respectively. See\n","\t     * `_.isEqual` for a list of supported value comparisons.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.2.0\n","\t     * @category Util\n","\t     * @param {Array|string} path The path of the property to get.\n","\t     * @param {*} srcValue The value to match.\n","\t     * @returns {Function} Returns the new spec function.\n","\t     * @example\n","\t     *\n","\t     * var objects = [\n","\t     *   { 'a': 1, 'b': 2, 'c': 3 },\n","\t     *   { 'a': 4, 'b': 5, 'c': 6 }\n","\t     * ];\n","\t     *\n","\t     * _.find(objects, _.matchesProperty('a', 4));\n","\t     * // => { 'a': 4, 'b': 5, 'c': 6 }\n","\t     */\n","\t    function matchesProperty(path, srcValue) {\n","\t      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes the method at `path` of a given object.\n","\t     * Any additional arguments are provided to the invoked method.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.7.0\n","\t     * @category Util\n","\t     * @param {Array|string} path The path of the method to invoke.\n","\t     * @param {...*} [args] The arguments to invoke the method with.\n","\t     * @returns {Function} Returns the new invoker function.\n","\t     * @example\n","\t     *\n","\t     * var objects = [\n","\t     *   { 'a': { 'b': _.constant(2) } },\n","\t     *   { 'a': { 'b': _.constant(1) } }\n","\t     * ];\n","\t     *\n","\t     * _.map(objects, _.method('a.b'));\n","\t     * // => [2, 1]\n","\t     *\n","\t     * _.map(objects, _.method(['a', 'b']));\n","\t     * // => [2, 1]\n","\t     */\n","\t    var method = baseRest(function(path, args) {\n","\t      return function(object) {\n","\t        return baseInvoke(object, path, args);\n","\t      };\n","\t    });\n","\t\n","\t    /**\n","\t     * The opposite of `_.method`; this method creates a function that invokes\n","\t     * the method at a given path of `object`. Any additional arguments are\n","\t     * provided to the invoked method.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.7.0\n","\t     * @category Util\n","\t     * @param {Object} object The object to query.\n","\t     * @param {...*} [args] The arguments to invoke the method with.\n","\t     * @returns {Function} Returns the new invoker function.\n","\t     * @example\n","\t     *\n","\t     * var array = _.times(3, _.constant),\n","\t     *     object = { 'a': array, 'b': array, 'c': array };\n","\t     *\n","\t     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n","\t     * // => [2, 0]\n","\t     *\n","\t     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n","\t     * // => [2, 0]\n","\t     */\n","\t    var methodOf = baseRest(function(object, args) {\n","\t      return function(path) {\n","\t        return baseInvoke(object, path, args);\n","\t      };\n","\t    });\n","\t\n","\t    /**\n","\t     * Adds all own enumerable string keyed function properties of a source\n","\t     * object to the destination object. If `object` is a function, then methods\n","\t     * are added to its prototype as well.\n","\t     *\n","\t     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n","\t     * avoid conflicts caused by modifying the original.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {Function|Object} [object=lodash] The destination object.\n","\t     * @param {Object} source The object of functions to add.\n","\t     * @param {Object} [options={}] The options object.\n","\t     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n","\t     * @returns {Function|Object} Returns `object`.\n","\t     * @example\n","\t     *\n","\t     * function vowels(string) {\n","\t     *   return _.filter(string, function(v) {\n","\t     *     return /[aeiou]/i.test(v);\n","\t     *   });\n","\t     * }\n","\t     *\n","\t     * _.mixin({ 'vowels': vowels });\n","\t     * _.vowels('fred');\n","\t     * // => ['e']\n","\t     *\n","\t     * _('fred').vowels().value();\n","\t     * // => ['e']\n","\t     *\n","\t     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n","\t     * _('fred').vowels();\n","\t     * // => ['e']\n","\t     */\n","\t    function mixin(object, source, options) {\n","\t      var props = keys(source),\n","\t          methodNames = baseFunctions(source, props);\n","\t\n","\t      if (options == null &&\n","\t          !(isObject(source) && (methodNames.length || !props.length))) {\n","\t        options = source;\n","\t        source = object;\n","\t        object = this;\n","\t        methodNames = baseFunctions(source, keys(source));\n","\t      }\n","\t      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n","\t          isFunc = isFunction(object);\n","\t\n","\t      arrayEach(methodNames, function(methodName) {\n","\t        var func = source[methodName];\n","\t        object[methodName] = func;\n","\t        if (isFunc) {\n","\t          object.prototype[methodName] = function() {\n","\t            var chainAll = this.__chain__;\n","\t            if (chain || chainAll) {\n","\t              var result = object(this.__wrapped__),\n","\t                  actions = result.__actions__ = copyArray(this.__actions__);\n","\t\n","\t              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n","\t              result.__chain__ = chainAll;\n","\t              return result;\n","\t            }\n","\t            return func.apply(object, arrayPush([this.value()], arguments));\n","\t          };\n","\t        }\n","\t      });\n","\t\n","\t      return object;\n","\t    }\n","\t\n","\t    /**\n","\t     * Reverts the `_` variable to its previous value and returns a reference to\n","\t     * the `lodash` function.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @returns {Function} Returns the `lodash` function.\n","\t     * @example\n","\t     *\n","\t     * var lodash = _.noConflict();\n","\t     */\n","\t    function noConflict() {\n","\t      if (root._ === this) {\n","\t        root._ = oldDash;\n","\t      }\n","\t      return this;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method returns `undefined`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.3.0\n","\t     * @category Util\n","\t     * @example\n","\t     *\n","\t     * _.times(2, _.noop);\n","\t     * // => [undefined, undefined]\n","\t     */\n","\t    function noop() {\n","\t      // No operation performed.\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that gets the argument at index `n`. If `n` is negative,\n","\t     * the nth argument from the end is returned.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {number} [n=0] The index of the argument to return.\n","\t     * @returns {Function} Returns the new pass-thru function.\n","\t     * @example\n","\t     *\n","\t     * var func = _.nthArg(1);\n","\t     * func('a', 'b', 'c', 'd');\n","\t     * // => 'b'\n","\t     *\n","\t     * var func = _.nthArg(-2);\n","\t     * func('a', 'b', 'c', 'd');\n","\t     * // => 'c'\n","\t     */\n","\t    function nthArg(n) {\n","\t      n = toInteger(n);\n","\t      return baseRest(function(args) {\n","\t        return baseNth(args, n);\n","\t      });\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates a function that invokes `iteratees` with the arguments it receives\n","\t     * and returns their results.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n","\t     *  The iteratees to invoke.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var func = _.over([Math.max, Math.min]);\n","\t     *\n","\t     * func(1, 2, 3, 4);\n","\t     * // => [4, 1]\n","\t     */\n","\t    var over = createOver(arrayMap);\n","\t\n","\t    /**\n","\t     * Creates a function that checks if **all** of the `predicates` return\n","\t     * truthy when invoked with the arguments it receives.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {...(Function|Function[])} [predicates=[_.identity]]\n","\t     *  The predicates to check.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var func = _.overEvery([Boolean, isFinite]);\n","\t     *\n","\t     * func('1');\n","\t     * // => true\n","\t     *\n","\t     * func(null);\n","\t     * // => false\n","\t     *\n","\t     * func(NaN);\n","\t     * // => false\n","\t     */\n","\t    var overEvery = createOver(arrayEvery);\n","\t\n","\t    /**\n","\t     * Creates a function that checks if **any** of the `predicates` return\n","\t     * truthy when invoked with the arguments it receives.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {...(Function|Function[])} [predicates=[_.identity]]\n","\t     *  The predicates to check.\n","\t     * @returns {Function} Returns the new function.\n","\t     * @example\n","\t     *\n","\t     * var func = _.overSome([Boolean, isFinite]);\n","\t     *\n","\t     * func('1');\n","\t     * // => true\n","\t     *\n","\t     * func(null);\n","\t     * // => true\n","\t     *\n","\t     * func(NaN);\n","\t     * // => false\n","\t     */\n","\t    var overSome = createOver(arraySome);\n","\t\n","\t    /**\n","\t     * Creates a function that returns the value at `path` of a given object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 2.4.0\n","\t     * @category Util\n","\t     * @param {Array|string} path The path of the property to get.\n","\t     * @returns {Function} Returns the new accessor function.\n","\t     * @example\n","\t     *\n","\t     * var objects = [\n","\t     *   { 'a': { 'b': 2 } },\n","\t     *   { 'a': { 'b': 1 } }\n","\t     * ];\n","\t     *\n","\t     * _.map(objects, _.property('a.b'));\n","\t     * // => [2, 1]\n","\t     *\n","\t     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n","\t     * // => [1, 2]\n","\t     */\n","\t    function property(path) {\n","\t      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n","\t    }\n","\t\n","\t    /**\n","\t     * The opposite of `_.property`; this method creates a function that returns\n","\t     * the value at a given path of `object`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.0.0\n","\t     * @category Util\n","\t     * @param {Object} object The object to query.\n","\t     * @returns {Function} Returns the new accessor function.\n","\t     * @example\n","\t     *\n","\t     * var array = [0, 1, 2],\n","\t     *     object = { 'a': array, 'b': array, 'c': array };\n","\t     *\n","\t     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n","\t     * // => [2, 0]\n","\t     *\n","\t     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n","\t     * // => [2, 0]\n","\t     */\n","\t    function propertyOf(object) {\n","\t      return function(path) {\n","\t        return object == null ? undefined : baseGet(object, path);\n","\t      };\n","\t    }\n","\t\n","\t    /**\n","\t     * Creates an array of numbers (positive and/or negative) progressing from\n","\t     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n","\t     * `start` is specified without an `end` or `step`. If `end` is not specified,\n","\t     * it's set to `start` with `start` then set to `0`.\n","\t     *\n","\t     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n","\t     * floating-point values which can produce unexpected results.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {number} [start=0] The start of the range.\n","\t     * @param {number} end The end of the range.\n","\t     * @param {number} [step=1] The value to increment or decrement by.\n","\t     * @returns {Array} Returns the range of numbers.\n","\t     * @see _.inRange, _.rangeRight\n","\t     * @example\n","\t     *\n","\t     * _.range(4);\n","\t     * // => [0, 1, 2, 3]\n","\t     *\n","\t     * _.range(-4);\n","\t     * // => [0, -1, -2, -3]\n","\t     *\n","\t     * _.range(1, 5);\n","\t     * // => [1, 2, 3, 4]\n","\t     *\n","\t     * _.range(0, 20, 5);\n","\t     * // => [0, 5, 10, 15]\n","\t     *\n","\t     * _.range(0, -4, -1);\n","\t     * // => [0, -1, -2, -3]\n","\t     *\n","\t     * _.range(1, 4, 0);\n","\t     * // => [1, 1, 1]\n","\t     *\n","\t     * _.range(0);\n","\t     * // => []\n","\t     */\n","\t    var range = createRange();\n","\t\n","\t    /**\n","\t     * This method is like `_.range` except that it populates values in\n","\t     * descending order.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {number} [start=0] The start of the range.\n","\t     * @param {number} end The end of the range.\n","\t     * @param {number} [step=1] The value to increment or decrement by.\n","\t     * @returns {Array} Returns the range of numbers.\n","\t     * @see _.inRange, _.range\n","\t     * @example\n","\t     *\n","\t     * _.rangeRight(4);\n","\t     * // => [3, 2, 1, 0]\n","\t     *\n","\t     * _.rangeRight(-4);\n","\t     * // => [-3, -2, -1, 0]\n","\t     *\n","\t     * _.rangeRight(1, 5);\n","\t     * // => [4, 3, 2, 1]\n","\t     *\n","\t     * _.rangeRight(0, 20, 5);\n","\t     * // => [15, 10, 5, 0]\n","\t     *\n","\t     * _.rangeRight(0, -4, -1);\n","\t     * // => [-3, -2, -1, 0]\n","\t     *\n","\t     * _.rangeRight(1, 4, 0);\n","\t     * // => [1, 1, 1]\n","\t     *\n","\t     * _.rangeRight(0);\n","\t     * // => []\n","\t     */\n","\t    var rangeRight = createRange(true);\n","\t\n","\t    /**\n","\t     * This method returns a new empty array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.13.0\n","\t     * @category Util\n","\t     * @returns {Array} Returns the new empty array.\n","\t     * @example\n","\t     *\n","\t     * var arrays = _.times(2, _.stubArray);\n","\t     *\n","\t     * console.log(arrays);\n","\t     * // => [[], []]\n","\t     *\n","\t     * console.log(arrays[0] === arrays[1]);\n","\t     * // => false\n","\t     */\n","\t    function stubArray() {\n","\t      return [];\n","\t    }\n","\t\n","\t    /**\n","\t     * This method returns `false`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.13.0\n","\t     * @category Util\n","\t     * @returns {boolean} Returns `false`.\n","\t     * @example\n","\t     *\n","\t     * _.times(2, _.stubFalse);\n","\t     * // => [false, false]\n","\t     */\n","\t    function stubFalse() {\n","\t      return false;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method returns a new empty object.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.13.0\n","\t     * @category Util\n","\t     * @returns {Object} Returns the new empty object.\n","\t     * @example\n","\t     *\n","\t     * var objects = _.times(2, _.stubObject);\n","\t     *\n","\t     * console.log(objects);\n","\t     * // => [{}, {}]\n","\t     *\n","\t     * console.log(objects[0] === objects[1]);\n","\t     * // => false\n","\t     */\n","\t    function stubObject() {\n","\t      return {};\n","\t    }\n","\t\n","\t    /**\n","\t     * This method returns an empty string.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.13.0\n","\t     * @category Util\n","\t     * @returns {string} Returns the empty string.\n","\t     * @example\n","\t     *\n","\t     * _.times(2, _.stubString);\n","\t     * // => ['', '']\n","\t     */\n","\t    function stubString() {\n","\t      return '';\n","\t    }\n","\t\n","\t    /**\n","\t     * This method returns `true`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.13.0\n","\t     * @category Util\n","\t     * @returns {boolean} Returns `true`.\n","\t     * @example\n","\t     *\n","\t     * _.times(2, _.stubTrue);\n","\t     * // => [true, true]\n","\t     */\n","\t    function stubTrue() {\n","\t      return true;\n","\t    }\n","\t\n","\t    /**\n","\t     * Invokes the iteratee `n` times, returning an array of the results of\n","\t     * each invocation. The iteratee is invoked with one argument; (index).\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {number} n The number of times to invoke `iteratee`.\n","\t     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n","\t     * @returns {Array} Returns the array of results.\n","\t     * @example\n","\t     *\n","\t     * _.times(3, String);\n","\t     * // => ['0', '1', '2']\n","\t     *\n","\t     *  _.times(4, _.constant(0));\n","\t     * // => [0, 0, 0, 0]\n","\t     */\n","\t    function times(n, iteratee) {\n","\t      n = toInteger(n);\n","\t      if (n < 1 || n > MAX_SAFE_INTEGER) {\n","\t        return [];\n","\t      }\n","\t      var index = MAX_ARRAY_LENGTH,\n","\t          length = nativeMin(n, MAX_ARRAY_LENGTH);\n","\t\n","\t      iteratee = getIteratee(iteratee);\n","\t      n -= MAX_ARRAY_LENGTH;\n","\t\n","\t      var result = baseTimes(length, iteratee);\n","\t      while (++index < n) {\n","\t        iteratee(index);\n","\t      }\n","\t      return result;\n","\t    }\n","\t\n","\t    /**\n","\t     * Converts `value` to a property path array.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Util\n","\t     * @param {*} value The value to convert.\n","\t     * @returns {Array} Returns the new property path array.\n","\t     * @example\n","\t     *\n","\t     * _.toPath('a.b.c');\n","\t     * // => ['a', 'b', 'c']\n","\t     *\n","\t     * _.toPath('a[0].b.c');\n","\t     * // => ['a', '0', 'b', 'c']\n","\t     */\n","\t    function toPath(value) {\n","\t      if (isArray(value)) {\n","\t        return arrayMap(value, toKey);\n","\t      }\n","\t      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n","\t    }\n","\t\n","\t    /**\n","\t     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Util\n","\t     * @param {string} [prefix=''] The value to prefix the ID with.\n","\t     * @returns {string} Returns the unique ID.\n","\t     * @example\n","\t     *\n","\t     * _.uniqueId('contact_');\n","\t     * // => 'contact_104'\n","\t     *\n","\t     * _.uniqueId();\n","\t     * // => '105'\n","\t     */\n","\t    function uniqueId(prefix) {\n","\t      var id = ++idCounter;\n","\t      return toString(prefix) + id;\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * Adds two numbers.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.4.0\n","\t     * @category Math\n","\t     * @param {number} augend The first number in an addition.\n","\t     * @param {number} addend The second number in an addition.\n","\t     * @returns {number} Returns the total.\n","\t     * @example\n","\t     *\n","\t     * _.add(6, 4);\n","\t     * // => 10\n","\t     */\n","\t    var add = createMathOperation(function(augend, addend) {\n","\t      return augend + addend;\n","\t    }, 0);\n","\t\n","\t    /**\n","\t     * Computes `number` rounded up to `precision`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.10.0\n","\t     * @category Math\n","\t     * @param {number} number The number to round up.\n","\t     * @param {number} [precision=0] The precision to round up to.\n","\t     * @returns {number} Returns the rounded up number.\n","\t     * @example\n","\t     *\n","\t     * _.ceil(4.006);\n","\t     * // => 5\n","\t     *\n","\t     * _.ceil(6.004, 2);\n","\t     * // => 6.01\n","\t     *\n","\t     * _.ceil(6040, -2);\n","\t     * // => 6100\n","\t     */\n","\t    var ceil = createRound('ceil');\n","\t\n","\t    /**\n","\t     * Divide two numbers.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.7.0\n","\t     * @category Math\n","\t     * @param {number} dividend The first number in a division.\n","\t     * @param {number} divisor The second number in a division.\n","\t     * @returns {number} Returns the quotient.\n","\t     * @example\n","\t     *\n","\t     * _.divide(6, 4);\n","\t     * // => 1.5\n","\t     */\n","\t    var divide = createMathOperation(function(dividend, divisor) {\n","\t      return dividend / divisor;\n","\t    }, 1);\n","\t\n","\t    /**\n","\t     * Computes `number` rounded down to `precision`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.10.0\n","\t     * @category Math\n","\t     * @param {number} number The number to round down.\n","\t     * @param {number} [precision=0] The precision to round down to.\n","\t     * @returns {number} Returns the rounded down number.\n","\t     * @example\n","\t     *\n","\t     * _.floor(4.006);\n","\t     * // => 4\n","\t     *\n","\t     * _.floor(0.046, 2);\n","\t     * // => 0.04\n","\t     *\n","\t     * _.floor(4060, -2);\n","\t     * // => 4000\n","\t     */\n","\t    var floor = createRound('floor');\n","\t\n","\t    /**\n","\t     * Computes the maximum value of `array`. If `array` is empty or falsey,\n","\t     * `undefined` is returned.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @returns {*} Returns the maximum value.\n","\t     * @example\n","\t     *\n","\t     * _.max([4, 2, 8, 6]);\n","\t     * // => 8\n","\t     *\n","\t     * _.max([]);\n","\t     * // => undefined\n","\t     */\n","\t    function max(array) {\n","\t      return (array && array.length)\n","\t        ? baseExtremum(array, identity, baseGt)\n","\t        : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.max` except that it accepts `iteratee` which is\n","\t     * invoked for each element in `array` to generate the criterion by which\n","\t     * the value is ranked. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {*} Returns the maximum value.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n","\t     *\n","\t     * _.maxBy(objects, function(o) { return o.n; });\n","\t     * // => { 'n': 2 }\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.maxBy(objects, 'n');\n","\t     * // => { 'n': 2 }\n","\t     */\n","\t    function maxBy(array, iteratee) {\n","\t      return (array && array.length)\n","\t        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n","\t        : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Computes the mean of the values in `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @returns {number} Returns the mean.\n","\t     * @example\n","\t     *\n","\t     * _.mean([4, 2, 8, 6]);\n","\t     * // => 5\n","\t     */\n","\t    function mean(array) {\n","\t      return baseMean(array, identity);\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.mean` except that it accepts `iteratee` which is\n","\t     * invoked for each element in `array` to generate the value to be averaged.\n","\t     * The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.7.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {number} Returns the mean.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n","\t     *\n","\t     * _.meanBy(objects, function(o) { return o.n; });\n","\t     * // => 5\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.meanBy(objects, 'n');\n","\t     * // => 5\n","\t     */\n","\t    function meanBy(array, iteratee) {\n","\t      return baseMean(array, getIteratee(iteratee, 2));\n","\t    }\n","\t\n","\t    /**\n","\t     * Computes the minimum value of `array`. If `array` is empty or falsey,\n","\t     * `undefined` is returned.\n","\t     *\n","\t     * @static\n","\t     * @since 0.1.0\n","\t     * @memberOf _\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @returns {*} Returns the minimum value.\n","\t     * @example\n","\t     *\n","\t     * _.min([4, 2, 8, 6]);\n","\t     * // => 2\n","\t     *\n","\t     * _.min([]);\n","\t     * // => undefined\n","\t     */\n","\t    function min(array) {\n","\t      return (array && array.length)\n","\t        ? baseExtremum(array, identity, baseLt)\n","\t        : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.min` except that it accepts `iteratee` which is\n","\t     * invoked for each element in `array` to generate the criterion by which\n","\t     * the value is ranked. The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {*} Returns the minimum value.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n","\t     *\n","\t     * _.minBy(objects, function(o) { return o.n; });\n","\t     * // => { 'n': 1 }\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.minBy(objects, 'n');\n","\t     * // => { 'n': 1 }\n","\t     */\n","\t    function minBy(array, iteratee) {\n","\t      return (array && array.length)\n","\t        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n","\t        : undefined;\n","\t    }\n","\t\n","\t    /**\n","\t     * Multiply two numbers.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.7.0\n","\t     * @category Math\n","\t     * @param {number} multiplier The first number in a multiplication.\n","\t     * @param {number} multiplicand The second number in a multiplication.\n","\t     * @returns {number} Returns the product.\n","\t     * @example\n","\t     *\n","\t     * _.multiply(6, 4);\n","\t     * // => 24\n","\t     */\n","\t    var multiply = createMathOperation(function(multiplier, multiplicand) {\n","\t      return multiplier * multiplicand;\n","\t    }, 1);\n","\t\n","\t    /**\n","\t     * Computes `number` rounded to `precision`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.10.0\n","\t     * @category Math\n","\t     * @param {number} number The number to round.\n","\t     * @param {number} [precision=0] The precision to round to.\n","\t     * @returns {number} Returns the rounded number.\n","\t     * @example\n","\t     *\n","\t     * _.round(4.006);\n","\t     * // => 4\n","\t     *\n","\t     * _.round(4.006, 2);\n","\t     * // => 4.01\n","\t     *\n","\t     * _.round(4060, -2);\n","\t     * // => 4100\n","\t     */\n","\t    var round = createRound('round');\n","\t\n","\t    /**\n","\t     * Subtract two numbers.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Math\n","\t     * @param {number} minuend The first number in a subtraction.\n","\t     * @param {number} subtrahend The second number in a subtraction.\n","\t     * @returns {number} Returns the difference.\n","\t     * @example\n","\t     *\n","\t     * _.subtract(6, 4);\n","\t     * // => 2\n","\t     */\n","\t    var subtract = createMathOperation(function(minuend, subtrahend) {\n","\t      return minuend - subtrahend;\n","\t    }, 0);\n","\t\n","\t    /**\n","\t     * Computes the sum of the values in `array`.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 3.4.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @returns {number} Returns the sum.\n","\t     * @example\n","\t     *\n","\t     * _.sum([4, 2, 8, 6]);\n","\t     * // => 20\n","\t     */\n","\t    function sum(array) {\n","\t      return (array && array.length)\n","\t        ? baseSum(array, identity)\n","\t        : 0;\n","\t    }\n","\t\n","\t    /**\n","\t     * This method is like `_.sum` except that it accepts `iteratee` which is\n","\t     * invoked for each element in `array` to generate the value to be summed.\n","\t     * The iteratee is invoked with one argument: (value).\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @since 4.0.0\n","\t     * @category Math\n","\t     * @param {Array} array The array to iterate over.\n","\t     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n","\t     * @returns {number} Returns the sum.\n","\t     * @example\n","\t     *\n","\t     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n","\t     *\n","\t     * _.sumBy(objects, function(o) { return o.n; });\n","\t     * // => 20\n","\t     *\n","\t     * // The `_.property` iteratee shorthand.\n","\t     * _.sumBy(objects, 'n');\n","\t     * // => 20\n","\t     */\n","\t    function sumBy(array, iteratee) {\n","\t      return (array && array.length)\n","\t        ? baseSum(array, getIteratee(iteratee, 2))\n","\t        : 0;\n","\t    }\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    // Add methods that return wrapped values in chain sequences.\n","\t    lodash.after = after;\n","\t    lodash.ary = ary;\n","\t    lodash.assign = assign;\n","\t    lodash.assignIn = assignIn;\n","\t    lodash.assignInWith = assignInWith;\n","\t    lodash.assignWith = assignWith;\n","\t    lodash.at = at;\n","\t    lodash.before = before;\n","\t    lodash.bind = bind;\n","\t    lodash.bindAll = bindAll;\n","\t    lodash.bindKey = bindKey;\n","\t    lodash.castArray = castArray;\n","\t    lodash.chain = chain;\n","\t    lodash.chunk = chunk;\n","\t    lodash.compact = compact;\n","\t    lodash.concat = concat;\n","\t    lodash.cond = cond;\n","\t    lodash.conforms = conforms;\n","\t    lodash.constant = constant;\n","\t    lodash.countBy = countBy;\n","\t    lodash.create = create;\n","\t    lodash.curry = curry;\n","\t    lodash.curryRight = curryRight;\n","\t    lodash.debounce = debounce;\n","\t    lodash.defaults = defaults;\n","\t    lodash.defaultsDeep = defaultsDeep;\n","\t    lodash.defer = defer;\n","\t    lodash.delay = delay;\n","\t    lodash.difference = difference;\n","\t    lodash.differenceBy = differenceBy;\n","\t    lodash.differenceWith = differenceWith;\n","\t    lodash.drop = drop;\n","\t    lodash.dropRight = dropRight;\n","\t    lodash.dropRightWhile = dropRightWhile;\n","\t    lodash.dropWhile = dropWhile;\n","\t    lodash.fill = fill;\n","\t    lodash.filter = filter;\n","\t    lodash.flatMap = flatMap;\n","\t    lodash.flatMapDeep = flatMapDeep;\n","\t    lodash.flatMapDepth = flatMapDepth;\n","\t    lodash.flatten = flatten;\n","\t    lodash.flattenDeep = flattenDeep;\n","\t    lodash.flattenDepth = flattenDepth;\n","\t    lodash.flip = flip;\n","\t    lodash.flow = flow;\n","\t    lodash.flowRight = flowRight;\n","\t    lodash.fromPairs = fromPairs;\n","\t    lodash.functions = functions;\n","\t    lodash.functionsIn = functionsIn;\n","\t    lodash.groupBy = groupBy;\n","\t    lodash.initial = initial;\n","\t    lodash.intersection = intersection;\n","\t    lodash.intersectionBy = intersectionBy;\n","\t    lodash.intersectionWith = intersectionWith;\n","\t    lodash.invert = invert;\n","\t    lodash.invertBy = invertBy;\n","\t    lodash.invokeMap = invokeMap;\n","\t    lodash.iteratee = iteratee;\n","\t    lodash.keyBy = keyBy;\n","\t    lodash.keys = keys;\n","\t    lodash.keysIn = keysIn;\n","\t    lodash.map = map;\n","\t    lodash.mapKeys = mapKeys;\n","\t    lodash.mapValues = mapValues;\n","\t    lodash.matches = matches;\n","\t    lodash.matchesProperty = matchesProperty;\n","\t    lodash.memoize = memoize;\n","\t    lodash.merge = merge;\n","\t    lodash.mergeWith = mergeWith;\n","\t    lodash.method = method;\n","\t    lodash.methodOf = methodOf;\n","\t    lodash.mixin = mixin;\n","\t    lodash.negate = negate;\n","\t    lodash.nthArg = nthArg;\n","\t    lodash.omit = omit;\n","\t    lodash.omitBy = omitBy;\n","\t    lodash.once = once;\n","\t    lodash.orderBy = orderBy;\n","\t    lodash.over = over;\n","\t    lodash.overArgs = overArgs;\n","\t    lodash.overEvery = overEvery;\n","\t    lodash.overSome = overSome;\n","\t    lodash.partial = partial;\n","\t    lodash.partialRight = partialRight;\n","\t    lodash.partition = partition;\n","\t    lodash.pick = pick;\n","\t    lodash.pickBy = pickBy;\n","\t    lodash.property = property;\n","\t    lodash.propertyOf = propertyOf;\n","\t    lodash.pull = pull;\n","\t    lodash.pullAll = pullAll;\n","\t    lodash.pullAllBy = pullAllBy;\n","\t    lodash.pullAllWith = pullAllWith;\n","\t    lodash.pullAt = pullAt;\n","\t    lodash.range = range;\n","\t    lodash.rangeRight = rangeRight;\n","\t    lodash.rearg = rearg;\n","\t    lodash.reject = reject;\n","\t    lodash.remove = remove;\n","\t    lodash.rest = rest;\n","\t    lodash.reverse = reverse;\n","\t    lodash.sampleSize = sampleSize;\n","\t    lodash.set = set;\n","\t    lodash.setWith = setWith;\n","\t    lodash.shuffle = shuffle;\n","\t    lodash.slice = slice;\n","\t    lodash.sortBy = sortBy;\n","\t    lodash.sortedUniq = sortedUniq;\n","\t    lodash.sortedUniqBy = sortedUniqBy;\n","\t    lodash.split = split;\n","\t    lodash.spread = spread;\n","\t    lodash.tail = tail;\n","\t    lodash.take = take;\n","\t    lodash.takeRight = takeRight;\n","\t    lodash.takeRightWhile = takeRightWhile;\n","\t    lodash.takeWhile = takeWhile;\n","\t    lodash.tap = tap;\n","\t    lodash.throttle = throttle;\n","\t    lodash.thru = thru;\n","\t    lodash.toArray = toArray;\n","\t    lodash.toPairs = toPairs;\n","\t    lodash.toPairsIn = toPairsIn;\n","\t    lodash.toPath = toPath;\n","\t    lodash.toPlainObject = toPlainObject;\n","\t    lodash.transform = transform;\n","\t    lodash.unary = unary;\n","\t    lodash.union = union;\n","\t    lodash.unionBy = unionBy;\n","\t    lodash.unionWith = unionWith;\n","\t    lodash.uniq = uniq;\n","\t    lodash.uniqBy = uniqBy;\n","\t    lodash.uniqWith = uniqWith;\n","\t    lodash.unset = unset;\n","\t    lodash.unzip = unzip;\n","\t    lodash.unzipWith = unzipWith;\n","\t    lodash.update = update;\n","\t    lodash.updateWith = updateWith;\n","\t    lodash.values = values;\n","\t    lodash.valuesIn = valuesIn;\n","\t    lodash.without = without;\n","\t    lodash.words = words;\n","\t    lodash.wrap = wrap;\n","\t    lodash.xor = xor;\n","\t    lodash.xorBy = xorBy;\n","\t    lodash.xorWith = xorWith;\n","\t    lodash.zip = zip;\n","\t    lodash.zipObject = zipObject;\n","\t    lodash.zipObjectDeep = zipObjectDeep;\n","\t    lodash.zipWith = zipWith;\n","\t\n","\t    // Add aliases.\n","\t    lodash.entries = toPairs;\n","\t    lodash.entriesIn = toPairsIn;\n","\t    lodash.extend = assignIn;\n","\t    lodash.extendWith = assignInWith;\n","\t\n","\t    // Add methods to `lodash.prototype`.\n","\t    mixin(lodash, lodash);\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    // Add methods that return unwrapped values in chain sequences.\n","\t    lodash.add = add;\n","\t    lodash.attempt = attempt;\n","\t    lodash.camelCase = camelCase;\n","\t    lodash.capitalize = capitalize;\n","\t    lodash.ceil = ceil;\n","\t    lodash.clamp = clamp;\n","\t    lodash.clone = clone;\n","\t    lodash.cloneDeep = cloneDeep;\n","\t    lodash.cloneDeepWith = cloneDeepWith;\n","\t    lodash.cloneWith = cloneWith;\n","\t    lodash.conformsTo = conformsTo;\n","\t    lodash.deburr = deburr;\n","\t    lodash.defaultTo = defaultTo;\n","\t    lodash.divide = divide;\n","\t    lodash.endsWith = endsWith;\n","\t    lodash.eq = eq;\n","\t    lodash.escape = escape;\n","\t    lodash.escapeRegExp = escapeRegExp;\n","\t    lodash.every = every;\n","\t    lodash.find = find;\n","\t    lodash.findIndex = findIndex;\n","\t    lodash.findKey = findKey;\n","\t    lodash.findLast = findLast;\n","\t    lodash.findLastIndex = findLastIndex;\n","\t    lodash.findLastKey = findLastKey;\n","\t    lodash.floor = floor;\n","\t    lodash.forEach = forEach;\n","\t    lodash.forEachRight = forEachRight;\n","\t    lodash.forIn = forIn;\n","\t    lodash.forInRight = forInRight;\n","\t    lodash.forOwn = forOwn;\n","\t    lodash.forOwnRight = forOwnRight;\n","\t    lodash.get = get;\n","\t    lodash.gt = gt;\n","\t    lodash.gte = gte;\n","\t    lodash.has = has;\n","\t    lodash.hasIn = hasIn;\n","\t    lodash.head = head;\n","\t    lodash.identity = identity;\n","\t    lodash.includes = includes;\n","\t    lodash.indexOf = indexOf;\n","\t    lodash.inRange = inRange;\n","\t    lodash.invoke = invoke;\n","\t    lodash.isArguments = isArguments;\n","\t    lodash.isArray = isArray;\n","\t    lodash.isArrayBuffer = isArrayBuffer;\n","\t    lodash.isArrayLike = isArrayLike;\n","\t    lodash.isArrayLikeObject = isArrayLikeObject;\n","\t    lodash.isBoolean = isBoolean;\n","\t    lodash.isBuffer = isBuffer;\n","\t    lodash.isDate = isDate;\n","\t    lodash.isElement = isElement;\n","\t    lodash.isEmpty = isEmpty;\n","\t    lodash.isEqual = isEqual;\n","\t    lodash.isEqualWith = isEqualWith;\n","\t    lodash.isError = isError;\n","\t    lodash.isFinite = isFinite;\n","\t    lodash.isFunction = isFunction;\n","\t    lodash.isInteger = isInteger;\n","\t    lodash.isLength = isLength;\n","\t    lodash.isMap = isMap;\n","\t    lodash.isMatch = isMatch;\n","\t    lodash.isMatchWith = isMatchWith;\n","\t    lodash.isNaN = isNaN;\n","\t    lodash.isNative = isNative;\n","\t    lodash.isNil = isNil;\n","\t    lodash.isNull = isNull;\n","\t    lodash.isNumber = isNumber;\n","\t    lodash.isObject = isObject;\n","\t    lodash.isObjectLike = isObjectLike;\n","\t    lodash.isPlainObject = isPlainObject;\n","\t    lodash.isRegExp = isRegExp;\n","\t    lodash.isSafeInteger = isSafeInteger;\n","\t    lodash.isSet = isSet;\n","\t    lodash.isString = isString;\n","\t    lodash.isSymbol = isSymbol;\n","\t    lodash.isTypedArray = isTypedArray;\n","\t    lodash.isUndefined = isUndefined;\n","\t    lodash.isWeakMap = isWeakMap;\n","\t    lodash.isWeakSet = isWeakSet;\n","\t    lodash.join = join;\n","\t    lodash.kebabCase = kebabCase;\n","\t    lodash.last = last;\n","\t    lodash.lastIndexOf = lastIndexOf;\n","\t    lodash.lowerCase = lowerCase;\n","\t    lodash.lowerFirst = lowerFirst;\n","\t    lodash.lt = lt;\n","\t    lodash.lte = lte;\n","\t    lodash.max = max;\n","\t    lodash.maxBy = maxBy;\n","\t    lodash.mean = mean;\n","\t    lodash.meanBy = meanBy;\n","\t    lodash.min = min;\n","\t    lodash.minBy = minBy;\n","\t    lodash.stubArray = stubArray;\n","\t    lodash.stubFalse = stubFalse;\n","\t    lodash.stubObject = stubObject;\n","\t    lodash.stubString = stubString;\n","\t    lodash.stubTrue = stubTrue;\n","\t    lodash.multiply = multiply;\n","\t    lodash.nth = nth;\n","\t    lodash.noConflict = noConflict;\n","\t    lodash.noop = noop;\n","\t    lodash.now = now;\n","\t    lodash.pad = pad;\n","\t    lodash.padEnd = padEnd;\n","\t    lodash.padStart = padStart;\n","\t    lodash.parseInt = parseInt;\n","\t    lodash.random = random;\n","\t    lodash.reduce = reduce;\n","\t    lodash.reduceRight = reduceRight;\n","\t    lodash.repeat = repeat;\n","\t    lodash.replace = replace;\n","\t    lodash.result = result;\n","\t    lodash.round = round;\n","\t    lodash.runInContext = runInContext;\n","\t    lodash.sample = sample;\n","\t    lodash.size = size;\n","\t    lodash.snakeCase = snakeCase;\n","\t    lodash.some = some;\n","\t    lodash.sortedIndex = sortedIndex;\n","\t    lodash.sortedIndexBy = sortedIndexBy;\n","\t    lodash.sortedIndexOf = sortedIndexOf;\n","\t    lodash.sortedLastIndex = sortedLastIndex;\n","\t    lodash.sortedLastIndexBy = sortedLastIndexBy;\n","\t    lodash.sortedLastIndexOf = sortedLastIndexOf;\n","\t    lodash.startCase = startCase;\n","\t    lodash.startsWith = startsWith;\n","\t    lodash.subtract = subtract;\n","\t    lodash.sum = sum;\n","\t    lodash.sumBy = sumBy;\n","\t    lodash.template = template;\n","\t    lodash.times = times;\n","\t    lodash.toFinite = toFinite;\n","\t    lodash.toInteger = toInteger;\n","\t    lodash.toLength = toLength;\n","\t    lodash.toLower = toLower;\n","\t    lodash.toNumber = toNumber;\n","\t    lodash.toSafeInteger = toSafeInteger;\n","\t    lodash.toString = toString;\n","\t    lodash.toUpper = toUpper;\n","\t    lodash.trim = trim;\n","\t    lodash.trimEnd = trimEnd;\n","\t    lodash.trimStart = trimStart;\n","\t    lodash.truncate = truncate;\n","\t    lodash.unescape = unescape;\n","\t    lodash.uniqueId = uniqueId;\n","\t    lodash.upperCase = upperCase;\n","\t    lodash.upperFirst = upperFirst;\n","\t\n","\t    // Add aliases.\n","\t    lodash.each = forEach;\n","\t    lodash.eachRight = forEachRight;\n","\t    lodash.first = head;\n","\t\n","\t    mixin(lodash, (function() {\n","\t      var source = {};\n","\t      baseForOwn(lodash, function(func, methodName) {\n","\t        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n","\t          source[methodName] = func;\n","\t        }\n","\t      });\n","\t      return source;\n","\t    }()), { 'chain': false });\n","\t\n","\t    /*------------------------------------------------------------------------*/\n","\t\n","\t    /**\n","\t     * The semantic version number.\n","\t     *\n","\t     * @static\n","\t     * @memberOf _\n","\t     * @type {string}\n","\t     */\n","\t    lodash.VERSION = VERSION;\n","\t\n","\t    // Assign default placeholders.\n","\t    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n","\t      lodash[methodName].placeholder = lodash;\n","\t    });\n","\t\n","\t    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n","\t    arrayEach(['drop', 'take'], function(methodName, index) {\n","\t      LazyWrapper.prototype[methodName] = function(n) {\n","\t        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n","\t\n","\t        var result = (this.__filtered__ && !index)\n","\t          ? new LazyWrapper(this)\n","\t          : this.clone();\n","\t\n","\t        if (result.__filtered__) {\n","\t          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n","\t        } else {\n","\t          result.__views__.push({\n","\t            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n","\t            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n","\t          });\n","\t        }\n","\t        return result;\n","\t      };\n","\t\n","\t      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n","\t        return this.reverse()[methodName](n).reverse();\n","\t      };\n","\t    });\n","\t\n","\t    // Add `LazyWrapper` methods that accept an `iteratee` value.\n","\t    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n","\t      var type = index + 1,\n","\t          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n","\t\n","\t      LazyWrapper.prototype[methodName] = function(iteratee) {\n","\t        var result = this.clone();\n","\t        result.__iteratees__.push({\n","\t          'iteratee': getIteratee(iteratee, 3),\n","\t          'type': type\n","\t        });\n","\t        result.__filtered__ = result.__filtered__ || isFilter;\n","\t        return result;\n","\t      };\n","\t    });\n","\t\n","\t    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n","\t    arrayEach(['head', 'last'], function(methodName, index) {\n","\t      var takeName = 'take' + (index ? 'Right' : '');\n","\t\n","\t      LazyWrapper.prototype[methodName] = function() {\n","\t        return this[takeName](1).value()[0];\n","\t      };\n","\t    });\n","\t\n","\t    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n","\t    arrayEach(['initial', 'tail'], function(methodName, index) {\n","\t      var dropName = 'drop' + (index ? '' : 'Right');\n","\t\n","\t      LazyWrapper.prototype[methodName] = function() {\n","\t        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n","\t      };\n","\t    });\n","\t\n","\t    LazyWrapper.prototype.compact = function() {\n","\t      return this.filter(identity);\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.find = function(predicate) {\n","\t      return this.filter(predicate).head();\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.findLast = function(predicate) {\n","\t      return this.reverse().find(predicate);\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n","\t      if (typeof path == 'function') {\n","\t        return new LazyWrapper(this);\n","\t      }\n","\t      return this.map(function(value) {\n","\t        return baseInvoke(value, path, args);\n","\t      });\n","\t    });\n","\t\n","\t    LazyWrapper.prototype.reject = function(predicate) {\n","\t      return this.filter(negate(getIteratee(predicate)));\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.slice = function(start, end) {\n","\t      start = toInteger(start);\n","\t\n","\t      var result = this;\n","\t      if (result.__filtered__ && (start > 0 || end < 0)) {\n","\t        return new LazyWrapper(result);\n","\t      }\n","\t      if (start < 0) {\n","\t        result = result.takeRight(-start);\n","\t      } else if (start) {\n","\t        result = result.drop(start);\n","\t      }\n","\t      if (end !== undefined) {\n","\t        end = toInteger(end);\n","\t        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n","\t      }\n","\t      return result;\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n","\t      return this.reverse().takeWhile(predicate).reverse();\n","\t    };\n","\t\n","\t    LazyWrapper.prototype.toArray = function() {\n","\t      return this.take(MAX_ARRAY_LENGTH);\n","\t    };\n","\t\n","\t    // Add `LazyWrapper` methods to `lodash.prototype`.\n","\t    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n","\t      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n","\t          isTaker = /^(?:head|last)$/.test(methodName),\n","\t          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n","\t          retUnwrapped = isTaker || /^find/.test(methodName);\n","\t\n","\t      if (!lodashFunc) {\n","\t        return;\n","\t      }\n","\t      lodash.prototype[methodName] = function() {\n","\t        var value = this.__wrapped__,\n","\t            args = isTaker ? [1] : arguments,\n","\t            isLazy = value instanceof LazyWrapper,\n","\t            iteratee = args[0],\n","\t            useLazy = isLazy || isArray(value);\n","\t\n","\t        var interceptor = function(value) {\n","\t          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n","\t          return (isTaker && chainAll) ? result[0] : result;\n","\t        };\n","\t\n","\t        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n","\t          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n","\t          isLazy = useLazy = false;\n","\t        }\n","\t        var chainAll = this.__chain__,\n","\t            isHybrid = !!this.__actions__.length,\n","\t            isUnwrapped = retUnwrapped && !chainAll,\n","\t            onlyLazy = isLazy && !isHybrid;\n","\t\n","\t        if (!retUnwrapped && useLazy) {\n","\t          value = onlyLazy ? value : new LazyWrapper(this);\n","\t          var result = func.apply(value, args);\n","\t          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n","\t          return new LodashWrapper(result, chainAll);\n","\t        }\n","\t        if (isUnwrapped && onlyLazy) {\n","\t          return func.apply(this, args);\n","\t        }\n","\t        result = this.thru(interceptor);\n","\t        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n","\t      };\n","\t    });\n","\t\n","\t    // Add `Array` methods to `lodash.prototype`.\n","\t    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n","\t      var func = arrayProto[methodName],\n","\t          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n","\t          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n","\t\n","\t      lodash.prototype[methodName] = function() {\n","\t        var args = arguments;\n","\t        if (retUnwrapped && !this.__chain__) {\n","\t          var value = this.value();\n","\t          return func.apply(isArray(value) ? value : [], args);\n","\t        }\n","\t        return this[chainName](function(value) {\n","\t          return func.apply(isArray(value) ? value : [], args);\n","\t        });\n","\t      };\n","\t    });\n","\t\n","\t    // Map minified method names to their real names.\n","\t    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n","\t      var lodashFunc = lodash[methodName];\n","\t      if (lodashFunc) {\n","\t        var key = (lodashFunc.name + ''),\n","\t            names = realNames[key] || (realNames[key] = []);\n","\t\n","\t        names.push({ 'name': methodName, 'func': lodashFunc });\n","\t      }\n","\t    });\n","\t\n","\t    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n","\t      'name': 'wrapper',\n","\t      'func': undefined\n","\t    }];\n","\t\n","\t    // Add methods to `LazyWrapper`.\n","\t    LazyWrapper.prototype.clone = lazyClone;\n","\t    LazyWrapper.prototype.reverse = lazyReverse;\n","\t    LazyWrapper.prototype.value = lazyValue;\n","\t\n","\t    // Add chain sequence methods to the `lodash` wrapper.\n","\t    lodash.prototype.at = wrapperAt;\n","\t    lodash.prototype.chain = wrapperChain;\n","\t    lodash.prototype.commit = wrapperCommit;\n","\t    lodash.prototype.next = wrapperNext;\n","\t    lodash.prototype.plant = wrapperPlant;\n","\t    lodash.prototype.reverse = wrapperReverse;\n","\t    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n","\t\n","\t    // Add lazy aliases.\n","\t    lodash.prototype.first = lodash.prototype.head;\n","\t\n","\t    if (symIterator) {\n","\t      lodash.prototype[symIterator] = wrapperToIterator;\n","\t    }\n","\t    return lodash;\n","\t  });\n","\t\n","\t  /*--------------------------------------------------------------------------*/\n","\t\n","\t  // Export lodash.\n","\t  var _ = runInContext();\n","\t\n","\t  // Some AMD build optimizers, like r.js, check for condition patterns like:\n","\t  if (true) {\n","\t    // Expose Lodash on the global object to prevent errors when Lodash is\n","\t    // loaded by a script tag in the presence of an AMD loader.\n","\t    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n","\t    // Use `_.noConflict` to remove Lodash from the global object.\n","\t    root._ = _;\n","\t\n","\t    // Define as an anonymous module so, through path mapping, it can be\n","\t    // referenced as the \"underscore\" module.\n","\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n","\t      return _;\n","\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n","\t  }\n","\t  // Check for `exports` after `define` in case a build optimizer adds it.\n","\t  else if (freeModule) {\n","\t    // Export for Node.js.\n","\t    (freeModule.exports = _)._ = _;\n","\t    // Export for CommonJS support.\n","\t    freeExports._ = _;\n","\t  }\n","\t  else {\n","\t    // Export to the global object.\n","\t    root._ = _;\n","\t  }\n","\t}.call(this));\n","\t\n","\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5)(module)))\n","\n","/***/ }),\n","/* 5 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function(module) {\n","\t\tif(!module.webpackPolyfill) {\n","\t\t\tmodule.deprecate = function() {};\n","\t\t\tmodule.paths = [];\n","\t\t\t// module.parent = undefined by default\n","\t\t\tmodule.children = [];\n","\t\t\tmodule.webpackPolyfill = 1;\n","\t\t}\n","\t\treturn module;\n","\t}\n","\n","\n","/***/ }),\n","/* 6 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tObject.defineProperty(exports, \"__esModule\", {\n","\t  value: true\n","\t});\n","\t\n","\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n","\t\n","\tvar _d2 = __webpack_require__(2);\n","\t\n","\tvar _d3 = _interopRequireDefault(_d2);\n","\t\n","\tvar _lodash = __webpack_require__(4);\n","\t\n","\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n","\t\n","\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n","\t\n","\tvar PredictProba = function () {\n","\t  // svg: d3 object with the svg in question\n","\t  // class_names: array of class names\n","\t  // predict_probas: array of prediction probabilities\n","\t  function PredictProba(svg, class_names, predict_probas) {\n","\t    var title = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Prediction probabilities';\n","\t\n","\t    _classCallCheck(this, PredictProba);\n","\t\n","\t    var width = parseInt(svg.style('width'));\n","\t    this.names = class_names;\n","\t    this.names.push('Other');\n","\t    if (class_names.length < 10) {\n","\t      this.colors = _d3.default.scale.category10().domain(this.names);\n","\t      this.colors_i = _d3.default.scale.category10().domain((0, _lodash.range)(this.names.length));\n","\t    } else {\n","\t      this.colors = _d3.default.scale.category20().domain(this.names);\n","\t      this.colors_i = _d3.default.scale.category20().domain((0, _lodash.range)(this.names.length));\n","\t    }\n","\t\n","\t    var _map_classes = this.map_classes(this.names, predict_probas),\n","\t        _map_classes2 = _slicedToArray(_map_classes, 2),\n","\t        names = _map_classes2[0],\n","\t        data = _map_classes2[1];\n","\t\n","\t    var bar_x = width - 125;\n","\t    var class_names_width = bar_x;\n","\t    var bar_width = width - bar_x - 32;\n","\t    var x_scale = _d3.default.scale.linear().range([0, bar_width]);\n","\t    var bar_height = 17;\n","\t    var space_between_bars = 5;\n","\t    var bar_yshift = title === '' ? 0 : 35;\n","\t    var n_bars = Math.min(5, data.length);\n","\t    this.svg_height = n_bars * (bar_height + space_between_bars) + bar_yshift;\n","\t    svg.style('height', this.svg_height + 'px');\n","\t    var this_object = this;\n","\t    if (title !== '') {\n","\t      svg.append('text').text(title).attr('x', 20).attr('y', 20);\n","\t    }\n","\t    var bar_y = function bar_y(i) {\n","\t      return (bar_height + space_between_bars) * i + bar_yshift;\n","\t    };\n","\t    var bar = svg.append(\"g\");\n","\t\n","\t    var _iteratorNormalCompletion = true;\n","\t    var _didIteratorError = false;\n","\t    var _iteratorError = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator = (0, _lodash.range)(data.length)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n","\t        var i = _step.value;\n","\t\n","\t        var color = this.colors(names[i]);\n","\t        if (names[i] == 'Other' && this.names.length > 20) {\n","\t          color = '#5F9EA0';\n","\t        }\n","\t        var rect = bar.append(\"rect\");\n","\t        rect.attr(\"x\", bar_x).attr(\"y\", bar_y(i)).attr(\"height\", bar_height).attr(\"width\", x_scale(data[i])).style(\"fill\", color);\n","\t        bar.append(\"rect\").attr(\"x\", bar_x).attr(\"y\", bar_y(i)).attr(\"height\", bar_height).attr(\"width\", bar_width - 1).attr(\"fill-opacity\", 0).attr(\"stroke\", \"black\");\n","\t        var text = bar.append(\"text\");\n","\t        text.classed(\"prob_text\", true);\n","\t        text.attr(\"y\", bar_y(i) + bar_height - 3).attr(\"fill\", \"black\").style(\"font\", \"14px tahoma, sans-serif\");\n","\t        text = bar.append(\"text\");\n","\t        text.attr(\"x\", bar_x + x_scale(data[i]) + 5).attr(\"y\", bar_y(i) + bar_height - 3).attr(\"fill\", \"black\").style(\"font\", \"14px tahoma, sans-serif\").text(data[i].toFixed(2));\n","\t        text = bar.append(\"text\");\n","\t        text.attr(\"x\", bar_x - 10).attr(\"y\", bar_y(i) + bar_height - 3).attr(\"fill\", \"black\").attr(\"text-anchor\", \"end\").style(\"font\", \"14px tahoma, sans-serif\").text(names[i]);\n","\t        while (text.node().getBBox()['width'] + 1 > class_names_width - 10) {\n","\t          // TODO: ta mostrando só dois, e talvez quando hover mostrar o texto\n","\t          // todo\n","\t          var cur_text = text.text().slice(0, text.text().length - 5);\n","\t          text.text(cur_text + '...');\n","\t          if (cur_text === '') {\n","\t            break;\n","\t          }\n","\t        }\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError = true;\n","\t      _iteratorError = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion && _iterator.return) {\n","\t          _iterator.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError) {\n","\t          throw _iteratorError;\n","\t        }\n","\t      }\n","\t    }\n","\t  }\n","\t\n","\t  PredictProba.prototype.map_classes = function map_classes(class_names, predict_proba) {\n","\t    if (class_names.length <= 6) {\n","\t      return [class_names, predict_proba];\n","\t    }\n","\t    var class_dict = (0, _lodash.range)(predict_proba.length).map(function (i) {\n","\t      return { 'name': class_names[i], 'prob': predict_proba[i], 'i': i };\n","\t    });\n","\t    var sorted = (0, _lodash.sortBy)(class_dict, function (d) {\n","\t      return -d.prob;\n","\t    });\n","\t    var other = new Set();\n","\t    (0, _lodash.range)(4, sorted.length).map(function (d) {\n","\t      return other.add(sorted[d].name);\n","\t    });\n","\t    var other_prob = 0;\n","\t    var ret_probs = [];\n","\t    var ret_names = [];\n","\t    var _iteratorNormalCompletion2 = true;\n","\t    var _didIteratorError2 = false;\n","\t    var _iteratorError2 = undefined;\n","\t\n","\t    try {\n","\t      for (var _iterator2 = (0, _lodash.range)(sorted.length)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n","\t        var d = _step2.value;\n","\t\n","\t        if (other.has(sorted[d].name)) {\n","\t          other_prob += sorted[d].prob;\n","\t        } else {\n","\t          ret_probs.push(sorted[d].prob);\n","\t          ret_names.push(sorted[d].name);\n","\t        }\n","\t      }\n","\t    } catch (err) {\n","\t      _didIteratorError2 = true;\n","\t      _iteratorError2 = err;\n","\t    } finally {\n","\t      try {\n","\t        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n","\t          _iterator2.return();\n","\t        }\n","\t      } finally {\n","\t        if (_didIteratorError2) {\n","\t          throw _iteratorError2;\n","\t        }\n","\t      }\n","\t    }\n","\t\n","\t    ;\n","\t    ret_names.push(\"Other\");\n","\t    ret_probs.push(other_prob);\n","\t    return [ret_names, ret_probs];\n","\t  };\n","\t\n","\t  return PredictProba;\n","\t}();\n","\t\n","\texports.default = PredictProba;\n","\n","/***/ }),\n","/* 7 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tObject.defineProperty(exports, \"__esModule\", {\n","\t    value: true\n","\t});\n","\t\n","\tvar _d = __webpack_require__(2);\n","\t\n","\tvar _d2 = _interopRequireDefault(_d);\n","\t\n","\tvar _lodash = __webpack_require__(4);\n","\t\n","\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n","\t\n","\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n","\t\n","\tvar PredictedValue =\n","\t// svg: d3 object with the svg in question\n","\t// class_names: array of class names\n","\t// predict_probas: array of prediction probabilities\n","\tfunction PredictedValue(svg, predicted_value, min_value, max_value) {\n","\t    var title = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Predicted value';\n","\t    var log_coords = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n","\t\n","\t    _classCallCheck(this, PredictedValue);\n","\t\n","\t    if (min_value == max_value) {\n","\t        var width_proportion = 1.0;\n","\t    } else {\n","\t        var width_proportion = (predicted_value - min_value) / (max_value - min_value);\n","\t    }\n","\t\n","\t    var width = parseInt(svg.style('width'));\n","\t\n","\t    this.color = _d2.default.scale.category10();\n","\t    this.color('predicted_value');\n","\t    // + 2 is due to it being a float\n","\t    console.log('CREATING THIS');\n","\t    var num_digits = Math.floor(Math.max(Math.log10(Math.abs(min_value)), Math.log10(Math.abs(max_value)))) + 2;\n","\t    num_digits = Math.max(num_digits, 3);\n","\t\n","\t    var corner_width = 12 * num_digits;\n","\t    var corner_padding = 5.5 * num_digits;\n","\t    var bar_x = corner_width + corner_padding;\n","\t    var bar_width = width - corner_width * 2 - corner_padding * 2;\n","\t    var x_scale = _d2.default.scale.linear().range([0, bar_width]);\n","\t    var bar_height = 17;\n","\t    var bar_yshift = title === '' ? 0 : 35;\n","\t    var n_bars = 1;\n","\t    var this_object = this;\n","\t    if (title !== '') {\n","\t        svg.append('text').text(title).attr('x', 20).attr('y', 20);\n","\t    }\n","\t    var bar_y = bar_yshift;\n","\t    var bar = svg.append(\"g\");\n","\t\n","\t    //filled in bar representing predicted value in range\n","\t    var rect = bar.append(\"rect\");\n","\t    rect.attr(\"x\", bar_x).attr(\"y\", bar_y).attr(\"height\", bar_height).attr(\"width\", x_scale(width_proportion)).style(\"fill\", this.color);\n","\t\n","\t    //empty box representing range\n","\t    bar.append(\"rect\").attr(\"x\", bar_x).attr(\"y\", bar_y).attr(\"height\", bar_height).attr(\"width\", x_scale(1)).attr(\"fill-opacity\", 0).attr(\"stroke\", \"black\");\n","\t    var text = bar.append(\"text\");\n","\t    text.classed(\"prob_text\", true);\n","\t    text.attr(\"y\", bar_y + bar_height - 3).attr(\"fill\", \"black\").style(\"font\", \"14px tahoma, sans-serif\");\n","\t\n","\t    //text for min value\n","\t    text = bar.append(\"text\");\n","\t    text.attr(\"x\", bar_x - corner_padding).attr(\"y\", bar_y + bar_height - 3).attr(\"fill\", \"black\").attr(\"text-anchor\", \"end\").style(\"font\", \"14px tahoma, sans-serif\").text(min_value.toFixed(2));\n","\t\n","\t    //text for range min annotation\n","\t    var v_adjust_min_value_annotation = text.node().getBBox().height;\n","\t    text = bar.append(\"text\");\n","\t    text.attr(\"x\", bar_x - corner_padding).attr(\"y\", bar_y + bar_height - 3 + v_adjust_min_value_annotation).attr(\"fill\", \"black\").attr(\"text-anchor\", \"end\").style(\"font\", \"14px tahoma, sans-serif\").text(\"(min)\");\n","\t\n","\t    //text for predicted value\n","\t    // console.log('bar height: ' + bar_height)\n","\t    text = bar.append(\"text\");\n","\t    text.text(predicted_value.toFixed(2));\n","\t    // let h_adjust_predicted_value_text = text.node().getBBox().width / 2;\n","\t    var v_adjust_predicted_value_text = text.node().getBBox().height;\n","\t    text.attr(\"x\", bar_x + x_scale(width_proportion)).attr(\"y\", bar_y + bar_height + v_adjust_predicted_value_text).attr(\"fill\", \"black\").attr(\"text-anchor\", \"middle\").style(\"font\", \"14px tahoma, sans-serif\");\n","\t\n","\t    //text for max value\n","\t    text = bar.append(\"text\");\n","\t    text.text(max_value.toFixed(2));\n","\t    // let h_adjust = text.node().getBBox().width;\n","\t    text.attr(\"x\", bar_x + bar_width + corner_padding).attr(\"y\", bar_y + bar_height - 3).attr(\"fill\", \"black\").attr(\"text-anchor\", \"begin\").style(\"font\", \"14px tahoma, sans-serif\");\n","\t\n","\t    //text for range max annotation\n","\t    var v_adjust_max_value_annotation = text.node().getBBox().height;\n","\t    text = bar.append(\"text\");\n","\t    text.attr(\"x\", bar_x + bar_width + corner_padding).attr(\"y\", bar_y + bar_height - 3 + v_adjust_min_value_annotation).attr(\"fill\", \"black\").attr(\"text-anchor\", \"begin\").style(\"font\", \"14px tahoma, sans-serif\").text(\"(max)\");\n","\t\n","\t    //readjust svg size\n","\t    // let svg_width = width + 1 * h_adjust;\n","\t    // svg.style('width', svg_width + 'px');\n","\t\n","\t    this.svg_height = n_bars * bar_height + bar_yshift + 2 * text.node().getBBox().height + 10;\n","\t    svg.style('height', this.svg_height + 'px');\n","\t    if (log_coords) {\n","\t        console.log(\"svg width: \" + svg_width);\n","\t        console.log(\"svg height: \" + this.svg_height);\n","\t        console.log(\"bar_y: \" + bar_y);\n","\t        console.log(\"bar_x: \" + bar_x);\n","\t        console.log(\"Min value: \" + min_value);\n","\t        console.log(\"Max value: \" + max_value);\n","\t        console.log(\"Pred value: \" + predicted_value);\n","\t    }\n","\t};\n","\t\n","\texports.default = PredictedValue;\n","\n","/***/ }),\n","/* 8 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n","\t\n","\t__webpack_require__(9);\n","\t\n","\t__webpack_require__(335);\n","\t\n","\t__webpack_require__(336);\n","\t\n","\tif (global._babelPolyfill) {\n","\t  throw new Error(\"only one instance of babel-polyfill is allowed\");\n","\t}\n","\tglobal._babelPolyfill = true;\n","\t\n","\tvar DEFINE_PROPERTY = \"defineProperty\";\n","\tfunction define(O, key, value) {\n","\t  O[key] || Object[DEFINE_PROPERTY](O, key, {\n","\t    writable: true,\n","\t    configurable: true,\n","\t    value: value\n","\t  });\n","\t}\n","\t\n","\tdefine(String.prototype, \"padLeft\", \"\".padStart);\n","\tdefine(String.prototype, \"padRight\", \"\".padEnd);\n","\t\n","\t\"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill\".split(\",\").forEach(function (key) {\n","\t  [][key] && define(Array, key, Function.call.bind([][key]));\n","\t});\n","\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n","\n","/***/ }),\n","/* 9 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(10);\n","\t__webpack_require__(59);\n","\t__webpack_require__(60);\n","\t__webpack_require__(61);\n","\t__webpack_require__(62);\n","\t__webpack_require__(64);\n","\t__webpack_require__(67);\n","\t__webpack_require__(68);\n","\t__webpack_require__(69);\n","\t__webpack_require__(70);\n","\t__webpack_require__(71);\n","\t__webpack_require__(72);\n","\t__webpack_require__(73);\n","\t__webpack_require__(74);\n","\t__webpack_require__(75);\n","\t__webpack_require__(77);\n","\t__webpack_require__(79);\n","\t__webpack_require__(81);\n","\t__webpack_require__(83);\n","\t__webpack_require__(86);\n","\t__webpack_require__(87);\n","\t__webpack_require__(88);\n","\t__webpack_require__(92);\n","\t__webpack_require__(94);\n","\t__webpack_require__(96);\n","\t__webpack_require__(99);\n","\t__webpack_require__(100);\n","\t__webpack_require__(101);\n","\t__webpack_require__(102);\n","\t__webpack_require__(104);\n","\t__webpack_require__(105);\n","\t__webpack_require__(106);\n","\t__webpack_require__(107);\n","\t__webpack_require__(108);\n","\t__webpack_require__(109);\n","\t__webpack_require__(110);\n","\t__webpack_require__(112);\n","\t__webpack_require__(113);\n","\t__webpack_require__(114);\n","\t__webpack_require__(116);\n","\t__webpack_require__(117);\n","\t__webpack_require__(118);\n","\t__webpack_require__(120);\n","\t__webpack_require__(122);\n","\t__webpack_require__(123);\n","\t__webpack_require__(124);\n","\t__webpack_require__(125);\n","\t__webpack_require__(126);\n","\t__webpack_require__(127);\n","\t__webpack_require__(128);\n","\t__webpack_require__(129);\n","\t__webpack_require__(130);\n","\t__webpack_require__(131);\n","\t__webpack_require__(132);\n","\t__webpack_require__(133);\n","\t__webpack_require__(134);\n","\t__webpack_require__(139);\n","\t__webpack_require__(140);\n","\t__webpack_require__(144);\n","\t__webpack_require__(145);\n","\t__webpack_require__(146);\n","\t__webpack_require__(147);\n","\t__webpack_require__(149);\n","\t__webpack_require__(150);\n","\t__webpack_require__(151);\n","\t__webpack_require__(152);\n","\t__webpack_require__(153);\n","\t__webpack_require__(154);\n","\t__webpack_require__(155);\n","\t__webpack_require__(156);\n","\t__webpack_require__(157);\n","\t__webpack_require__(158);\n","\t__webpack_require__(159);\n","\t__webpack_require__(160);\n","\t__webpack_require__(161);\n","\t__webpack_require__(162);\n","\t__webpack_require__(163);\n","\t__webpack_require__(165);\n","\t__webpack_require__(166);\n","\t__webpack_require__(168);\n","\t__webpack_require__(169);\n","\t__webpack_require__(175);\n","\t__webpack_require__(176);\n","\t__webpack_require__(178);\n","\t__webpack_require__(179);\n","\t__webpack_require__(180);\n","\t__webpack_require__(184);\n","\t__webpack_require__(185);\n","\t__webpack_require__(186);\n","\t__webpack_require__(187);\n","\t__webpack_require__(188);\n","\t__webpack_require__(190);\n","\t__webpack_require__(191);\n","\t__webpack_require__(192);\n","\t__webpack_require__(193);\n","\t__webpack_require__(196);\n","\t__webpack_require__(198);\n","\t__webpack_require__(199);\n","\t__webpack_require__(200);\n","\t__webpack_require__(202);\n","\t__webpack_require__(204);\n","\t__webpack_require__(206);\n","\t__webpack_require__(208);\n","\t__webpack_require__(209);\n","\t__webpack_require__(210);\n","\t__webpack_require__(214);\n","\t__webpack_require__(215);\n","\t__webpack_require__(216);\n","\t__webpack_require__(218);\n","\t__webpack_require__(228);\n","\t__webpack_require__(232);\n","\t__webpack_require__(233);\n","\t__webpack_require__(235);\n","\t__webpack_require__(236);\n","\t__webpack_require__(240);\n","\t__webpack_require__(241);\n","\t__webpack_require__(243);\n","\t__webpack_require__(244);\n","\t__webpack_require__(245);\n","\t__webpack_require__(246);\n","\t__webpack_require__(247);\n","\t__webpack_require__(248);\n","\t__webpack_require__(249);\n","\t__webpack_require__(250);\n","\t__webpack_require__(251);\n","\t__webpack_require__(252);\n","\t__webpack_require__(253);\n","\t__webpack_require__(254);\n","\t__webpack_require__(255);\n","\t__webpack_require__(256);\n","\t__webpack_require__(257);\n","\t__webpack_require__(258);\n","\t__webpack_require__(259);\n","\t__webpack_require__(260);\n","\t__webpack_require__(261);\n","\t__webpack_require__(263);\n","\t__webpack_require__(264);\n","\t__webpack_require__(265);\n","\t__webpack_require__(266);\n","\t__webpack_require__(267);\n","\t__webpack_require__(269);\n","\t__webpack_require__(270);\n","\t__webpack_require__(271);\n","\t__webpack_require__(273);\n","\t__webpack_require__(274);\n","\t__webpack_require__(275);\n","\t__webpack_require__(276);\n","\t__webpack_require__(277);\n","\t__webpack_require__(278);\n","\t__webpack_require__(279);\n","\t__webpack_require__(280);\n","\t__webpack_require__(282);\n","\t__webpack_require__(283);\n","\t__webpack_require__(285);\n","\t__webpack_require__(286);\n","\t__webpack_require__(287);\n","\t__webpack_require__(288);\n","\t__webpack_require__(291);\n","\t__webpack_require__(292);\n","\t__webpack_require__(294);\n","\t__webpack_require__(295);\n","\t__webpack_require__(296);\n","\t__webpack_require__(297);\n","\t__webpack_require__(299);\n","\t__webpack_require__(300);\n","\t__webpack_require__(301);\n","\t__webpack_require__(302);\n","\t__webpack_require__(303);\n","\t__webpack_require__(304);\n","\t__webpack_require__(305);\n","\t__webpack_require__(306);\n","\t__webpack_require__(307);\n","\t__webpack_require__(308);\n","\t__webpack_require__(310);\n","\t__webpack_require__(311);\n","\t__webpack_require__(312);\n","\t__webpack_require__(313);\n","\t__webpack_require__(314);\n","\t__webpack_require__(315);\n","\t__webpack_require__(316);\n","\t__webpack_require__(317);\n","\t__webpack_require__(318);\n","\t__webpack_require__(319);\n","\t__webpack_require__(320);\n","\t__webpack_require__(322);\n","\t__webpack_require__(323);\n","\t__webpack_require__(324);\n","\t__webpack_require__(325);\n","\t__webpack_require__(326);\n","\t__webpack_require__(327);\n","\t__webpack_require__(328);\n","\t__webpack_require__(329);\n","\t__webpack_require__(330);\n","\t__webpack_require__(331);\n","\t__webpack_require__(332);\n","\t__webpack_require__(333);\n","\t__webpack_require__(334);\n","\tmodule.exports = __webpack_require__(16);\n","\n","\n","/***/ }),\n","/* 10 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// ECMAScript 6 symbols shim\n","\tvar global = __webpack_require__(11);\n","\tvar has = __webpack_require__(12);\n","\tvar DESCRIPTORS = __webpack_require__(13);\n","\tvar $export = __webpack_require__(15);\n","\tvar redefine = __webpack_require__(25);\n","\tvar META = __webpack_require__(32).KEY;\n","\tvar $fails = __webpack_require__(14);\n","\tvar shared = __webpack_require__(28);\n","\tvar setToStringTag = __webpack_require__(33);\n","\tvar uid = __webpack_require__(26);\n","\tvar wks = __webpack_require__(34);\n","\tvar wksExt = __webpack_require__(35);\n","\tvar wksDefine = __webpack_require__(36);\n","\tvar enumKeys = __webpack_require__(37);\n","\tvar isArray = __webpack_require__(52);\n","\tvar anObject = __webpack_require__(19);\n","\tvar isObject = __webpack_require__(20);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar createDesc = __webpack_require__(24);\n","\tvar _create = __webpack_require__(53);\n","\tvar gOPNExt = __webpack_require__(56);\n","\tvar $GOPD = __webpack_require__(58);\n","\tvar $DP = __webpack_require__(18);\n","\tvar $keys = __webpack_require__(38);\n","\tvar gOPD = $GOPD.f;\n","\tvar dP = $DP.f;\n","\tvar gOPN = gOPNExt.f;\n","\tvar $Symbol = global.Symbol;\n","\tvar $JSON = global.JSON;\n","\tvar _stringify = $JSON && $JSON.stringify;\n","\tvar PROTOTYPE = 'prototype';\n","\tvar HIDDEN = wks('_hidden');\n","\tvar TO_PRIMITIVE = wks('toPrimitive');\n","\tvar isEnum = {}.propertyIsEnumerable;\n","\tvar SymbolRegistry = shared('symbol-registry');\n","\tvar AllSymbols = shared('symbols');\n","\tvar OPSymbols = shared('op-symbols');\n","\tvar ObjectProto = Object[PROTOTYPE];\n","\tvar USE_NATIVE = typeof $Symbol == 'function';\n","\tvar QObject = global.QObject;\n","\t// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\n","\tvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n","\t\n","\t// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\n","\tvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n","\t  return _create(dP({}, 'a', {\n","\t    get: function () { return dP(this, 'a', { value: 7 }).a; }\n","\t  })).a != 7;\n","\t}) ? function (it, key, D) {\n","\t  var protoDesc = gOPD(ObjectProto, key);\n","\t  if (protoDesc) delete ObjectProto[key];\n","\t  dP(it, key, D);\n","\t  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n","\t} : dP;\n","\t\n","\tvar wrap = function (tag) {\n","\t  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n","\t  sym._k = tag;\n","\t  return sym;\n","\t};\n","\t\n","\tvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n","\t  return typeof it == 'symbol';\n","\t} : function (it) {\n","\t  return it instanceof $Symbol;\n","\t};\n","\t\n","\tvar $defineProperty = function defineProperty(it, key, D) {\n","\t  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n","\t  anObject(it);\n","\t  key = toPrimitive(key, true);\n","\t  anObject(D);\n","\t  if (has(AllSymbols, key)) {\n","\t    if (!D.enumerable) {\n","\t      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n","\t      it[HIDDEN][key] = true;\n","\t    } else {\n","\t      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n","\t      D = _create(D, { enumerable: createDesc(0, false) });\n","\t    } return setSymbolDesc(it, key, D);\n","\t  } return dP(it, key, D);\n","\t};\n","\tvar $defineProperties = function defineProperties(it, P) {\n","\t  anObject(it);\n","\t  var keys = enumKeys(P = toIObject(P));\n","\t  var i = 0;\n","\t  var l = keys.length;\n","\t  var key;\n","\t  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n","\t  return it;\n","\t};\n","\tvar $create = function create(it, P) {\n","\t  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n","\t};\n","\tvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n","\t  var E = isEnum.call(this, key = toPrimitive(key, true));\n","\t  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n","\t  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n","\t};\n","\tvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n","\t  it = toIObject(it);\n","\t  key = toPrimitive(key, true);\n","\t  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n","\t  var D = gOPD(it, key);\n","\t  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n","\t  return D;\n","\t};\n","\tvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n","\t  var names = gOPN(toIObject(it));\n","\t  var result = [];\n","\t  var i = 0;\n","\t  var key;\n","\t  while (names.length > i) {\n","\t    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n","\t  } return result;\n","\t};\n","\tvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n","\t  var IS_OP = it === ObjectProto;\n","\t  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n","\t  var result = [];\n","\t  var i = 0;\n","\t  var key;\n","\t  while (names.length > i) {\n","\t    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n","\t  } return result;\n","\t};\n","\t\n","\t// 19.4.1.1 Symbol([description])\n","\tif (!USE_NATIVE) {\n","\t  $Symbol = function Symbol() {\n","\t    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n","\t    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n","\t    var $set = function (value) {\n","\t      if (this === ObjectProto) $set.call(OPSymbols, value);\n","\t      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n","\t      setSymbolDesc(this, tag, createDesc(1, value));\n","\t    };\n","\t    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n","\t    return wrap(tag);\n","\t  };\n","\t  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n","\t    return this._k;\n","\t  });\n","\t\n","\t  $GOPD.f = $getOwnPropertyDescriptor;\n","\t  $DP.f = $defineProperty;\n","\t  __webpack_require__(57).f = gOPNExt.f = $getOwnPropertyNames;\n","\t  __webpack_require__(51).f = $propertyIsEnumerable;\n","\t  __webpack_require__(50).f = $getOwnPropertySymbols;\n","\t\n","\t  if (DESCRIPTORS && !__webpack_require__(29)) {\n","\t    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n","\t  }\n","\t\n","\t  wksExt.f = function (name) {\n","\t    return wrap(wks(name));\n","\t  };\n","\t}\n","\t\n","\t$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n","\t\n","\tfor (var es6Symbols = (\n","\t  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n","\t  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n","\t).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n","\t\n","\tfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n","\t\n","\t$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n","\t  // 19.4.2.1 Symbol.for(key)\n","\t  'for': function (key) {\n","\t    return has(SymbolRegistry, key += '')\n","\t      ? SymbolRegistry[key]\n","\t      : SymbolRegistry[key] = $Symbol(key);\n","\t  },\n","\t  // 19.4.2.5 Symbol.keyFor(sym)\n","\t  keyFor: function keyFor(sym) {\n","\t    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n","\t    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n","\t  },\n","\t  useSetter: function () { setter = true; },\n","\t  useSimple: function () { setter = false; }\n","\t});\n","\t\n","\t$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n","\t  // 19.1.2.2 Object.create(O [, Properties])\n","\t  create: $create,\n","\t  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n","\t  defineProperty: $defineProperty,\n","\t  // 19.1.2.3 Object.defineProperties(O, Properties)\n","\t  defineProperties: $defineProperties,\n","\t  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n","\t  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n","\t  // 19.1.2.7 Object.getOwnPropertyNames(O)\n","\t  getOwnPropertyNames: $getOwnPropertyNames,\n","\t  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n","\t  getOwnPropertySymbols: $getOwnPropertySymbols\n","\t});\n","\t\n","\t// 24.3.2 JSON.stringify(value [, replacer [, space]])\n","\t$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n","\t  var S = $Symbol();\n","\t  // MS Edge converts symbol values to JSON as {}\n","\t  // WebKit converts symbol values to JSON as null\n","\t  // V8 throws on boxed symbols\n","\t  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n","\t})), 'JSON', {\n","\t  stringify: function stringify(it) {\n","\t    var args = [it];\n","\t    var i = 1;\n","\t    var replacer, $replacer;\n","\t    while (arguments.length > i) args.push(arguments[i++]);\n","\t    $replacer = replacer = args[1];\n","\t    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n","\t    if (!isArray(replacer)) replacer = function (key, value) {\n","\t      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n","\t      if (!isSymbol(value)) return value;\n","\t    };\n","\t    args[1] = replacer;\n","\t    return _stringify.apply($JSON, args);\n","\t  }\n","\t});\n","\t\n","\t// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n","\t$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(17)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n","\t// 19.4.3.5 Symbol.prototype[@@toStringTag]\n","\tsetToStringTag($Symbol, 'Symbol');\n","\t// 20.2.1.9 Math[@@toStringTag]\n","\tsetToStringTag(Math, 'Math', true);\n","\t// 24.3.3 JSON[@@toStringTag]\n","\tsetToStringTag(global.JSON, 'JSON', true);\n","\n","\n","/***/ }),\n","/* 11 */\n","/***/ (function(module, exports) {\n","\n","\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n","\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n","\t  ? window : typeof self != 'undefined' && self.Math == Math ? self\n","\t  // eslint-disable-next-line no-new-func\n","\t  : Function('return this')();\n","\tif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","\n","\n","/***/ }),\n","/* 12 */\n","/***/ (function(module, exports) {\n","\n","\tvar hasOwnProperty = {}.hasOwnProperty;\n","\tmodule.exports = function (it, key) {\n","\t  return hasOwnProperty.call(it, key);\n","\t};\n","\n","\n","/***/ }),\n","/* 13 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// Thank's IE8 for his funny defineProperty\n","\tmodule.exports = !__webpack_require__(14)(function () {\n","\t  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n","\t});\n","\n","\n","/***/ }),\n","/* 14 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (exec) {\n","\t  try {\n","\t    return !!exec();\n","\t  } catch (e) {\n","\t    return true;\n","\t  }\n","\t};\n","\n","\n","/***/ }),\n","/* 15 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar core = __webpack_require__(16);\n","\tvar hide = __webpack_require__(17);\n","\tvar redefine = __webpack_require__(25);\n","\tvar ctx = __webpack_require__(30);\n","\tvar PROTOTYPE = 'prototype';\n","\t\n","\tvar $export = function (type, name, source) {\n","\t  var IS_FORCED = type & $export.F;\n","\t  var IS_GLOBAL = type & $export.G;\n","\t  var IS_STATIC = type & $export.S;\n","\t  var IS_PROTO = type & $export.P;\n","\t  var IS_BIND = type & $export.B;\n","\t  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n","\t  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n","\t  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n","\t  var key, own, out, exp;\n","\t  if (IS_GLOBAL) source = name;\n","\t  for (key in source) {\n","\t    // contains in native\n","\t    own = !IS_FORCED && target && target[key] !== undefined;\n","\t    // export native or passed\n","\t    out = (own ? target : source)[key];\n","\t    // bind timers to global for call from export context\n","\t    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n","\t    // extend global\n","\t    if (target) redefine(target, key, out, type & $export.U);\n","\t    // export\n","\t    if (exports[key] != out) hide(exports, key, exp);\n","\t    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n","\t  }\n","\t};\n","\tglobal.core = core;\n","\t// type bitmap\n","\t$export.F = 1;   // forced\n","\t$export.G = 2;   // global\n","\t$export.S = 4;   // static\n","\t$export.P = 8;   // proto\n","\t$export.B = 16;  // bind\n","\t$export.W = 32;  // wrap\n","\t$export.U = 64;  // safe\n","\t$export.R = 128; // real proto method for `library`\n","\tmodule.exports = $export;\n","\n","\n","/***/ }),\n","/* 16 */\n","/***/ (function(module, exports) {\n","\n","\tvar core = module.exports = { version: '2.6.5' };\n","\tif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","\n","\n","/***/ }),\n","/* 17 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar dP = __webpack_require__(18);\n","\tvar createDesc = __webpack_require__(24);\n","\tmodule.exports = __webpack_require__(13) ? function (object, key, value) {\n","\t  return dP.f(object, key, createDesc(1, value));\n","\t} : function (object, key, value) {\n","\t  object[key] = value;\n","\t  return object;\n","\t};\n","\n","\n","/***/ }),\n","/* 18 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar anObject = __webpack_require__(19);\n","\tvar IE8_DOM_DEFINE = __webpack_require__(21);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar dP = Object.defineProperty;\n","\t\n","\texports.f = __webpack_require__(13) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n","\t  anObject(O);\n","\t  P = toPrimitive(P, true);\n","\t  anObject(Attributes);\n","\t  if (IE8_DOM_DEFINE) try {\n","\t    return dP(O, P, Attributes);\n","\t  } catch (e) { /* empty */ }\n","\t  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n","\t  if ('value' in Attributes) O[P] = Attributes.value;\n","\t  return O;\n","\t};\n","\n","\n","/***/ }),\n","/* 19 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar isObject = __webpack_require__(20);\n","\tmodule.exports = function (it) {\n","\t  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n","\t  return it;\n","\t};\n","\n","\n","/***/ }),\n","/* 20 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (it) {\n","\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n","\t};\n","\n","\n","/***/ }),\n","/* 21 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tmodule.exports = !__webpack_require__(13) && !__webpack_require__(14)(function () {\n","\t  return Object.defineProperty(__webpack_require__(22)('div'), 'a', { get: function () { return 7; } }).a != 7;\n","\t});\n","\n","\n","/***/ }),\n","/* 22 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar isObject = __webpack_require__(20);\n","\tvar document = __webpack_require__(11).document;\n","\t// typeof document.createElement is 'object' in old IE\n","\tvar is = isObject(document) && isObject(document.createElement);\n","\tmodule.exports = function (it) {\n","\t  return is ? document.createElement(it) : {};\n","\t};\n","\n","\n","/***/ }),\n","/* 23 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.1.1 ToPrimitive(input [, PreferredType])\n","\tvar isObject = __webpack_require__(20);\n","\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n","\t// and the second argument - flag - preferred type is a string\n","\tmodule.exports = function (it, S) {\n","\t  if (!isObject(it)) return it;\n","\t  var fn, val;\n","\t  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n","\t  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n","\t  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n","\t  throw TypeError(\"Can't convert object to primitive value\");\n","\t};\n","\n","\n","/***/ }),\n","/* 24 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (bitmap, value) {\n","\t  return {\n","\t    enumerable: !(bitmap & 1),\n","\t    configurable: !(bitmap & 2),\n","\t    writable: !(bitmap & 4),\n","\t    value: value\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 25 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar hide = __webpack_require__(17);\n","\tvar has = __webpack_require__(12);\n","\tvar SRC = __webpack_require__(26)('src');\n","\tvar $toString = __webpack_require__(27);\n","\tvar TO_STRING = 'toString';\n","\tvar TPL = ('' + $toString).split(TO_STRING);\n","\t\n","\t__webpack_require__(16).inspectSource = function (it) {\n","\t  return $toString.call(it);\n","\t};\n","\t\n","\t(module.exports = function (O, key, val, safe) {\n","\t  var isFunction = typeof val == 'function';\n","\t  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n","\t  if (O[key] === val) return;\n","\t  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n","\t  if (O === global) {\n","\t    O[key] = val;\n","\t  } else if (!safe) {\n","\t    delete O[key];\n","\t    hide(O, key, val);\n","\t  } else if (O[key]) {\n","\t    O[key] = val;\n","\t  } else {\n","\t    hide(O, key, val);\n","\t  }\n","\t// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n","\t})(Function.prototype, TO_STRING, function toString() {\n","\t  return typeof this == 'function' && this[SRC] || $toString.call(this);\n","\t});\n","\n","\n","/***/ }),\n","/* 26 */\n","/***/ (function(module, exports) {\n","\n","\tvar id = 0;\n","\tvar px = Math.random();\n","\tmodule.exports = function (key) {\n","\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n","\t};\n","\n","\n","/***/ }),\n","/* 27 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tmodule.exports = __webpack_require__(28)('native-function-to-string', Function.toString);\n","\n","\n","/***/ }),\n","/* 28 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar core = __webpack_require__(16);\n","\tvar global = __webpack_require__(11);\n","\tvar SHARED = '__core-js_shared__';\n","\tvar store = global[SHARED] || (global[SHARED] = {});\n","\t\n","\t(module.exports = function (key, value) {\n","\t  return store[key] || (store[key] = value !== undefined ? value : {});\n","\t})('versions', []).push({\n","\t  version: core.version,\n","\t  mode: __webpack_require__(29) ? 'pure' : 'global',\n","\t  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n","\t});\n","\n","\n","/***/ }),\n","/* 29 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = false;\n","\n","\n","/***/ }),\n","/* 30 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// optional / simple context binding\n","\tvar aFunction = __webpack_require__(31);\n","\tmodule.exports = function (fn, that, length) {\n","\t  aFunction(fn);\n","\t  if (that === undefined) return fn;\n","\t  switch (length) {\n","\t    case 1: return function (a) {\n","\t      return fn.call(that, a);\n","\t    };\n","\t    case 2: return function (a, b) {\n","\t      return fn.call(that, a, b);\n","\t    };\n","\t    case 3: return function (a, b, c) {\n","\t      return fn.call(that, a, b, c);\n","\t    };\n","\t  }\n","\t  return function (/* ...args */) {\n","\t    return fn.apply(that, arguments);\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 31 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (it) {\n","\t  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n","\t  return it;\n","\t};\n","\n","\n","/***/ }),\n","/* 32 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar META = __webpack_require__(26)('meta');\n","\tvar isObject = __webpack_require__(20);\n","\tvar has = __webpack_require__(12);\n","\tvar setDesc = __webpack_require__(18).f;\n","\tvar id = 0;\n","\tvar isExtensible = Object.isExtensible || function () {\n","\t  return true;\n","\t};\n","\tvar FREEZE = !__webpack_require__(14)(function () {\n","\t  return isExtensible(Object.preventExtensions({}));\n","\t});\n","\tvar setMeta = function (it) {\n","\t  setDesc(it, META, { value: {\n","\t    i: 'O' + ++id, // object ID\n","\t    w: {}          // weak collections IDs\n","\t  } });\n","\t};\n","\tvar fastKey = function (it, create) {\n","\t  // return primitive with prefix\n","\t  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n","\t  if (!has(it, META)) {\n","\t    // can't set metadata to uncaught frozen object\n","\t    if (!isExtensible(it)) return 'F';\n","\t    // not necessary to add metadata\n","\t    if (!create) return 'E';\n","\t    // add missing metadata\n","\t    setMeta(it);\n","\t  // return object ID\n","\t  } return it[META].i;\n","\t};\n","\tvar getWeak = function (it, create) {\n","\t  if (!has(it, META)) {\n","\t    // can't set metadata to uncaught frozen object\n","\t    if (!isExtensible(it)) return true;\n","\t    // not necessary to add metadata\n","\t    if (!create) return false;\n","\t    // add missing metadata\n","\t    setMeta(it);\n","\t  // return hash weak collections IDs\n","\t  } return it[META].w;\n","\t};\n","\t// add metadata on freeze-family methods calling\n","\tvar onFreeze = function (it) {\n","\t  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n","\t  return it;\n","\t};\n","\tvar meta = module.exports = {\n","\t  KEY: META,\n","\t  NEED: false,\n","\t  fastKey: fastKey,\n","\t  getWeak: getWeak,\n","\t  onFreeze: onFreeze\n","\t};\n","\n","\n","/***/ }),\n","/* 33 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar def = __webpack_require__(18).f;\n","\tvar has = __webpack_require__(12);\n","\tvar TAG = __webpack_require__(34)('toStringTag');\n","\t\n","\tmodule.exports = function (it, tag, stat) {\n","\t  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n","\t};\n","\n","\n","/***/ }),\n","/* 34 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar store = __webpack_require__(28)('wks');\n","\tvar uid = __webpack_require__(26);\n","\tvar Symbol = __webpack_require__(11).Symbol;\n","\tvar USE_SYMBOL = typeof Symbol == 'function';\n","\t\n","\tvar $exports = module.exports = function (name) {\n","\t  return store[name] || (store[name] =\n","\t    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n","\t};\n","\t\n","\t$exports.store = store;\n","\n","\n","/***/ }),\n","/* 35 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\texports.f = __webpack_require__(34);\n","\n","\n","/***/ }),\n","/* 36 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar core = __webpack_require__(16);\n","\tvar LIBRARY = __webpack_require__(29);\n","\tvar wksExt = __webpack_require__(35);\n","\tvar defineProperty = __webpack_require__(18).f;\n","\tmodule.exports = function (name) {\n","\t  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n","\t  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n","\t};\n","\n","\n","/***/ }),\n","/* 37 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// all enumerable object keys, includes symbols\n","\tvar getKeys = __webpack_require__(38);\n","\tvar gOPS = __webpack_require__(50);\n","\tvar pIE = __webpack_require__(51);\n","\tmodule.exports = function (it) {\n","\t  var result = getKeys(it);\n","\t  var getSymbols = gOPS.f;\n","\t  if (getSymbols) {\n","\t    var symbols = getSymbols(it);\n","\t    var isEnum = pIE.f;\n","\t    var i = 0;\n","\t    var key;\n","\t    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n","\t  } return result;\n","\t};\n","\n","\n","/***/ }),\n","/* 38 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n","\tvar $keys = __webpack_require__(39);\n","\tvar enumBugKeys = __webpack_require__(49);\n","\t\n","\tmodule.exports = Object.keys || function keys(O) {\n","\t  return $keys(O, enumBugKeys);\n","\t};\n","\n","\n","/***/ }),\n","/* 39 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar has = __webpack_require__(12);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar arrayIndexOf = __webpack_require__(44)(false);\n","\tvar IE_PROTO = __webpack_require__(48)('IE_PROTO');\n","\t\n","\tmodule.exports = function (object, names) {\n","\t  var O = toIObject(object);\n","\t  var i = 0;\n","\t  var result = [];\n","\t  var key;\n","\t  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n","\t  // Don't enum bug & hidden keys\n","\t  while (names.length > i) if (has(O, key = names[i++])) {\n","\t    ~arrayIndexOf(result, key) || result.push(key);\n","\t  }\n","\t  return result;\n","\t};\n","\n","\n","/***/ }),\n","/* 40 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// to indexed object, toObject with fallback for non-array-like ES3 strings\n","\tvar IObject = __webpack_require__(41);\n","\tvar defined = __webpack_require__(43);\n","\tmodule.exports = function (it) {\n","\t  return IObject(defined(it));\n","\t};\n","\n","\n","/***/ }),\n","/* 41 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// fallback for non-array-like ES3 and non-enumerable old V8 strings\n","\tvar cof = __webpack_require__(42);\n","\t// eslint-disable-next-line no-prototype-builtins\n","\tmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n","\t  return cof(it) == 'String' ? it.split('') : Object(it);\n","\t};\n","\n","\n","/***/ }),\n","/* 42 */\n","/***/ (function(module, exports) {\n","\n","\tvar toString = {}.toString;\n","\t\n","\tmodule.exports = function (it) {\n","\t  return toString.call(it).slice(8, -1);\n","\t};\n","\n","\n","/***/ }),\n","/* 43 */\n","/***/ (function(module, exports) {\n","\n","\t// 7.2.1 RequireObjectCoercible(argument)\n","\tmodule.exports = function (it) {\n","\t  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n","\t  return it;\n","\t};\n","\n","\n","/***/ }),\n","/* 44 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// false -> Array#indexOf\n","\t// true  -> Array#includes\n","\tvar toIObject = __webpack_require__(40);\n","\tvar toLength = __webpack_require__(45);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tmodule.exports = function (IS_INCLUDES) {\n","\t  return function ($this, el, fromIndex) {\n","\t    var O = toIObject($this);\n","\t    var length = toLength(O.length);\n","\t    var index = toAbsoluteIndex(fromIndex, length);\n","\t    var value;\n","\t    // Array#includes uses SameValueZero equality algorithm\n","\t    // eslint-disable-next-line no-self-compare\n","\t    if (IS_INCLUDES && el != el) while (length > index) {\n","\t      value = O[index++];\n","\t      // eslint-disable-next-line no-self-compare\n","\t      if (value != value) return true;\n","\t    // Array#indexOf ignores holes, Array#includes - not\n","\t    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n","\t      if (O[index] === el) return IS_INCLUDES || index || 0;\n","\t    } return !IS_INCLUDES && -1;\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 45 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.1.15 ToLength\n","\tvar toInteger = __webpack_require__(46);\n","\tvar min = Math.min;\n","\tmodule.exports = function (it) {\n","\t  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n","\t};\n","\n","\n","/***/ }),\n","/* 46 */\n","/***/ (function(module, exports) {\n","\n","\t// 7.1.4 ToInteger\n","\tvar ceil = Math.ceil;\n","\tvar floor = Math.floor;\n","\tmodule.exports = function (it) {\n","\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n","\t};\n","\n","\n","/***/ }),\n","/* 47 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar toInteger = __webpack_require__(46);\n","\tvar max = Math.max;\n","\tvar min = Math.min;\n","\tmodule.exports = function (index, length) {\n","\t  index = toInteger(index);\n","\t  return index < 0 ? max(index + length, 0) : min(index, length);\n","\t};\n","\n","\n","/***/ }),\n","/* 48 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar shared = __webpack_require__(28)('keys');\n","\tvar uid = __webpack_require__(26);\n","\tmodule.exports = function (key) {\n","\t  return shared[key] || (shared[key] = uid(key));\n","\t};\n","\n","\n","/***/ }),\n","/* 49 */\n","/***/ (function(module, exports) {\n","\n","\t// IE 8- don't enum bug keys\n","\tmodule.exports = (\n","\t  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n","\t).split(',');\n","\n","\n","/***/ }),\n","/* 50 */\n","/***/ (function(module, exports) {\n","\n","\texports.f = Object.getOwnPropertySymbols;\n","\n","\n","/***/ }),\n","/* 51 */\n","/***/ (function(module, exports) {\n","\n","\texports.f = {}.propertyIsEnumerable;\n","\n","\n","/***/ }),\n","/* 52 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.2.2 IsArray(argument)\n","\tvar cof = __webpack_require__(42);\n","\tmodule.exports = Array.isArray || function isArray(arg) {\n","\t  return cof(arg) == 'Array';\n","\t};\n","\n","\n","/***/ }),\n","/* 53 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n","\tvar anObject = __webpack_require__(19);\n","\tvar dPs = __webpack_require__(54);\n","\tvar enumBugKeys = __webpack_require__(49);\n","\tvar IE_PROTO = __webpack_require__(48)('IE_PROTO');\n","\tvar Empty = function () { /* empty */ };\n","\tvar PROTOTYPE = 'prototype';\n","\t\n","\t// Create object with fake `null` prototype: use iframe Object with cleared prototype\n","\tvar createDict = function () {\n","\t  // Thrash, waste and sodomy: IE GC bug\n","\t  var iframe = __webpack_require__(22)('iframe');\n","\t  var i = enumBugKeys.length;\n","\t  var lt = '<';\n","\t  var gt = '>';\n","\t  var iframeDocument;\n","\t  iframe.style.display = 'none';\n","\t  __webpack_require__(55).appendChild(iframe);\n","\t  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n","\t  // createDict = iframe.contentWindow.Object;\n","\t  // html.removeChild(iframe);\n","\t  iframeDocument = iframe.contentWindow.document;\n","\t  iframeDocument.open();\n","\t  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n","\t  iframeDocument.close();\n","\t  createDict = iframeDocument.F;\n","\t  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n","\t  return createDict();\n","\t};\n","\t\n","\tmodule.exports = Object.create || function create(O, Properties) {\n","\t  var result;\n","\t  if (O !== null) {\n","\t    Empty[PROTOTYPE] = anObject(O);\n","\t    result = new Empty();\n","\t    Empty[PROTOTYPE] = null;\n","\t    // add \"__proto__\" for Object.getPrototypeOf polyfill\n","\t    result[IE_PROTO] = O;\n","\t  } else result = createDict();\n","\t  return Properties === undefined ? result : dPs(result, Properties);\n","\t};\n","\n","\n","/***/ }),\n","/* 54 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar dP = __webpack_require__(18);\n","\tvar anObject = __webpack_require__(19);\n","\tvar getKeys = __webpack_require__(38);\n","\t\n","\tmodule.exports = __webpack_require__(13) ? Object.defineProperties : function defineProperties(O, Properties) {\n","\t  anObject(O);\n","\t  var keys = getKeys(Properties);\n","\t  var length = keys.length;\n","\t  var i = 0;\n","\t  var P;\n","\t  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n","\t  return O;\n","\t};\n","\n","\n","/***/ }),\n","/* 55 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar document = __webpack_require__(11).document;\n","\tmodule.exports = document && document.documentElement;\n","\n","\n","/***/ }),\n","/* 56 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n","\tvar toIObject = __webpack_require__(40);\n","\tvar gOPN = __webpack_require__(57).f;\n","\tvar toString = {}.toString;\n","\t\n","\tvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n","\t  ? Object.getOwnPropertyNames(window) : [];\n","\t\n","\tvar getWindowNames = function (it) {\n","\t  try {\n","\t    return gOPN(it);\n","\t  } catch (e) {\n","\t    return windowNames.slice();\n","\t  }\n","\t};\n","\t\n","\tmodule.exports.f = function getOwnPropertyNames(it) {\n","\t  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n","\t};\n","\n","\n","/***/ }),\n","/* 57 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n","\tvar $keys = __webpack_require__(39);\n","\tvar hiddenKeys = __webpack_require__(49).concat('length', 'prototype');\n","\t\n","\texports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n","\t  return $keys(O, hiddenKeys);\n","\t};\n","\n","\n","/***/ }),\n","/* 58 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar pIE = __webpack_require__(51);\n","\tvar createDesc = __webpack_require__(24);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar has = __webpack_require__(12);\n","\tvar IE8_DOM_DEFINE = __webpack_require__(21);\n","\tvar gOPD = Object.getOwnPropertyDescriptor;\n","\t\n","\texports.f = __webpack_require__(13) ? gOPD : function getOwnPropertyDescriptor(O, P) {\n","\t  O = toIObject(O);\n","\t  P = toPrimitive(P, true);\n","\t  if (IE8_DOM_DEFINE) try {\n","\t    return gOPD(O, P);\n","\t  } catch (e) { /* empty */ }\n","\t  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n","\t};\n","\n","\n","/***/ }),\n","/* 59 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\t// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n","\t$export($export.S, 'Object', { create: __webpack_require__(53) });\n","\n","\n","/***/ }),\n","/* 60 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\t// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n","\t$export($export.S + $export.F * !__webpack_require__(13), 'Object', { defineProperty: __webpack_require__(18).f });\n","\n","\n","/***/ }),\n","/* 61 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\t// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n","\t$export($export.S + $export.F * !__webpack_require__(13), 'Object', { defineProperties: __webpack_require__(54) });\n","\n","\n","/***/ }),\n","/* 62 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n","\tvar toIObject = __webpack_require__(40);\n","\tvar $getOwnPropertyDescriptor = __webpack_require__(58).f;\n","\t\n","\t__webpack_require__(63)('getOwnPropertyDescriptor', function () {\n","\t  return function getOwnPropertyDescriptor(it, key) {\n","\t    return $getOwnPropertyDescriptor(toIObject(it), key);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 63 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// most Object methods by ES6 should accept primitives\n","\tvar $export = __webpack_require__(15);\n","\tvar core = __webpack_require__(16);\n","\tvar fails = __webpack_require__(14);\n","\tmodule.exports = function (KEY, exec) {\n","\t  var fn = (core.Object || {})[KEY] || Object[KEY];\n","\t  var exp = {};\n","\t  exp[KEY] = exec(fn);\n","\t  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n","\t};\n","\n","\n","/***/ }),\n","/* 64 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.9 Object.getPrototypeOf(O)\n","\tvar toObject = __webpack_require__(65);\n","\tvar $getPrototypeOf = __webpack_require__(66);\n","\t\n","\t__webpack_require__(63)('getPrototypeOf', function () {\n","\t  return function getPrototypeOf(it) {\n","\t    return $getPrototypeOf(toObject(it));\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 65 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.1.13 ToObject(argument)\n","\tvar defined = __webpack_require__(43);\n","\tmodule.exports = function (it) {\n","\t  return Object(defined(it));\n","\t};\n","\n","\n","/***/ }),\n","/* 66 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n","\tvar has = __webpack_require__(12);\n","\tvar toObject = __webpack_require__(65);\n","\tvar IE_PROTO = __webpack_require__(48)('IE_PROTO');\n","\tvar ObjectProto = Object.prototype;\n","\t\n","\tmodule.exports = Object.getPrototypeOf || function (O) {\n","\t  O = toObject(O);\n","\t  if (has(O, IE_PROTO)) return O[IE_PROTO];\n","\t  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n","\t    return O.constructor.prototype;\n","\t  } return O instanceof Object ? ObjectProto : null;\n","\t};\n","\n","\n","/***/ }),\n","/* 67 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.14 Object.keys(O)\n","\tvar toObject = __webpack_require__(65);\n","\tvar $keys = __webpack_require__(38);\n","\t\n","\t__webpack_require__(63)('keys', function () {\n","\t  return function keys(it) {\n","\t    return $keys(toObject(it));\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 68 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.7 Object.getOwnPropertyNames(O)\n","\t__webpack_require__(63)('getOwnPropertyNames', function () {\n","\t  return __webpack_require__(56).f;\n","\t});\n","\n","\n","/***/ }),\n","/* 69 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.5 Object.freeze(O)\n","\tvar isObject = __webpack_require__(20);\n","\tvar meta = __webpack_require__(32).onFreeze;\n","\t\n","\t__webpack_require__(63)('freeze', function ($freeze) {\n","\t  return function freeze(it) {\n","\t    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 70 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.17 Object.seal(O)\n","\tvar isObject = __webpack_require__(20);\n","\tvar meta = __webpack_require__(32).onFreeze;\n","\t\n","\t__webpack_require__(63)('seal', function ($seal) {\n","\t  return function seal(it) {\n","\t    return $seal && isObject(it) ? $seal(meta(it)) : it;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 71 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.15 Object.preventExtensions(O)\n","\tvar isObject = __webpack_require__(20);\n","\tvar meta = __webpack_require__(32).onFreeze;\n","\t\n","\t__webpack_require__(63)('preventExtensions', function ($preventExtensions) {\n","\t  return function preventExtensions(it) {\n","\t    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 72 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.12 Object.isFrozen(O)\n","\tvar isObject = __webpack_require__(20);\n","\t\n","\t__webpack_require__(63)('isFrozen', function ($isFrozen) {\n","\t  return function isFrozen(it) {\n","\t    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 73 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.13 Object.isSealed(O)\n","\tvar isObject = __webpack_require__(20);\n","\t\n","\t__webpack_require__(63)('isSealed', function ($isSealed) {\n","\t  return function isSealed(it) {\n","\t    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 74 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.2.11 Object.isExtensible(O)\n","\tvar isObject = __webpack_require__(20);\n","\t\n","\t__webpack_require__(63)('isExtensible', function ($isExtensible) {\n","\t  return function isExtensible(it) {\n","\t    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 75 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.3.1 Object.assign(target, source)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S + $export.F, 'Object', { assign: __webpack_require__(76) });\n","\n","\n","/***/ }),\n","/* 76 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 19.1.2.1 Object.assign(target, source, ...)\n","\tvar getKeys = __webpack_require__(38);\n","\tvar gOPS = __webpack_require__(50);\n","\tvar pIE = __webpack_require__(51);\n","\tvar toObject = __webpack_require__(65);\n","\tvar IObject = __webpack_require__(41);\n","\tvar $assign = Object.assign;\n","\t\n","\t// should work with symbols and should have deterministic property order (V8 bug)\n","\tmodule.exports = !$assign || __webpack_require__(14)(function () {\n","\t  var A = {};\n","\t  var B = {};\n","\t  // eslint-disable-next-line no-undef\n","\t  var S = Symbol();\n","\t  var K = 'abcdefghijklmnopqrst';\n","\t  A[S] = 7;\n","\t  K.split('').forEach(function (k) { B[k] = k; });\n","\t  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n","\t}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n","\t  var T = toObject(target);\n","\t  var aLen = arguments.length;\n","\t  var index = 1;\n","\t  var getSymbols = gOPS.f;\n","\t  var isEnum = pIE.f;\n","\t  while (aLen > index) {\n","\t    var S = IObject(arguments[index++]);\n","\t    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n","\t    var length = keys.length;\n","\t    var j = 0;\n","\t    var key;\n","\t    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n","\t  } return T;\n","\t} : $assign;\n","\n","\n","/***/ }),\n","/* 77 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.3.10 Object.is(value1, value2)\n","\tvar $export = __webpack_require__(15);\n","\t$export($export.S, 'Object', { is: __webpack_require__(78) });\n","\n","\n","/***/ }),\n","/* 78 */\n","/***/ (function(module, exports) {\n","\n","\t// 7.2.9 SameValue(x, y)\n","\tmodule.exports = Object.is || function is(x, y) {\n","\t  // eslint-disable-next-line no-self-compare\n","\t  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n","\t};\n","\n","\n","/***/ }),\n","/* 79 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.1.3.19 Object.setPrototypeOf(O, proto)\n","\tvar $export = __webpack_require__(15);\n","\t$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(80).set });\n","\n","\n","/***/ }),\n","/* 80 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// Works with __proto__ only. Old v8 can't work with null proto objects.\n","\t/* eslint-disable no-proto */\n","\tvar isObject = __webpack_require__(20);\n","\tvar anObject = __webpack_require__(19);\n","\tvar check = function (O, proto) {\n","\t  anObject(O);\n","\t  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n","\t};\n","\tmodule.exports = {\n","\t  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n","\t    function (test, buggy, set) {\n","\t      try {\n","\t        set = __webpack_require__(30)(Function.call, __webpack_require__(58).f(Object.prototype, '__proto__').set, 2);\n","\t        set(test, []);\n","\t        buggy = !(test instanceof Array);\n","\t      } catch (e) { buggy = true; }\n","\t      return function setPrototypeOf(O, proto) {\n","\t        check(O, proto);\n","\t        if (buggy) O.__proto__ = proto;\n","\t        else set(O, proto);\n","\t        return O;\n","\t      };\n","\t    }({}, false) : undefined),\n","\t  check: check\n","\t};\n","\n","\n","/***/ }),\n","/* 81 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 19.1.3.6 Object.prototype.toString()\n","\tvar classof = __webpack_require__(82);\n","\tvar test = {};\n","\ttest[__webpack_require__(34)('toStringTag')] = 'z';\n","\tif (test + '' != '[object z]') {\n","\t  __webpack_require__(25)(Object.prototype, 'toString', function toString() {\n","\t    return '[object ' + classof(this) + ']';\n","\t  }, true);\n","\t}\n","\n","\n","/***/ }),\n","/* 82 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// getting tag from 19.1.3.6 Object.prototype.toString()\n","\tvar cof = __webpack_require__(42);\n","\tvar TAG = __webpack_require__(34)('toStringTag');\n","\t// ES3 wrong here\n","\tvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n","\t\n","\t// fallback for IE11 Script Access Denied error\n","\tvar tryGet = function (it, key) {\n","\t  try {\n","\t    return it[key];\n","\t  } catch (e) { /* empty */ }\n","\t};\n","\t\n","\tmodule.exports = function (it) {\n","\t  var O, T, B;\n","\t  return it === undefined ? 'Undefined' : it === null ? 'Null'\n","\t    // @@toStringTag case\n","\t    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n","\t    // builtinTag case\n","\t    : ARG ? cof(O)\n","\t    // ES3 arguments fallback\n","\t    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n","\t};\n","\n","\n","/***/ }),\n","/* 83 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P, 'Function', { bind: __webpack_require__(84) });\n","\n","\n","/***/ }),\n","/* 84 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar aFunction = __webpack_require__(31);\n","\tvar isObject = __webpack_require__(20);\n","\tvar invoke = __webpack_require__(85);\n","\tvar arraySlice = [].slice;\n","\tvar factories = {};\n","\t\n","\tvar construct = function (F, len, args) {\n","\t  if (!(len in factories)) {\n","\t    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n","\t    // eslint-disable-next-line no-new-func\n","\t    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n","\t  } return factories[len](F, args);\n","\t};\n","\t\n","\tmodule.exports = Function.bind || function bind(that /* , ...args */) {\n","\t  var fn = aFunction(this);\n","\t  var partArgs = arraySlice.call(arguments, 1);\n","\t  var bound = function (/* args... */) {\n","\t    var args = partArgs.concat(arraySlice.call(arguments));\n","\t    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n","\t  };\n","\t  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n","\t  return bound;\n","\t};\n","\n","\n","/***/ }),\n","/* 85 */\n","/***/ (function(module, exports) {\n","\n","\t// fast apply, http://jsperf.lnkit.com/fast-apply/5\n","\tmodule.exports = function (fn, args, that) {\n","\t  var un = that === undefined;\n","\t  switch (args.length) {\n","\t    case 0: return un ? fn()\n","\t                      : fn.call(that);\n","\t    case 1: return un ? fn(args[0])\n","\t                      : fn.call(that, args[0]);\n","\t    case 2: return un ? fn(args[0], args[1])\n","\t                      : fn.call(that, args[0], args[1]);\n","\t    case 3: return un ? fn(args[0], args[1], args[2])\n","\t                      : fn.call(that, args[0], args[1], args[2]);\n","\t    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n","\t                      : fn.call(that, args[0], args[1], args[2], args[3]);\n","\t  } return fn.apply(that, args);\n","\t};\n","\n","\n","/***/ }),\n","/* 86 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar dP = __webpack_require__(18).f;\n","\tvar FProto = Function.prototype;\n","\tvar nameRE = /^\\s*function ([^ (]*)/;\n","\tvar NAME = 'name';\n","\t\n","\t// 19.2.4.2 name\n","\tNAME in FProto || __webpack_require__(13) && dP(FProto, NAME, {\n","\t  configurable: true,\n","\t  get: function () {\n","\t    try {\n","\t      return ('' + this).match(nameRE)[1];\n","\t    } catch (e) {\n","\t      return '';\n","\t    }\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 87 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar isObject = __webpack_require__(20);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar HAS_INSTANCE = __webpack_require__(34)('hasInstance');\n","\tvar FunctionProto = Function.prototype;\n","\t// 19.2.3.6 Function.prototype[@@hasInstance](V)\n","\tif (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(18).f(FunctionProto, HAS_INSTANCE, { value: function (O) {\n","\t  if (typeof this != 'function' || !isObject(O)) return false;\n","\t  if (!isObject(this.prototype)) return O instanceof this;\n","\t  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n","\t  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;\n","\t  return false;\n","\t} });\n","\n","\n","/***/ }),\n","/* 88 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar $parseInt = __webpack_require__(89);\n","\t// 18.2.5 parseInt(string, radix)\n","\t$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });\n","\n","\n","/***/ }),\n","/* 89 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $parseInt = __webpack_require__(11).parseInt;\n","\tvar $trim = __webpack_require__(90).trim;\n","\tvar ws = __webpack_require__(91);\n","\tvar hex = /^[-+]?0[xX]/;\n","\t\n","\tmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n","\t  var string = $trim(String(str), 3);\n","\t  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n","\t} : $parseInt;\n","\n","\n","/***/ }),\n","/* 90 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar defined = __webpack_require__(43);\n","\tvar fails = __webpack_require__(14);\n","\tvar spaces = __webpack_require__(91);\n","\tvar space = '[' + spaces + ']';\n","\tvar non = '\\u200b\\u0085';\n","\tvar ltrim = RegExp('^' + space + space + '*');\n","\tvar rtrim = RegExp(space + space + '*$');\n","\t\n","\tvar exporter = function (KEY, exec, ALIAS) {\n","\t  var exp = {};\n","\t  var FORCE = fails(function () {\n","\t    return !!spaces[KEY]() || non[KEY]() != non;\n","\t  });\n","\t  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n","\t  if (ALIAS) exp[ALIAS] = fn;\n","\t  $export($export.P + $export.F * FORCE, 'String', exp);\n","\t};\n","\t\n","\t// 1 -> String#trimLeft\n","\t// 2 -> String#trimRight\n","\t// 3 -> String#trim\n","\tvar trim = exporter.trim = function (string, TYPE) {\n","\t  string = String(defined(string));\n","\t  if (TYPE & 1) string = string.replace(ltrim, '');\n","\t  if (TYPE & 2) string = string.replace(rtrim, '');\n","\t  return string;\n","\t};\n","\t\n","\tmodule.exports = exporter;\n","\n","\n","/***/ }),\n","/* 91 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n","\t  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","\n","\n","/***/ }),\n","/* 92 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar $parseFloat = __webpack_require__(93);\n","\t// 18.2.4 parseFloat(string)\n","\t$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n","\n","\n","/***/ }),\n","/* 93 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $parseFloat = __webpack_require__(11).parseFloat;\n","\tvar $trim = __webpack_require__(90).trim;\n","\t\n","\tmodule.exports = 1 / $parseFloat(__webpack_require__(91) + '-0') !== -Infinity ? function parseFloat(str) {\n","\t  var string = $trim(String(str), 3);\n","\t  var result = $parseFloat(string);\n","\t  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n","\t} : $parseFloat;\n","\n","\n","/***/ }),\n","/* 94 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar global = __webpack_require__(11);\n","\tvar has = __webpack_require__(12);\n","\tvar cof = __webpack_require__(42);\n","\tvar inheritIfRequired = __webpack_require__(95);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar fails = __webpack_require__(14);\n","\tvar gOPN = __webpack_require__(57).f;\n","\tvar gOPD = __webpack_require__(58).f;\n","\tvar dP = __webpack_require__(18).f;\n","\tvar $trim = __webpack_require__(90).trim;\n","\tvar NUMBER = 'Number';\n","\tvar $Number = global[NUMBER];\n","\tvar Base = $Number;\n","\tvar proto = $Number.prototype;\n","\t// Opera ~12 has broken Object#toString\n","\tvar BROKEN_COF = cof(__webpack_require__(53)(proto)) == NUMBER;\n","\tvar TRIM = 'trim' in String.prototype;\n","\t\n","\t// 7.1.3 ToNumber(argument)\n","\tvar toNumber = function (argument) {\n","\t  var it = toPrimitive(argument, false);\n","\t  if (typeof it == 'string' && it.length > 2) {\n","\t    it = TRIM ? it.trim() : $trim(it, 3);\n","\t    var first = it.charCodeAt(0);\n","\t    var third, radix, maxCode;\n","\t    if (first === 43 || first === 45) {\n","\t      third = it.charCodeAt(2);\n","\t      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n","\t    } else if (first === 48) {\n","\t      switch (it.charCodeAt(1)) {\n","\t        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n","\t        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n","\t        default: return +it;\n","\t      }\n","\t      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n","\t        code = digits.charCodeAt(i);\n","\t        // parseInt parses a string to a first unavailable symbol\n","\t        // but ToNumber should return NaN if a string contains unavailable symbols\n","\t        if (code < 48 || code > maxCode) return NaN;\n","\t      } return parseInt(digits, radix);\n","\t    }\n","\t  } return +it;\n","\t};\n","\t\n","\tif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n","\t  $Number = function Number(value) {\n","\t    var it = arguments.length < 1 ? 0 : value;\n","\t    var that = this;\n","\t    return that instanceof $Number\n","\t      // check on 1..constructor(foo) case\n","\t      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n","\t        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n","\t  };\n","\t  for (var keys = __webpack_require__(13) ? gOPN(Base) : (\n","\t    // ES3:\n","\t    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n","\t    // ES6 (in case, if modules with ES6 Number statics required before):\n","\t    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n","\t    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n","\t  ).split(','), j = 0, key; keys.length > j; j++) {\n","\t    if (has(Base, key = keys[j]) && !has($Number, key)) {\n","\t      dP($Number, key, gOPD(Base, key));\n","\t    }\n","\t  }\n","\t  $Number.prototype = proto;\n","\t  proto.constructor = $Number;\n","\t  __webpack_require__(25)(global, NUMBER, $Number);\n","\t}\n","\n","\n","/***/ }),\n","/* 95 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar isObject = __webpack_require__(20);\n","\tvar setPrototypeOf = __webpack_require__(80).set;\n","\tmodule.exports = function (that, target, C) {\n","\t  var S = target.constructor;\n","\t  var P;\n","\t  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n","\t    setPrototypeOf(that, P);\n","\t  } return that;\n","\t};\n","\n","\n","/***/ }),\n","/* 96 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toInteger = __webpack_require__(46);\n","\tvar aNumberValue = __webpack_require__(97);\n","\tvar repeat = __webpack_require__(98);\n","\tvar $toFixed = 1.0.toFixed;\n","\tvar floor = Math.floor;\n","\tvar data = [0, 0, 0, 0, 0, 0];\n","\tvar ERROR = 'Number.toFixed: incorrect invocation!';\n","\tvar ZERO = '0';\n","\t\n","\tvar multiply = function (n, c) {\n","\t  var i = -1;\n","\t  var c2 = c;\n","\t  while (++i < 6) {\n","\t    c2 += n * data[i];\n","\t    data[i] = c2 % 1e7;\n","\t    c2 = floor(c2 / 1e7);\n","\t  }\n","\t};\n","\tvar divide = function (n) {\n","\t  var i = 6;\n","\t  var c = 0;\n","\t  while (--i >= 0) {\n","\t    c += data[i];\n","\t    data[i] = floor(c / n);\n","\t    c = (c % n) * 1e7;\n","\t  }\n","\t};\n","\tvar numToString = function () {\n","\t  var i = 6;\n","\t  var s = '';\n","\t  while (--i >= 0) {\n","\t    if (s !== '' || i === 0 || data[i] !== 0) {\n","\t      var t = String(data[i]);\n","\t      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\n","\t    }\n","\t  } return s;\n","\t};\n","\tvar pow = function (x, n, acc) {\n","\t  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n","\t};\n","\tvar log = function (x) {\n","\t  var n = 0;\n","\t  var x2 = x;\n","\t  while (x2 >= 4096) {\n","\t    n += 12;\n","\t    x2 /= 4096;\n","\t  }\n","\t  while (x2 >= 2) {\n","\t    n += 1;\n","\t    x2 /= 2;\n","\t  } return n;\n","\t};\n","\t\n","\t$export($export.P + $export.F * (!!$toFixed && (\n","\t  0.00008.toFixed(3) !== '0.000' ||\n","\t  0.9.toFixed(0) !== '1' ||\n","\t  1.255.toFixed(2) !== '1.25' ||\n","\t  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n","\t) || !__webpack_require__(14)(function () {\n","\t  // V8 ~ Android 4.3-\n","\t  $toFixed.call({});\n","\t})), 'Number', {\n","\t  toFixed: function toFixed(fractionDigits) {\n","\t    var x = aNumberValue(this, ERROR);\n","\t    var f = toInteger(fractionDigits);\n","\t    var s = '';\n","\t    var m = ZERO;\n","\t    var e, z, j, k;\n","\t    if (f < 0 || f > 20) throw RangeError(ERROR);\n","\t    // eslint-disable-next-line no-self-compare\n","\t    if (x != x) return 'NaN';\n","\t    if (x <= -1e21 || x >= 1e21) return String(x);\n","\t    if (x < 0) {\n","\t      s = '-';\n","\t      x = -x;\n","\t    }\n","\t    if (x > 1e-21) {\n","\t      e = log(x * pow(2, 69, 1)) - 69;\n","\t      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n","\t      z *= 0x10000000000000;\n","\t      e = 52 - e;\n","\t      if (e > 0) {\n","\t        multiply(0, z);\n","\t        j = f;\n","\t        while (j >= 7) {\n","\t          multiply(1e7, 0);\n","\t          j -= 7;\n","\t        }\n","\t        multiply(pow(10, j, 1), 0);\n","\t        j = e - 1;\n","\t        while (j >= 23) {\n","\t          divide(1 << 23);\n","\t          j -= 23;\n","\t        }\n","\t        divide(1 << j);\n","\t        multiply(1, 1);\n","\t        divide(2);\n","\t        m = numToString();\n","\t      } else {\n","\t        multiply(0, z);\n","\t        multiply(1 << -e, 0);\n","\t        m = numToString() + repeat.call(ZERO, f);\n","\t      }\n","\t    }\n","\t    if (f > 0) {\n","\t      k = m.length;\n","\t      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n","\t    } else {\n","\t      m = s + m;\n","\t    } return m;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 97 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar cof = __webpack_require__(42);\n","\tmodule.exports = function (it, msg) {\n","\t  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);\n","\t  return +it;\n","\t};\n","\n","\n","/***/ }),\n","/* 98 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar toInteger = __webpack_require__(46);\n","\tvar defined = __webpack_require__(43);\n","\t\n","\tmodule.exports = function repeat(count) {\n","\t  var str = String(defined(this));\n","\t  var res = '';\n","\t  var n = toInteger(count);\n","\t  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n","\t  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n","\t  return res;\n","\t};\n","\n","\n","/***/ }),\n","/* 99 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $fails = __webpack_require__(14);\n","\tvar aNumberValue = __webpack_require__(97);\n","\tvar $toPrecision = 1.0.toPrecision;\n","\t\n","\t$export($export.P + $export.F * ($fails(function () {\n","\t  // IE7-\n","\t  return $toPrecision.call(1, undefined) !== '1';\n","\t}) || !$fails(function () {\n","\t  // V8 ~ Android 4.3-\n","\t  $toPrecision.call({});\n","\t})), 'Number', {\n","\t  toPrecision: function toPrecision(precision) {\n","\t    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n","\t    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 100 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.1 Number.EPSILON\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n","\n","\n","/***/ }),\n","/* 101 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.2 Number.isFinite(number)\n","\tvar $export = __webpack_require__(15);\n","\tvar _isFinite = __webpack_require__(11).isFinite;\n","\t\n","\t$export($export.S, 'Number', {\n","\t  isFinite: function isFinite(it) {\n","\t    return typeof it == 'number' && _isFinite(it);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 102 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.3 Number.isInteger(number)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Number', { isInteger: __webpack_require__(103) });\n","\n","\n","/***/ }),\n","/* 103 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.3 Number.isInteger(number)\n","\tvar isObject = __webpack_require__(20);\n","\tvar floor = Math.floor;\n","\tmodule.exports = function isInteger(it) {\n","\t  return !isObject(it) && isFinite(it) && floor(it) === it;\n","\t};\n","\n","\n","/***/ }),\n","/* 104 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.4 Number.isNaN(number)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Number', {\n","\t  isNaN: function isNaN(number) {\n","\t    // eslint-disable-next-line no-self-compare\n","\t    return number != number;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 105 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.5 Number.isSafeInteger(number)\n","\tvar $export = __webpack_require__(15);\n","\tvar isInteger = __webpack_require__(103);\n","\tvar abs = Math.abs;\n","\t\n","\t$export($export.S, 'Number', {\n","\t  isSafeInteger: function isSafeInteger(number) {\n","\t    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 106 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.6 Number.MAX_SAFE_INTEGER\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n","\n","\n","/***/ }),\n","/* 107 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.1.2.10 Number.MIN_SAFE_INTEGER\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });\n","\n","\n","/***/ }),\n","/* 108 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar $parseFloat = __webpack_require__(93);\n","\t// 20.1.2.12 Number.parseFloat(string)\n","\t$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });\n","\n","\n","/***/ }),\n","/* 109 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar $parseInt = __webpack_require__(89);\n","\t// 20.1.2.13 Number.parseInt(string, radix)\n","\t$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n","\n","\n","/***/ }),\n","/* 110 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.3 Math.acosh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar log1p = __webpack_require__(111);\n","\tvar sqrt = Math.sqrt;\n","\tvar $acosh = Math.acosh;\n","\t\n","\t$export($export.S + $export.F * !($acosh\n","\t  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n","\t  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n","\t  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n","\t  && $acosh(Infinity) == Infinity\n","\t), 'Math', {\n","\t  acosh: function acosh(x) {\n","\t    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n","\t      ? Math.log(x) + Math.LN2\n","\t      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 111 */\n","/***/ (function(module, exports) {\n","\n","\t// 20.2.2.20 Math.log1p(x)\n","\tmodule.exports = Math.log1p || function log1p(x) {\n","\t  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n","\t};\n","\n","\n","/***/ }),\n","/* 112 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.5 Math.asinh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar $asinh = Math.asinh;\n","\t\n","\tfunction asinh(x) {\n","\t  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n","\t}\n","\t\n","\t// Tor Browser bug: Math.asinh(0) -> -0\n","\t$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });\n","\n","\n","/***/ }),\n","/* 113 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.7 Math.atanh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar $atanh = Math.atanh;\n","\t\n","\t// Tor Browser bug: Math.atanh(-0) -> 0\n","\t$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n","\t  atanh: function atanh(x) {\n","\t    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 114 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.9 Math.cbrt(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar sign = __webpack_require__(115);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  cbrt: function cbrt(x) {\n","\t    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 115 */\n","/***/ (function(module, exports) {\n","\n","\t// 20.2.2.28 Math.sign(x)\n","\tmodule.exports = Math.sign || function sign(x) {\n","\t  // eslint-disable-next-line no-self-compare\n","\t  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n","\t};\n","\n","\n","/***/ }),\n","/* 116 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.11 Math.clz32(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  clz32: function clz32(x) {\n","\t    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 117 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.12 Math.cosh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar exp = Math.exp;\n","\t\n","\t$export($export.S, 'Math', {\n","\t  cosh: function cosh(x) {\n","\t    return (exp(x = +x) + exp(-x)) / 2;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 118 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.14 Math.expm1(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar $expm1 = __webpack_require__(119);\n","\t\n","\t$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });\n","\n","\n","/***/ }),\n","/* 119 */\n","/***/ (function(module, exports) {\n","\n","\t// 20.2.2.14 Math.expm1(x)\n","\tvar $expm1 = Math.expm1;\n","\tmodule.exports = (!$expm1\n","\t  // Old FF bug\n","\t  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n","\t  // Tor Browser bug\n","\t  || $expm1(-2e-17) != -2e-17\n","\t) ? function expm1(x) {\n","\t  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n","\t} : $expm1;\n","\n","\n","/***/ }),\n","/* 120 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.16 Math.fround(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { fround: __webpack_require__(121) });\n","\n","\n","/***/ }),\n","/* 121 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.16 Math.fround(x)\n","\tvar sign = __webpack_require__(115);\n","\tvar pow = Math.pow;\n","\tvar EPSILON = pow(2, -52);\n","\tvar EPSILON32 = pow(2, -23);\n","\tvar MAX32 = pow(2, 127) * (2 - EPSILON32);\n","\tvar MIN32 = pow(2, -126);\n","\t\n","\tvar roundTiesToEven = function (n) {\n","\t  return n + 1 / EPSILON - 1 / EPSILON;\n","\t};\n","\t\n","\tmodule.exports = Math.fround || function fround(x) {\n","\t  var $abs = Math.abs(x);\n","\t  var $sign = sign(x);\n","\t  var a, result;\n","\t  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n","\t  a = (1 + EPSILON32 / EPSILON) * $abs;\n","\t  result = a - (a - $abs);\n","\t  // eslint-disable-next-line no-self-compare\n","\t  if (result > MAX32 || result != result) return $sign * Infinity;\n","\t  return $sign * result;\n","\t};\n","\n","\n","/***/ }),\n","/* 122 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\n","\tvar $export = __webpack_require__(15);\n","\tvar abs = Math.abs;\n","\t\n","\t$export($export.S, 'Math', {\n","\t  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n","\t    var sum = 0;\n","\t    var i = 0;\n","\t    var aLen = arguments.length;\n","\t    var larg = 0;\n","\t    var arg, div;\n","\t    while (i < aLen) {\n","\t      arg = abs(arguments[i++]);\n","\t      if (larg < arg) {\n","\t        div = larg / arg;\n","\t        sum = sum * div * div + 1;\n","\t        larg = arg;\n","\t      } else if (arg > 0) {\n","\t        div = arg / larg;\n","\t        sum += div * div;\n","\t      } else sum += arg;\n","\t    }\n","\t    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 123 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.18 Math.imul(x, y)\n","\tvar $export = __webpack_require__(15);\n","\tvar $imul = Math.imul;\n","\t\n","\t// some WebKit versions fails with big numbers, some has wrong arity\n","\t$export($export.S + $export.F * __webpack_require__(14)(function () {\n","\t  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n","\t}), 'Math', {\n","\t  imul: function imul(x, y) {\n","\t    var UINT16 = 0xffff;\n","\t    var xn = +x;\n","\t    var yn = +y;\n","\t    var xl = UINT16 & xn;\n","\t    var yl = UINT16 & yn;\n","\t    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 124 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.21 Math.log10(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  log10: function log10(x) {\n","\t    return Math.log(x) * Math.LOG10E;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 125 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.20 Math.log1p(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { log1p: __webpack_require__(111) });\n","\n","\n","/***/ }),\n","/* 126 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.22 Math.log2(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  log2: function log2(x) {\n","\t    return Math.log(x) / Math.LN2;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 127 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.28 Math.sign(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { sign: __webpack_require__(115) });\n","\n","\n","/***/ }),\n","/* 128 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.30 Math.sinh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar expm1 = __webpack_require__(119);\n","\tvar exp = Math.exp;\n","\t\n","\t// V8 near Chromium 38 has a problem with very small numbers\n","\t$export($export.S + $export.F * __webpack_require__(14)(function () {\n","\t  return !Math.sinh(-2e-17) != -2e-17;\n","\t}), 'Math', {\n","\t  sinh: function sinh(x) {\n","\t    return Math.abs(x = +x) < 1\n","\t      ? (expm1(x) - expm1(-x)) / 2\n","\t      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 129 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.33 Math.tanh(x)\n","\tvar $export = __webpack_require__(15);\n","\tvar expm1 = __webpack_require__(119);\n","\tvar exp = Math.exp;\n","\t\n","\t$export($export.S, 'Math', {\n","\t  tanh: function tanh(x) {\n","\t    var a = expm1(x = +x);\n","\t    var b = expm1(-x);\n","\t    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 130 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.2.2.34 Math.trunc(x)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  trunc: function trunc(it) {\n","\t    return (it > 0 ? Math.floor : Math.ceil)(it);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 131 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tvar fromCharCode = String.fromCharCode;\n","\tvar $fromCodePoint = String.fromCodePoint;\n","\t\n","\t// length should be 1, old FF problem\n","\t$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n","\t  // 21.1.2.2 String.fromCodePoint(...codePoints)\n","\t  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n","\t    var res = [];\n","\t    var aLen = arguments.length;\n","\t    var i = 0;\n","\t    var code;\n","\t    while (aLen > i) {\n","\t      code = +arguments[i++];\n","\t      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n","\t      res.push(code < 0x10000\n","\t        ? fromCharCode(code)\n","\t        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n","\t      );\n","\t    } return res.join('');\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 132 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar toLength = __webpack_require__(45);\n","\t\n","\t$export($export.S, 'String', {\n","\t  // 21.1.2.4 String.raw(callSite, ...substitutions)\n","\t  raw: function raw(callSite) {\n","\t    var tpl = toIObject(callSite.raw);\n","\t    var len = toLength(tpl.length);\n","\t    var aLen = arguments.length;\n","\t    var res = [];\n","\t    var i = 0;\n","\t    while (len > i) {\n","\t      res.push(String(tpl[i++]));\n","\t      if (i < aLen) res.push(String(arguments[i]));\n","\t    } return res.join('');\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 133 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 21.1.3.25 String.prototype.trim()\n","\t__webpack_require__(90)('trim', function ($trim) {\n","\t  return function trim() {\n","\t    return $trim(this, 3);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 134 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $at = __webpack_require__(135)(true);\n","\t\n","\t// 21.1.3.27 String.prototype[@@iterator]()\n","\t__webpack_require__(136)(String, 'String', function (iterated) {\n","\t  this._t = String(iterated); // target\n","\t  this._i = 0;                // next index\n","\t// 21.1.5.2.1 %StringIteratorPrototype%.next()\n","\t}, function () {\n","\t  var O = this._t;\n","\t  var index = this._i;\n","\t  var point;\n","\t  if (index >= O.length) return { value: undefined, done: true };\n","\t  point = $at(O, index);\n","\t  this._i += point.length;\n","\t  return { value: point, done: false };\n","\t});\n","\n","\n","/***/ }),\n","/* 135 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar toInteger = __webpack_require__(46);\n","\tvar defined = __webpack_require__(43);\n","\t// true  -> String#at\n","\t// false -> String#codePointAt\n","\tmodule.exports = function (TO_STRING) {\n","\t  return function (that, pos) {\n","\t    var s = String(defined(that));\n","\t    var i = toInteger(pos);\n","\t    var l = s.length;\n","\t    var a, b;\n","\t    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n","\t    a = s.charCodeAt(i);\n","\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n","\t      ? TO_STRING ? s.charAt(i) : a\n","\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 136 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar LIBRARY = __webpack_require__(29);\n","\tvar $export = __webpack_require__(15);\n","\tvar redefine = __webpack_require__(25);\n","\tvar hide = __webpack_require__(17);\n","\tvar Iterators = __webpack_require__(137);\n","\tvar $iterCreate = __webpack_require__(138);\n","\tvar setToStringTag = __webpack_require__(33);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar ITERATOR = __webpack_require__(34)('iterator');\n","\tvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\n","\tvar FF_ITERATOR = '@@iterator';\n","\tvar KEYS = 'keys';\n","\tvar VALUES = 'values';\n","\t\n","\tvar returnThis = function () { return this; };\n","\t\n","\tmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n","\t  $iterCreate(Constructor, NAME, next);\n","\t  var getMethod = function (kind) {\n","\t    if (!BUGGY && kind in proto) return proto[kind];\n","\t    switch (kind) {\n","\t      case KEYS: return function keys() { return new Constructor(this, kind); };\n","\t      case VALUES: return function values() { return new Constructor(this, kind); };\n","\t    } return function entries() { return new Constructor(this, kind); };\n","\t  };\n","\t  var TAG = NAME + ' Iterator';\n","\t  var DEF_VALUES = DEFAULT == VALUES;\n","\t  var VALUES_BUG = false;\n","\t  var proto = Base.prototype;\n","\t  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n","\t  var $default = $native || getMethod(DEFAULT);\n","\t  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n","\t  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n","\t  var methods, key, IteratorPrototype;\n","\t  // Fix native\n","\t  if ($anyNative) {\n","\t    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n","\t    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n","\t      // Set @@toStringTag to native iterators\n","\t      setToStringTag(IteratorPrototype, TAG, true);\n","\t      // fix for some old engines\n","\t      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n","\t    }\n","\t  }\n","\t  // fix Array#{values, @@iterator}.name in V8 / FF\n","\t  if (DEF_VALUES && $native && $native.name !== VALUES) {\n","\t    VALUES_BUG = true;\n","\t    $default = function values() { return $native.call(this); };\n","\t  }\n","\t  // Define iterator\n","\t  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n","\t    hide(proto, ITERATOR, $default);\n","\t  }\n","\t  // Plug for library\n","\t  Iterators[NAME] = $default;\n","\t  Iterators[TAG] = returnThis;\n","\t  if (DEFAULT) {\n","\t    methods = {\n","\t      values: DEF_VALUES ? $default : getMethod(VALUES),\n","\t      keys: IS_SET ? $default : getMethod(KEYS),\n","\t      entries: $entries\n","\t    };\n","\t    if (FORCED) for (key in methods) {\n","\t      if (!(key in proto)) redefine(proto, key, methods[key]);\n","\t    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n","\t  }\n","\t  return methods;\n","\t};\n","\n","\n","/***/ }),\n","/* 137 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = {};\n","\n","\n","/***/ }),\n","/* 138 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar create = __webpack_require__(53);\n","\tvar descriptor = __webpack_require__(24);\n","\tvar setToStringTag = __webpack_require__(33);\n","\tvar IteratorPrototype = {};\n","\t\n","\t// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n","\t__webpack_require__(17)(IteratorPrototype, __webpack_require__(34)('iterator'), function () { return this; });\n","\t\n","\tmodule.exports = function (Constructor, NAME, next) {\n","\t  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n","\t  setToStringTag(Constructor, NAME + ' Iterator');\n","\t};\n","\n","\n","/***/ }),\n","/* 139 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $at = __webpack_require__(135)(false);\n","\t$export($export.P, 'String', {\n","\t  // 21.1.3.3 String.prototype.codePointAt(pos)\n","\t  codePointAt: function codePointAt(pos) {\n","\t    return $at(this, pos);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 140 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toLength = __webpack_require__(45);\n","\tvar context = __webpack_require__(141);\n","\tvar ENDS_WITH = 'endsWith';\n","\tvar $endsWith = ''[ENDS_WITH];\n","\t\n","\t$export($export.P + $export.F * __webpack_require__(143)(ENDS_WITH), 'String', {\n","\t  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n","\t    var that = context(this, searchString, ENDS_WITH);\n","\t    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n","\t    var len = toLength(that.length);\n","\t    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n","\t    var search = String(searchString);\n","\t    return $endsWith\n","\t      ? $endsWith.call(that, search, end)\n","\t      : that.slice(end - search.length, end) === search;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 141 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// helper for String#{startsWith, endsWith, includes}\n","\tvar isRegExp = __webpack_require__(142);\n","\tvar defined = __webpack_require__(43);\n","\t\n","\tmodule.exports = function (that, searchString, NAME) {\n","\t  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n","\t  return String(defined(that));\n","\t};\n","\n","\n","/***/ }),\n","/* 142 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.2.8 IsRegExp(argument)\n","\tvar isObject = __webpack_require__(20);\n","\tvar cof = __webpack_require__(42);\n","\tvar MATCH = __webpack_require__(34)('match');\n","\tmodule.exports = function (it) {\n","\t  var isRegExp;\n","\t  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n","\t};\n","\n","\n","/***/ }),\n","/* 143 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar MATCH = __webpack_require__(34)('match');\n","\tmodule.exports = function (KEY) {\n","\t  var re = /./;\n","\t  try {\n","\t    '/./'[KEY](re);\n","\t  } catch (e) {\n","\t    try {\n","\t      re[MATCH] = false;\n","\t      return !'/./'[KEY](re);\n","\t    } catch (f) { /* empty */ }\n","\t  } return true;\n","\t};\n","\n","\n","/***/ }),\n","/* 144 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar context = __webpack_require__(141);\n","\tvar INCLUDES = 'includes';\n","\t\n","\t$export($export.P + $export.F * __webpack_require__(143)(INCLUDES), 'String', {\n","\t  includes: function includes(searchString /* , position = 0 */) {\n","\t    return !!~context(this, searchString, INCLUDES)\n","\t      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 145 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P, 'String', {\n","\t  // 21.1.3.13 String.prototype.repeat(count)\n","\t  repeat: __webpack_require__(98)\n","\t});\n","\n","\n","/***/ }),\n","/* 146 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toLength = __webpack_require__(45);\n","\tvar context = __webpack_require__(141);\n","\tvar STARTS_WITH = 'startsWith';\n","\tvar $startsWith = ''[STARTS_WITH];\n","\t\n","\t$export($export.P + $export.F * __webpack_require__(143)(STARTS_WITH), 'String', {\n","\t  startsWith: function startsWith(searchString /* , position = 0 */) {\n","\t    var that = context(this, searchString, STARTS_WITH);\n","\t    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n","\t    var search = String(searchString);\n","\t    return $startsWith\n","\t      ? $startsWith.call(that, search, index)\n","\t      : that.slice(index, index + search.length) === search;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 147 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.2 String.prototype.anchor(name)\n","\t__webpack_require__(148)('anchor', function (createHTML) {\n","\t  return function anchor(name) {\n","\t    return createHTML(this, 'a', 'name', name);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 148 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar fails = __webpack_require__(14);\n","\tvar defined = __webpack_require__(43);\n","\tvar quot = /\"/g;\n","\t// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\n","\tvar createHTML = function (string, tag, attribute, value) {\n","\t  var S = String(defined(string));\n","\t  var p1 = '<' + tag;\n","\t  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n","\t  return p1 + '>' + S + '</' + tag + '>';\n","\t};\n","\tmodule.exports = function (NAME, exec) {\n","\t  var O = {};\n","\t  O[NAME] = exec(createHTML);\n","\t  $export($export.P + $export.F * fails(function () {\n","\t    var test = ''[NAME]('\"');\n","\t    return test !== test.toLowerCase() || test.split('\"').length > 3;\n","\t  }), 'String', O);\n","\t};\n","\n","\n","/***/ }),\n","/* 149 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.3 String.prototype.big()\n","\t__webpack_require__(148)('big', function (createHTML) {\n","\t  return function big() {\n","\t    return createHTML(this, 'big', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 150 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.4 String.prototype.blink()\n","\t__webpack_require__(148)('blink', function (createHTML) {\n","\t  return function blink() {\n","\t    return createHTML(this, 'blink', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 151 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.5 String.prototype.bold()\n","\t__webpack_require__(148)('bold', function (createHTML) {\n","\t  return function bold() {\n","\t    return createHTML(this, 'b', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 152 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.6 String.prototype.fixed()\n","\t__webpack_require__(148)('fixed', function (createHTML) {\n","\t  return function fixed() {\n","\t    return createHTML(this, 'tt', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 153 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.7 String.prototype.fontcolor(color)\n","\t__webpack_require__(148)('fontcolor', function (createHTML) {\n","\t  return function fontcolor(color) {\n","\t    return createHTML(this, 'font', 'color', color);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 154 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.8 String.prototype.fontsize(size)\n","\t__webpack_require__(148)('fontsize', function (createHTML) {\n","\t  return function fontsize(size) {\n","\t    return createHTML(this, 'font', 'size', size);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 155 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.9 String.prototype.italics()\n","\t__webpack_require__(148)('italics', function (createHTML) {\n","\t  return function italics() {\n","\t    return createHTML(this, 'i', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 156 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.10 String.prototype.link(url)\n","\t__webpack_require__(148)('link', function (createHTML) {\n","\t  return function link(url) {\n","\t    return createHTML(this, 'a', 'href', url);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 157 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.11 String.prototype.small()\n","\t__webpack_require__(148)('small', function (createHTML) {\n","\t  return function small() {\n","\t    return createHTML(this, 'small', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 158 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.12 String.prototype.strike()\n","\t__webpack_require__(148)('strike', function (createHTML) {\n","\t  return function strike() {\n","\t    return createHTML(this, 'strike', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 159 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.13 String.prototype.sub()\n","\t__webpack_require__(148)('sub', function (createHTML) {\n","\t  return function sub() {\n","\t    return createHTML(this, 'sub', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 160 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// B.2.3.14 String.prototype.sup()\n","\t__webpack_require__(148)('sup', function (createHTML) {\n","\t  return function sup() {\n","\t    return createHTML(this, 'sup', '', '');\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 161 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.3.3.1 / 15.9.4.4 Date.now()\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n","\n","\n","/***/ }),\n","/* 162 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toPrimitive = __webpack_require__(23);\n","\t\n","\t$export($export.P + $export.F * __webpack_require__(14)(function () {\n","\t  return new Date(NaN).toJSON() !== null\n","\t    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n","\t}), 'Date', {\n","\t  // eslint-disable-next-line no-unused-vars\n","\t  toJSON: function toJSON(key) {\n","\t    var O = toObject(this);\n","\t    var pv = toPrimitive(O);\n","\t    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 163 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\n","\tvar $export = __webpack_require__(15);\n","\tvar toISOString = __webpack_require__(164);\n","\t\n","\t// PhantomJS / old WebKit has a broken implementations\n","\t$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {\n","\t  toISOString: toISOString\n","\t});\n","\n","\n","/***/ }),\n","/* 164 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\n","\tvar fails = __webpack_require__(14);\n","\tvar getTime = Date.prototype.getTime;\n","\tvar $toISOString = Date.prototype.toISOString;\n","\t\n","\tvar lz = function (num) {\n","\t  return num > 9 ? num : '0' + num;\n","\t};\n","\t\n","\t// PhantomJS / old WebKit has a broken implementations\n","\tmodule.exports = (fails(function () {\n","\t  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n","\t}) || !fails(function () {\n","\t  $toISOString.call(new Date(NaN));\n","\t})) ? function toISOString() {\n","\t  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n","\t  var d = this;\n","\t  var y = d.getUTCFullYear();\n","\t  var m = d.getUTCMilliseconds();\n","\t  var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n","\t  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n","\t    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n","\t    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n","\t    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n","\t} : $toISOString;\n","\n","\n","/***/ }),\n","/* 165 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar DateProto = Date.prototype;\n","\tvar INVALID_DATE = 'Invalid Date';\n","\tvar TO_STRING = 'toString';\n","\tvar $toString = DateProto[TO_STRING];\n","\tvar getTime = DateProto.getTime;\n","\tif (new Date(NaN) + '' != INVALID_DATE) {\n","\t  __webpack_require__(25)(DateProto, TO_STRING, function toString() {\n","\t    var value = getTime.call(this);\n","\t    // eslint-disable-next-line no-self-compare\n","\t    return value === value ? $toString.call(this) : INVALID_DATE;\n","\t  });\n","\t}\n","\n","\n","/***/ }),\n","/* 166 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar TO_PRIMITIVE = __webpack_require__(34)('toPrimitive');\n","\tvar proto = Date.prototype;\n","\t\n","\tif (!(TO_PRIMITIVE in proto)) __webpack_require__(17)(proto, TO_PRIMITIVE, __webpack_require__(167));\n","\n","\n","/***/ }),\n","/* 167 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar anObject = __webpack_require__(19);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar NUMBER = 'number';\n","\t\n","\tmodule.exports = function (hint) {\n","\t  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');\n","\t  return toPrimitive(anObject(this), hint != NUMBER);\n","\t};\n","\n","\n","/***/ }),\n","/* 168 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Array', { isArray: __webpack_require__(52) });\n","\n","\n","/***/ }),\n","/* 169 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar ctx = __webpack_require__(30);\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar call = __webpack_require__(170);\n","\tvar isArrayIter = __webpack_require__(171);\n","\tvar toLength = __webpack_require__(45);\n","\tvar createProperty = __webpack_require__(172);\n","\tvar getIterFn = __webpack_require__(173);\n","\t\n","\t$export($export.S + $export.F * !__webpack_require__(174)(function (iter) { Array.from(iter); }), 'Array', {\n","\t  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n","\t  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n","\t    var O = toObject(arrayLike);\n","\t    var C = typeof this == 'function' ? this : Array;\n","\t    var aLen = arguments.length;\n","\t    var mapfn = aLen > 1 ? arguments[1] : undefined;\n","\t    var mapping = mapfn !== undefined;\n","\t    var index = 0;\n","\t    var iterFn = getIterFn(O);\n","\t    var length, result, step, iterator;\n","\t    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n","\t    // if object isn't iterable or it's array with default iterator - use simple case\n","\t    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n","\t      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n","\t        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n","\t      }\n","\t    } else {\n","\t      length = toLength(O.length);\n","\t      for (result = new C(length); length > index; index++) {\n","\t        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n","\t      }\n","\t    }\n","\t    result.length = index;\n","\t    return result;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 170 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// call something on iterator step with safe closing on error\n","\tvar anObject = __webpack_require__(19);\n","\tmodule.exports = function (iterator, fn, value, entries) {\n","\t  try {\n","\t    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n","\t  // 7.4.6 IteratorClose(iterator, completion)\n","\t  } catch (e) {\n","\t    var ret = iterator['return'];\n","\t    if (ret !== undefined) anObject(ret.call(iterator));\n","\t    throw e;\n","\t  }\n","\t};\n","\n","\n","/***/ }),\n","/* 171 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// check on default Array iterator\n","\tvar Iterators = __webpack_require__(137);\n","\tvar ITERATOR = __webpack_require__(34)('iterator');\n","\tvar ArrayProto = Array.prototype;\n","\t\n","\tmodule.exports = function (it) {\n","\t  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n","\t};\n","\n","\n","/***/ }),\n","/* 172 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $defineProperty = __webpack_require__(18);\n","\tvar createDesc = __webpack_require__(24);\n","\t\n","\tmodule.exports = function (object, index, value) {\n","\t  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n","\t  else object[index] = value;\n","\t};\n","\n","\n","/***/ }),\n","/* 173 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar classof = __webpack_require__(82);\n","\tvar ITERATOR = __webpack_require__(34)('iterator');\n","\tvar Iterators = __webpack_require__(137);\n","\tmodule.exports = __webpack_require__(16).getIteratorMethod = function (it) {\n","\t  if (it != undefined) return it[ITERATOR]\n","\t    || it['@@iterator']\n","\t    || Iterators[classof(it)];\n","\t};\n","\n","\n","/***/ }),\n","/* 174 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar ITERATOR = __webpack_require__(34)('iterator');\n","\tvar SAFE_CLOSING = false;\n","\t\n","\ttry {\n","\t  var riter = [7][ITERATOR]();\n","\t  riter['return'] = function () { SAFE_CLOSING = true; };\n","\t  // eslint-disable-next-line no-throw-literal\n","\t  Array.from(riter, function () { throw 2; });\n","\t} catch (e) { /* empty */ }\n","\t\n","\tmodule.exports = function (exec, skipClosing) {\n","\t  if (!skipClosing && !SAFE_CLOSING) return false;\n","\t  var safe = false;\n","\t  try {\n","\t    var arr = [7];\n","\t    var iter = arr[ITERATOR]();\n","\t    iter.next = function () { return { done: safe = true }; };\n","\t    arr[ITERATOR] = function () { return iter; };\n","\t    exec(arr);\n","\t  } catch (e) { /* empty */ }\n","\t  return safe;\n","\t};\n","\n","\n","/***/ }),\n","/* 175 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar createProperty = __webpack_require__(172);\n","\t\n","\t// WebKit Array.of isn't generic\n","\t$export($export.S + $export.F * __webpack_require__(14)(function () {\n","\t  function F() { /* empty */ }\n","\t  return !(Array.of.call(F) instanceof F);\n","\t}), 'Array', {\n","\t  // 22.1.2.3 Array.of( ...items)\n","\t  of: function of(/* ...args */) {\n","\t    var index = 0;\n","\t    var aLen = arguments.length;\n","\t    var result = new (typeof this == 'function' ? this : Array)(aLen);\n","\t    while (aLen > index) createProperty(result, index, arguments[index++]);\n","\t    result.length = aLen;\n","\t    return result;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 176 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 22.1.3.13 Array.prototype.join(separator)\n","\tvar $export = __webpack_require__(15);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar arrayJoin = [].join;\n","\t\n","\t// fallback for not array-like strings\n","\t$export($export.P + $export.F * (__webpack_require__(41) != Object || !__webpack_require__(177)(arrayJoin)), 'Array', {\n","\t  join: function join(separator) {\n","\t    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 177 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar fails = __webpack_require__(14);\n","\t\n","\tmodule.exports = function (method, arg) {\n","\t  return !!method && fails(function () {\n","\t    // eslint-disable-next-line no-useless-call\n","\t    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n","\t  });\n","\t};\n","\n","\n","/***/ }),\n","/* 178 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar html = __webpack_require__(55);\n","\tvar cof = __webpack_require__(42);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tvar toLength = __webpack_require__(45);\n","\tvar arraySlice = [].slice;\n","\t\n","\t// fallback for not array-like ES3 strings and DOM objects\n","\t$export($export.P + $export.F * __webpack_require__(14)(function () {\n","\t  if (html) arraySlice.call(html);\n","\t}), 'Array', {\n","\t  slice: function slice(begin, end) {\n","\t    var len = toLength(this.length);\n","\t    var klass = cof(this);\n","\t    end = end === undefined ? len : end;\n","\t    if (klass == 'Array') return arraySlice.call(this, begin, end);\n","\t    var start = toAbsoluteIndex(begin, len);\n","\t    var upTo = toAbsoluteIndex(end, len);\n","\t    var size = toLength(upTo - start);\n","\t    var cloned = new Array(size);\n","\t    var i = 0;\n","\t    for (; i < size; i++) cloned[i] = klass == 'String'\n","\t      ? this.charAt(start + i)\n","\t      : this[start + i];\n","\t    return cloned;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 179 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar toObject = __webpack_require__(65);\n","\tvar fails = __webpack_require__(14);\n","\tvar $sort = [].sort;\n","\tvar test = [1, 2, 3];\n","\t\n","\t$export($export.P + $export.F * (fails(function () {\n","\t  // IE8-\n","\t  test.sort(undefined);\n","\t}) || !fails(function () {\n","\t  // V8 bug\n","\t  test.sort(null);\n","\t  // Old WebKit\n","\t}) || !__webpack_require__(177)($sort)), 'Array', {\n","\t  // 22.1.3.25 Array.prototype.sort(comparefn)\n","\t  sort: function sort(comparefn) {\n","\t    return comparefn === undefined\n","\t      ? $sort.call(toObject(this))\n","\t      : $sort.call(toObject(this), aFunction(comparefn));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 180 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $forEach = __webpack_require__(181)(0);\n","\tvar STRICT = __webpack_require__(177)([].forEach, true);\n","\t\n","\t$export($export.P + $export.F * !STRICT, 'Array', {\n","\t  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n","\t  forEach: function forEach(callbackfn /* , thisArg */) {\n","\t    return $forEach(this, callbackfn, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 181 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 0 -> Array#forEach\n","\t// 1 -> Array#map\n","\t// 2 -> Array#filter\n","\t// 3 -> Array#some\n","\t// 4 -> Array#every\n","\t// 5 -> Array#find\n","\t// 6 -> Array#findIndex\n","\tvar ctx = __webpack_require__(30);\n","\tvar IObject = __webpack_require__(41);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toLength = __webpack_require__(45);\n","\tvar asc = __webpack_require__(182);\n","\tmodule.exports = function (TYPE, $create) {\n","\t  var IS_MAP = TYPE == 1;\n","\t  var IS_FILTER = TYPE == 2;\n","\t  var IS_SOME = TYPE == 3;\n","\t  var IS_EVERY = TYPE == 4;\n","\t  var IS_FIND_INDEX = TYPE == 6;\n","\t  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n","\t  var create = $create || asc;\n","\t  return function ($this, callbackfn, that) {\n","\t    var O = toObject($this);\n","\t    var self = IObject(O);\n","\t    var f = ctx(callbackfn, that, 3);\n","\t    var length = toLength(self.length);\n","\t    var index = 0;\n","\t    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n","\t    var val, res;\n","\t    for (;length > index; index++) if (NO_HOLES || index in self) {\n","\t      val = self[index];\n","\t      res = f(val, index, O);\n","\t      if (TYPE) {\n","\t        if (IS_MAP) result[index] = res;   // map\n","\t        else if (res) switch (TYPE) {\n","\t          case 3: return true;             // some\n","\t          case 5: return val;              // find\n","\t          case 6: return index;            // findIndex\n","\t          case 2: result.push(val);        // filter\n","\t        } else if (IS_EVERY) return false; // every\n","\t      }\n","\t    }\n","\t    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 182 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\n","\tvar speciesConstructor = __webpack_require__(183);\n","\t\n","\tmodule.exports = function (original, length) {\n","\t  return new (speciesConstructor(original))(length);\n","\t};\n","\n","\n","/***/ }),\n","/* 183 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar isObject = __webpack_require__(20);\n","\tvar isArray = __webpack_require__(52);\n","\tvar SPECIES = __webpack_require__(34)('species');\n","\t\n","\tmodule.exports = function (original) {\n","\t  var C;\n","\t  if (isArray(original)) {\n","\t    C = original.constructor;\n","\t    // cross-realm fallback\n","\t    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n","\t    if (isObject(C)) {\n","\t      C = C[SPECIES];\n","\t      if (C === null) C = undefined;\n","\t    }\n","\t  } return C === undefined ? Array : C;\n","\t};\n","\n","\n","/***/ }),\n","/* 184 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $map = __webpack_require__(181)(1);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].map, true), 'Array', {\n","\t  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n","\t  map: function map(callbackfn /* , thisArg */) {\n","\t    return $map(this, callbackfn, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 185 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $filter = __webpack_require__(181)(2);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].filter, true), 'Array', {\n","\t  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n","\t  filter: function filter(callbackfn /* , thisArg */) {\n","\t    return $filter(this, callbackfn, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 186 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $some = __webpack_require__(181)(3);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].some, true), 'Array', {\n","\t  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n","\t  some: function some(callbackfn /* , thisArg */) {\n","\t    return $some(this, callbackfn, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 187 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $every = __webpack_require__(181)(4);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].every, true), 'Array', {\n","\t  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n","\t  every: function every(callbackfn /* , thisArg */) {\n","\t    return $every(this, callbackfn, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 188 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $reduce = __webpack_require__(189);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].reduce, true), 'Array', {\n","\t  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n","\t  reduce: function reduce(callbackfn /* , initialValue */) {\n","\t    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 189 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar aFunction = __webpack_require__(31);\n","\tvar toObject = __webpack_require__(65);\n","\tvar IObject = __webpack_require__(41);\n","\tvar toLength = __webpack_require__(45);\n","\t\n","\tmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n","\t  aFunction(callbackfn);\n","\t  var O = toObject(that);\n","\t  var self = IObject(O);\n","\t  var length = toLength(O.length);\n","\t  var index = isRight ? length - 1 : 0;\n","\t  var i = isRight ? -1 : 1;\n","\t  if (aLen < 2) for (;;) {\n","\t    if (index in self) {\n","\t      memo = self[index];\n","\t      index += i;\n","\t      break;\n","\t    }\n","\t    index += i;\n","\t    if (isRight ? index < 0 : length <= index) {\n","\t      throw TypeError('Reduce of empty array with no initial value');\n","\t    }\n","\t  }\n","\t  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n","\t    memo = callbackfn(memo, self[index], index, O);\n","\t  }\n","\t  return memo;\n","\t};\n","\n","\n","/***/ }),\n","/* 190 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $reduce = __webpack_require__(189);\n","\t\n","\t$export($export.P + $export.F * !__webpack_require__(177)([].reduceRight, true), 'Array', {\n","\t  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n","\t  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n","\t    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 191 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $indexOf = __webpack_require__(44)(false);\n","\tvar $native = [].indexOf;\n","\tvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n","\t\n","\t$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(177)($native)), 'Array', {\n","\t  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n","\t  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n","\t    return NEGATIVE_ZERO\n","\t      // convert -0 to +0\n","\t      ? $native.apply(this, arguments) || 0\n","\t      : $indexOf(this, searchElement, arguments[1]);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 192 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar toInteger = __webpack_require__(46);\n","\tvar toLength = __webpack_require__(45);\n","\tvar $native = [].lastIndexOf;\n","\tvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n","\t\n","\t$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(177)($native)), 'Array', {\n","\t  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n","\t  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n","\t    // convert -0 to +0\n","\t    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n","\t    var O = toIObject(this);\n","\t    var length = toLength(O.length);\n","\t    var index = length - 1;\n","\t    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n","\t    if (index < 0) index = length + index;\n","\t    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n","\t    return -1;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 193 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P, 'Array', { copyWithin: __webpack_require__(194) });\n","\t\n","\t__webpack_require__(195)('copyWithin');\n","\n","\n","/***/ }),\n","/* 194 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n","\t'use strict';\n","\tvar toObject = __webpack_require__(65);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tvar toLength = __webpack_require__(45);\n","\t\n","\tmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n","\t  var O = toObject(this);\n","\t  var len = toLength(O.length);\n","\t  var to = toAbsoluteIndex(target, len);\n","\t  var from = toAbsoluteIndex(start, len);\n","\t  var end = arguments.length > 2 ? arguments[2] : undefined;\n","\t  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n","\t  var inc = 1;\n","\t  if (from < to && to < from + count) {\n","\t    inc = -1;\n","\t    from += count - 1;\n","\t    to += count - 1;\n","\t  }\n","\t  while (count-- > 0) {\n","\t    if (from in O) O[to] = O[from];\n","\t    else delete O[to];\n","\t    to += inc;\n","\t    from += inc;\n","\t  } return O;\n","\t};\n","\n","\n","/***/ }),\n","/* 195 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.3.31 Array.prototype[@@unscopables]\n","\tvar UNSCOPABLES = __webpack_require__(34)('unscopables');\n","\tvar ArrayProto = Array.prototype;\n","\tif (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(17)(ArrayProto, UNSCOPABLES, {});\n","\tmodule.exports = function (key) {\n","\t  ArrayProto[UNSCOPABLES][key] = true;\n","\t};\n","\n","\n","/***/ }),\n","/* 196 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P, 'Array', { fill: __webpack_require__(197) });\n","\t\n","\t__webpack_require__(195)('fill');\n","\n","\n","/***/ }),\n","/* 197 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n","\t'use strict';\n","\tvar toObject = __webpack_require__(65);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tvar toLength = __webpack_require__(45);\n","\tmodule.exports = function fill(value /* , start = 0, end = @length */) {\n","\t  var O = toObject(this);\n","\t  var length = toLength(O.length);\n","\t  var aLen = arguments.length;\n","\t  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n","\t  var end = aLen > 2 ? arguments[2] : undefined;\n","\t  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n","\t  while (endPos > index) O[index++] = value;\n","\t  return O;\n","\t};\n","\n","\n","/***/ }),\n","/* 198 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\n","\tvar $export = __webpack_require__(15);\n","\tvar $find = __webpack_require__(181)(5);\n","\tvar KEY = 'find';\n","\tvar forced = true;\n","\t// Shouldn't skip holes\n","\tif (KEY in []) Array(1)[KEY](function () { forced = false; });\n","\t$export($export.P + $export.F * forced, 'Array', {\n","\t  find: function find(callbackfn /* , that = undefined */) {\n","\t    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t  }\n","\t});\n","\t__webpack_require__(195)(KEY);\n","\n","\n","/***/ }),\n","/* 199 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\n","\tvar $export = __webpack_require__(15);\n","\tvar $find = __webpack_require__(181)(6);\n","\tvar KEY = 'findIndex';\n","\tvar forced = true;\n","\t// Shouldn't skip holes\n","\tif (KEY in []) Array(1)[KEY](function () { forced = false; });\n","\t$export($export.P + $export.F * forced, 'Array', {\n","\t  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n","\t    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t  }\n","\t});\n","\t__webpack_require__(195)(KEY);\n","\n","\n","/***/ }),\n","/* 200 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(201)('Array');\n","\n","\n","/***/ }),\n","/* 201 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar global = __webpack_require__(11);\n","\tvar dP = __webpack_require__(18);\n","\tvar DESCRIPTORS = __webpack_require__(13);\n","\tvar SPECIES = __webpack_require__(34)('species');\n","\t\n","\tmodule.exports = function (KEY) {\n","\t  var C = global[KEY];\n","\t  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n","\t    configurable: true,\n","\t    get: function () { return this; }\n","\t  });\n","\t};\n","\n","\n","/***/ }),\n","/* 202 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar addToUnscopables = __webpack_require__(195);\n","\tvar step = __webpack_require__(203);\n","\tvar Iterators = __webpack_require__(137);\n","\tvar toIObject = __webpack_require__(40);\n","\t\n","\t// 22.1.3.4 Array.prototype.entries()\n","\t// 22.1.3.13 Array.prototype.keys()\n","\t// 22.1.3.29 Array.prototype.values()\n","\t// 22.1.3.30 Array.prototype[@@iterator]()\n","\tmodule.exports = __webpack_require__(136)(Array, 'Array', function (iterated, kind) {\n","\t  this._t = toIObject(iterated); // target\n","\t  this._i = 0;                   // next index\n","\t  this._k = kind;                // kind\n","\t// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n","\t}, function () {\n","\t  var O = this._t;\n","\t  var kind = this._k;\n","\t  var index = this._i++;\n","\t  if (!O || index >= O.length) {\n","\t    this._t = undefined;\n","\t    return step(1);\n","\t  }\n","\t  if (kind == 'keys') return step(0, index);\n","\t  if (kind == 'values') return step(0, O[index]);\n","\t  return step(0, [index, O[index]]);\n","\t}, 'values');\n","\t\n","\t// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n","\tIterators.Arguments = Iterators.Array;\n","\t\n","\taddToUnscopables('keys');\n","\taddToUnscopables('values');\n","\taddToUnscopables('entries');\n","\n","\n","/***/ }),\n","/* 203 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (done, value) {\n","\t  return { value: value, done: !!done };\n","\t};\n","\n","\n","/***/ }),\n","/* 204 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar inheritIfRequired = __webpack_require__(95);\n","\tvar dP = __webpack_require__(18).f;\n","\tvar gOPN = __webpack_require__(57).f;\n","\tvar isRegExp = __webpack_require__(142);\n","\tvar $flags = __webpack_require__(205);\n","\tvar $RegExp = global.RegExp;\n","\tvar Base = $RegExp;\n","\tvar proto = $RegExp.prototype;\n","\tvar re1 = /a/g;\n","\tvar re2 = /a/g;\n","\t// \"new\" creates a new object, old webkit buggy here\n","\tvar CORRECT_NEW = new $RegExp(re1) !== re1;\n","\t\n","\tif (__webpack_require__(13) && (!CORRECT_NEW || __webpack_require__(14)(function () {\n","\t  re2[__webpack_require__(34)('match')] = false;\n","\t  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n","\t  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n","\t}))) {\n","\t  $RegExp = function RegExp(p, f) {\n","\t    var tiRE = this instanceof $RegExp;\n","\t    var piRE = isRegExp(p);\n","\t    var fiU = f === undefined;\n","\t    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n","\t      : inheritIfRequired(CORRECT_NEW\n","\t        ? new Base(piRE && !fiU ? p.source : p, f)\n","\t        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n","\t      , tiRE ? this : proto, $RegExp);\n","\t  };\n","\t  var proxy = function (key) {\n","\t    key in $RegExp || dP($RegExp, key, {\n","\t      configurable: true,\n","\t      get: function () { return Base[key]; },\n","\t      set: function (it) { Base[key] = it; }\n","\t    });\n","\t  };\n","\t  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n","\t  proto.constructor = $RegExp;\n","\t  $RegExp.prototype = proto;\n","\t  __webpack_require__(25)(global, 'RegExp', $RegExp);\n","\t}\n","\t\n","\t__webpack_require__(201)('RegExp');\n","\n","\n","/***/ }),\n","/* 205 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 21.2.5.3 get RegExp.prototype.flags\n","\tvar anObject = __webpack_require__(19);\n","\tmodule.exports = function () {\n","\t  var that = anObject(this);\n","\t  var result = '';\n","\t  if (that.global) result += 'g';\n","\t  if (that.ignoreCase) result += 'i';\n","\t  if (that.multiline) result += 'm';\n","\t  if (that.unicode) result += 'u';\n","\t  if (that.sticky) result += 'y';\n","\t  return result;\n","\t};\n","\n","\n","/***/ }),\n","/* 206 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar regexpExec = __webpack_require__(207);\n","\t__webpack_require__(15)({\n","\t  target: 'RegExp',\n","\t  proto: true,\n","\t  forced: regexpExec !== /./.exec\n","\t}, {\n","\t  exec: regexpExec\n","\t});\n","\n","\n","/***/ }),\n","/* 207 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar regexpFlags = __webpack_require__(205);\n","\t\n","\tvar nativeExec = RegExp.prototype.exec;\n","\t// This always refers to the native implementation, because the\n","\t// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n","\t// which loads this file before patching the method.\n","\tvar nativeReplace = String.prototype.replace;\n","\t\n","\tvar patchedExec = nativeExec;\n","\t\n","\tvar LAST_INDEX = 'lastIndex';\n","\t\n","\tvar UPDATES_LAST_INDEX_WRONG = (function () {\n","\t  var re1 = /a/,\n","\t      re2 = /b*/g;\n","\t  nativeExec.call(re1, 'a');\n","\t  nativeExec.call(re2, 'a');\n","\t  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n","\t})();\n","\t\n","\t// nonparticipating capturing group, copied from es5-shim's String#split patch.\n","\tvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n","\t\n","\tvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n","\t\n","\tif (PATCH) {\n","\t  patchedExec = function exec(str) {\n","\t    var re = this;\n","\t    var lastIndex, reCopy, match, i;\n","\t\n","\t    if (NPCG_INCLUDED) {\n","\t      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n","\t    }\n","\t    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n","\t\n","\t    match = nativeExec.call(re, str);\n","\t\n","\t    if (UPDATES_LAST_INDEX_WRONG && match) {\n","\t      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n","\t    }\n","\t    if (NPCG_INCLUDED && match && match.length > 1) {\n","\t      // Fix browsers whose `exec` methods don't consistently return `undefined`\n","\t      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n","\t      // eslint-disable-next-line no-loop-func\n","\t      nativeReplace.call(match[0], reCopy, function () {\n","\t        for (i = 1; i < arguments.length - 2; i++) {\n","\t          if (arguments[i] === undefined) match[i] = undefined;\n","\t        }\n","\t      });\n","\t    }\n","\t\n","\t    return match;\n","\t  };\n","\t}\n","\t\n","\tmodule.exports = patchedExec;\n","\n","\n","/***/ }),\n","/* 208 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t__webpack_require__(209);\n","\tvar anObject = __webpack_require__(19);\n","\tvar $flags = __webpack_require__(205);\n","\tvar DESCRIPTORS = __webpack_require__(13);\n","\tvar TO_STRING = 'toString';\n","\tvar $toString = /./[TO_STRING];\n","\t\n","\tvar define = function (fn) {\n","\t  __webpack_require__(25)(RegExp.prototype, TO_STRING, fn, true);\n","\t};\n","\t\n","\t// 21.2.5.14 RegExp.prototype.toString()\n","\tif (__webpack_require__(14)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n","\t  define(function toString() {\n","\t    var R = anObject(this);\n","\t    return '/'.concat(R.source, '/',\n","\t      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n","\t  });\n","\t// FF44- RegExp#toString has a wrong name\n","\t} else if ($toString.name != TO_STRING) {\n","\t  define(function toString() {\n","\t    return $toString.call(this);\n","\t  });\n","\t}\n","\n","\n","/***/ }),\n","/* 209 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 21.2.5.3 get RegExp.prototype.flags()\n","\tif (__webpack_require__(13) && /./g.flags != 'g') __webpack_require__(18).f(RegExp.prototype, 'flags', {\n","\t  configurable: true,\n","\t  get: __webpack_require__(205)\n","\t});\n","\n","\n","/***/ }),\n","/* 210 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar anObject = __webpack_require__(19);\n","\tvar toLength = __webpack_require__(45);\n","\tvar advanceStringIndex = __webpack_require__(211);\n","\tvar regExpExec = __webpack_require__(212);\n","\t\n","\t// @@match logic\n","\t__webpack_require__(213)('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n","\t  return [\n","\t    // `String.prototype.match` method\n","\t    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n","\t    function match(regexp) {\n","\t      var O = defined(this);\n","\t      var fn = regexp == undefined ? undefined : regexp[MATCH];\n","\t      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n","\t    },\n","\t    // `RegExp.prototype[@@match]` method\n","\t    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n","\t    function (regexp) {\n","\t      var res = maybeCallNative($match, regexp, this);\n","\t      if (res.done) return res.value;\n","\t      var rx = anObject(regexp);\n","\t      var S = String(this);\n","\t      if (!rx.global) return regExpExec(rx, S);\n","\t      var fullUnicode = rx.unicode;\n","\t      rx.lastIndex = 0;\n","\t      var A = [];\n","\t      var n = 0;\n","\t      var result;\n","\t      while ((result = regExpExec(rx, S)) !== null) {\n","\t        var matchStr = String(result[0]);\n","\t        A[n] = matchStr;\n","\t        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n","\t        n++;\n","\t      }\n","\t      return n === 0 ? null : A;\n","\t    }\n","\t  ];\n","\t});\n","\n","\n","/***/ }),\n","/* 211 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar at = __webpack_require__(135)(true);\n","\t\n","\t // `AdvanceStringIndex` abstract operation\n","\t// https://tc39.github.io/ecma262/#sec-advancestringindex\n","\tmodule.exports = function (S, index, unicode) {\n","\t  return index + (unicode ? at(S, index).length : 1);\n","\t};\n","\n","\n","/***/ }),\n","/* 212 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar classof = __webpack_require__(82);\n","\tvar builtinExec = RegExp.prototype.exec;\n","\t\n","\t // `RegExpExec` abstract operation\n","\t// https://tc39.github.io/ecma262/#sec-regexpexec\n","\tmodule.exports = function (R, S) {\n","\t  var exec = R.exec;\n","\t  if (typeof exec === 'function') {\n","\t    var result = exec.call(R, S);\n","\t    if (typeof result !== 'object') {\n","\t      throw new TypeError('RegExp exec method returned something other than an Object or null');\n","\t    }\n","\t    return result;\n","\t  }\n","\t  if (classof(R) !== 'RegExp') {\n","\t    throw new TypeError('RegExp#exec called on incompatible receiver');\n","\t  }\n","\t  return builtinExec.call(R, S);\n","\t};\n","\n","\n","/***/ }),\n","/* 213 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t__webpack_require__(206);\n","\tvar redefine = __webpack_require__(25);\n","\tvar hide = __webpack_require__(17);\n","\tvar fails = __webpack_require__(14);\n","\tvar defined = __webpack_require__(43);\n","\tvar wks = __webpack_require__(34);\n","\tvar regexpExec = __webpack_require__(207);\n","\t\n","\tvar SPECIES = wks('species');\n","\t\n","\tvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n","\t  // #replace needs built-in support for named groups.\n","\t  // #match works fine because it just return the exec results, even if it has\n","\t  // a \"grops\" property.\n","\t  var re = /./;\n","\t  re.exec = function () {\n","\t    var result = [];\n","\t    result.groups = { a: '7' };\n","\t    return result;\n","\t  };\n","\t  return ''.replace(re, '$<a>') !== '7';\n","\t});\n","\t\n","\tvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n","\t  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n","\t  var re = /(?:)/;\n","\t  var originalExec = re.exec;\n","\t  re.exec = function () { return originalExec.apply(this, arguments); };\n","\t  var result = 'ab'.split(re);\n","\t  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n","\t})();\n","\t\n","\tmodule.exports = function (KEY, length, exec) {\n","\t  var SYMBOL = wks(KEY);\n","\t\n","\t  var DELEGATES_TO_SYMBOL = !fails(function () {\n","\t    // String methods call symbol-named RegEp methods\n","\t    var O = {};\n","\t    O[SYMBOL] = function () { return 7; };\n","\t    return ''[KEY](O) != 7;\n","\t  });\n","\t\n","\t  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n","\t    // Symbol-named RegExp methods call .exec\n","\t    var execCalled = false;\n","\t    var re = /a/;\n","\t    re.exec = function () { execCalled = true; return null; };\n","\t    if (KEY === 'split') {\n","\t      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n","\t      // a new one. We need to return the patched regex when creating the new one.\n","\t      re.constructor = {};\n","\t      re.constructor[SPECIES] = function () { return re; };\n","\t    }\n","\t    re[SYMBOL]('');\n","\t    return !execCalled;\n","\t  }) : undefined;\n","\t\n","\t  if (\n","\t    !DELEGATES_TO_SYMBOL ||\n","\t    !DELEGATES_TO_EXEC ||\n","\t    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n","\t    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n","\t  ) {\n","\t    var nativeRegExpMethod = /./[SYMBOL];\n","\t    var fns = exec(\n","\t      defined,\n","\t      SYMBOL,\n","\t      ''[KEY],\n","\t      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n","\t        if (regexp.exec === regexpExec) {\n","\t          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n","\t            // The native String method already delegates to @@method (this\n","\t            // polyfilled function), leasing to infinite recursion.\n","\t            // We avoid it by directly calling the native @@method method.\n","\t            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n","\t          }\n","\t          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n","\t        }\n","\t        return { done: false };\n","\t      }\n","\t    );\n","\t    var strfn = fns[0];\n","\t    var rxfn = fns[1];\n","\t\n","\t    redefine(String.prototype, KEY, strfn);\n","\t    hide(RegExp.prototype, SYMBOL, length == 2\n","\t      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n","\t      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n","\t      ? function (string, arg) { return rxfn.call(string, this, arg); }\n","\t      // 21.2.5.6 RegExp.prototype[@@match](string)\n","\t      // 21.2.5.9 RegExp.prototype[@@search](string)\n","\t      : function (string) { return rxfn.call(string, this); }\n","\t    );\n","\t  }\n","\t};\n","\n","\n","/***/ }),\n","/* 214 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar anObject = __webpack_require__(19);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toLength = __webpack_require__(45);\n","\tvar toInteger = __webpack_require__(46);\n","\tvar advanceStringIndex = __webpack_require__(211);\n","\tvar regExpExec = __webpack_require__(212);\n","\tvar max = Math.max;\n","\tvar min = Math.min;\n","\tvar floor = Math.floor;\n","\tvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\n","\tvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n","\t\n","\tvar maybeToString = function (it) {\n","\t  return it === undefined ? it : String(it);\n","\t};\n","\t\n","\t// @@replace logic\n","\t__webpack_require__(213)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n","\t  return [\n","\t    // `String.prototype.replace` method\n","\t    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n","\t    function replace(searchValue, replaceValue) {\n","\t      var O = defined(this);\n","\t      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n","\t      return fn !== undefined\n","\t        ? fn.call(searchValue, O, replaceValue)\n","\t        : $replace.call(String(O), searchValue, replaceValue);\n","\t    },\n","\t    // `RegExp.prototype[@@replace]` method\n","\t    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n","\t    function (regexp, replaceValue) {\n","\t      var res = maybeCallNative($replace, regexp, this, replaceValue);\n","\t      if (res.done) return res.value;\n","\t\n","\t      var rx = anObject(regexp);\n","\t      var S = String(this);\n","\t      var functionalReplace = typeof replaceValue === 'function';\n","\t      if (!functionalReplace) replaceValue = String(replaceValue);\n","\t      var global = rx.global;\n","\t      if (global) {\n","\t        var fullUnicode = rx.unicode;\n","\t        rx.lastIndex = 0;\n","\t      }\n","\t      var results = [];\n","\t      while (true) {\n","\t        var result = regExpExec(rx, S);\n","\t        if (result === null) break;\n","\t        results.push(result);\n","\t        if (!global) break;\n","\t        var matchStr = String(result[0]);\n","\t        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n","\t      }\n","\t      var accumulatedResult = '';\n","\t      var nextSourcePosition = 0;\n","\t      for (var i = 0; i < results.length; i++) {\n","\t        result = results[i];\n","\t        var matched = String(result[0]);\n","\t        var position = max(min(toInteger(result.index), S.length), 0);\n","\t        var captures = [];\n","\t        // NOTE: This is equivalent to\n","\t        //   captures = result.slice(1).map(maybeToString)\n","\t        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n","\t        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n","\t        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n","\t        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n","\t        var namedCaptures = result.groups;\n","\t        if (functionalReplace) {\n","\t          var replacerArgs = [matched].concat(captures, position, S);\n","\t          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n","\t          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n","\t        } else {\n","\t          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n","\t        }\n","\t        if (position >= nextSourcePosition) {\n","\t          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n","\t          nextSourcePosition = position + matched.length;\n","\t        }\n","\t      }\n","\t      return accumulatedResult + S.slice(nextSourcePosition);\n","\t    }\n","\t  ];\n","\t\n","\t    // https://tc39.github.io/ecma262/#sec-getsubstitution\n","\t  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n","\t    var tailPos = position + matched.length;\n","\t    var m = captures.length;\n","\t    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n","\t    if (namedCaptures !== undefined) {\n","\t      namedCaptures = toObject(namedCaptures);\n","\t      symbols = SUBSTITUTION_SYMBOLS;\n","\t    }\n","\t    return $replace.call(replacement, symbols, function (match, ch) {\n","\t      var capture;\n","\t      switch (ch.charAt(0)) {\n","\t        case '$': return '$';\n","\t        case '&': return matched;\n","\t        case '`': return str.slice(0, position);\n","\t        case \"'\": return str.slice(tailPos);\n","\t        case '<':\n","\t          capture = namedCaptures[ch.slice(1, -1)];\n","\t          break;\n","\t        default: // \\d\\d?\n","\t          var n = +ch;\n","\t          if (n === 0) return match;\n","\t          if (n > m) {\n","\t            var f = floor(n / 10);\n","\t            if (f === 0) return match;\n","\t            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n","\t            return match;\n","\t          }\n","\t          capture = captures[n - 1];\n","\t      }\n","\t      return capture === undefined ? '' : capture;\n","\t    });\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 215 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar anObject = __webpack_require__(19);\n","\tvar sameValue = __webpack_require__(78);\n","\tvar regExpExec = __webpack_require__(212);\n","\t\n","\t// @@search logic\n","\t__webpack_require__(213)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {\n","\t  return [\n","\t    // `String.prototype.search` method\n","\t    // https://tc39.github.io/ecma262/#sec-string.prototype.search\n","\t    function search(regexp) {\n","\t      var O = defined(this);\n","\t      var fn = regexp == undefined ? undefined : regexp[SEARCH];\n","\t      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n","\t    },\n","\t    // `RegExp.prototype[@@search]` method\n","\t    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search\n","\t    function (regexp) {\n","\t      var res = maybeCallNative($search, regexp, this);\n","\t      if (res.done) return res.value;\n","\t      var rx = anObject(regexp);\n","\t      var S = String(this);\n","\t      var previousLastIndex = rx.lastIndex;\n","\t      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n","\t      var result = regExpExec(rx, S);\n","\t      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n","\t      return result === null ? -1 : result.index;\n","\t    }\n","\t  ];\n","\t});\n","\n","\n","/***/ }),\n","/* 216 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t\n","\tvar isRegExp = __webpack_require__(142);\n","\tvar anObject = __webpack_require__(19);\n","\tvar speciesConstructor = __webpack_require__(217);\n","\tvar advanceStringIndex = __webpack_require__(211);\n","\tvar toLength = __webpack_require__(45);\n","\tvar callRegExpExec = __webpack_require__(212);\n","\tvar regexpExec = __webpack_require__(207);\n","\tvar fails = __webpack_require__(14);\n","\tvar $min = Math.min;\n","\tvar $push = [].push;\n","\tvar $SPLIT = 'split';\n","\tvar LENGTH = 'length';\n","\tvar LAST_INDEX = 'lastIndex';\n","\tvar MAX_UINT32 = 0xffffffff;\n","\t\n","\t// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\n","\tvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n","\t\n","\t// @@split logic\n","\t__webpack_require__(213)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n","\t  var internalSplit;\n","\t  if (\n","\t    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n","\t    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n","\t    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n","\t    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n","\t    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n","\t    ''[$SPLIT](/.?/)[LENGTH]\n","\t  ) {\n","\t    // based on es5-shim implementation, need to rework it\n","\t    internalSplit = function (separator, limit) {\n","\t      var string = String(this);\n","\t      if (separator === undefined && limit === 0) return [];\n","\t      // If `separator` is not a regex, use native split\n","\t      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n","\t      var output = [];\n","\t      var flags = (separator.ignoreCase ? 'i' : '') +\n","\t                  (separator.multiline ? 'm' : '') +\n","\t                  (separator.unicode ? 'u' : '') +\n","\t                  (separator.sticky ? 'y' : '');\n","\t      var lastLastIndex = 0;\n","\t      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n","\t      // Make `global` and avoid `lastIndex` issues by working with a copy\n","\t      var separatorCopy = new RegExp(separator.source, flags + 'g');\n","\t      var match, lastIndex, lastLength;\n","\t      while (match = regexpExec.call(separatorCopy, string)) {\n","\t        lastIndex = separatorCopy[LAST_INDEX];\n","\t        if (lastIndex > lastLastIndex) {\n","\t          output.push(string.slice(lastLastIndex, match.index));\n","\t          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n","\t          lastLength = match[0][LENGTH];\n","\t          lastLastIndex = lastIndex;\n","\t          if (output[LENGTH] >= splitLimit) break;\n","\t        }\n","\t        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n","\t      }\n","\t      if (lastLastIndex === string[LENGTH]) {\n","\t        if (lastLength || !separatorCopy.test('')) output.push('');\n","\t      } else output.push(string.slice(lastLastIndex));\n","\t      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n","\t    };\n","\t  // Chakra, V8\n","\t  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n","\t    internalSplit = function (separator, limit) {\n","\t      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n","\t    };\n","\t  } else {\n","\t    internalSplit = $split;\n","\t  }\n","\t\n","\t  return [\n","\t    // `String.prototype.split` method\n","\t    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n","\t    function split(separator, limit) {\n","\t      var O = defined(this);\n","\t      var splitter = separator == undefined ? undefined : separator[SPLIT];\n","\t      return splitter !== undefined\n","\t        ? splitter.call(separator, O, limit)\n","\t        : internalSplit.call(String(O), separator, limit);\n","\t    },\n","\t    // `RegExp.prototype[@@split]` method\n","\t    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n","\t    //\n","\t    // NOTE: This cannot be properly polyfilled in engines that don't support\n","\t    // the 'y' flag.\n","\t    function (regexp, limit) {\n","\t      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n","\t      if (res.done) return res.value;\n","\t\n","\t      var rx = anObject(regexp);\n","\t      var S = String(this);\n","\t      var C = speciesConstructor(rx, RegExp);\n","\t\n","\t      var unicodeMatching = rx.unicode;\n","\t      var flags = (rx.ignoreCase ? 'i' : '') +\n","\t                  (rx.multiline ? 'm' : '') +\n","\t                  (rx.unicode ? 'u' : '') +\n","\t                  (SUPPORTS_Y ? 'y' : 'g');\n","\t\n","\t      // ^(? + rx + ) is needed, in combination with some S slicing, to\n","\t      // simulate the 'y' flag.\n","\t      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n","\t      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n","\t      if (lim === 0) return [];\n","\t      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n","\t      var p = 0;\n","\t      var q = 0;\n","\t      var A = [];\n","\t      while (q < S.length) {\n","\t        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n","\t        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n","\t        var e;\n","\t        if (\n","\t          z === null ||\n","\t          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n","\t        ) {\n","\t          q = advanceStringIndex(S, q, unicodeMatching);\n","\t        } else {\n","\t          A.push(S.slice(p, q));\n","\t          if (A.length === lim) return A;\n","\t          for (var i = 1; i <= z.length - 1; i++) {\n","\t            A.push(z[i]);\n","\t            if (A.length === lim) return A;\n","\t          }\n","\t          q = p = e;\n","\t        }\n","\t      }\n","\t      A.push(S.slice(p));\n","\t      return A;\n","\t    }\n","\t  ];\n","\t});\n","\n","\n","/***/ }),\n","/* 217 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 7.3.20 SpeciesConstructor(O, defaultConstructor)\n","\tvar anObject = __webpack_require__(19);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar SPECIES = __webpack_require__(34)('species');\n","\tmodule.exports = function (O, D) {\n","\t  var C = anObject(O).constructor;\n","\t  var S;\n","\t  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n","\t};\n","\n","\n","/***/ }),\n","/* 218 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar LIBRARY = __webpack_require__(29);\n","\tvar global = __webpack_require__(11);\n","\tvar ctx = __webpack_require__(30);\n","\tvar classof = __webpack_require__(82);\n","\tvar $export = __webpack_require__(15);\n","\tvar isObject = __webpack_require__(20);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar forOf = __webpack_require__(220);\n","\tvar speciesConstructor = __webpack_require__(217);\n","\tvar task = __webpack_require__(221).set;\n","\tvar microtask = __webpack_require__(222)();\n","\tvar newPromiseCapabilityModule = __webpack_require__(223);\n","\tvar perform = __webpack_require__(224);\n","\tvar userAgent = __webpack_require__(225);\n","\tvar promiseResolve = __webpack_require__(226);\n","\tvar PROMISE = 'Promise';\n","\tvar TypeError = global.TypeError;\n","\tvar process = global.process;\n","\tvar versions = process && process.versions;\n","\tvar v8 = versions && versions.v8 || '';\n","\tvar $Promise = global[PROMISE];\n","\tvar isNode = classof(process) == 'process';\n","\tvar empty = function () { /* empty */ };\n","\tvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\n","\tvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n","\t\n","\tvar USE_NATIVE = !!function () {\n","\t  try {\n","\t    // correct subclassing with @@species support\n","\t    var promise = $Promise.resolve(1);\n","\t    var FakePromise = (promise.constructor = {})[__webpack_require__(34)('species')] = function (exec) {\n","\t      exec(empty, empty);\n","\t    };\n","\t    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n","\t    return (isNode || typeof PromiseRejectionEvent == 'function')\n","\t      && promise.then(empty) instanceof FakePromise\n","\t      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n","\t      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n","\t      // we can't detect it synchronously, so just check versions\n","\t      && v8.indexOf('6.6') !== 0\n","\t      && userAgent.indexOf('Chrome/66') === -1;\n","\t  } catch (e) { /* empty */ }\n","\t}();\n","\t\n","\t// helpers\n","\tvar isThenable = function (it) {\n","\t  var then;\n","\t  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n","\t};\n","\tvar notify = function (promise, isReject) {\n","\t  if (promise._n) return;\n","\t  promise._n = true;\n","\t  var chain = promise._c;\n","\t  microtask(function () {\n","\t    var value = promise._v;\n","\t    var ok = promise._s == 1;\n","\t    var i = 0;\n","\t    var run = function (reaction) {\n","\t      var handler = ok ? reaction.ok : reaction.fail;\n","\t      var resolve = reaction.resolve;\n","\t      var reject = reaction.reject;\n","\t      var domain = reaction.domain;\n","\t      var result, then, exited;\n","\t      try {\n","\t        if (handler) {\n","\t          if (!ok) {\n","\t            if (promise._h == 2) onHandleUnhandled(promise);\n","\t            promise._h = 1;\n","\t          }\n","\t          if (handler === true) result = value;\n","\t          else {\n","\t            if (domain) domain.enter();\n","\t            result = handler(value); // may throw\n","\t            if (domain) {\n","\t              domain.exit();\n","\t              exited = true;\n","\t            }\n","\t          }\n","\t          if (result === reaction.promise) {\n","\t            reject(TypeError('Promise-chain cycle'));\n","\t          } else if (then = isThenable(result)) {\n","\t            then.call(result, resolve, reject);\n","\t          } else resolve(result);\n","\t        } else reject(value);\n","\t      } catch (e) {\n","\t        if (domain && !exited) domain.exit();\n","\t        reject(e);\n","\t      }\n","\t    };\n","\t    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n","\t    promise._c = [];\n","\t    promise._n = false;\n","\t    if (isReject && !promise._h) onUnhandled(promise);\n","\t  });\n","\t};\n","\tvar onUnhandled = function (promise) {\n","\t  task.call(global, function () {\n","\t    var value = promise._v;\n","\t    var unhandled = isUnhandled(promise);\n","\t    var result, handler, console;\n","\t    if (unhandled) {\n","\t      result = perform(function () {\n","\t        if (isNode) {\n","\t          process.emit('unhandledRejection', value, promise);\n","\t        } else if (handler = global.onunhandledrejection) {\n","\t          handler({ promise: promise, reason: value });\n","\t        } else if ((console = global.console) && console.error) {\n","\t          console.error('Unhandled promise rejection', value);\n","\t        }\n","\t      });\n","\t      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n","\t      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n","\t    } promise._a = undefined;\n","\t    if (unhandled && result.e) throw result.v;\n","\t  });\n","\t};\n","\tvar isUnhandled = function (promise) {\n","\t  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n","\t};\n","\tvar onHandleUnhandled = function (promise) {\n","\t  task.call(global, function () {\n","\t    var handler;\n","\t    if (isNode) {\n","\t      process.emit('rejectionHandled', promise);\n","\t    } else if (handler = global.onrejectionhandled) {\n","\t      handler({ promise: promise, reason: promise._v });\n","\t    }\n","\t  });\n","\t};\n","\tvar $reject = function (value) {\n","\t  var promise = this;\n","\t  if (promise._d) return;\n","\t  promise._d = true;\n","\t  promise = promise._w || promise; // unwrap\n","\t  promise._v = value;\n","\t  promise._s = 2;\n","\t  if (!promise._a) promise._a = promise._c.slice();\n","\t  notify(promise, true);\n","\t};\n","\tvar $resolve = function (value) {\n","\t  var promise = this;\n","\t  var then;\n","\t  if (promise._d) return;\n","\t  promise._d = true;\n","\t  promise = promise._w || promise; // unwrap\n","\t  try {\n","\t    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n","\t    if (then = isThenable(value)) {\n","\t      microtask(function () {\n","\t        var wrapper = { _w: promise, _d: false }; // wrap\n","\t        try {\n","\t          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n","\t        } catch (e) {\n","\t          $reject.call(wrapper, e);\n","\t        }\n","\t      });\n","\t    } else {\n","\t      promise._v = value;\n","\t      promise._s = 1;\n","\t      notify(promise, false);\n","\t    }\n","\t  } catch (e) {\n","\t    $reject.call({ _w: promise, _d: false }, e); // wrap\n","\t  }\n","\t};\n","\t\n","\t// constructor polyfill\n","\tif (!USE_NATIVE) {\n","\t  // 25.4.3.1 Promise(executor)\n","\t  $Promise = function Promise(executor) {\n","\t    anInstance(this, $Promise, PROMISE, '_h');\n","\t    aFunction(executor);\n","\t    Internal.call(this);\n","\t    try {\n","\t      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n","\t    } catch (err) {\n","\t      $reject.call(this, err);\n","\t    }\n","\t  };\n","\t  // eslint-disable-next-line no-unused-vars\n","\t  Internal = function Promise(executor) {\n","\t    this._c = [];             // <- awaiting reactions\n","\t    this._a = undefined;      // <- checked in isUnhandled reactions\n","\t    this._s = 0;              // <- state\n","\t    this._d = false;          // <- done\n","\t    this._v = undefined;      // <- value\n","\t    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n","\t    this._n = false;          // <- notify\n","\t  };\n","\t  Internal.prototype = __webpack_require__(227)($Promise.prototype, {\n","\t    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n","\t    then: function then(onFulfilled, onRejected) {\n","\t      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n","\t      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n","\t      reaction.fail = typeof onRejected == 'function' && onRejected;\n","\t      reaction.domain = isNode ? process.domain : undefined;\n","\t      this._c.push(reaction);\n","\t      if (this._a) this._a.push(reaction);\n","\t      if (this._s) notify(this, false);\n","\t      return reaction.promise;\n","\t    },\n","\t    // 25.4.5.1 Promise.prototype.catch(onRejected)\n","\t    'catch': function (onRejected) {\n","\t      return this.then(undefined, onRejected);\n","\t    }\n","\t  });\n","\t  OwnPromiseCapability = function () {\n","\t    var promise = new Internal();\n","\t    this.promise = promise;\n","\t    this.resolve = ctx($resolve, promise, 1);\n","\t    this.reject = ctx($reject, promise, 1);\n","\t  };\n","\t  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n","\t    return C === $Promise || C === Wrapper\n","\t      ? new OwnPromiseCapability(C)\n","\t      : newGenericPromiseCapability(C);\n","\t  };\n","\t}\n","\t\n","\t$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\n","\t__webpack_require__(33)($Promise, PROMISE);\n","\t__webpack_require__(201)(PROMISE);\n","\tWrapper = __webpack_require__(16)[PROMISE];\n","\t\n","\t// statics\n","\t$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n","\t  // 25.4.4.5 Promise.reject(r)\n","\t  reject: function reject(r) {\n","\t    var capability = newPromiseCapability(this);\n","\t    var $$reject = capability.reject;\n","\t    $$reject(r);\n","\t    return capability.promise;\n","\t  }\n","\t});\n","\t$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n","\t  // 25.4.4.6 Promise.resolve(x)\n","\t  resolve: function resolve(x) {\n","\t    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n","\t  }\n","\t});\n","\t$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(174)(function (iter) {\n","\t  $Promise.all(iter)['catch'](empty);\n","\t})), PROMISE, {\n","\t  // 25.4.4.1 Promise.all(iterable)\n","\t  all: function all(iterable) {\n","\t    var C = this;\n","\t    var capability = newPromiseCapability(C);\n","\t    var resolve = capability.resolve;\n","\t    var reject = capability.reject;\n","\t    var result = perform(function () {\n","\t      var values = [];\n","\t      var index = 0;\n","\t      var remaining = 1;\n","\t      forOf(iterable, false, function (promise) {\n","\t        var $index = index++;\n","\t        var alreadyCalled = false;\n","\t        values.push(undefined);\n","\t        remaining++;\n","\t        C.resolve(promise).then(function (value) {\n","\t          if (alreadyCalled) return;\n","\t          alreadyCalled = true;\n","\t          values[$index] = value;\n","\t          --remaining || resolve(values);\n","\t        }, reject);\n","\t      });\n","\t      --remaining || resolve(values);\n","\t    });\n","\t    if (result.e) reject(result.v);\n","\t    return capability.promise;\n","\t  },\n","\t  // 25.4.4.4 Promise.race(iterable)\n","\t  race: function race(iterable) {\n","\t    var C = this;\n","\t    var capability = newPromiseCapability(C);\n","\t    var reject = capability.reject;\n","\t    var result = perform(function () {\n","\t      forOf(iterable, false, function (promise) {\n","\t        C.resolve(promise).then(capability.resolve, reject);\n","\t      });\n","\t    });\n","\t    if (result.e) reject(result.v);\n","\t    return capability.promise;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 219 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (it, Constructor, name, forbiddenField) {\n","\t  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n","\t    throw TypeError(name + ': incorrect invocation!');\n","\t  } return it;\n","\t};\n","\n","\n","/***/ }),\n","/* 220 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar ctx = __webpack_require__(30);\n","\tvar call = __webpack_require__(170);\n","\tvar isArrayIter = __webpack_require__(171);\n","\tvar anObject = __webpack_require__(19);\n","\tvar toLength = __webpack_require__(45);\n","\tvar getIterFn = __webpack_require__(173);\n","\tvar BREAK = {};\n","\tvar RETURN = {};\n","\tvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n","\t  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n","\t  var f = ctx(fn, that, entries ? 2 : 1);\n","\t  var index = 0;\n","\t  var length, step, iterator, result;\n","\t  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n","\t  // fast case for arrays with default iterator\n","\t  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n","\t    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n","\t    if (result === BREAK || result === RETURN) return result;\n","\t  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n","\t    result = call(iterator, f, step.value, entries);\n","\t    if (result === BREAK || result === RETURN) return result;\n","\t  }\n","\t};\n","\texports.BREAK = BREAK;\n","\texports.RETURN = RETURN;\n","\n","\n","/***/ }),\n","/* 221 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar ctx = __webpack_require__(30);\n","\tvar invoke = __webpack_require__(85);\n","\tvar html = __webpack_require__(55);\n","\tvar cel = __webpack_require__(22);\n","\tvar global = __webpack_require__(11);\n","\tvar process = global.process;\n","\tvar setTask = global.setImmediate;\n","\tvar clearTask = global.clearImmediate;\n","\tvar MessageChannel = global.MessageChannel;\n","\tvar Dispatch = global.Dispatch;\n","\tvar counter = 0;\n","\tvar queue = {};\n","\tvar ONREADYSTATECHANGE = 'onreadystatechange';\n","\tvar defer, channel, port;\n","\tvar run = function () {\n","\t  var id = +this;\n","\t  // eslint-disable-next-line no-prototype-builtins\n","\t  if (queue.hasOwnProperty(id)) {\n","\t    var fn = queue[id];\n","\t    delete queue[id];\n","\t    fn();\n","\t  }\n","\t};\n","\tvar listener = function (event) {\n","\t  run.call(event.data);\n","\t};\n","\t// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\n","\tif (!setTask || !clearTask) {\n","\t  setTask = function setImmediate(fn) {\n","\t    var args = [];\n","\t    var i = 1;\n","\t    while (arguments.length > i) args.push(arguments[i++]);\n","\t    queue[++counter] = function () {\n","\t      // eslint-disable-next-line no-new-func\n","\t      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n","\t    };\n","\t    defer(counter);\n","\t    return counter;\n","\t  };\n","\t  clearTask = function clearImmediate(id) {\n","\t    delete queue[id];\n","\t  };\n","\t  // Node.js 0.8-\n","\t  if (__webpack_require__(42)(process) == 'process') {\n","\t    defer = function (id) {\n","\t      process.nextTick(ctx(run, id, 1));\n","\t    };\n","\t  // Sphere (JS game engine) Dispatch API\n","\t  } else if (Dispatch && Dispatch.now) {\n","\t    defer = function (id) {\n","\t      Dispatch.now(ctx(run, id, 1));\n","\t    };\n","\t  // Browsers with MessageChannel, includes WebWorkers\n","\t  } else if (MessageChannel) {\n","\t    channel = new MessageChannel();\n","\t    port = channel.port2;\n","\t    channel.port1.onmessage = listener;\n","\t    defer = ctx(port.postMessage, port, 1);\n","\t  // Browsers with postMessage, skip WebWorkers\n","\t  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n","\t  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n","\t    defer = function (id) {\n","\t      global.postMessage(id + '', '*');\n","\t    };\n","\t    global.addEventListener('message', listener, false);\n","\t  // IE8-\n","\t  } else if (ONREADYSTATECHANGE in cel('script')) {\n","\t    defer = function (id) {\n","\t      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n","\t        html.removeChild(this);\n","\t        run.call(id);\n","\t      };\n","\t    };\n","\t  // Rest old browsers\n","\t  } else {\n","\t    defer = function (id) {\n","\t      setTimeout(ctx(run, id, 1), 0);\n","\t    };\n","\t  }\n","\t}\n","\tmodule.exports = {\n","\t  set: setTask,\n","\t  clear: clearTask\n","\t};\n","\n","\n","/***/ }),\n","/* 222 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar macrotask = __webpack_require__(221).set;\n","\tvar Observer = global.MutationObserver || global.WebKitMutationObserver;\n","\tvar process = global.process;\n","\tvar Promise = global.Promise;\n","\tvar isNode = __webpack_require__(42)(process) == 'process';\n","\t\n","\tmodule.exports = function () {\n","\t  var head, last, notify;\n","\t\n","\t  var flush = function () {\n","\t    var parent, fn;\n","\t    if (isNode && (parent = process.domain)) parent.exit();\n","\t    while (head) {\n","\t      fn = head.fn;\n","\t      head = head.next;\n","\t      try {\n","\t        fn();\n","\t      } catch (e) {\n","\t        if (head) notify();\n","\t        else last = undefined;\n","\t        throw e;\n","\t      }\n","\t    } last = undefined;\n","\t    if (parent) parent.enter();\n","\t  };\n","\t\n","\t  // Node.js\n","\t  if (isNode) {\n","\t    notify = function () {\n","\t      process.nextTick(flush);\n","\t    };\n","\t  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n","\t  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n","\t    var toggle = true;\n","\t    var node = document.createTextNode('');\n","\t    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n","\t    notify = function () {\n","\t      node.data = toggle = !toggle;\n","\t    };\n","\t  // environments with maybe non-completely correct, but existent Promise\n","\t  } else if (Promise && Promise.resolve) {\n","\t    // Promise.resolve without an argument throws an error in LG WebOS 2\n","\t    var promise = Promise.resolve(undefined);\n","\t    notify = function () {\n","\t      promise.then(flush);\n","\t    };\n","\t  // for other environments - macrotask based on:\n","\t  // - setImmediate\n","\t  // - MessageChannel\n","\t  // - window.postMessag\n","\t  // - onreadystatechange\n","\t  // - setTimeout\n","\t  } else {\n","\t    notify = function () {\n","\t      // strange IE + webpack dev server bug - use .call(global)\n","\t      macrotask.call(global, flush);\n","\t    };\n","\t  }\n","\t\n","\t  return function (fn) {\n","\t    var task = { fn: fn, next: undefined };\n","\t    if (last) last.next = task;\n","\t    if (!head) {\n","\t      head = task;\n","\t      notify();\n","\t    } last = task;\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 223 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 25.4.1.5 NewPromiseCapability(C)\n","\tvar aFunction = __webpack_require__(31);\n","\t\n","\tfunction PromiseCapability(C) {\n","\t  var resolve, reject;\n","\t  this.promise = new C(function ($$resolve, $$reject) {\n","\t    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n","\t    resolve = $$resolve;\n","\t    reject = $$reject;\n","\t  });\n","\t  this.resolve = aFunction(resolve);\n","\t  this.reject = aFunction(reject);\n","\t}\n","\t\n","\tmodule.exports.f = function (C) {\n","\t  return new PromiseCapability(C);\n","\t};\n","\n","\n","/***/ }),\n","/* 224 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (exec) {\n","\t  try {\n","\t    return { e: false, v: exec() };\n","\t  } catch (e) {\n","\t    return { e: true, v: e };\n","\t  }\n","\t};\n","\n","\n","/***/ }),\n","/* 225 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar navigator = global.navigator;\n","\t\n","\tmodule.exports = navigator && navigator.userAgent || '';\n","\n","\n","/***/ }),\n","/* 226 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar anObject = __webpack_require__(19);\n","\tvar isObject = __webpack_require__(20);\n","\tvar newPromiseCapability = __webpack_require__(223);\n","\t\n","\tmodule.exports = function (C, x) {\n","\t  anObject(C);\n","\t  if (isObject(x) && x.constructor === C) return x;\n","\t  var promiseCapability = newPromiseCapability.f(C);\n","\t  var resolve = promiseCapability.resolve;\n","\t  resolve(x);\n","\t  return promiseCapability.promise;\n","\t};\n","\n","\n","/***/ }),\n","/* 227 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar redefine = __webpack_require__(25);\n","\tmodule.exports = function (target, src, safe) {\n","\t  for (var key in src) redefine(target, key, src[key], safe);\n","\t  return target;\n","\t};\n","\n","\n","/***/ }),\n","/* 228 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar strong = __webpack_require__(229);\n","\tvar validate = __webpack_require__(230);\n","\tvar MAP = 'Map';\n","\t\n","\t// 23.1 Map Objects\n","\tmodule.exports = __webpack_require__(231)(MAP, function (get) {\n","\t  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n","\t}, {\n","\t  // 23.1.3.6 Map.prototype.get(key)\n","\t  get: function get(key) {\n","\t    var entry = strong.getEntry(validate(this, MAP), key);\n","\t    return entry && entry.v;\n","\t  },\n","\t  // 23.1.3.9 Map.prototype.set(key, value)\n","\t  set: function set(key, value) {\n","\t    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n","\t  }\n","\t}, strong, true);\n","\n","\n","/***/ }),\n","/* 229 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar dP = __webpack_require__(18).f;\n","\tvar create = __webpack_require__(53);\n","\tvar redefineAll = __webpack_require__(227);\n","\tvar ctx = __webpack_require__(30);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar forOf = __webpack_require__(220);\n","\tvar $iterDefine = __webpack_require__(136);\n","\tvar step = __webpack_require__(203);\n","\tvar setSpecies = __webpack_require__(201);\n","\tvar DESCRIPTORS = __webpack_require__(13);\n","\tvar fastKey = __webpack_require__(32).fastKey;\n","\tvar validate = __webpack_require__(230);\n","\tvar SIZE = DESCRIPTORS ? '_s' : 'size';\n","\t\n","\tvar getEntry = function (that, key) {\n","\t  // fast case\n","\t  var index = fastKey(key);\n","\t  var entry;\n","\t  if (index !== 'F') return that._i[index];\n","\t  // frozen object case\n","\t  for (entry = that._f; entry; entry = entry.n) {\n","\t    if (entry.k == key) return entry;\n","\t  }\n","\t};\n","\t\n","\tmodule.exports = {\n","\t  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n","\t    var C = wrapper(function (that, iterable) {\n","\t      anInstance(that, C, NAME, '_i');\n","\t      that._t = NAME;         // collection type\n","\t      that._i = create(null); // index\n","\t      that._f = undefined;    // first entry\n","\t      that._l = undefined;    // last entry\n","\t      that[SIZE] = 0;         // size\n","\t      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n","\t    });\n","\t    redefineAll(C.prototype, {\n","\t      // 23.1.3.1 Map.prototype.clear()\n","\t      // 23.2.3.2 Set.prototype.clear()\n","\t      clear: function clear() {\n","\t        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n","\t          entry.r = true;\n","\t          if (entry.p) entry.p = entry.p.n = undefined;\n","\t          delete data[entry.i];\n","\t        }\n","\t        that._f = that._l = undefined;\n","\t        that[SIZE] = 0;\n","\t      },\n","\t      // 23.1.3.3 Map.prototype.delete(key)\n","\t      // 23.2.3.4 Set.prototype.delete(value)\n","\t      'delete': function (key) {\n","\t        var that = validate(this, NAME);\n","\t        var entry = getEntry(that, key);\n","\t        if (entry) {\n","\t          var next = entry.n;\n","\t          var prev = entry.p;\n","\t          delete that._i[entry.i];\n","\t          entry.r = true;\n","\t          if (prev) prev.n = next;\n","\t          if (next) next.p = prev;\n","\t          if (that._f == entry) that._f = next;\n","\t          if (that._l == entry) that._l = prev;\n","\t          that[SIZE]--;\n","\t        } return !!entry;\n","\t      },\n","\t      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n","\t      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n","\t      forEach: function forEach(callbackfn /* , that = undefined */) {\n","\t        validate(this, NAME);\n","\t        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n","\t        var entry;\n","\t        while (entry = entry ? entry.n : this._f) {\n","\t          f(entry.v, entry.k, this);\n","\t          // revert to the last existing entry\n","\t          while (entry && entry.r) entry = entry.p;\n","\t        }\n","\t      },\n","\t      // 23.1.3.7 Map.prototype.has(key)\n","\t      // 23.2.3.7 Set.prototype.has(value)\n","\t      has: function has(key) {\n","\t        return !!getEntry(validate(this, NAME), key);\n","\t      }\n","\t    });\n","\t    if (DESCRIPTORS) dP(C.prototype, 'size', {\n","\t      get: function () {\n","\t        return validate(this, NAME)[SIZE];\n","\t      }\n","\t    });\n","\t    return C;\n","\t  },\n","\t  def: function (that, key, value) {\n","\t    var entry = getEntry(that, key);\n","\t    var prev, index;\n","\t    // change existing entry\n","\t    if (entry) {\n","\t      entry.v = value;\n","\t    // create new entry\n","\t    } else {\n","\t      that._l = entry = {\n","\t        i: index = fastKey(key, true), // <- index\n","\t        k: key,                        // <- key\n","\t        v: value,                      // <- value\n","\t        p: prev = that._l,             // <- previous entry\n","\t        n: undefined,                  // <- next entry\n","\t        r: false                       // <- removed\n","\t      };\n","\t      if (!that._f) that._f = entry;\n","\t      if (prev) prev.n = entry;\n","\t      that[SIZE]++;\n","\t      // add to index\n","\t      if (index !== 'F') that._i[index] = entry;\n","\t    } return that;\n","\t  },\n","\t  getEntry: getEntry,\n","\t  setStrong: function (C, NAME, IS_MAP) {\n","\t    // add .keys, .values, .entries, [@@iterator]\n","\t    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n","\t    $iterDefine(C, NAME, function (iterated, kind) {\n","\t      this._t = validate(iterated, NAME); // target\n","\t      this._k = kind;                     // kind\n","\t      this._l = undefined;                // previous\n","\t    }, function () {\n","\t      var that = this;\n","\t      var kind = that._k;\n","\t      var entry = that._l;\n","\t      // revert to the last existing entry\n","\t      while (entry && entry.r) entry = entry.p;\n","\t      // get next entry\n","\t      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n","\t        // or finish the iteration\n","\t        that._t = undefined;\n","\t        return step(1);\n","\t      }\n","\t      // return step by kind\n","\t      if (kind == 'keys') return step(0, entry.k);\n","\t      if (kind == 'values') return step(0, entry.v);\n","\t      return step(0, [entry.k, entry.v]);\n","\t    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n","\t\n","\t    // add [@@species], 23.1.2.2, 23.2.2.2\n","\t    setSpecies(NAME);\n","\t  }\n","\t};\n","\n","\n","/***/ }),\n","/* 230 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar isObject = __webpack_require__(20);\n","\tmodule.exports = function (it, TYPE) {\n","\t  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n","\t  return it;\n","\t};\n","\n","\n","/***/ }),\n","/* 231 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar global = __webpack_require__(11);\n","\tvar $export = __webpack_require__(15);\n","\tvar redefine = __webpack_require__(25);\n","\tvar redefineAll = __webpack_require__(227);\n","\tvar meta = __webpack_require__(32);\n","\tvar forOf = __webpack_require__(220);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar isObject = __webpack_require__(20);\n","\tvar fails = __webpack_require__(14);\n","\tvar $iterDetect = __webpack_require__(174);\n","\tvar setToStringTag = __webpack_require__(33);\n","\tvar inheritIfRequired = __webpack_require__(95);\n","\t\n","\tmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n","\t  var Base = global[NAME];\n","\t  var C = Base;\n","\t  var ADDER = IS_MAP ? 'set' : 'add';\n","\t  var proto = C && C.prototype;\n","\t  var O = {};\n","\t  var fixMethod = function (KEY) {\n","\t    var fn = proto[KEY];\n","\t    redefine(proto, KEY,\n","\t      KEY == 'delete' ? function (a) {\n","\t        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n","\t      } : KEY == 'has' ? function has(a) {\n","\t        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n","\t      } : KEY == 'get' ? function get(a) {\n","\t        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n","\t      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n","\t        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n","\t    );\n","\t  };\n","\t  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n","\t    new C().entries().next();\n","\t  }))) {\n","\t    // create collection constructor\n","\t    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n","\t    redefineAll(C.prototype, methods);\n","\t    meta.NEED = true;\n","\t  } else {\n","\t    var instance = new C();\n","\t    // early implementations not supports chaining\n","\t    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n","\t    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n","\t    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n","\t    // most early implementations doesn't supports iterables, most modern - not close it correctly\n","\t    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n","\t    // for early implementations -0 and +0 not the same\n","\t    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n","\t      // V8 ~ Chromium 42- fails only with 5+ elements\n","\t      var $instance = new C();\n","\t      var index = 5;\n","\t      while (index--) $instance[ADDER](index, index);\n","\t      return !$instance.has(-0);\n","\t    });\n","\t    if (!ACCEPT_ITERABLES) {\n","\t      C = wrapper(function (target, iterable) {\n","\t        anInstance(target, C, NAME);\n","\t        var that = inheritIfRequired(new Base(), target, C);\n","\t        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n","\t        return that;\n","\t      });\n","\t      C.prototype = proto;\n","\t      proto.constructor = C;\n","\t    }\n","\t    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n","\t      fixMethod('delete');\n","\t      fixMethod('has');\n","\t      IS_MAP && fixMethod('get');\n","\t    }\n","\t    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n","\t    // weak collections should not contains .clear method\n","\t    if (IS_WEAK && proto.clear) delete proto.clear;\n","\t  }\n","\t\n","\t  setToStringTag(C, NAME);\n","\t\n","\t  O[NAME] = C;\n","\t  $export($export.G + $export.W + $export.F * (C != Base), O);\n","\t\n","\t  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n","\t\n","\t  return C;\n","\t};\n","\n","\n","/***/ }),\n","/* 232 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar strong = __webpack_require__(229);\n","\tvar validate = __webpack_require__(230);\n","\tvar SET = 'Set';\n","\t\n","\t// 23.2 Set Objects\n","\tmodule.exports = __webpack_require__(231)(SET, function (get) {\n","\t  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n","\t}, {\n","\t  // 23.2.3.1 Set.prototype.add(value)\n","\t  add: function add(value) {\n","\t    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n","\t  }\n","\t}, strong);\n","\n","\n","/***/ }),\n","/* 233 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar global = __webpack_require__(11);\n","\tvar each = __webpack_require__(181)(0);\n","\tvar redefine = __webpack_require__(25);\n","\tvar meta = __webpack_require__(32);\n","\tvar assign = __webpack_require__(76);\n","\tvar weak = __webpack_require__(234);\n","\tvar isObject = __webpack_require__(20);\n","\tvar validate = __webpack_require__(230);\n","\tvar NATIVE_WEAK_MAP = __webpack_require__(230);\n","\tvar IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;\n","\tvar WEAK_MAP = 'WeakMap';\n","\tvar getWeak = meta.getWeak;\n","\tvar isExtensible = Object.isExtensible;\n","\tvar uncaughtFrozenStore = weak.ufstore;\n","\tvar InternalMap;\n","\t\n","\tvar wrapper = function (get) {\n","\t  return function WeakMap() {\n","\t    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n","\t  };\n","\t};\n","\t\n","\tvar methods = {\n","\t  // 23.3.3.3 WeakMap.prototype.get(key)\n","\t  get: function get(key) {\n","\t    if (isObject(key)) {\n","\t      var data = getWeak(key);\n","\t      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);\n","\t      return data ? data[this._i] : undefined;\n","\t    }\n","\t  },\n","\t  // 23.3.3.5 WeakMap.prototype.set(key, value)\n","\t  set: function set(key, value) {\n","\t    return weak.def(validate(this, WEAK_MAP), key, value);\n","\t  }\n","\t};\n","\t\n","\t// 23.3 WeakMap Objects\n","\tvar $WeakMap = module.exports = __webpack_require__(231)(WEAK_MAP, wrapper, methods, weak, true, true);\n","\t\n","\t// IE11 WeakMap frozen keys fix\n","\tif (NATIVE_WEAK_MAP && IS_IE11) {\n","\t  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);\n","\t  assign(InternalMap.prototype, methods);\n","\t  meta.NEED = true;\n","\t  each(['delete', 'has', 'get', 'set'], function (key) {\n","\t    var proto = $WeakMap.prototype;\n","\t    var method = proto[key];\n","\t    redefine(proto, key, function (a, b) {\n","\t      // store frozen objects on internal weakmap shim\n","\t      if (isObject(a) && !isExtensible(a)) {\n","\t        if (!this._f) this._f = new InternalMap();\n","\t        var result = this._f[key](a, b);\n","\t        return key == 'set' ? this : result;\n","\t      // store all the rest on native weakmap\n","\t      } return method.call(this, a, b);\n","\t    });\n","\t  });\n","\t}\n","\n","\n","/***/ }),\n","/* 234 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar redefineAll = __webpack_require__(227);\n","\tvar getWeak = __webpack_require__(32).getWeak;\n","\tvar anObject = __webpack_require__(19);\n","\tvar isObject = __webpack_require__(20);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar forOf = __webpack_require__(220);\n","\tvar createArrayMethod = __webpack_require__(181);\n","\tvar $has = __webpack_require__(12);\n","\tvar validate = __webpack_require__(230);\n","\tvar arrayFind = createArrayMethod(5);\n","\tvar arrayFindIndex = createArrayMethod(6);\n","\tvar id = 0;\n","\t\n","\t// fallback for uncaught frozen keys\n","\tvar uncaughtFrozenStore = function (that) {\n","\t  return that._l || (that._l = new UncaughtFrozenStore());\n","\t};\n","\tvar UncaughtFrozenStore = function () {\n","\t  this.a = [];\n","\t};\n","\tvar findUncaughtFrozen = function (store, key) {\n","\t  return arrayFind(store.a, function (it) {\n","\t    return it[0] === key;\n","\t  });\n","\t};\n","\tUncaughtFrozenStore.prototype = {\n","\t  get: function (key) {\n","\t    var entry = findUncaughtFrozen(this, key);\n","\t    if (entry) return entry[1];\n","\t  },\n","\t  has: function (key) {\n","\t    return !!findUncaughtFrozen(this, key);\n","\t  },\n","\t  set: function (key, value) {\n","\t    var entry = findUncaughtFrozen(this, key);\n","\t    if (entry) entry[1] = value;\n","\t    else this.a.push([key, value]);\n","\t  },\n","\t  'delete': function (key) {\n","\t    var index = arrayFindIndex(this.a, function (it) {\n","\t      return it[0] === key;\n","\t    });\n","\t    if (~index) this.a.splice(index, 1);\n","\t    return !!~index;\n","\t  }\n","\t};\n","\t\n","\tmodule.exports = {\n","\t  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n","\t    var C = wrapper(function (that, iterable) {\n","\t      anInstance(that, C, NAME, '_i');\n","\t      that._t = NAME;      // collection type\n","\t      that._i = id++;      // collection id\n","\t      that._l = undefined; // leak store for uncaught frozen objects\n","\t      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n","\t    });\n","\t    redefineAll(C.prototype, {\n","\t      // 23.3.3.2 WeakMap.prototype.delete(key)\n","\t      // 23.4.3.3 WeakSet.prototype.delete(value)\n","\t      'delete': function (key) {\n","\t        if (!isObject(key)) return false;\n","\t        var data = getWeak(key);\n","\t        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);\n","\t        return data && $has(data, this._i) && delete data[this._i];\n","\t      },\n","\t      // 23.3.3.4 WeakMap.prototype.has(key)\n","\t      // 23.4.3.4 WeakSet.prototype.has(value)\n","\t      has: function has(key) {\n","\t        if (!isObject(key)) return false;\n","\t        var data = getWeak(key);\n","\t        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);\n","\t        return data && $has(data, this._i);\n","\t      }\n","\t    });\n","\t    return C;\n","\t  },\n","\t  def: function (that, key, value) {\n","\t    var data = getWeak(anObject(key), true);\n","\t    if (data === true) uncaughtFrozenStore(that).set(key, value);\n","\t    else data[that._i] = value;\n","\t    return that;\n","\t  },\n","\t  ufstore: uncaughtFrozenStore\n","\t};\n","\n","\n","/***/ }),\n","/* 235 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar weak = __webpack_require__(234);\n","\tvar validate = __webpack_require__(230);\n","\tvar WEAK_SET = 'WeakSet';\n","\t\n","\t// 23.4 WeakSet Objects\n","\t__webpack_require__(231)(WEAK_SET, function (get) {\n","\t  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n","\t}, {\n","\t  // 23.4.3.1 WeakSet.prototype.add(value)\n","\t  add: function add(value) {\n","\t    return weak.def(validate(this, WEAK_SET), value, true);\n","\t  }\n","\t}, weak, false, true);\n","\n","\n","/***/ }),\n","/* 236 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar $typed = __webpack_require__(237);\n","\tvar buffer = __webpack_require__(238);\n","\tvar anObject = __webpack_require__(19);\n","\tvar toAbsoluteIndex = __webpack_require__(47);\n","\tvar toLength = __webpack_require__(45);\n","\tvar isObject = __webpack_require__(20);\n","\tvar ArrayBuffer = __webpack_require__(11).ArrayBuffer;\n","\tvar speciesConstructor = __webpack_require__(217);\n","\tvar $ArrayBuffer = buffer.ArrayBuffer;\n","\tvar $DataView = buffer.DataView;\n","\tvar $isView = $typed.ABV && ArrayBuffer.isView;\n","\tvar $slice = $ArrayBuffer.prototype.slice;\n","\tvar VIEW = $typed.VIEW;\n","\tvar ARRAY_BUFFER = 'ArrayBuffer';\n","\t\n","\t$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\n","\t\n","\t$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n","\t  // 24.1.3.1 ArrayBuffer.isView(arg)\n","\t  isView: function isView(it) {\n","\t    return $isView && $isView(it) || isObject(it) && VIEW in it;\n","\t  }\n","\t});\n","\t\n","\t$export($export.P + $export.U + $export.F * __webpack_require__(14)(function () {\n","\t  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n","\t}), ARRAY_BUFFER, {\n","\t  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n","\t  slice: function slice(start, end) {\n","\t    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n","\t    var len = anObject(this).byteLength;\n","\t    var first = toAbsoluteIndex(start, len);\n","\t    var fin = toAbsoluteIndex(end === undefined ? len : end, len);\n","\t    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));\n","\t    var viewS = new $DataView(this);\n","\t    var viewT = new $DataView(result);\n","\t    var index = 0;\n","\t    while (first < fin) {\n","\t      viewT.setUint8(index++, viewS.getUint8(first++));\n","\t    } return result;\n","\t  }\n","\t});\n","\t\n","\t__webpack_require__(201)(ARRAY_BUFFER);\n","\n","\n","/***/ }),\n","/* 237 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar global = __webpack_require__(11);\n","\tvar hide = __webpack_require__(17);\n","\tvar uid = __webpack_require__(26);\n","\tvar TYPED = uid('typed_array');\n","\tvar VIEW = uid('view');\n","\tvar ABV = !!(global.ArrayBuffer && global.DataView);\n","\tvar CONSTR = ABV;\n","\tvar i = 0;\n","\tvar l = 9;\n","\tvar Typed;\n","\t\n","\tvar TypedArrayConstructors = (\n","\t  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n","\t).split(',');\n","\t\n","\twhile (i < l) {\n","\t  if (Typed = global[TypedArrayConstructors[i++]]) {\n","\t    hide(Typed.prototype, TYPED, true);\n","\t    hide(Typed.prototype, VIEW, true);\n","\t  } else CONSTR = false;\n","\t}\n","\t\n","\tmodule.exports = {\n","\t  ABV: ABV,\n","\t  CONSTR: CONSTR,\n","\t  TYPED: TYPED,\n","\t  VIEW: VIEW\n","\t};\n","\n","\n","/***/ }),\n","/* 238 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar global = __webpack_require__(11);\n","\tvar DESCRIPTORS = __webpack_require__(13);\n","\tvar LIBRARY = __webpack_require__(29);\n","\tvar $typed = __webpack_require__(237);\n","\tvar hide = __webpack_require__(17);\n","\tvar redefineAll = __webpack_require__(227);\n","\tvar fails = __webpack_require__(14);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar toInteger = __webpack_require__(46);\n","\tvar toLength = __webpack_require__(45);\n","\tvar toIndex = __webpack_require__(239);\n","\tvar gOPN = __webpack_require__(57).f;\n","\tvar dP = __webpack_require__(18).f;\n","\tvar arrayFill = __webpack_require__(197);\n","\tvar setToStringTag = __webpack_require__(33);\n","\tvar ARRAY_BUFFER = 'ArrayBuffer';\n","\tvar DATA_VIEW = 'DataView';\n","\tvar PROTOTYPE = 'prototype';\n","\tvar WRONG_LENGTH = 'Wrong length!';\n","\tvar WRONG_INDEX = 'Wrong index!';\n","\tvar $ArrayBuffer = global[ARRAY_BUFFER];\n","\tvar $DataView = global[DATA_VIEW];\n","\tvar Math = global.Math;\n","\tvar RangeError = global.RangeError;\n","\t// eslint-disable-next-line no-shadow-restricted-names\n","\tvar Infinity = global.Infinity;\n","\tvar BaseBuffer = $ArrayBuffer;\n","\tvar abs = Math.abs;\n","\tvar pow = Math.pow;\n","\tvar floor = Math.floor;\n","\tvar log = Math.log;\n","\tvar LN2 = Math.LN2;\n","\tvar BUFFER = 'buffer';\n","\tvar BYTE_LENGTH = 'byteLength';\n","\tvar BYTE_OFFSET = 'byteOffset';\n","\tvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\n","\tvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\n","\tvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n","\t\n","\t// IEEE754 conversions based on https://github.com/feross/ieee754\n","\tfunction packIEEE754(value, mLen, nBytes) {\n","\t  var buffer = new Array(nBytes);\n","\t  var eLen = nBytes * 8 - mLen - 1;\n","\t  var eMax = (1 << eLen) - 1;\n","\t  var eBias = eMax >> 1;\n","\t  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n","\t  var i = 0;\n","\t  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n","\t  var e, m, c;\n","\t  value = abs(value);\n","\t  // eslint-disable-next-line no-self-compare\n","\t  if (value != value || value === Infinity) {\n","\t    // eslint-disable-next-line no-self-compare\n","\t    m = value != value ? 1 : 0;\n","\t    e = eMax;\n","\t  } else {\n","\t    e = floor(log(value) / LN2);\n","\t    if (value * (c = pow(2, -e)) < 1) {\n","\t      e--;\n","\t      c *= 2;\n","\t    }\n","\t    if (e + eBias >= 1) {\n","\t      value += rt / c;\n","\t    } else {\n","\t      value += rt * pow(2, 1 - eBias);\n","\t    }\n","\t    if (value * c >= 2) {\n","\t      e++;\n","\t      c /= 2;\n","\t    }\n","\t    if (e + eBias >= eMax) {\n","\t      m = 0;\n","\t      e = eMax;\n","\t    } else if (e + eBias >= 1) {\n","\t      m = (value * c - 1) * pow(2, mLen);\n","\t      e = e + eBias;\n","\t    } else {\n","\t      m = value * pow(2, eBias - 1) * pow(2, mLen);\n","\t      e = 0;\n","\t    }\n","\t  }\n","\t  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n","\t  e = e << mLen | m;\n","\t  eLen += mLen;\n","\t  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n","\t  buffer[--i] |= s * 128;\n","\t  return buffer;\n","\t}\n","\tfunction unpackIEEE754(buffer, mLen, nBytes) {\n","\t  var eLen = nBytes * 8 - mLen - 1;\n","\t  var eMax = (1 << eLen) - 1;\n","\t  var eBias = eMax >> 1;\n","\t  var nBits = eLen - 7;\n","\t  var i = nBytes - 1;\n","\t  var s = buffer[i--];\n","\t  var e = s & 127;\n","\t  var m;\n","\t  s >>= 7;\n","\t  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n","\t  m = e & (1 << -nBits) - 1;\n","\t  e >>= -nBits;\n","\t  nBits += mLen;\n","\t  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n","\t  if (e === 0) {\n","\t    e = 1 - eBias;\n","\t  } else if (e === eMax) {\n","\t    return m ? NaN : s ? -Infinity : Infinity;\n","\t  } else {\n","\t    m = m + pow(2, mLen);\n","\t    e = e - eBias;\n","\t  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n","\t}\n","\t\n","\tfunction unpackI32(bytes) {\n","\t  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n","\t}\n","\tfunction packI8(it) {\n","\t  return [it & 0xff];\n","\t}\n","\tfunction packI16(it) {\n","\t  return [it & 0xff, it >> 8 & 0xff];\n","\t}\n","\tfunction packI32(it) {\n","\t  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n","\t}\n","\tfunction packF64(it) {\n","\t  return packIEEE754(it, 52, 8);\n","\t}\n","\tfunction packF32(it) {\n","\t  return packIEEE754(it, 23, 4);\n","\t}\n","\t\n","\tfunction addGetter(C, key, internal) {\n","\t  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n","\t}\n","\t\n","\tfunction get(view, bytes, index, isLittleEndian) {\n","\t  var numIndex = +index;\n","\t  var intIndex = toIndex(numIndex);\n","\t  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n","\t  var store = view[$BUFFER]._b;\n","\t  var start = intIndex + view[$OFFSET];\n","\t  var pack = store.slice(start, start + bytes);\n","\t  return isLittleEndian ? pack : pack.reverse();\n","\t}\n","\tfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n","\t  var numIndex = +index;\n","\t  var intIndex = toIndex(numIndex);\n","\t  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n","\t  var store = view[$BUFFER]._b;\n","\t  var start = intIndex + view[$OFFSET];\n","\t  var pack = conversion(+value);\n","\t  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n","\t}\n","\t\n","\tif (!$typed.ABV) {\n","\t  $ArrayBuffer = function ArrayBuffer(length) {\n","\t    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n","\t    var byteLength = toIndex(length);\n","\t    this._b = arrayFill.call(new Array(byteLength), 0);\n","\t    this[$LENGTH] = byteLength;\n","\t  };\n","\t\n","\t  $DataView = function DataView(buffer, byteOffset, byteLength) {\n","\t    anInstance(this, $DataView, DATA_VIEW);\n","\t    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n","\t    var bufferLength = buffer[$LENGTH];\n","\t    var offset = toInteger(byteOffset);\n","\t    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n","\t    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n","\t    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n","\t    this[$BUFFER] = buffer;\n","\t    this[$OFFSET] = offset;\n","\t    this[$LENGTH] = byteLength;\n","\t  };\n","\t\n","\t  if (DESCRIPTORS) {\n","\t    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n","\t    addGetter($DataView, BUFFER, '_b');\n","\t    addGetter($DataView, BYTE_LENGTH, '_l');\n","\t    addGetter($DataView, BYTE_OFFSET, '_o');\n","\t  }\n","\t\n","\t  redefineAll($DataView[PROTOTYPE], {\n","\t    getInt8: function getInt8(byteOffset) {\n","\t      return get(this, 1, byteOffset)[0] << 24 >> 24;\n","\t    },\n","\t    getUint8: function getUint8(byteOffset) {\n","\t      return get(this, 1, byteOffset)[0];\n","\t    },\n","\t    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n","\t      var bytes = get(this, 2, byteOffset, arguments[1]);\n","\t      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n","\t    },\n","\t    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n","\t      var bytes = get(this, 2, byteOffset, arguments[1]);\n","\t      return bytes[1] << 8 | bytes[0];\n","\t    },\n","\t    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n","\t      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n","\t    },\n","\t    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n","\t      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n","\t    },\n","\t    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n","\t      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n","\t    },\n","\t    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n","\t      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n","\t    },\n","\t    setInt8: function setInt8(byteOffset, value) {\n","\t      set(this, 1, byteOffset, packI8, value);\n","\t    },\n","\t    setUint8: function setUint8(byteOffset, value) {\n","\t      set(this, 1, byteOffset, packI8, value);\n","\t    },\n","\t    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 2, byteOffset, packI16, value, arguments[2]);\n","\t    },\n","\t    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 2, byteOffset, packI16, value, arguments[2]);\n","\t    },\n","\t    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 4, byteOffset, packI32, value, arguments[2]);\n","\t    },\n","\t    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 4, byteOffset, packI32, value, arguments[2]);\n","\t    },\n","\t    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 4, byteOffset, packF32, value, arguments[2]);\n","\t    },\n","\t    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n","\t      set(this, 8, byteOffset, packF64, value, arguments[2]);\n","\t    }\n","\t  });\n","\t} else {\n","\t  if (!fails(function () {\n","\t    $ArrayBuffer(1);\n","\t  }) || !fails(function () {\n","\t    new $ArrayBuffer(-1); // eslint-disable-line no-new\n","\t  }) || fails(function () {\n","\t    new $ArrayBuffer(); // eslint-disable-line no-new\n","\t    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n","\t    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n","\t    return $ArrayBuffer.name != ARRAY_BUFFER;\n","\t  })) {\n","\t    $ArrayBuffer = function ArrayBuffer(length) {\n","\t      anInstance(this, $ArrayBuffer);\n","\t      return new BaseBuffer(toIndex(length));\n","\t    };\n","\t    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n","\t    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n","\t      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n","\t    }\n","\t    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n","\t  }\n","\t  // iOS Safari 7.x bug\n","\t  var view = new $DataView(new $ArrayBuffer(2));\n","\t  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n","\t  view.setInt8(0, 2147483648);\n","\t  view.setInt8(1, 2147483649);\n","\t  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n","\t    setInt8: function setInt8(byteOffset, value) {\n","\t      $setInt8.call(this, byteOffset, value << 24 >> 24);\n","\t    },\n","\t    setUint8: function setUint8(byteOffset, value) {\n","\t      $setInt8.call(this, byteOffset, value << 24 >> 24);\n","\t    }\n","\t  }, true);\n","\t}\n","\tsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\n","\tsetToStringTag($DataView, DATA_VIEW);\n","\thide($DataView[PROTOTYPE], $typed.VIEW, true);\n","\texports[ARRAY_BUFFER] = $ArrayBuffer;\n","\texports[DATA_VIEW] = $DataView;\n","\n","\n","/***/ }),\n","/* 239 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/ecma262/#sec-toindex\n","\tvar toInteger = __webpack_require__(46);\n","\tvar toLength = __webpack_require__(45);\n","\tmodule.exports = function (it) {\n","\t  if (it === undefined) return 0;\n","\t  var number = toInteger(it);\n","\t  var length = toLength(number);\n","\t  if (number !== length) throw RangeError('Wrong length!');\n","\t  return length;\n","\t};\n","\n","\n","/***/ }),\n","/* 240 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\t$export($export.G + $export.W + $export.F * !__webpack_require__(237).ABV, {\n","\t  DataView: __webpack_require__(238).DataView\n","\t});\n","\n","\n","/***/ }),\n","/* 241 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Int8', 1, function (init) {\n","\t  return function Int8Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 242 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tif (__webpack_require__(13)) {\n","\t  var LIBRARY = __webpack_require__(29);\n","\t  var global = __webpack_require__(11);\n","\t  var fails = __webpack_require__(14);\n","\t  var $export = __webpack_require__(15);\n","\t  var $typed = __webpack_require__(237);\n","\t  var $buffer = __webpack_require__(238);\n","\t  var ctx = __webpack_require__(30);\n","\t  var anInstance = __webpack_require__(219);\n","\t  var propertyDesc = __webpack_require__(24);\n","\t  var hide = __webpack_require__(17);\n","\t  var redefineAll = __webpack_require__(227);\n","\t  var toInteger = __webpack_require__(46);\n","\t  var toLength = __webpack_require__(45);\n","\t  var toIndex = __webpack_require__(239);\n","\t  var toAbsoluteIndex = __webpack_require__(47);\n","\t  var toPrimitive = __webpack_require__(23);\n","\t  var has = __webpack_require__(12);\n","\t  var classof = __webpack_require__(82);\n","\t  var isObject = __webpack_require__(20);\n","\t  var toObject = __webpack_require__(65);\n","\t  var isArrayIter = __webpack_require__(171);\n","\t  var create = __webpack_require__(53);\n","\t  var getPrototypeOf = __webpack_require__(66);\n","\t  var gOPN = __webpack_require__(57).f;\n","\t  var getIterFn = __webpack_require__(173);\n","\t  var uid = __webpack_require__(26);\n","\t  var wks = __webpack_require__(34);\n","\t  var createArrayMethod = __webpack_require__(181);\n","\t  var createArrayIncludes = __webpack_require__(44);\n","\t  var speciesConstructor = __webpack_require__(217);\n","\t  var ArrayIterators = __webpack_require__(202);\n","\t  var Iterators = __webpack_require__(137);\n","\t  var $iterDetect = __webpack_require__(174);\n","\t  var setSpecies = __webpack_require__(201);\n","\t  var arrayFill = __webpack_require__(197);\n","\t  var arrayCopyWithin = __webpack_require__(194);\n","\t  var $DP = __webpack_require__(18);\n","\t  var $GOPD = __webpack_require__(58);\n","\t  var dP = $DP.f;\n","\t  var gOPD = $GOPD.f;\n","\t  var RangeError = global.RangeError;\n","\t  var TypeError = global.TypeError;\n","\t  var Uint8Array = global.Uint8Array;\n","\t  var ARRAY_BUFFER = 'ArrayBuffer';\n","\t  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n","\t  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n","\t  var PROTOTYPE = 'prototype';\n","\t  var ArrayProto = Array[PROTOTYPE];\n","\t  var $ArrayBuffer = $buffer.ArrayBuffer;\n","\t  var $DataView = $buffer.DataView;\n","\t  var arrayForEach = createArrayMethod(0);\n","\t  var arrayFilter = createArrayMethod(2);\n","\t  var arraySome = createArrayMethod(3);\n","\t  var arrayEvery = createArrayMethod(4);\n","\t  var arrayFind = createArrayMethod(5);\n","\t  var arrayFindIndex = createArrayMethod(6);\n","\t  var arrayIncludes = createArrayIncludes(true);\n","\t  var arrayIndexOf = createArrayIncludes(false);\n","\t  var arrayValues = ArrayIterators.values;\n","\t  var arrayKeys = ArrayIterators.keys;\n","\t  var arrayEntries = ArrayIterators.entries;\n","\t  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n","\t  var arrayReduce = ArrayProto.reduce;\n","\t  var arrayReduceRight = ArrayProto.reduceRight;\n","\t  var arrayJoin = ArrayProto.join;\n","\t  var arraySort = ArrayProto.sort;\n","\t  var arraySlice = ArrayProto.slice;\n","\t  var arrayToString = ArrayProto.toString;\n","\t  var arrayToLocaleString = ArrayProto.toLocaleString;\n","\t  var ITERATOR = wks('iterator');\n","\t  var TAG = wks('toStringTag');\n","\t  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n","\t  var DEF_CONSTRUCTOR = uid('def_constructor');\n","\t  var ALL_CONSTRUCTORS = $typed.CONSTR;\n","\t  var TYPED_ARRAY = $typed.TYPED;\n","\t  var VIEW = $typed.VIEW;\n","\t  var WRONG_LENGTH = 'Wrong length!';\n","\t\n","\t  var $map = createArrayMethod(1, function (O, length) {\n","\t    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n","\t  });\n","\t\n","\t  var LITTLE_ENDIAN = fails(function () {\n","\t    // eslint-disable-next-line no-undef\n","\t    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n","\t  });\n","\t\n","\t  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n","\t    new Uint8Array(1).set({});\n","\t  });\n","\t\n","\t  var toOffset = function (it, BYTES) {\n","\t    var offset = toInteger(it);\n","\t    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n","\t    return offset;\n","\t  };\n","\t\n","\t  var validate = function (it) {\n","\t    if (isObject(it) && TYPED_ARRAY in it) return it;\n","\t    throw TypeError(it + ' is not a typed array!');\n","\t  };\n","\t\n","\t  var allocate = function (C, length) {\n","\t    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n","\t      throw TypeError('It is not a typed array constructor!');\n","\t    } return new C(length);\n","\t  };\n","\t\n","\t  var speciesFromList = function (O, list) {\n","\t    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n","\t  };\n","\t\n","\t  var fromList = function (C, list) {\n","\t    var index = 0;\n","\t    var length = list.length;\n","\t    var result = allocate(C, length);\n","\t    while (length > index) result[index] = list[index++];\n","\t    return result;\n","\t  };\n","\t\n","\t  var addGetter = function (it, key, internal) {\n","\t    dP(it, key, { get: function () { return this._d[internal]; } });\n","\t  };\n","\t\n","\t  var $from = function from(source /* , mapfn, thisArg */) {\n","\t    var O = toObject(source);\n","\t    var aLen = arguments.length;\n","\t    var mapfn = aLen > 1 ? arguments[1] : undefined;\n","\t    var mapping = mapfn !== undefined;\n","\t    var iterFn = getIterFn(O);\n","\t    var i, length, values, result, step, iterator;\n","\t    if (iterFn != undefined && !isArrayIter(iterFn)) {\n","\t      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n","\t        values.push(step.value);\n","\t      } O = values;\n","\t    }\n","\t    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n","\t    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n","\t      result[i] = mapping ? mapfn(O[i], i) : O[i];\n","\t    }\n","\t    return result;\n","\t  };\n","\t\n","\t  var $of = function of(/* ...items */) {\n","\t    var index = 0;\n","\t    var length = arguments.length;\n","\t    var result = allocate(this, length);\n","\t    while (length > index) result[index] = arguments[index++];\n","\t    return result;\n","\t  };\n","\t\n","\t  // iOS Safari 6.x fails here\n","\t  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n","\t\n","\t  var $toLocaleString = function toLocaleString() {\n","\t    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n","\t  };\n","\t\n","\t  var proto = {\n","\t    copyWithin: function copyWithin(target, start /* , end */) {\n","\t      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n","\t    },\n","\t    every: function every(callbackfn /* , thisArg */) {\n","\t      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n","\t      return arrayFill.apply(validate(this), arguments);\n","\t    },\n","\t    filter: function filter(callbackfn /* , thisArg */) {\n","\t      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n","\t        arguments.length > 1 ? arguments[1] : undefined));\n","\t    },\n","\t    find: function find(predicate /* , thisArg */) {\n","\t      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    findIndex: function findIndex(predicate /* , thisArg */) {\n","\t      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    forEach: function forEach(callbackfn /* , thisArg */) {\n","\t      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    indexOf: function indexOf(searchElement /* , fromIndex */) {\n","\t      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    includes: function includes(searchElement /* , fromIndex */) {\n","\t      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    join: function join(separator) { // eslint-disable-line no-unused-vars\n","\t      return arrayJoin.apply(validate(this), arguments);\n","\t    },\n","\t    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n","\t      return arrayLastIndexOf.apply(validate(this), arguments);\n","\t    },\n","\t    map: function map(mapfn /* , thisArg */) {\n","\t      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n","\t      return arrayReduce.apply(validate(this), arguments);\n","\t    },\n","\t    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n","\t      return arrayReduceRight.apply(validate(this), arguments);\n","\t    },\n","\t    reverse: function reverse() {\n","\t      var that = this;\n","\t      var length = validate(that).length;\n","\t      var middle = Math.floor(length / 2);\n","\t      var index = 0;\n","\t      var value;\n","\t      while (index < middle) {\n","\t        value = that[index];\n","\t        that[index++] = that[--length];\n","\t        that[length] = value;\n","\t      } return that;\n","\t    },\n","\t    some: function some(callbackfn /* , thisArg */) {\n","\t      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n","\t    },\n","\t    sort: function sort(comparefn) {\n","\t      return arraySort.call(validate(this), comparefn);\n","\t    },\n","\t    subarray: function subarray(begin, end) {\n","\t      var O = validate(this);\n","\t      var length = O.length;\n","\t      var $begin = toAbsoluteIndex(begin, length);\n","\t      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n","\t        O.buffer,\n","\t        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n","\t        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n","\t      );\n","\t    }\n","\t  };\n","\t\n","\t  var $slice = function slice(start, end) {\n","\t    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n","\t  };\n","\t\n","\t  var $set = function set(arrayLike /* , offset */) {\n","\t    validate(this);\n","\t    var offset = toOffset(arguments[1], 1);\n","\t    var length = this.length;\n","\t    var src = toObject(arrayLike);\n","\t    var len = toLength(src.length);\n","\t    var index = 0;\n","\t    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n","\t    while (index < len) this[offset + index] = src[index++];\n","\t  };\n","\t\n","\t  var $iterators = {\n","\t    entries: function entries() {\n","\t      return arrayEntries.call(validate(this));\n","\t    },\n","\t    keys: function keys() {\n","\t      return arrayKeys.call(validate(this));\n","\t    },\n","\t    values: function values() {\n","\t      return arrayValues.call(validate(this));\n","\t    }\n","\t  };\n","\t\n","\t  var isTAIndex = function (target, key) {\n","\t    return isObject(target)\n","\t      && target[TYPED_ARRAY]\n","\t      && typeof key != 'symbol'\n","\t      && key in target\n","\t      && String(+key) == String(key);\n","\t  };\n","\t  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n","\t    return isTAIndex(target, key = toPrimitive(key, true))\n","\t      ? propertyDesc(2, target[key])\n","\t      : gOPD(target, key);\n","\t  };\n","\t  var $setDesc = function defineProperty(target, key, desc) {\n","\t    if (isTAIndex(target, key = toPrimitive(key, true))\n","\t      && isObject(desc)\n","\t      && has(desc, 'value')\n","\t      && !has(desc, 'get')\n","\t      && !has(desc, 'set')\n","\t      // TODO: add validation descriptor w/o calling accessors\n","\t      && !desc.configurable\n","\t      && (!has(desc, 'writable') || desc.writable)\n","\t      && (!has(desc, 'enumerable') || desc.enumerable)\n","\t    ) {\n","\t      target[key] = desc.value;\n","\t      return target;\n","\t    } return dP(target, key, desc);\n","\t  };\n","\t\n","\t  if (!ALL_CONSTRUCTORS) {\n","\t    $GOPD.f = $getDesc;\n","\t    $DP.f = $setDesc;\n","\t  }\n","\t\n","\t  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n","\t    getOwnPropertyDescriptor: $getDesc,\n","\t    defineProperty: $setDesc\n","\t  });\n","\t\n","\t  if (fails(function () { arrayToString.call({}); })) {\n","\t    arrayToString = arrayToLocaleString = function toString() {\n","\t      return arrayJoin.call(this);\n","\t    };\n","\t  }\n","\t\n","\t  var $TypedArrayPrototype$ = redefineAll({}, proto);\n","\t  redefineAll($TypedArrayPrototype$, $iterators);\n","\t  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n","\t  redefineAll($TypedArrayPrototype$, {\n","\t    slice: $slice,\n","\t    set: $set,\n","\t    constructor: function () { /* noop */ },\n","\t    toString: arrayToString,\n","\t    toLocaleString: $toLocaleString\n","\t  });\n","\t  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n","\t  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n","\t  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n","\t  addGetter($TypedArrayPrototype$, 'length', 'e');\n","\t  dP($TypedArrayPrototype$, TAG, {\n","\t    get: function () { return this[TYPED_ARRAY]; }\n","\t  });\n","\t\n","\t  // eslint-disable-next-line max-statements\n","\t  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n","\t    CLAMPED = !!CLAMPED;\n","\t    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n","\t    var GETTER = 'get' + KEY;\n","\t    var SETTER = 'set' + KEY;\n","\t    var TypedArray = global[NAME];\n","\t    var Base = TypedArray || {};\n","\t    var TAC = TypedArray && getPrototypeOf(TypedArray);\n","\t    var FORCED = !TypedArray || !$typed.ABV;\n","\t    var O = {};\n","\t    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n","\t    var getter = function (that, index) {\n","\t      var data = that._d;\n","\t      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n","\t    };\n","\t    var setter = function (that, index, value) {\n","\t      var data = that._d;\n","\t      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n","\t      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n","\t    };\n","\t    var addElement = function (that, index) {\n","\t      dP(that, index, {\n","\t        get: function () {\n","\t          return getter(this, index);\n","\t        },\n","\t        set: function (value) {\n","\t          return setter(this, index, value);\n","\t        },\n","\t        enumerable: true\n","\t      });\n","\t    };\n","\t    if (FORCED) {\n","\t      TypedArray = wrapper(function (that, data, $offset, $length) {\n","\t        anInstance(that, TypedArray, NAME, '_d');\n","\t        var index = 0;\n","\t        var offset = 0;\n","\t        var buffer, byteLength, length, klass;\n","\t        if (!isObject(data)) {\n","\t          length = toIndex(data);\n","\t          byteLength = length * BYTES;\n","\t          buffer = new $ArrayBuffer(byteLength);\n","\t        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n","\t          buffer = data;\n","\t          offset = toOffset($offset, BYTES);\n","\t          var $len = data.byteLength;\n","\t          if ($length === undefined) {\n","\t            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n","\t            byteLength = $len - offset;\n","\t            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n","\t          } else {\n","\t            byteLength = toLength($length) * BYTES;\n","\t            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n","\t          }\n","\t          length = byteLength / BYTES;\n","\t        } else if (TYPED_ARRAY in data) {\n","\t          return fromList(TypedArray, data);\n","\t        } else {\n","\t          return $from.call(TypedArray, data);\n","\t        }\n","\t        hide(that, '_d', {\n","\t          b: buffer,\n","\t          o: offset,\n","\t          l: byteLength,\n","\t          e: length,\n","\t          v: new $DataView(buffer)\n","\t        });\n","\t        while (index < length) addElement(that, index++);\n","\t      });\n","\t      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n","\t      hide(TypedArrayPrototype, 'constructor', TypedArray);\n","\t    } else if (!fails(function () {\n","\t      TypedArray(1);\n","\t    }) || !fails(function () {\n","\t      new TypedArray(-1); // eslint-disable-line no-new\n","\t    }) || !$iterDetect(function (iter) {\n","\t      new TypedArray(); // eslint-disable-line no-new\n","\t      new TypedArray(null); // eslint-disable-line no-new\n","\t      new TypedArray(1.5); // eslint-disable-line no-new\n","\t      new TypedArray(iter); // eslint-disable-line no-new\n","\t    }, true)) {\n","\t      TypedArray = wrapper(function (that, data, $offset, $length) {\n","\t        anInstance(that, TypedArray, NAME);\n","\t        var klass;\n","\t        // `ws` module bug, temporarily remove validation length for Uint8Array\n","\t        // https://github.com/websockets/ws/pull/645\n","\t        if (!isObject(data)) return new Base(toIndex(data));\n","\t        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n","\t          return $length !== undefined\n","\t            ? new Base(data, toOffset($offset, BYTES), $length)\n","\t            : $offset !== undefined\n","\t              ? new Base(data, toOffset($offset, BYTES))\n","\t              : new Base(data);\n","\t        }\n","\t        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n","\t        return $from.call(TypedArray, data);\n","\t      });\n","\t      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n","\t        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n","\t      });\n","\t      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n","\t      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n","\t    }\n","\t    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n","\t    var CORRECT_ITER_NAME = !!$nativeIterator\n","\t      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n","\t    var $iterator = $iterators.values;\n","\t    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n","\t    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n","\t    hide(TypedArrayPrototype, VIEW, true);\n","\t    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n","\t\n","\t    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n","\t      dP(TypedArrayPrototype, TAG, {\n","\t        get: function () { return NAME; }\n","\t      });\n","\t    }\n","\t\n","\t    O[NAME] = TypedArray;\n","\t\n","\t    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n","\t\n","\t    $export($export.S, NAME, {\n","\t      BYTES_PER_ELEMENT: BYTES\n","\t    });\n","\t\n","\t    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n","\t      from: $from,\n","\t      of: $of\n","\t    });\n","\t\n","\t    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n","\t\n","\t    $export($export.P, NAME, proto);\n","\t\n","\t    setSpecies(NAME);\n","\t\n","\t    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n","\t\n","\t    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n","\t\n","\t    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n","\t\n","\t    $export($export.P + $export.F * fails(function () {\n","\t      new TypedArray(1).slice();\n","\t    }), NAME, { slice: $slice });\n","\t\n","\t    $export($export.P + $export.F * (fails(function () {\n","\t      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n","\t    }) || !fails(function () {\n","\t      TypedArrayPrototype.toLocaleString.call([1, 2]);\n","\t    })), NAME, { toLocaleString: $toLocaleString });\n","\t\n","\t    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n","\t    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n","\t  };\n","\t} else module.exports = function () { /* empty */ };\n","\n","\n","/***/ }),\n","/* 243 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Uint8', 1, function (init) {\n","\t  return function Uint8Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 244 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Uint8', 1, function (init) {\n","\t  return function Uint8ClampedArray(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t}, true);\n","\n","\n","/***/ }),\n","/* 245 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Int16', 2, function (init) {\n","\t  return function Int16Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 246 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Uint16', 2, function (init) {\n","\t  return function Uint16Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 247 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Int32', 4, function (init) {\n","\t  return function Int32Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 248 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Uint32', 4, function (init) {\n","\t  return function Uint32Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 249 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Float32', 4, function (init) {\n","\t  return function Float32Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 250 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(242)('Float64', 8, function (init) {\n","\t  return function Float64Array(data, byteOffset, length) {\n","\t    return init(this, data, byteOffset, length);\n","\t  };\n","\t});\n","\n","\n","/***/ }),\n","/* 251 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\n","\tvar $export = __webpack_require__(15);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar anObject = __webpack_require__(19);\n","\tvar rApply = (__webpack_require__(11).Reflect || {}).apply;\n","\tvar fApply = Function.apply;\n","\t// MS Edge argumentsList argument is optional\n","\t$export($export.S + $export.F * !__webpack_require__(14)(function () {\n","\t  rApply(function () { /* empty */ });\n","\t}), 'Reflect', {\n","\t  apply: function apply(target, thisArgument, argumentsList) {\n","\t    var T = aFunction(target);\n","\t    var L = anObject(argumentsList);\n","\t    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 252 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\n","\tvar $export = __webpack_require__(15);\n","\tvar create = __webpack_require__(53);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar anObject = __webpack_require__(19);\n","\tvar isObject = __webpack_require__(20);\n","\tvar fails = __webpack_require__(14);\n","\tvar bind = __webpack_require__(84);\n","\tvar rConstruct = (__webpack_require__(11).Reflect || {}).construct;\n","\t\n","\t// MS Edge supports only 2 arguments and argumentsList argument is optional\n","\t// FF Nightly sets third argument as `new.target`, but does not create `this` from it\n","\tvar NEW_TARGET_BUG = fails(function () {\n","\t  function F() { /* empty */ }\n","\t  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n","\t});\n","\tvar ARGS_BUG = !fails(function () {\n","\t  rConstruct(function () { /* empty */ });\n","\t});\n","\t\n","\t$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n","\t  construct: function construct(Target, args /* , newTarget */) {\n","\t    aFunction(Target);\n","\t    anObject(args);\n","\t    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n","\t    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n","\t    if (Target == newTarget) {\n","\t      // w/o altered newTarget, optimization for 0-4 arguments\n","\t      switch (args.length) {\n","\t        case 0: return new Target();\n","\t        case 1: return new Target(args[0]);\n","\t        case 2: return new Target(args[0], args[1]);\n","\t        case 3: return new Target(args[0], args[1], args[2]);\n","\t        case 4: return new Target(args[0], args[1], args[2], args[3]);\n","\t      }\n","\t      // w/o altered newTarget, lot of arguments case\n","\t      var $args = [null];\n","\t      $args.push.apply($args, args);\n","\t      return new (bind.apply(Target, $args))();\n","\t    }\n","\t    // with altered newTarget, not support built-in constructors\n","\t    var proto = newTarget.prototype;\n","\t    var instance = create(isObject(proto) ? proto : Object.prototype);\n","\t    var result = Function.apply.call(Target, instance, args);\n","\t    return isObject(result) ? result : instance;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 253 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\n","\tvar dP = __webpack_require__(18);\n","\tvar $export = __webpack_require__(15);\n","\tvar anObject = __webpack_require__(19);\n","\tvar toPrimitive = __webpack_require__(23);\n","\t\n","\t// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n","\t$export($export.S + $export.F * __webpack_require__(14)(function () {\n","\t  // eslint-disable-next-line no-undef\n","\t  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });\n","\t}), 'Reflect', {\n","\t  defineProperty: function defineProperty(target, propertyKey, attributes) {\n","\t    anObject(target);\n","\t    propertyKey = toPrimitive(propertyKey, true);\n","\t    anObject(attributes);\n","\t    try {\n","\t      dP.f(target, propertyKey, attributes);\n","\t      return true;\n","\t    } catch (e) {\n","\t      return false;\n","\t    }\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 254 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.4 Reflect.deleteProperty(target, propertyKey)\n","\tvar $export = __webpack_require__(15);\n","\tvar gOPD = __webpack_require__(58).f;\n","\tvar anObject = __webpack_require__(19);\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  deleteProperty: function deleteProperty(target, propertyKey) {\n","\t    var desc = gOPD(anObject(target), propertyKey);\n","\t    return desc && !desc.configurable ? false : delete target[propertyKey];\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 255 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// 26.1.5 Reflect.enumerate(target)\n","\tvar $export = __webpack_require__(15);\n","\tvar anObject = __webpack_require__(19);\n","\tvar Enumerate = function (iterated) {\n","\t  this._t = anObject(iterated); // target\n","\t  this._i = 0;                  // next index\n","\t  var keys = this._k = [];      // keys\n","\t  var key;\n","\t  for (key in iterated) keys.push(key);\n","\t};\n","\t__webpack_require__(138)(Enumerate, 'Object', function () {\n","\t  var that = this;\n","\t  var keys = that._k;\n","\t  var key;\n","\t  do {\n","\t    if (that._i >= keys.length) return { value: undefined, done: true };\n","\t  } while (!((key = keys[that._i++]) in that._t));\n","\t  return { value: key, done: false };\n","\t});\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  enumerate: function enumerate(target) {\n","\t    return new Enumerate(target);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 256 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.6 Reflect.get(target, propertyKey [, receiver])\n","\tvar gOPD = __webpack_require__(58);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar has = __webpack_require__(12);\n","\tvar $export = __webpack_require__(15);\n","\tvar isObject = __webpack_require__(20);\n","\tvar anObject = __webpack_require__(19);\n","\t\n","\tfunction get(target, propertyKey /* , receiver */) {\n","\t  var receiver = arguments.length < 3 ? target : arguments[2];\n","\t  var desc, proto;\n","\t  if (anObject(target) === receiver) return target[propertyKey];\n","\t  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')\n","\t    ? desc.value\n","\t    : desc.get !== undefined\n","\t      ? desc.get.call(receiver)\n","\t      : undefined;\n","\t  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);\n","\t}\n","\t\n","\t$export($export.S, 'Reflect', { get: get });\n","\n","\n","/***/ }),\n","/* 257 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\n","\tvar gOPD = __webpack_require__(58);\n","\tvar $export = __webpack_require__(15);\n","\tvar anObject = __webpack_require__(19);\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n","\t    return gOPD.f(anObject(target), propertyKey);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 258 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.8 Reflect.getPrototypeOf(target)\n","\tvar $export = __webpack_require__(15);\n","\tvar getProto = __webpack_require__(66);\n","\tvar anObject = __webpack_require__(19);\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  getPrototypeOf: function getPrototypeOf(target) {\n","\t    return getProto(anObject(target));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 259 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.9 Reflect.has(target, propertyKey)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  has: function has(target, propertyKey) {\n","\t    return propertyKey in target;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 260 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.10 Reflect.isExtensible(target)\n","\tvar $export = __webpack_require__(15);\n","\tvar anObject = __webpack_require__(19);\n","\tvar $isExtensible = Object.isExtensible;\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  isExtensible: function isExtensible(target) {\n","\t    anObject(target);\n","\t    return $isExtensible ? $isExtensible(target) : true;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 261 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.11 Reflect.ownKeys(target)\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Reflect', { ownKeys: __webpack_require__(262) });\n","\n","\n","/***/ }),\n","/* 262 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// all object keys, includes non-enumerable and symbols\n","\tvar gOPN = __webpack_require__(57);\n","\tvar gOPS = __webpack_require__(50);\n","\tvar anObject = __webpack_require__(19);\n","\tvar Reflect = __webpack_require__(11).Reflect;\n","\tmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n","\t  var keys = gOPN.f(anObject(it));\n","\t  var getSymbols = gOPS.f;\n","\t  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n","\t};\n","\n","\n","/***/ }),\n","/* 263 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.12 Reflect.preventExtensions(target)\n","\tvar $export = __webpack_require__(15);\n","\tvar anObject = __webpack_require__(19);\n","\tvar $preventExtensions = Object.preventExtensions;\n","\t\n","\t$export($export.S, 'Reflect', {\n","\t  preventExtensions: function preventExtensions(target) {\n","\t    anObject(target);\n","\t    try {\n","\t      if ($preventExtensions) $preventExtensions(target);\n","\t      return true;\n","\t    } catch (e) {\n","\t      return false;\n","\t    }\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 264 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\n","\tvar dP = __webpack_require__(18);\n","\tvar gOPD = __webpack_require__(58);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar has = __webpack_require__(12);\n","\tvar $export = __webpack_require__(15);\n","\tvar createDesc = __webpack_require__(24);\n","\tvar anObject = __webpack_require__(19);\n","\tvar isObject = __webpack_require__(20);\n","\t\n","\tfunction set(target, propertyKey, V /* , receiver */) {\n","\t  var receiver = arguments.length < 4 ? target : arguments[3];\n","\t  var ownDesc = gOPD.f(anObject(target), propertyKey);\n","\t  var existingDescriptor, proto;\n","\t  if (!ownDesc) {\n","\t    if (isObject(proto = getPrototypeOf(target))) {\n","\t      return set(proto, propertyKey, V, receiver);\n","\t    }\n","\t    ownDesc = createDesc(0);\n","\t  }\n","\t  if (has(ownDesc, 'value')) {\n","\t    if (ownDesc.writable === false || !isObject(receiver)) return false;\n","\t    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {\n","\t      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;\n","\t      existingDescriptor.value = V;\n","\t      dP.f(receiver, propertyKey, existingDescriptor);\n","\t    } else dP.f(receiver, propertyKey, createDesc(0, V));\n","\t    return true;\n","\t  }\n","\t  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n","\t}\n","\t\n","\t$export($export.S, 'Reflect', { set: set });\n","\n","\n","/***/ }),\n","/* 265 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// 26.1.14 Reflect.setPrototypeOf(target, proto)\n","\tvar $export = __webpack_require__(15);\n","\tvar setProto = __webpack_require__(80);\n","\t\n","\tif (setProto) $export($export.S, 'Reflect', {\n","\t  setPrototypeOf: function setPrototypeOf(target, proto) {\n","\t    setProto.check(target, proto);\n","\t    try {\n","\t      setProto.set(target, proto);\n","\t      return true;\n","\t    } catch (e) {\n","\t      return false;\n","\t    }\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 266 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/tc39/Array.prototype.includes\n","\tvar $export = __webpack_require__(15);\n","\tvar $includes = __webpack_require__(44)(true);\n","\t\n","\t$export($export.P, 'Array', {\n","\t  includes: function includes(el /* , fromIndex = 0 */) {\n","\t    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n","\t  }\n","\t});\n","\t\n","\t__webpack_require__(195)('includes');\n","\n","\n","/***/ }),\n","/* 267 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap\n","\tvar $export = __webpack_require__(15);\n","\tvar flattenIntoArray = __webpack_require__(268);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toLength = __webpack_require__(45);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar arraySpeciesCreate = __webpack_require__(182);\n","\t\n","\t$export($export.P, 'Array', {\n","\t  flatMap: function flatMap(callbackfn /* , thisArg */) {\n","\t    var O = toObject(this);\n","\t    var sourceLen, A;\n","\t    aFunction(callbackfn);\n","\t    sourceLen = toLength(O.length);\n","\t    A = arraySpeciesCreate(O, 0);\n","\t    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);\n","\t    return A;\n","\t  }\n","\t});\n","\t\n","\t__webpack_require__(195)('flatMap');\n","\n","\n","/***/ }),\n","/* 268 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\n","\tvar isArray = __webpack_require__(52);\n","\tvar isObject = __webpack_require__(20);\n","\tvar toLength = __webpack_require__(45);\n","\tvar ctx = __webpack_require__(30);\n","\tvar IS_CONCAT_SPREADABLE = __webpack_require__(34)('isConcatSpreadable');\n","\t\n","\tfunction flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n","\t  var targetIndex = start;\n","\t  var sourceIndex = 0;\n","\t  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;\n","\t  var element, spreadable;\n","\t\n","\t  while (sourceIndex < sourceLen) {\n","\t    if (sourceIndex in source) {\n","\t      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n","\t\n","\t      spreadable = false;\n","\t      if (isObject(element)) {\n","\t        spreadable = element[IS_CONCAT_SPREADABLE];\n","\t        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);\n","\t      }\n","\t\n","\t      if (spreadable && depth > 0) {\n","\t        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n","\t      } else {\n","\t        if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n","\t        target[targetIndex] = element;\n","\t      }\n","\t\n","\t      targetIndex++;\n","\t    }\n","\t    sourceIndex++;\n","\t  }\n","\t  return targetIndex;\n","\t}\n","\t\n","\tmodule.exports = flattenIntoArray;\n","\n","\n","/***/ }),\n","/* 269 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten\n","\tvar $export = __webpack_require__(15);\n","\tvar flattenIntoArray = __webpack_require__(268);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toLength = __webpack_require__(45);\n","\tvar toInteger = __webpack_require__(46);\n","\tvar arraySpeciesCreate = __webpack_require__(182);\n","\t\n","\t$export($export.P, 'Array', {\n","\t  flatten: function flatten(/* depthArg = 1 */) {\n","\t    var depthArg = arguments[0];\n","\t    var O = toObject(this);\n","\t    var sourceLen = toLength(O.length);\n","\t    var A = arraySpeciesCreate(O, 0);\n","\t    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n","\t    return A;\n","\t  }\n","\t});\n","\t\n","\t__webpack_require__(195)('flatten');\n","\n","\n","/***/ }),\n","/* 270 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/mathiasbynens/String.prototype.at\n","\tvar $export = __webpack_require__(15);\n","\tvar $at = __webpack_require__(135)(true);\n","\t\n","\t$export($export.P, 'String', {\n","\t  at: function at(pos) {\n","\t    return $at(this, pos);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 271 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/tc39/proposal-string-pad-start-end\n","\tvar $export = __webpack_require__(15);\n","\tvar $pad = __webpack_require__(272);\n","\tvar userAgent = __webpack_require__(225);\n","\t\n","\t// https://github.com/zloirock/core-js/issues/280\n","\tvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n","\t\n","\t$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n","\t  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n","\t    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 272 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-string-pad-start-end\n","\tvar toLength = __webpack_require__(45);\n","\tvar repeat = __webpack_require__(98);\n","\tvar defined = __webpack_require__(43);\n","\t\n","\tmodule.exports = function (that, maxLength, fillString, left) {\n","\t  var S = String(defined(that));\n","\t  var stringLength = S.length;\n","\t  var fillStr = fillString === undefined ? ' ' : String(fillString);\n","\t  var intMaxLength = toLength(maxLength);\n","\t  if (intMaxLength <= stringLength || fillStr == '') return S;\n","\t  var fillLen = intMaxLength - stringLength;\n","\t  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n","\t  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n","\t  return left ? stringFiller + S : S + stringFiller;\n","\t};\n","\n","\n","/***/ }),\n","/* 273 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/tc39/proposal-string-pad-start-end\n","\tvar $export = __webpack_require__(15);\n","\tvar $pad = __webpack_require__(272);\n","\tvar userAgent = __webpack_require__(225);\n","\t\n","\t// https://github.com/zloirock/core-js/issues/280\n","\tvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n","\t\n","\t$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n","\t  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n","\t    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 274 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\n","\t__webpack_require__(90)('trimLeft', function ($trim) {\n","\t  return function trimLeft() {\n","\t    return $trim(this, 1);\n","\t  };\n","\t}, 'trimStart');\n","\n","\n","/***/ }),\n","/* 275 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\n","\t__webpack_require__(90)('trimRight', function ($trim) {\n","\t  return function trimRight() {\n","\t    return $trim(this, 2);\n","\t  };\n","\t}, 'trimEnd');\n","\n","\n","/***/ }),\n","/* 276 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/String.prototype.matchAll/\n","\tvar $export = __webpack_require__(15);\n","\tvar defined = __webpack_require__(43);\n","\tvar toLength = __webpack_require__(45);\n","\tvar isRegExp = __webpack_require__(142);\n","\tvar getFlags = __webpack_require__(205);\n","\tvar RegExpProto = RegExp.prototype;\n","\t\n","\tvar $RegExpStringIterator = function (regexp, string) {\n","\t  this._r = regexp;\n","\t  this._s = string;\n","\t};\n","\t\n","\t__webpack_require__(138)($RegExpStringIterator, 'RegExp String', function next() {\n","\t  var match = this._r.exec(this._s);\n","\t  return { value: match, done: match === null };\n","\t});\n","\t\n","\t$export($export.P, 'String', {\n","\t  matchAll: function matchAll(regexp) {\n","\t    defined(this);\n","\t    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');\n","\t    var S = String(this);\n","\t    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);\n","\t    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n","\t    rx.lastIndex = toLength(regexp.lastIndex);\n","\t    return new $RegExpStringIterator(rx, S);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 277 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(36)('asyncIterator');\n","\n","\n","/***/ }),\n","/* 278 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(36)('observable');\n","\n","\n","/***/ }),\n","/* 279 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-object-getownpropertydescriptors\n","\tvar $export = __webpack_require__(15);\n","\tvar ownKeys = __webpack_require__(262);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar gOPD = __webpack_require__(58);\n","\tvar createProperty = __webpack_require__(172);\n","\t\n","\t$export($export.S, 'Object', {\n","\t  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n","\t    var O = toIObject(object);\n","\t    var getDesc = gOPD.f;\n","\t    var keys = ownKeys(O);\n","\t    var result = {};\n","\t    var i = 0;\n","\t    var key, desc;\n","\t    while (keys.length > i) {\n","\t      desc = getDesc(O, key = keys[i++]);\n","\t      if (desc !== undefined) createProperty(result, key, desc);\n","\t    }\n","\t    return result;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 280 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-object-values-entries\n","\tvar $export = __webpack_require__(15);\n","\tvar $values = __webpack_require__(281)(false);\n","\t\n","\t$export($export.S, 'Object', {\n","\t  values: function values(it) {\n","\t    return $values(it);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 281 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar getKeys = __webpack_require__(38);\n","\tvar toIObject = __webpack_require__(40);\n","\tvar isEnum = __webpack_require__(51).f;\n","\tmodule.exports = function (isEntries) {\n","\t  return function (it) {\n","\t    var O = toIObject(it);\n","\t    var keys = getKeys(O);\n","\t    var length = keys.length;\n","\t    var i = 0;\n","\t    var result = [];\n","\t    var key;\n","\t    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n","\t      result.push(isEntries ? [key, O[key]] : O[key]);\n","\t    } return result;\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 282 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-object-values-entries\n","\tvar $export = __webpack_require__(15);\n","\tvar $entries = __webpack_require__(281)(true);\n","\t\n","\t$export($export.S, 'Object', {\n","\t  entries: function entries(it) {\n","\t    return $entries(it);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 283 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar $defineProperty = __webpack_require__(18);\n","\t\n","\t// B.2.2.2 Object.prototype.__defineGetter__(P, getter)\n","\t__webpack_require__(13) && $export($export.P + __webpack_require__(284), 'Object', {\n","\t  __defineGetter__: function __defineGetter__(P, getter) {\n","\t    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 284 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// Forced replacement prototype accessors methods\n","\tmodule.exports = __webpack_require__(29) || !__webpack_require__(14)(function () {\n","\t  var K = Math.random();\n","\t  // In FF throws only define methods\n","\t  // eslint-disable-next-line no-undef, no-useless-call\n","\t  __defineSetter__.call(null, K, function () { /* empty */ });\n","\t  delete __webpack_require__(11)[K];\n","\t});\n","\n","\n","/***/ }),\n","/* 285 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar $defineProperty = __webpack_require__(18);\n","\t\n","\t// B.2.2.3 Object.prototype.__defineSetter__(P, setter)\n","\t__webpack_require__(13) && $export($export.P + __webpack_require__(284), 'Object', {\n","\t  __defineSetter__: function __defineSetter__(P, setter) {\n","\t    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 286 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar getOwnPropertyDescriptor = __webpack_require__(58).f;\n","\t\n","\t// B.2.2.4 Object.prototype.__lookupGetter__(P)\n","\t__webpack_require__(13) && $export($export.P + __webpack_require__(284), 'Object', {\n","\t  __lookupGetter__: function __lookupGetter__(P) {\n","\t    var O = toObject(this);\n","\t    var K = toPrimitive(P, true);\n","\t    var D;\n","\t    do {\n","\t      if (D = getOwnPropertyDescriptor(O, K)) return D.get;\n","\t    } while (O = getPrototypeOf(O));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 287 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar toObject = __webpack_require__(65);\n","\tvar toPrimitive = __webpack_require__(23);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar getOwnPropertyDescriptor = __webpack_require__(58).f;\n","\t\n","\t// B.2.2.5 Object.prototype.__lookupSetter__(P)\n","\t__webpack_require__(13) && $export($export.P + __webpack_require__(284), 'Object', {\n","\t  __lookupSetter__: function __lookupSetter__(P) {\n","\t    var O = toObject(this);\n","\t    var K = toPrimitive(P, true);\n","\t    var D;\n","\t    do {\n","\t      if (D = getOwnPropertyDescriptor(O, K)) return D.set;\n","\t    } while (O = getPrototypeOf(O));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 288 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/DavidBruant/Map-Set.prototype.toJSON\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(289)('Map') });\n","\n","\n","/***/ }),\n","/* 289 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/DavidBruant/Map-Set.prototype.toJSON\n","\tvar classof = __webpack_require__(82);\n","\tvar from = __webpack_require__(290);\n","\tmodule.exports = function (NAME) {\n","\t  return function toJSON() {\n","\t    if (classof(this) != NAME) throw TypeError(NAME + \"#toJSON isn't generic\");\n","\t    return from(this);\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 290 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar forOf = __webpack_require__(220);\n","\t\n","\tmodule.exports = function (iter, ITERATOR) {\n","\t  var result = [];\n","\t  forOf(iter, false, result.push, result, ITERATOR);\n","\t  return result;\n","\t};\n","\n","\n","/***/ }),\n","/* 291 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/DavidBruant/Map-Set.prototype.toJSON\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(289)('Set') });\n","\n","\n","/***/ }),\n","/* 292 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of\n","\t__webpack_require__(293)('Map');\n","\n","\n","/***/ }),\n","/* 293 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/proposal-setmap-offrom/\n","\tvar $export = __webpack_require__(15);\n","\t\n","\tmodule.exports = function (COLLECTION) {\n","\t  $export($export.S, COLLECTION, { of: function of() {\n","\t    var length = arguments.length;\n","\t    var A = new Array(length);\n","\t    while (length--) A[length] = arguments[length];\n","\t    return new this(A);\n","\t  } });\n","\t};\n","\n","\n","/***/ }),\n","/* 294 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of\n","\t__webpack_require__(293)('Set');\n","\n","\n","/***/ }),\n","/* 295 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of\n","\t__webpack_require__(293)('WeakMap');\n","\n","\n","/***/ }),\n","/* 296 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of\n","\t__webpack_require__(293)('WeakSet');\n","\n","\n","/***/ }),\n","/* 297 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from\n","\t__webpack_require__(298)('Map');\n","\n","\n","/***/ }),\n","/* 298 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://tc39.github.io/proposal-setmap-offrom/\n","\tvar $export = __webpack_require__(15);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar ctx = __webpack_require__(30);\n","\tvar forOf = __webpack_require__(220);\n","\t\n","\tmodule.exports = function (COLLECTION) {\n","\t  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {\n","\t    var mapFn = arguments[1];\n","\t    var mapping, A, n, cb;\n","\t    aFunction(this);\n","\t    mapping = mapFn !== undefined;\n","\t    if (mapping) aFunction(mapFn);\n","\t    if (source == undefined) return new this();\n","\t    A = [];\n","\t    if (mapping) {\n","\t      n = 0;\n","\t      cb = ctx(mapFn, arguments[2], 2);\n","\t      forOf(source, false, function (nextItem) {\n","\t        A.push(cb(nextItem, n++));\n","\t      });\n","\t    } else {\n","\t      forOf(source, false, A.push, A);\n","\t    }\n","\t    return new this(A);\n","\t  } });\n","\t};\n","\n","\n","/***/ }),\n","/* 299 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from\n","\t__webpack_require__(298)('Set');\n","\n","\n","/***/ }),\n","/* 300 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from\n","\t__webpack_require__(298)('WeakMap');\n","\n","\n","/***/ }),\n","/* 301 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from\n","\t__webpack_require__(298)('WeakSet');\n","\n","\n","/***/ }),\n","/* 302 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-global\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.G, { global: __webpack_require__(11) });\n","\n","\n","/***/ }),\n","/* 303 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-global\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'System', { global: __webpack_require__(11) });\n","\n","\n","/***/ }),\n","/* 304 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/ljharb/proposal-is-error\n","\tvar $export = __webpack_require__(15);\n","\tvar cof = __webpack_require__(42);\n","\t\n","\t$export($export.S, 'Error', {\n","\t  isError: function isError(it) {\n","\t    return cof(it) === 'Error';\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 305 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  clamp: function clamp(x, lower, upper) {\n","\t    return Math.min(upper, Math.max(lower, x));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 306 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });\n","\n","\n","/***/ }),\n","/* 307 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\tvar RAD_PER_DEG = 180 / Math.PI;\n","\t\n","\t$export($export.S, 'Math', {\n","\t  degrees: function degrees(radians) {\n","\t    return radians * RAD_PER_DEG;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 308 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\tvar scale = __webpack_require__(309);\n","\tvar fround = __webpack_require__(121);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {\n","\t    return fround(scale(x, inLow, inHigh, outLow, outHigh));\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 309 */\n","/***/ (function(module, exports) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n","\t  if (\n","\t    arguments.length === 0\n","\t      // eslint-disable-next-line no-self-compare\n","\t      || x != x\n","\t      // eslint-disable-next-line no-self-compare\n","\t      || inLow != inLow\n","\t      // eslint-disable-next-line no-self-compare\n","\t      || inHigh != inHigh\n","\t      // eslint-disable-next-line no-self-compare\n","\t      || outLow != outLow\n","\t      // eslint-disable-next-line no-self-compare\n","\t      || outHigh != outHigh\n","\t  ) return NaN;\n","\t  if (x === Infinity || x === -Infinity) return x;\n","\t  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n","\t};\n","\n","\n","/***/ }),\n","/* 310 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  iaddh: function iaddh(x0, x1, y0, y1) {\n","\t    var $x0 = x0 >>> 0;\n","\t    var $x1 = x1 >>> 0;\n","\t    var $y0 = y0 >>> 0;\n","\t    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 311 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  isubh: function isubh(x0, x1, y0, y1) {\n","\t    var $x0 = x0 >>> 0;\n","\t    var $x1 = x1 >>> 0;\n","\t    var $y0 = y0 >>> 0;\n","\t    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 312 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  imulh: function imulh(u, v) {\n","\t    var UINT16 = 0xffff;\n","\t    var $u = +u;\n","\t    var $v = +v;\n","\t    var u0 = $u & UINT16;\n","\t    var v0 = $v & UINT16;\n","\t    var u1 = $u >> 16;\n","\t    var v1 = $v >> 16;\n","\t    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n","\t    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 313 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });\n","\n","\n","/***/ }),\n","/* 314 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\tvar DEG_PER_RAD = Math.PI / 180;\n","\t\n","\t$export($export.S, 'Math', {\n","\t  radians: function radians(degrees) {\n","\t    return degrees * DEG_PER_RAD;\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 315 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://rwaldron.github.io/proposal-math-extensions/\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { scale: __webpack_require__(309) });\n","\n","\n","/***/ }),\n","/* 316 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', {\n","\t  umulh: function umulh(u, v) {\n","\t    var UINT16 = 0xffff;\n","\t    var $u = +u;\n","\t    var $v = +v;\n","\t    var u0 = $u & UINT16;\n","\t    var v0 = $v & UINT16;\n","\t    var u1 = $u >>> 16;\n","\t    var v1 = $v >>> 16;\n","\t    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n","\t    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 317 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// http://jfbastien.github.io/papers/Math.signbit.html\n","\tvar $export = __webpack_require__(15);\n","\t\n","\t$export($export.S, 'Math', { signbit: function signbit(x) {\n","\t  // eslint-disable-next-line no-self-compare\n","\t  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;\n","\t} });\n","\n","\n","/***/ }),\n","/* 318 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/tc39/proposal-promise-finally\n","\t'use strict';\n","\tvar $export = __webpack_require__(15);\n","\tvar core = __webpack_require__(16);\n","\tvar global = __webpack_require__(11);\n","\tvar speciesConstructor = __webpack_require__(217);\n","\tvar promiseResolve = __webpack_require__(226);\n","\t\n","\t$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n","\t  var C = speciesConstructor(this, core.Promise || global.Promise);\n","\t  var isFunction = typeof onFinally == 'function';\n","\t  return this.then(\n","\t    isFunction ? function (x) {\n","\t      return promiseResolve(C, onFinally()).then(function () { return x; });\n","\t    } : onFinally,\n","\t    isFunction ? function (e) {\n","\t      return promiseResolve(C, onFinally()).then(function () { throw e; });\n","\t    } : onFinally\n","\t  );\n","\t} });\n","\n","\n","/***/ }),\n","/* 319 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/tc39/proposal-promise-try\n","\tvar $export = __webpack_require__(15);\n","\tvar newPromiseCapability = __webpack_require__(223);\n","\tvar perform = __webpack_require__(224);\n","\t\n","\t$export($export.S, 'Promise', { 'try': function (callbackfn) {\n","\t  var promiseCapability = newPromiseCapability.f(this);\n","\t  var result = perform(callbackfn);\n","\t  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n","\t  return promiseCapability.promise;\n","\t} });\n","\n","\n","/***/ }),\n","/* 320 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar toMetaKey = metadata.key;\n","\tvar ordinaryDefineOwnMetadata = metadata.set;\n","\t\n","\tmetadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {\n","\t  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));\n","\t} });\n","\n","\n","/***/ }),\n","/* 321 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar Map = __webpack_require__(228);\n","\tvar $export = __webpack_require__(15);\n","\tvar shared = __webpack_require__(28)('metadata');\n","\tvar store = shared.store || (shared.store = new (__webpack_require__(233))());\n","\t\n","\tvar getOrCreateMetadataMap = function (target, targetKey, create) {\n","\t  var targetMetadata = store.get(target);\n","\t  if (!targetMetadata) {\n","\t    if (!create) return undefined;\n","\t    store.set(target, targetMetadata = new Map());\n","\t  }\n","\t  var keyMetadata = targetMetadata.get(targetKey);\n","\t  if (!keyMetadata) {\n","\t    if (!create) return undefined;\n","\t    targetMetadata.set(targetKey, keyMetadata = new Map());\n","\t  } return keyMetadata;\n","\t};\n","\tvar ordinaryHasOwnMetadata = function (MetadataKey, O, P) {\n","\t  var metadataMap = getOrCreateMetadataMap(O, P, false);\n","\t  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);\n","\t};\n","\tvar ordinaryGetOwnMetadata = function (MetadataKey, O, P) {\n","\t  var metadataMap = getOrCreateMetadataMap(O, P, false);\n","\t  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);\n","\t};\n","\tvar ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {\n","\t  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);\n","\t};\n","\tvar ordinaryOwnMetadataKeys = function (target, targetKey) {\n","\t  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);\n","\t  var keys = [];\n","\t  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });\n","\t  return keys;\n","\t};\n","\tvar toMetaKey = function (it) {\n","\t  return it === undefined || typeof it == 'symbol' ? it : String(it);\n","\t};\n","\tvar exp = function (O) {\n","\t  $export($export.S, 'Reflect', O);\n","\t};\n","\t\n","\tmodule.exports = {\n","\t  store: store,\n","\t  map: getOrCreateMetadataMap,\n","\t  has: ordinaryHasOwnMetadata,\n","\t  get: ordinaryGetOwnMetadata,\n","\t  set: ordinaryDefineOwnMetadata,\n","\t  keys: ordinaryOwnMetadataKeys,\n","\t  key: toMetaKey,\n","\t  exp: exp\n","\t};\n","\n","\n","/***/ }),\n","/* 322 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar toMetaKey = metadata.key;\n","\tvar getOrCreateMetadataMap = metadata.map;\n","\tvar store = metadata.store;\n","\t\n","\tmetadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {\n","\t  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);\n","\t  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);\n","\t  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;\n","\t  if (metadataMap.size) return true;\n","\t  var targetMetadata = store.get(target);\n","\t  targetMetadata['delete'](targetKey);\n","\t  return !!targetMetadata.size || store['delete'](target);\n","\t} });\n","\n","\n","/***/ }),\n","/* 323 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar ordinaryHasOwnMetadata = metadata.has;\n","\tvar ordinaryGetOwnMetadata = metadata.get;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tvar ordinaryGetMetadata = function (MetadataKey, O, P) {\n","\t  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n","\t  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);\n","\t  var parent = getPrototypeOf(O);\n","\t  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;\n","\t};\n","\t\n","\tmetadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {\n","\t  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 324 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar Set = __webpack_require__(232);\n","\tvar from = __webpack_require__(290);\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar ordinaryOwnMetadataKeys = metadata.keys;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tvar ordinaryMetadataKeys = function (O, P) {\n","\t  var oKeys = ordinaryOwnMetadataKeys(O, P);\n","\t  var parent = getPrototypeOf(O);\n","\t  if (parent === null) return oKeys;\n","\t  var pKeys = ordinaryMetadataKeys(parent, P);\n","\t  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;\n","\t};\n","\t\n","\tmetadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {\n","\t  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 325 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar ordinaryGetOwnMetadata = metadata.get;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tmetadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {\n","\t  return ordinaryGetOwnMetadata(metadataKey, anObject(target)\n","\t    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 326 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar ordinaryOwnMetadataKeys = metadata.keys;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tmetadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {\n","\t  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 327 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar getPrototypeOf = __webpack_require__(66);\n","\tvar ordinaryHasOwnMetadata = metadata.has;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tvar ordinaryHasMetadata = function (MetadataKey, O, P) {\n","\t  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n","\t  if (hasOwn) return true;\n","\t  var parent = getPrototypeOf(O);\n","\t  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;\n","\t};\n","\t\n","\tmetadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {\n","\t  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 328 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar ordinaryHasOwnMetadata = metadata.has;\n","\tvar toMetaKey = metadata.key;\n","\t\n","\tmetadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {\n","\t  return ordinaryHasOwnMetadata(metadataKey, anObject(target)\n","\t    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n","\t} });\n","\n","\n","/***/ }),\n","/* 329 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $metadata = __webpack_require__(321);\n","\tvar anObject = __webpack_require__(19);\n","\tvar aFunction = __webpack_require__(31);\n","\tvar toMetaKey = $metadata.key;\n","\tvar ordinaryDefineOwnMetadata = $metadata.set;\n","\t\n","\t$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {\n","\t  return function decorator(target, targetKey) {\n","\t    ordinaryDefineOwnMetadata(\n","\t      metadataKey, metadataValue,\n","\t      (targetKey !== undefined ? anObject : aFunction)(target),\n","\t      toMetaKey(targetKey)\n","\t    );\n","\t  };\n","\t} });\n","\n","\n","/***/ }),\n","/* 330 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask\n","\tvar $export = __webpack_require__(15);\n","\tvar microtask = __webpack_require__(222)();\n","\tvar process = __webpack_require__(11).process;\n","\tvar isNode = __webpack_require__(42)(process) == 'process';\n","\t\n","\t$export($export.G, {\n","\t  asap: function asap(fn) {\n","\t    var domain = isNode && process.domain;\n","\t    microtask(domain ? domain.bind(fn) : fn);\n","\t  }\n","\t});\n","\n","\n","/***/ }),\n","/* 331 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t'use strict';\n","\t// https://github.com/zenparsing/es-observable\n","\tvar $export = __webpack_require__(15);\n","\tvar global = __webpack_require__(11);\n","\tvar core = __webpack_require__(16);\n","\tvar microtask = __webpack_require__(222)();\n","\tvar OBSERVABLE = __webpack_require__(34)('observable');\n","\tvar aFunction = __webpack_require__(31);\n","\tvar anObject = __webpack_require__(19);\n","\tvar anInstance = __webpack_require__(219);\n","\tvar redefineAll = __webpack_require__(227);\n","\tvar hide = __webpack_require__(17);\n","\tvar forOf = __webpack_require__(220);\n","\tvar RETURN = forOf.RETURN;\n","\t\n","\tvar getMethod = function (fn) {\n","\t  return fn == null ? undefined : aFunction(fn);\n","\t};\n","\t\n","\tvar cleanupSubscription = function (subscription) {\n","\t  var cleanup = subscription._c;\n","\t  if (cleanup) {\n","\t    subscription._c = undefined;\n","\t    cleanup();\n","\t  }\n","\t};\n","\t\n","\tvar subscriptionClosed = function (subscription) {\n","\t  return subscription._o === undefined;\n","\t};\n","\t\n","\tvar closeSubscription = function (subscription) {\n","\t  if (!subscriptionClosed(subscription)) {\n","\t    subscription._o = undefined;\n","\t    cleanupSubscription(subscription);\n","\t  }\n","\t};\n","\t\n","\tvar Subscription = function (observer, subscriber) {\n","\t  anObject(observer);\n","\t  this._c = undefined;\n","\t  this._o = observer;\n","\t  observer = new SubscriptionObserver(this);\n","\t  try {\n","\t    var cleanup = subscriber(observer);\n","\t    var subscription = cleanup;\n","\t    if (cleanup != null) {\n","\t      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };\n","\t      else aFunction(cleanup);\n","\t      this._c = cleanup;\n","\t    }\n","\t  } catch (e) {\n","\t    observer.error(e);\n","\t    return;\n","\t  } if (subscriptionClosed(this)) cleanupSubscription(this);\n","\t};\n","\t\n","\tSubscription.prototype = redefineAll({}, {\n","\t  unsubscribe: function unsubscribe() { closeSubscription(this); }\n","\t});\n","\t\n","\tvar SubscriptionObserver = function (subscription) {\n","\t  this._s = subscription;\n","\t};\n","\t\n","\tSubscriptionObserver.prototype = redefineAll({}, {\n","\t  next: function next(value) {\n","\t    var subscription = this._s;\n","\t    if (!subscriptionClosed(subscription)) {\n","\t      var observer = subscription._o;\n","\t      try {\n","\t        var m = getMethod(observer.next);\n","\t        if (m) return m.call(observer, value);\n","\t      } catch (e) {\n","\t        try {\n","\t          closeSubscription(subscription);\n","\t        } finally {\n","\t          throw e;\n","\t        }\n","\t      }\n","\t    }\n","\t  },\n","\t  error: function error(value) {\n","\t    var subscription = this._s;\n","\t    if (subscriptionClosed(subscription)) throw value;\n","\t    var observer = subscription._o;\n","\t    subscription._o = undefined;\n","\t    try {\n","\t      var m = getMethod(observer.error);\n","\t      if (!m) throw value;\n","\t      value = m.call(observer, value);\n","\t    } catch (e) {\n","\t      try {\n","\t        cleanupSubscription(subscription);\n","\t      } finally {\n","\t        throw e;\n","\t      }\n","\t    } cleanupSubscription(subscription);\n","\t    return value;\n","\t  },\n","\t  complete: function complete(value) {\n","\t    var subscription = this._s;\n","\t    if (!subscriptionClosed(subscription)) {\n","\t      var observer = subscription._o;\n","\t      subscription._o = undefined;\n","\t      try {\n","\t        var m = getMethod(observer.complete);\n","\t        value = m ? m.call(observer, value) : undefined;\n","\t      } catch (e) {\n","\t        try {\n","\t          cleanupSubscription(subscription);\n","\t        } finally {\n","\t          throw e;\n","\t        }\n","\t      } cleanupSubscription(subscription);\n","\t      return value;\n","\t    }\n","\t  }\n","\t});\n","\t\n","\tvar $Observable = function Observable(subscriber) {\n","\t  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);\n","\t};\n","\t\n","\tredefineAll($Observable.prototype, {\n","\t  subscribe: function subscribe(observer) {\n","\t    return new Subscription(observer, this._f);\n","\t  },\n","\t  forEach: function forEach(fn) {\n","\t    var that = this;\n","\t    return new (core.Promise || global.Promise)(function (resolve, reject) {\n","\t      aFunction(fn);\n","\t      var subscription = that.subscribe({\n","\t        next: function (value) {\n","\t          try {\n","\t            return fn(value);\n","\t          } catch (e) {\n","\t            reject(e);\n","\t            subscription.unsubscribe();\n","\t          }\n","\t        },\n","\t        error: reject,\n","\t        complete: resolve\n","\t      });\n","\t    });\n","\t  }\n","\t});\n","\t\n","\tredefineAll($Observable, {\n","\t  from: function from(x) {\n","\t    var C = typeof this === 'function' ? this : $Observable;\n","\t    var method = getMethod(anObject(x)[OBSERVABLE]);\n","\t    if (method) {\n","\t      var observable = anObject(method.call(x));\n","\t      return observable.constructor === C ? observable : new C(function (observer) {\n","\t        return observable.subscribe(observer);\n","\t      });\n","\t    }\n","\t    return new C(function (observer) {\n","\t      var done = false;\n","\t      microtask(function () {\n","\t        if (!done) {\n","\t          try {\n","\t            if (forOf(x, false, function (it) {\n","\t              observer.next(it);\n","\t              if (done) return RETURN;\n","\t            }) === RETURN) return;\n","\t          } catch (e) {\n","\t            if (done) throw e;\n","\t            observer.error(e);\n","\t            return;\n","\t          } observer.complete();\n","\t        }\n","\t      });\n","\t      return function () { done = true; };\n","\t    });\n","\t  },\n","\t  of: function of() {\n","\t    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];\n","\t    return new (typeof this === 'function' ? this : $Observable)(function (observer) {\n","\t      var done = false;\n","\t      microtask(function () {\n","\t        if (!done) {\n","\t          for (var j = 0; j < items.length; ++j) {\n","\t            observer.next(items[j]);\n","\t            if (done) return;\n","\t          } observer.complete();\n","\t        }\n","\t      });\n","\t      return function () { done = true; };\n","\t    });\n","\t  }\n","\t});\n","\t\n","\thide($Observable.prototype, OBSERVABLE, function () { return this; });\n","\t\n","\t$export($export.G, { Observable: $Observable });\n","\t\n","\t__webpack_require__(201)('Observable');\n","\n","\n","/***/ }),\n","/* 332 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// ie9- setTimeout & setInterval additional parameters fix\n","\tvar global = __webpack_require__(11);\n","\tvar $export = __webpack_require__(15);\n","\tvar userAgent = __webpack_require__(225);\n","\tvar slice = [].slice;\n","\tvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\n","\tvar wrap = function (set) {\n","\t  return function (fn, time /* , ...args */) {\n","\t    var boundArgs = arguments.length > 2;\n","\t    var args = boundArgs ? slice.call(arguments, 2) : false;\n","\t    return set(boundArgs ? function () {\n","\t      // eslint-disable-next-line no-new-func\n","\t      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n","\t    } : fn, time);\n","\t  };\n","\t};\n","\t$export($export.G + $export.B + $export.F * MSIE, {\n","\t  setTimeout: wrap(global.setTimeout),\n","\t  setInterval: wrap(global.setInterval)\n","\t});\n","\n","\n","/***/ }),\n","/* 333 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $export = __webpack_require__(15);\n","\tvar $task = __webpack_require__(221);\n","\t$export($export.G + $export.B, {\n","\t  setImmediate: $task.set,\n","\t  clearImmediate: $task.clear\n","\t});\n","\n","\n","/***/ }),\n","/* 334 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\tvar $iterators = __webpack_require__(202);\n","\tvar getKeys = __webpack_require__(38);\n","\tvar redefine = __webpack_require__(25);\n","\tvar global = __webpack_require__(11);\n","\tvar hide = __webpack_require__(17);\n","\tvar Iterators = __webpack_require__(137);\n","\tvar wks = __webpack_require__(34);\n","\tvar ITERATOR = wks('iterator');\n","\tvar TO_STRING_TAG = wks('toStringTag');\n","\tvar ArrayValues = Iterators.Array;\n","\t\n","\tvar DOMIterables = {\n","\t  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n","\t  CSSStyleDeclaration: false,\n","\t  CSSValueList: false,\n","\t  ClientRectList: false,\n","\t  DOMRectList: false,\n","\t  DOMStringList: false,\n","\t  DOMTokenList: true,\n","\t  DataTransferItemList: false,\n","\t  FileList: false,\n","\t  HTMLAllCollection: false,\n","\t  HTMLCollection: false,\n","\t  HTMLFormElement: false,\n","\t  HTMLSelectElement: false,\n","\t  MediaList: true, // TODO: Not spec compliant, should be false.\n","\t  MimeTypeArray: false,\n","\t  NamedNodeMap: false,\n","\t  NodeList: true,\n","\t  PaintRequestList: false,\n","\t  Plugin: false,\n","\t  PluginArray: false,\n","\t  SVGLengthList: false,\n","\t  SVGNumberList: false,\n","\t  SVGPathSegList: false,\n","\t  SVGPointList: false,\n","\t  SVGStringList: false,\n","\t  SVGTransformList: false,\n","\t  SourceBufferList: false,\n","\t  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n","\t  TextTrackCueList: false,\n","\t  TextTrackList: false,\n","\t  TouchList: false\n","\t};\n","\t\n","\tfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n","\t  var NAME = collections[i];\n","\t  var explicit = DOMIterables[NAME];\n","\t  var Collection = global[NAME];\n","\t  var proto = Collection && Collection.prototype;\n","\t  var key;\n","\t  if (proto) {\n","\t    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n","\t    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n","\t    Iterators[NAME] = ArrayValues;\n","\t    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n","\t  }\n","\t}\n","\n","\n","/***/ }),\n","/* 335 */\n","/***/ (function(module, exports) {\n","\n","\t/* WEBPACK VAR INJECTION */(function(global) {/**\n","\t * Copyright (c) 2014, Facebook, Inc.\n","\t * All rights reserved.\n","\t *\n","\t * This source code is licensed under the BSD-style license found in the\n","\t * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n","\t * additional grant of patent rights can be found in the PATENTS file in\n","\t * the same directory.\n","\t */\n","\t\n","\t!(function(global) {\n","\t  \"use strict\";\n","\t\n","\t  var Op = Object.prototype;\n","\t  var hasOwn = Op.hasOwnProperty;\n","\t  var undefined; // More compressible than void 0.\n","\t  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n","\t  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n","\t  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n","\t  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n","\t\n","\t  var inModule = typeof module === \"object\";\n","\t  var runtime = global.regeneratorRuntime;\n","\t  if (runtime) {\n","\t    if (inModule) {\n","\t      // If regeneratorRuntime is defined globally and we're in a module,\n","\t      // make the exports object identical to regeneratorRuntime.\n","\t      module.exports = runtime;\n","\t    }\n","\t    // Don't bother evaluating the rest of this file if the runtime was\n","\t    // already defined globally.\n","\t    return;\n","\t  }\n","\t\n","\t  // Define the runtime globally (as expected by generated code) as either\n","\t  // module.exports (if we're in a module) or a new, empty object.\n","\t  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n","\t\n","\t  function wrap(innerFn, outerFn, self, tryLocsList) {\n","\t    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n","\t    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n","\t    var generator = Object.create(protoGenerator.prototype);\n","\t    var context = new Context(tryLocsList || []);\n","\t\n","\t    // The ._invoke method unifies the implementations of the .next,\n","\t    // .throw, and .return methods.\n","\t    generator._invoke = makeInvokeMethod(innerFn, self, context);\n","\t\n","\t    return generator;\n","\t  }\n","\t  runtime.wrap = wrap;\n","\t\n","\t  // Try/catch helper to minimize deoptimizations. Returns a completion\n","\t  // record like context.tryEntries[i].completion. This interface could\n","\t  // have been (and was previously) designed to take a closure to be\n","\t  // invoked without arguments, but in all the cases we care about we\n","\t  // already have an existing method we want to call, so there's no need\n","\t  // to create a new function object. We can even get away with assuming\n","\t  // the method takes exactly one argument, since that happens to be true\n","\t  // in every case, so we don't have to touch the arguments object. The\n","\t  // only additional allocation required is the completion record, which\n","\t  // has a stable shape and so hopefully should be cheap to allocate.\n","\t  function tryCatch(fn, obj, arg) {\n","\t    try {\n","\t      return { type: \"normal\", arg: fn.call(obj, arg) };\n","\t    } catch (err) {\n","\t      return { type: \"throw\", arg: err };\n","\t    }\n","\t  }\n","\t\n","\t  var GenStateSuspendedStart = \"suspendedStart\";\n","\t  var GenStateSuspendedYield = \"suspendedYield\";\n","\t  var GenStateExecuting = \"executing\";\n","\t  var GenStateCompleted = \"completed\";\n","\t\n","\t  // Returning this object from the innerFn has the same effect as\n","\t  // breaking out of the dispatch switch statement.\n","\t  var ContinueSentinel = {};\n","\t\n","\t  // Dummy constructor functions that we use as the .constructor and\n","\t  // .constructor.prototype properties for functions that return Generator\n","\t  // objects. For full spec compliance, you may wish to configure your\n","\t  // minifier not to mangle the names of these two functions.\n","\t  function Generator() {}\n","\t  function GeneratorFunction() {}\n","\t  function GeneratorFunctionPrototype() {}\n","\t\n","\t  // This is a polyfill for %IteratorPrototype% for environments that\n","\t  // don't natively support it.\n","\t  var IteratorPrototype = {};\n","\t  IteratorPrototype[iteratorSymbol] = function () {\n","\t    return this;\n","\t  };\n","\t\n","\t  var getProto = Object.getPrototypeOf;\n","\t  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n","\t  if (NativeIteratorPrototype &&\n","\t      NativeIteratorPrototype !== Op &&\n","\t      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n","\t    // This environment has a native %IteratorPrototype%; use it instead\n","\t    // of the polyfill.\n","\t    IteratorPrototype = NativeIteratorPrototype;\n","\t  }\n","\t\n","\t  var Gp = GeneratorFunctionPrototype.prototype =\n","\t    Generator.prototype = Object.create(IteratorPrototype);\n","\t  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n","\t  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n","\t  GeneratorFunctionPrototype[toStringTagSymbol] =\n","\t    GeneratorFunction.displayName = \"GeneratorFunction\";\n","\t\n","\t  // Helper for defining the .next, .throw, and .return methods of the\n","\t  // Iterator interface in terms of a single ._invoke method.\n","\t  function defineIteratorMethods(prototype) {\n","\t    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n","\t      prototype[method] = function(arg) {\n","\t        return this._invoke(method, arg);\n","\t      };\n","\t    });\n","\t  }\n","\t\n","\t  runtime.isGeneratorFunction = function(genFun) {\n","\t    var ctor = typeof genFun === \"function\" && genFun.constructor;\n","\t    return ctor\n","\t      ? ctor === GeneratorFunction ||\n","\t        // For the native GeneratorFunction constructor, the best we can\n","\t        // do is to check its .name property.\n","\t        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n","\t      : false;\n","\t  };\n","\t\n","\t  runtime.mark = function(genFun) {\n","\t    if (Object.setPrototypeOf) {\n","\t      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n","\t    } else {\n","\t      genFun.__proto__ = GeneratorFunctionPrototype;\n","\t      if (!(toStringTagSymbol in genFun)) {\n","\t        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n","\t      }\n","\t    }\n","\t    genFun.prototype = Object.create(Gp);\n","\t    return genFun;\n","\t  };\n","\t\n","\t  // Within the body of any async function, `await x` is transformed to\n","\t  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n","\t  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n","\t  // meant to be awaited.\n","\t  runtime.awrap = function(arg) {\n","\t    return { __await: arg };\n","\t  };\n","\t\n","\t  function AsyncIterator(generator) {\n","\t    function invoke(method, arg, resolve, reject) {\n","\t      var record = tryCatch(generator[method], generator, arg);\n","\t      if (record.type === \"throw\") {\n","\t        reject(record.arg);\n","\t      } else {\n","\t        var result = record.arg;\n","\t        var value = result.value;\n","\t        if (value &&\n","\t            typeof value === \"object\" &&\n","\t            hasOwn.call(value, \"__await\")) {\n","\t          return Promise.resolve(value.__await).then(function(value) {\n","\t            invoke(\"next\", value, resolve, reject);\n","\t          }, function(err) {\n","\t            invoke(\"throw\", err, resolve, reject);\n","\t          });\n","\t        }\n","\t\n","\t        return Promise.resolve(value).then(function(unwrapped) {\n","\t          // When a yielded Promise is resolved, its final value becomes\n","\t          // the .value of the Promise<{value,done}> result for the\n","\t          // current iteration. If the Promise is rejected, however, the\n","\t          // result for this iteration will be rejected with the same\n","\t          // reason. Note that rejections of yielded Promises are not\n","\t          // thrown back into the generator function, as is the case\n","\t          // when an awaited Promise is rejected. This difference in\n","\t          // behavior between yield and await is important, because it\n","\t          // allows the consumer to decide what to do with the yielded\n","\t          // rejection (swallow it and continue, manually .throw it back\n","\t          // into the generator, abandon iteration, whatever). With\n","\t          // await, by contrast, there is no opportunity to examine the\n","\t          // rejection reason outside the generator function, so the\n","\t          // only option is to throw it from the await expression, and\n","\t          // let the generator function handle the exception.\n","\t          result.value = unwrapped;\n","\t          resolve(result);\n","\t        }, reject);\n","\t      }\n","\t    }\n","\t\n","\t    if (typeof global.process === \"object\" && global.process.domain) {\n","\t      invoke = global.process.domain.bind(invoke);\n","\t    }\n","\t\n","\t    var previousPromise;\n","\t\n","\t    function enqueue(method, arg) {\n","\t      function callInvokeWithMethodAndArg() {\n","\t        return new Promise(function(resolve, reject) {\n","\t          invoke(method, arg, resolve, reject);\n","\t        });\n","\t      }\n","\t\n","\t      return previousPromise =\n","\t        // If enqueue has been called before, then we want to wait until\n","\t        // all previous Promises have been resolved before calling invoke,\n","\t        // so that results are always delivered in the correct order. If\n","\t        // enqueue has not been called before, then it is important to\n","\t        // call invoke immediately, without waiting on a callback to fire,\n","\t        // so that the async generator function has the opportunity to do\n","\t        // any necessary setup in a predictable way. This predictability\n","\t        // is why the Promise constructor synchronously invokes its\n","\t        // executor callback, and why async functions synchronously\n","\t        // execute code before the first await. Since we implement simple\n","\t        // async functions in terms of async generators, it is especially\n","\t        // important to get this right, even though it requires care.\n","\t        previousPromise ? previousPromise.then(\n","\t          callInvokeWithMethodAndArg,\n","\t          // Avoid propagating failures to Promises returned by later\n","\t          // invocations of the iterator.\n","\t          callInvokeWithMethodAndArg\n","\t        ) : callInvokeWithMethodAndArg();\n","\t    }\n","\t\n","\t    // Define the unified helper method that is used to implement .next,\n","\t    // .throw, and .return (see defineIteratorMethods).\n","\t    this._invoke = enqueue;\n","\t  }\n","\t\n","\t  defineIteratorMethods(AsyncIterator.prototype);\n","\t  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n","\t    return this;\n","\t  };\n","\t  runtime.AsyncIterator = AsyncIterator;\n","\t\n","\t  // Note that simple async functions are implemented on top of\n","\t  // AsyncIterator objects; they just return a Promise for the value of\n","\t  // the final result produced by the iterator.\n","\t  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n","\t    var iter = new AsyncIterator(\n","\t      wrap(innerFn, outerFn, self, tryLocsList)\n","\t    );\n","\t\n","\t    return runtime.isGeneratorFunction(outerFn)\n","\t      ? iter // If outerFn is a generator, return the full iterator.\n","\t      : iter.next().then(function(result) {\n","\t          return result.done ? result.value : iter.next();\n","\t        });\n","\t  };\n","\t\n","\t  function makeInvokeMethod(innerFn, self, context) {\n","\t    var state = GenStateSuspendedStart;\n","\t\n","\t    return function invoke(method, arg) {\n","\t      if (state === GenStateExecuting) {\n","\t        throw new Error(\"Generator is already running\");\n","\t      }\n","\t\n","\t      if (state === GenStateCompleted) {\n","\t        if (method === \"throw\") {\n","\t          throw arg;\n","\t        }\n","\t\n","\t        // Be forgiving, per 25.3.3.3.3 of the spec:\n","\t        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n","\t        return doneResult();\n","\t      }\n","\t\n","\t      context.method = method;\n","\t      context.arg = arg;\n","\t\n","\t      while (true) {\n","\t        var delegate = context.delegate;\n","\t        if (delegate) {\n","\t          var delegateResult = maybeInvokeDelegate(delegate, context);\n","\t          if (delegateResult) {\n","\t            if (delegateResult === ContinueSentinel) continue;\n","\t            return delegateResult;\n","\t          }\n","\t        }\n","\t\n","\t        if (context.method === \"next\") {\n","\t          // Setting context._sent for legacy support of Babel's\n","\t          // function.sent implementation.\n","\t          context.sent = context._sent = context.arg;\n","\t\n","\t        } else if (context.method === \"throw\") {\n","\t          if (state === GenStateSuspendedStart) {\n","\t            state = GenStateCompleted;\n","\t            throw context.arg;\n","\t          }\n","\t\n","\t          context.dispatchException(context.arg);\n","\t\n","\t        } else if (context.method === \"return\") {\n","\t          context.abrupt(\"return\", context.arg);\n","\t        }\n","\t\n","\t        state = GenStateExecuting;\n","\t\n","\t        var record = tryCatch(innerFn, self, context);\n","\t        if (record.type === \"normal\") {\n","\t          // If an exception is thrown from innerFn, we leave state ===\n","\t          // GenStateExecuting and loop back for another invocation.\n","\t          state = context.done\n","\t            ? GenStateCompleted\n","\t            : GenStateSuspendedYield;\n","\t\n","\t          if (record.arg === ContinueSentinel) {\n","\t            continue;\n","\t          }\n","\t\n","\t          return {\n","\t            value: record.arg,\n","\t            done: context.done\n","\t          };\n","\t\n","\t        } else if (record.type === \"throw\") {\n","\t          state = GenStateCompleted;\n","\t          // Dispatch the exception by looping back around to the\n","\t          // context.dispatchException(context.arg) call above.\n","\t          context.method = \"throw\";\n","\t          context.arg = record.arg;\n","\t        }\n","\t      }\n","\t    };\n","\t  }\n","\t\n","\t  // Call delegate.iterator[context.method](context.arg) and handle the\n","\t  // result, either by returning a { value, done } result from the\n","\t  // delegate iterator, or by modifying context.method and context.arg,\n","\t  // setting context.delegate to null, and returning the ContinueSentinel.\n","\t  function maybeInvokeDelegate(delegate, context) {\n","\t    var method = delegate.iterator[context.method];\n","\t    if (method === undefined) {\n","\t      // A .throw or .return when the delegate iterator has no .throw\n","\t      // method always terminates the yield* loop.\n","\t      context.delegate = null;\n","\t\n","\t      if (context.method === \"throw\") {\n","\t        if (delegate.iterator.return) {\n","\t          // If the delegate iterator has a return method, give it a\n","\t          // chance to clean up.\n","\t          context.method = \"return\";\n","\t          context.arg = undefined;\n","\t          maybeInvokeDelegate(delegate, context);\n","\t\n","\t          if (context.method === \"throw\") {\n","\t            // If maybeInvokeDelegate(context) changed context.method from\n","\t            // \"return\" to \"throw\", let that override the TypeError below.\n","\t            return ContinueSentinel;\n","\t          }\n","\t        }\n","\t\n","\t        context.method = \"throw\";\n","\t        context.arg = new TypeError(\n","\t          \"The iterator does not provide a 'throw' method\");\n","\t      }\n","\t\n","\t      return ContinueSentinel;\n","\t    }\n","\t\n","\t    var record = tryCatch(method, delegate.iterator, context.arg);\n","\t\n","\t    if (record.type === \"throw\") {\n","\t      context.method = \"throw\";\n","\t      context.arg = record.arg;\n","\t      context.delegate = null;\n","\t      return ContinueSentinel;\n","\t    }\n","\t\n","\t    var info = record.arg;\n","\t\n","\t    if (! info) {\n","\t      context.method = \"throw\";\n","\t      context.arg = new TypeError(\"iterator result is not an object\");\n","\t      context.delegate = null;\n","\t      return ContinueSentinel;\n","\t    }\n","\t\n","\t    if (info.done) {\n","\t      // Assign the result of the finished delegate to the temporary\n","\t      // variable specified by delegate.resultName (see delegateYield).\n","\t      context[delegate.resultName] = info.value;\n","\t\n","\t      // Resume execution at the desired location (see delegateYield).\n","\t      context.next = delegate.nextLoc;\n","\t\n","\t      // If context.method was \"throw\" but the delegate handled the\n","\t      // exception, let the outer generator proceed normally. If\n","\t      // context.method was \"next\", forget context.arg since it has been\n","\t      // \"consumed\" by the delegate iterator. If context.method was\n","\t      // \"return\", allow the original .return call to continue in the\n","\t      // outer generator.\n","\t      if (context.method !== \"return\") {\n","\t        context.method = \"next\";\n","\t        context.arg = undefined;\n","\t      }\n","\t\n","\t    } else {\n","\t      // Re-yield the result returned by the delegate method.\n","\t      return info;\n","\t    }\n","\t\n","\t    // The delegate iterator is finished, so forget it and continue with\n","\t    // the outer generator.\n","\t    context.delegate = null;\n","\t    return ContinueSentinel;\n","\t  }\n","\t\n","\t  // Define Generator.prototype.{next,throw,return} in terms of the\n","\t  // unified ._invoke helper method.\n","\t  defineIteratorMethods(Gp);\n","\t\n","\t  Gp[toStringTagSymbol] = \"Generator\";\n","\t\n","\t  // A Generator should always return itself as the iterator object when the\n","\t  // @@iterator function is called on it. Some browsers' implementations of the\n","\t  // iterator prototype chain incorrectly implement this, causing the Generator\n","\t  // object to not be returned from this call. This ensures that doesn't happen.\n","\t  // See https://github.com/facebook/regenerator/issues/274 for more details.\n","\t  Gp[iteratorSymbol] = function() {\n","\t    return this;\n","\t  };\n","\t\n","\t  Gp.toString = function() {\n","\t    return \"[object Generator]\";\n","\t  };\n","\t\n","\t  function pushTryEntry(locs) {\n","\t    var entry = { tryLoc: locs[0] };\n","\t\n","\t    if (1 in locs) {\n","\t      entry.catchLoc = locs[1];\n","\t    }\n","\t\n","\t    if (2 in locs) {\n","\t      entry.finallyLoc = locs[2];\n","\t      entry.afterLoc = locs[3];\n","\t    }\n","\t\n","\t    this.tryEntries.push(entry);\n","\t  }\n","\t\n","\t  function resetTryEntry(entry) {\n","\t    var record = entry.completion || {};\n","\t    record.type = \"normal\";\n","\t    delete record.arg;\n","\t    entry.completion = record;\n","\t  }\n","\t\n","\t  function Context(tryLocsList) {\n","\t    // The root entry object (effectively a try statement without a catch\n","\t    // or a finally block) gives us a place to store values thrown from\n","\t    // locations where there is no enclosing try statement.\n","\t    this.tryEntries = [{ tryLoc: \"root\" }];\n","\t    tryLocsList.forEach(pushTryEntry, this);\n","\t    this.reset(true);\n","\t  }\n","\t\n","\t  runtime.keys = function(object) {\n","\t    var keys = [];\n","\t    for (var key in object) {\n","\t      keys.push(key);\n","\t    }\n","\t    keys.reverse();\n","\t\n","\t    // Rather than returning an object with a next method, we keep\n","\t    // things simple and return the next function itself.\n","\t    return function next() {\n","\t      while (keys.length) {\n","\t        var key = keys.pop();\n","\t        if (key in object) {\n","\t          next.value = key;\n","\t          next.done = false;\n","\t          return next;\n","\t        }\n","\t      }\n","\t\n","\t      // To avoid creating an additional object, we just hang the .value\n","\t      // and .done properties off the next function object itself. This\n","\t      // also ensures that the minifier will not anonymize the function.\n","\t      next.done = true;\n","\t      return next;\n","\t    };\n","\t  };\n","\t\n","\t  function values(iterable) {\n","\t    if (iterable) {\n","\t      var iteratorMethod = iterable[iteratorSymbol];\n","\t      if (iteratorMethod) {\n","\t        return iteratorMethod.call(iterable);\n","\t      }\n","\t\n","\t      if (typeof iterable.next === \"function\") {\n","\t        return iterable;\n","\t      }\n","\t\n","\t      if (!isNaN(iterable.length)) {\n","\t        var i = -1, next = function next() {\n","\t          while (++i < iterable.length) {\n","\t            if (hasOwn.call(iterable, i)) {\n","\t              next.value = iterable[i];\n","\t              next.done = false;\n","\t              return next;\n","\t            }\n","\t          }\n","\t\n","\t          next.value = undefined;\n","\t          next.done = true;\n","\t\n","\t          return next;\n","\t        };\n","\t\n","\t        return next.next = next;\n","\t      }\n","\t    }\n","\t\n","\t    // Return an iterator with no values.\n","\t    return { next: doneResult };\n","\t  }\n","\t  runtime.values = values;\n","\t\n","\t  function doneResult() {\n","\t    return { value: undefined, done: true };\n","\t  }\n","\t\n","\t  Context.prototype = {\n","\t    constructor: Context,\n","\t\n","\t    reset: function(skipTempReset) {\n","\t      this.prev = 0;\n","\t      this.next = 0;\n","\t      // Resetting context._sent for legacy support of Babel's\n","\t      // function.sent implementation.\n","\t      this.sent = this._sent = undefined;\n","\t      this.done = false;\n","\t      this.delegate = null;\n","\t\n","\t      this.method = \"next\";\n","\t      this.arg = undefined;\n","\t\n","\t      this.tryEntries.forEach(resetTryEntry);\n","\t\n","\t      if (!skipTempReset) {\n","\t        for (var name in this) {\n","\t          // Not sure about the optimal order of these conditions:\n","\t          if (name.charAt(0) === \"t\" &&\n","\t              hasOwn.call(this, name) &&\n","\t              !isNaN(+name.slice(1))) {\n","\t            this[name] = undefined;\n","\t          }\n","\t        }\n","\t      }\n","\t    },\n","\t\n","\t    stop: function() {\n","\t      this.done = true;\n","\t\n","\t      var rootEntry = this.tryEntries[0];\n","\t      var rootRecord = rootEntry.completion;\n","\t      if (rootRecord.type === \"throw\") {\n","\t        throw rootRecord.arg;\n","\t      }\n","\t\n","\t      return this.rval;\n","\t    },\n","\t\n","\t    dispatchException: function(exception) {\n","\t      if (this.done) {\n","\t        throw exception;\n","\t      }\n","\t\n","\t      var context = this;\n","\t      function handle(loc, caught) {\n","\t        record.type = \"throw\";\n","\t        record.arg = exception;\n","\t        context.next = loc;\n","\t\n","\t        if (caught) {\n","\t          // If the dispatched exception was caught by a catch block,\n","\t          // then let that catch block handle the exception normally.\n","\t          context.method = \"next\";\n","\t          context.arg = undefined;\n","\t        }\n","\t\n","\t        return !! caught;\n","\t      }\n","\t\n","\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n","\t        var entry = this.tryEntries[i];\n","\t        var record = entry.completion;\n","\t\n","\t        if (entry.tryLoc === \"root\") {\n","\t          // Exception thrown outside of any try block that could handle\n","\t          // it, so set the completion value of the entire function to\n","\t          // throw the exception.\n","\t          return handle(\"end\");\n","\t        }\n","\t\n","\t        if (entry.tryLoc <= this.prev) {\n","\t          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n","\t          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n","\t\n","\t          if (hasCatch && hasFinally) {\n","\t            if (this.prev < entry.catchLoc) {\n","\t              return handle(entry.catchLoc, true);\n","\t            } else if (this.prev < entry.finallyLoc) {\n","\t              return handle(entry.finallyLoc);\n","\t            }\n","\t\n","\t          } else if (hasCatch) {\n","\t            if (this.prev < entry.catchLoc) {\n","\t              return handle(entry.catchLoc, true);\n","\t            }\n","\t\n","\t          } else if (hasFinally) {\n","\t            if (this.prev < entry.finallyLoc) {\n","\t              return handle(entry.finallyLoc);\n","\t            }\n","\t\n","\t          } else {\n","\t            throw new Error(\"try statement without catch or finally\");\n","\t          }\n","\t        }\n","\t      }\n","\t    },\n","\t\n","\t    abrupt: function(type, arg) {\n","\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n","\t        var entry = this.tryEntries[i];\n","\t        if (entry.tryLoc <= this.prev &&\n","\t            hasOwn.call(entry, \"finallyLoc\") &&\n","\t            this.prev < entry.finallyLoc) {\n","\t          var finallyEntry = entry;\n","\t          break;\n","\t        }\n","\t      }\n","\t\n","\t      if (finallyEntry &&\n","\t          (type === \"break\" ||\n","\t           type === \"continue\") &&\n","\t          finallyEntry.tryLoc <= arg &&\n","\t          arg <= finallyEntry.finallyLoc) {\n","\t        // Ignore the finally entry if control is not jumping to a\n","\t        // location outside the try/catch block.\n","\t        finallyEntry = null;\n","\t      }\n","\t\n","\t      var record = finallyEntry ? finallyEntry.completion : {};\n","\t      record.type = type;\n","\t      record.arg = arg;\n","\t\n","\t      if (finallyEntry) {\n","\t        this.method = \"next\";\n","\t        this.next = finallyEntry.finallyLoc;\n","\t        return ContinueSentinel;\n","\t      }\n","\t\n","\t      return this.complete(record);\n","\t    },\n","\t\n","\t    complete: function(record, afterLoc) {\n","\t      if (record.type === \"throw\") {\n","\t        throw record.arg;\n","\t      }\n","\t\n","\t      if (record.type === \"break\" ||\n","\t          record.type === \"continue\") {\n","\t        this.next = record.arg;\n","\t      } else if (record.type === \"return\") {\n","\t        this.rval = this.arg = record.arg;\n","\t        this.method = \"return\";\n","\t        this.next = \"end\";\n","\t      } else if (record.type === \"normal\" && afterLoc) {\n","\t        this.next = afterLoc;\n","\t      }\n","\t\n","\t      return ContinueSentinel;\n","\t    },\n","\t\n","\t    finish: function(finallyLoc) {\n","\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n","\t        var entry = this.tryEntries[i];\n","\t        if (entry.finallyLoc === finallyLoc) {\n","\t          this.complete(entry.completion, entry.afterLoc);\n","\t          resetTryEntry(entry);\n","\t          return ContinueSentinel;\n","\t        }\n","\t      }\n","\t    },\n","\t\n","\t    \"catch\": function(tryLoc) {\n","\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n","\t        var entry = this.tryEntries[i];\n","\t        if (entry.tryLoc === tryLoc) {\n","\t          var record = entry.completion;\n","\t          if (record.type === \"throw\") {\n","\t            var thrown = record.arg;\n","\t            resetTryEntry(entry);\n","\t          }\n","\t          return thrown;\n","\t        }\n","\t      }\n","\t\n","\t      // The context.catch method must only be called with a location\n","\t      // argument that corresponds to a known catch block.\n","\t      throw new Error(\"illegal catch attempt\");\n","\t    },\n","\t\n","\t    delegateYield: function(iterable, resultName, nextLoc) {\n","\t      this.delegate = {\n","\t        iterator: values(iterable),\n","\t        resultName: resultName,\n","\t        nextLoc: nextLoc\n","\t      };\n","\t\n","\t      if (this.method === \"next\") {\n","\t        // Deliberately forget the last sent value so that we don't\n","\t        // accidentally pass it on to the delegate.\n","\t        this.arg = undefined;\n","\t      }\n","\t\n","\t      return ContinueSentinel;\n","\t    }\n","\t  };\n","\t})(\n","\t  // Among the various tricks for obtaining a reference to the global\n","\t  // object, this seems to be the most reliable technique that does not\n","\t  // use indirect eval (which violates Content Security Policy).\n","\t  typeof global === \"object\" ? global :\n","\t  typeof window === \"object\" ? window :\n","\t  typeof self === \"object\" ? self : this\n","\t);\n","\t\n","\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n","\n","/***/ }),\n","/* 336 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t__webpack_require__(337);\n","\tmodule.exports = __webpack_require__(16).RegExp.escape;\n","\n","\n","/***/ }),\n","/* 337 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// https://github.com/benjamingr/RexExp.escape\n","\tvar $export = __webpack_require__(15);\n","\tvar $re = __webpack_require__(338)(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n","\t\n","\t$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });\n","\n","\n","/***/ }),\n","/* 338 */\n","/***/ (function(module, exports) {\n","\n","\tmodule.exports = function (regExp, replace) {\n","\t  var replacer = replace === Object(replace) ? function (part) {\n","\t    return replace[part];\n","\t  } : replace;\n","\t  return function (it) {\n","\t    return String(it).replace(regExp, replacer);\n","\t  };\n","\t};\n","\n","\n","/***/ }),\n","/* 339 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t// style-loader: Adds some css to the DOM by adding a <style> tag\n","\t\n","\t// load the styles\n","\tvar content = __webpack_require__(340);\n","\tif(typeof content === 'string') content = [[module.id, content, '']];\n","\t// add the styles to the DOM\n","\tvar update = __webpack_require__(342)(content, {});\n","\tif(content.locals) module.exports = content.locals;\n","\t// Hot Module Replacement\n","\tif(false) {\n","\t\t// When the styles change, update the <style> tags\n","\t\tif(!content.locals) {\n","\t\t\tmodule.hot.accept(\"!!./node_modules/css-loader/index.js!./style.css\", function() {\n","\t\t\t\tvar newContent = require(\"!!./node_modules/css-loader/index.js!./style.css\");\n","\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n","\t\t\t\tupdate(newContent);\n","\t\t\t});\n","\t\t}\n","\t\t// When the module is disposed, remove the <style> tags\n","\t\tmodule.hot.dispose(function() { update(); });\n","\t}\n","\n","/***/ }),\n","/* 340 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\texports = module.exports = __webpack_require__(341)();\n","\t// imports\n","\t\n","\t\n","\t// module\n","\texports.push([module.id, \".lime {\\n  all: initial;\\n}\\n.lime.top_div {\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n.lime.predict_proba {\\n  width: 245px;\\n}\\n.lime.predicted_value {\\n  width: 245px;\\n}\\n.lime.explanation {\\n  width: 350px;\\n}\\n\\n.lime.text_div {\\n  max-height:300px;\\n  flex: 1 0 300px;\\n  overflow:scroll;\\n}\\n.lime.table_div {\\n  max-height:300px;\\n  flex: 1 0 300px;\\n  overflow:scroll;\\n}\\n.lime.table_div table {\\n  border-collapse: collapse;\\n  color: white;\\n  border-style: hidden;\\n  margin: 0 auto;\\n}\\n\", \"\"]);\n","\t\n","\t// exports\n","\n","\n","/***/ }),\n","/* 341 */\n","/***/ (function(module, exports) {\n","\n","\t/*\n","\t\tMIT License http://www.opensource.org/licenses/mit-license.php\n","\t\tAuthor Tobias Koppers @sokra\n","\t*/\n","\t// css base code, injected by the css-loader\n","\tmodule.exports = function() {\n","\t\tvar list = [];\n","\t\n","\t\t// return the list of modules as css string\n","\t\tlist.toString = function toString() {\n","\t\t\tvar result = [];\n","\t\t\tfor(var i = 0; i < this.length; i++) {\n","\t\t\t\tvar item = this[i];\n","\t\t\t\tif(item[2]) {\n","\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\n","\t\t\t\t} else {\n","\t\t\t\t\tresult.push(item[1]);\n","\t\t\t\t}\n","\t\t\t}\n","\t\t\treturn result.join(\"\");\n","\t\t};\n","\t\n","\t\t// import a list of modules into the list\n","\t\tlist.i = function(modules, mediaQuery) {\n","\t\t\tif(typeof modules === \"string\")\n","\t\t\t\tmodules = [[null, modules, \"\"]];\n","\t\t\tvar alreadyImportedModules = {};\n","\t\t\tfor(var i = 0; i < this.length; i++) {\n","\t\t\t\tvar id = this[i][0];\n","\t\t\t\tif(typeof id === \"number\")\n","\t\t\t\t\talreadyImportedModules[id] = true;\n","\t\t\t}\n","\t\t\tfor(i = 0; i < modules.length; i++) {\n","\t\t\t\tvar item = modules[i];\n","\t\t\t\t// skip already imported module\n","\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\n","\t\t\t\t//  when a module is imported multiple times with different media queries.\n","\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n","\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n","\t\t\t\t\tif(mediaQuery && !item[2]) {\n","\t\t\t\t\t\titem[2] = mediaQuery;\n","\t\t\t\t\t} else if(mediaQuery) {\n","\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n","\t\t\t\t\t}\n","\t\t\t\t\tlist.push(item);\n","\t\t\t\t}\n","\t\t\t}\n","\t\t};\n","\t\treturn list;\n","\t};\n","\n","\n","/***/ }),\n","/* 342 */\n","/***/ (function(module, exports, __webpack_require__) {\n","\n","\t/*\n","\t\tMIT License http://www.opensource.org/licenses/mit-license.php\n","\t\tAuthor Tobias Koppers @sokra\n","\t*/\n","\tvar stylesInDom = {},\n","\t\tmemoize = function(fn) {\n","\t\t\tvar memo;\n","\t\t\treturn function () {\n","\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n","\t\t\t\treturn memo;\n","\t\t\t};\n","\t\t},\n","\t\tisOldIE = memoize(function() {\n","\t\t\treturn /msie [6-9]\\b/.test(self.navigator.userAgent.toLowerCase());\n","\t\t}),\n","\t\tgetHeadElement = memoize(function () {\n","\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\n","\t\t}),\n","\t\tsingletonElement = null,\n","\t\tsingletonCounter = 0,\n","\t\tstyleElementsInsertedAtTop = [];\n","\t\n","\tmodule.exports = function(list, options) {\n","\t\tif(false) {\n","\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n","\t\t}\n","\t\n","\t\toptions = options || {};\n","\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n","\t\t// tags it will allow on a page\n","\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\n","\t\n","\t\t// By default, add <style> tags to the bottom of <head>.\n","\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\n","\t\n","\t\tvar styles = listToStyles(list);\n","\t\taddStylesToDom(styles, options);\n","\t\n","\t\treturn function update(newList) {\n","\t\t\tvar mayRemove = [];\n","\t\t\tfor(var i = 0; i < styles.length; i++) {\n","\t\t\t\tvar item = styles[i];\n","\t\t\t\tvar domStyle = stylesInDom[item.id];\n","\t\t\t\tdomStyle.refs--;\n","\t\t\t\tmayRemove.push(domStyle);\n","\t\t\t}\n","\t\t\tif(newList) {\n","\t\t\t\tvar newStyles = listToStyles(newList);\n","\t\t\t\taddStylesToDom(newStyles, options);\n","\t\t\t}\n","\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\n","\t\t\t\tvar domStyle = mayRemove[i];\n","\t\t\t\tif(domStyle.refs === 0) {\n","\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\n","\t\t\t\t\t\tdomStyle.parts[j]();\n","\t\t\t\t\tdelete stylesInDom[domStyle.id];\n","\t\t\t\t}\n","\t\t\t}\n","\t\t};\n","\t}\n","\t\n","\tfunction addStylesToDom(styles, options) {\n","\t\tfor(var i = 0; i < styles.length; i++) {\n","\t\t\tvar item = styles[i];\n","\t\t\tvar domStyle = stylesInDom[item.id];\n","\t\t\tif(domStyle) {\n","\t\t\t\tdomStyle.refs++;\n","\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n","\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\n","\t\t\t\t}\n","\t\t\t\tfor(; j < item.parts.length; j++) {\n","\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n","\t\t\t\t}\n","\t\t\t} else {\n","\t\t\t\tvar parts = [];\n","\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n","\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\n","\t\t\t\t}\n","\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n","\t\t\t}\n","\t\t}\n","\t}\n","\t\n","\tfunction listToStyles(list) {\n","\t\tvar styles = [];\n","\t\tvar newStyles = {};\n","\t\tfor(var i = 0; i < list.length; i++) {\n","\t\t\tvar item = list[i];\n","\t\t\tvar id = item[0];\n","\t\t\tvar css = item[1];\n","\t\t\tvar media = item[2];\n","\t\t\tvar sourceMap = item[3];\n","\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n","\t\t\tif(!newStyles[id])\n","\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\n","\t\t\telse\n","\t\t\t\tnewStyles[id].parts.push(part);\n","\t\t}\n","\t\treturn styles;\n","\t}\n","\t\n","\tfunction insertStyleElement(options, styleElement) {\n","\t\tvar head = getHeadElement();\n","\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\n","\t\tif (options.insertAt === \"top\") {\n","\t\t\tif(!lastStyleElementInsertedAtTop) {\n","\t\t\t\thead.insertBefore(styleElement, head.firstChild);\n","\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\n","\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\n","\t\t\t} else {\n","\t\t\t\thead.appendChild(styleElement);\n","\t\t\t}\n","\t\t\tstyleElementsInsertedAtTop.push(styleElement);\n","\t\t} else if (options.insertAt === \"bottom\") {\n","\t\t\thead.appendChild(styleElement);\n","\t\t} else {\n","\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n","\t\t}\n","\t}\n","\t\n","\tfunction removeStyleElement(styleElement) {\n","\t\tstyleElement.parentNode.removeChild(styleElement);\n","\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\n","\t\tif(idx >= 0) {\n","\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\n","\t\t}\n","\t}\n","\t\n","\tfunction createStyleElement(options) {\n","\t\tvar styleElement = document.createElement(\"style\");\n","\t\tstyleElement.type = \"text/css\";\n","\t\tinsertStyleElement(options, styleElement);\n","\t\treturn styleElement;\n","\t}\n","\t\n","\tfunction createLinkElement(options) {\n","\t\tvar linkElement = document.createElement(\"link\");\n","\t\tlinkElement.rel = \"stylesheet\";\n","\t\tinsertStyleElement(options, linkElement);\n","\t\treturn linkElement;\n","\t}\n","\t\n","\tfunction addStyle(obj, options) {\n","\t\tvar styleElement, update, remove;\n","\t\n","\t\tif (options.singleton) {\n","\t\t\tvar styleIndex = singletonCounter++;\n","\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\n","\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\n","\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\n","\t\t} else if(obj.sourceMap &&\n","\t\t\ttypeof URL === \"function\" &&\n","\t\t\ttypeof URL.createObjectURL === \"function\" &&\n","\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\n","\t\t\ttypeof Blob === \"function\" &&\n","\t\t\ttypeof btoa === \"function\") {\n","\t\t\tstyleElement = createLinkElement(options);\n","\t\t\tupdate = updateLink.bind(null, styleElement);\n","\t\t\tremove = function() {\n","\t\t\t\tremoveStyleElement(styleElement);\n","\t\t\t\tif(styleElement.href)\n","\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\n","\t\t\t};\n","\t\t} else {\n","\t\t\tstyleElement = createStyleElement(options);\n","\t\t\tupdate = applyToTag.bind(null, styleElement);\n","\t\t\tremove = function() {\n","\t\t\t\tremoveStyleElement(styleElement);\n","\t\t\t};\n","\t\t}\n","\t\n","\t\tupdate(obj);\n","\t\n","\t\treturn function updateStyle(newObj) {\n","\t\t\tif(newObj) {\n","\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\n","\t\t\t\t\treturn;\n","\t\t\t\tupdate(obj = newObj);\n","\t\t\t} else {\n","\t\t\t\tremove();\n","\t\t\t}\n","\t\t};\n","\t}\n","\t\n","\tvar replaceText = (function () {\n","\t\tvar textStore = [];\n","\t\n","\t\treturn function (index, replacement) {\n","\t\t\ttextStore[index] = replacement;\n","\t\t\treturn textStore.filter(Boolean).join('\\n');\n","\t\t};\n","\t})();\n","\t\n","\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\n","\t\tvar css = remove ? \"\" : obj.css;\n","\t\n","\t\tif (styleElement.styleSheet) {\n","\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\n","\t\t} else {\n","\t\t\tvar cssNode = document.createTextNode(css);\n","\t\t\tvar childNodes = styleElement.childNodes;\n","\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\n","\t\t\tif (childNodes.length) {\n","\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\n","\t\t\t} else {\n","\t\t\t\tstyleElement.appendChild(cssNode);\n","\t\t\t}\n","\t\t}\n","\t}\n","\t\n","\tfunction applyToTag(styleElement, obj) {\n","\t\tvar css = obj.css;\n","\t\tvar media = obj.media;\n","\t\n","\t\tif(media) {\n","\t\t\tstyleElement.setAttribute(\"media\", media)\n","\t\t}\n","\t\n","\t\tif(styleElement.styleSheet) {\n","\t\t\tstyleElement.styleSheet.cssText = css;\n","\t\t} else {\n","\t\t\twhile(styleElement.firstChild) {\n","\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\n","\t\t\t}\n","\t\t\tstyleElement.appendChild(document.createTextNode(css));\n","\t\t}\n","\t}\n","\t\n","\tfunction updateLink(linkElement, obj) {\n","\t\tvar css = obj.css;\n","\t\tvar sourceMap = obj.sourceMap;\n","\t\n","\t\tif(sourceMap) {\n","\t\t\t// http://stackoverflow.com/a/26603875\n","\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n","\t\t}\n","\t\n","\t\tvar blob = new Blob([css], { type: \"text/css\" });\n","\t\n","\t\tvar oldSrc = linkElement.href;\n","\t\n","\t\tlinkElement.href = URL.createObjectURL(blob);\n","\t\n","\t\tif(oldSrc)\n","\t\t\tURL.revokeObjectURL(oldSrc);\n","\t}\n","\n","\n","/***/ })\n","/******/ ]);\n","//# sourceMappingURL=bundle.js.map </script></head><body>\n","        <div class=\"lime top_div\" id=\"top_divGXI2OSHJX78SLH1\"></div>\n","        \n","        <script>\n","        var top_div = d3.select('#top_divGXI2OSHJX78SLH1').classed('lime top_div', true);\n","        \n","            var pp_div = top_div.append('div')\n","                                .classed('lime predict_proba', true);\n","            var pp_svg = pp_div.append('svg').style('width', '100%');\n","            var pp = new lime.PredictProba(pp_svg, [\"Negative\", \"Neutral\", \"Positive\"], [0.7955590123050833, 0.1937894095291215, 0.010651578165795185]);\n","            \n","        \n","        var exp_div;\n","            var exp = new lime.Explanation([\"Negative\", \"Neutral\", \"Positive\"]);\n","        \n","                exp_div = top_div.append('div').classed('lime explanation', true);\n","                exp.show([[\"unhappy\", 0.6593849854523425], [\"is\", -0.052807978365001014], [\"he\", -0.05026377936230276]], 0, exp_div);\n","                \n","                exp_div = top_div.append('div').classed('lime explanation', true);\n","                exp.show([[\"unhappy\", -0.648689675810422], [\"is\", 0.05195142613430384], [\"he\", 0.04944849436808339]], 1, exp_div);\n","                \n","                exp_div = top_div.append('div').classed('lime explanation', true);\n","                exp.show([[\"unhappy\", -0.010695309641920286], [\"is\", 0.0008565522306973074], [\"he\", 0.0008152849942195835]], 2, exp_div);\n","                \n","        var raw_div = top_div.append('div');\n","            exp.show_raw_text([[\"unhappy\", 6, 0.6593849854523425], [\"is\", 3, -0.052807978365001014], [\"he\", 0, -0.05026377936230276]], 0, \"he is unhappy\", raw_div, true);\n","            \n","        </script>\n","        </body></html>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["None\n","[('unhappy', 0.6593849854523425), ('is', -0.052807978365001014), ('he', -0.05026377936230276)]\n","[('unhappy', -0.648689675810422), ('is', 0.05195142613430384), ('he', 0.04944849436808339)]\n","[('unhappy', -0.010695309641920286), ('is', 0.0008565522306973074), ('he', 0.0008152849942195835)]\n","[('unhappy', -0.648689675810422), ('is', 0.05195142613430384), ('he', 0.04944849436808339)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"maSYFTqaiL4g","executionInfo":{"status":"ok","timestamp":1628915888891,"user_tz":-330,"elapsed":7,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"cd3acb02-931b-4ac5-b639-371341219e63"},"source":["print(mas[:5])\n","print(fe[:5])\n","print(neu[:5])"],"execution_count":13,"outputs":[{"output_type":"stream","text":["['He feels anger.\\n', 'This man feels anger.\\n', 'This boy feels anger.\\n', 'My brother feels anger.\\n', 'My son feels anger.\\n']\n","['She feels anger.\\n', 'This woman feels anger.\\n', 'This girl feels anger.\\n', 'My sister feels anger.\\n', 'My daughter feels anger.\\n']\n","['They feel anger.\\n', 'This person feels anger.\\n', 'This child feels anger.\\n', 'My child feels anger.\\n', 'My sibling feels anger.\\n']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yYWJyawsiL-d","executionInfo":{"status":"ok","timestamp":1628915891577,"user_tz":-330,"elapsed":8,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}}},"source":["masculine=['he', 'man','boy','brother','son', 'husband', 'boyfriend', 'father', 'him']\n","feminine=['she','woman','girl','sister','daughter','wife','girlfriend','mother', 'her']\n","neutral=['they', 'person', 'child', 'child', 'sibling', 'spouse', 'partner', 'parent', 'them']"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"1YZ646rtiMB8","executionInfo":{"status":"ok","timestamp":1628915894012,"user_tz":-330,"elapsed":520,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}}},"source":["explainer = LimeTextExplainer(class_names=class_names)\n","\n","avg_f_neg=0\n","avg_f_pos=0\n","avg_f_neu=0\n","avg_m_neg=0\n","avg_m_pos=0\n","avg_m_neu=0\n","avg_n_neg=0\n","avg_n_pos=0\n","avg_n_neu=0\n","\n","confidence_m_neg=[]\n","confidence_m_pos=[]\n","confidence_m_neu=[]\n","confidence_f_neg=[]\n","confidence_f_neu=[]\n","confidence_f_pos=[]\n","confidence_n_neg=[]\n","confidence_n_neu=[]\n","confidence_n_pos=[]"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CukCL47biMF7","executionInfo":{"status":"ok","timestamp":1628915919506,"user_tz":-330,"elapsed":4677,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"3fbb0fdf-ee6d-42cf-b42b-4b48a17ecd15"},"source":["for i in range(len(mas)):\n","  exp = explainer.explain_instance(tokenize_(mas[i]), lr_bow_pipe.predict_proba, top_labels=3, num_features=10, num_samples=50)\n","  #print(explanation.as_list())\n","  predictions=exp.predict_proba\n","  for item in exp.as_list(label=0):\n","    if(str(item[0]).lower() in masculine):\n","      avg_m_neg+=float(item[1])\n","      val=item[1]/predictions[0]\n","      confidence_m_neg.append(val)\n","  for item in exp.as_list(label=1):\n","    if(str(item[0]).lower() in masculine):\n","      avg_m_neu+=float(item[1])\n","      val=float(item[1])/float(predictions[1])\n","      confidence_m_neu.append(val)\n","  for item in exp.as_list(label=2):\n","    if(str(item[0]).lower() in masculine):\n","      avg_m_pos+=float(item[1])\n","      val=float(item[1])/float(predictions[2])\n","      confidence_m_pos.append(val)\n","\n","print(confidence_m_pos)\n","print(confidence_m_neu)\n","print(confidence_m_neg)\n","print(avg_m_pos)\n","print(avg_m_neu)\n","print(avg_m_neg)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["[3.4048316456213374, -0.0813411731218285, 0.1299758117526887, 2.4214107159314064, 2.1275682270470018, -2.3751498042112114, 0.9713429774601602, 3.3464569898882597, -0.07887446623665646, -0.011655293498596403, -0.03320465633064431, 0.062016635398133624, 0.14687451158510054, -0.3617961816202643, -0.04568063987833393, 0.08370842458144792, 0.24822009946201026, 0.14788350027974456, -0.019721934095871863, 0.48526593161071624, 0.5826291215064366, -0.7825603935139568, 0.01535905940116527, 0.46683515912922957, -0.05577030610260194, 0.01652891401398366, -0.07146775776599526, 0.13045435707089648, 0.15175988894111891, -0.472277059161307, -0.04483515119800576, 0.17720168780663476, -0.011457150441405186, 0.03690386549356147, -0.05826455850166135, 0.16789481205937165, 0.18983327935133634, -0.6500705124010928, -0.029181136794950765, 0.19422647615482888, -0.6469316448193008, -2.8894744906529066, -0.60324464297425, 2.808119782793152, 4.972684745161888, -5.041114331083681, -0.1811686756174398, 2.634981425416753, 0.0008955326730021989, 0.015914718638618725, -0.0017592787784245277, 0.11667855626666786, 0.10333787817823498, -0.2600466386855105, 0.01633802607048767, 0.13846012305969402, -0.142488100613038, -0.04943907560048014, -0.2910574587433842, 0.273537396031846, 0.40496384133247587, -0.9199279724019865, 0.02282114227124204, 0.37991135635416157, -0.07777013123189597, 0.029711529366088722, -0.04322656098770167, 0.12964870783802376, 0.1433199683397637, -0.401143135360731, -0.018424414088086764, 0.1635660565639537, -0.055049588610047294, 0.04624790758262568, -0.04423593173474159, 0.15429257560918003, 0.17530561781572007, -0.5827177939307736, -0.0238864322579157, 0.1604865176917489, 0.7877967051646397, 0.5473585208435906, -0.7212198306952551, 2.508642671446785, 3.203232943489493, -1.8331565317119778, 0.6203402643528136, 1.5873476398206157, -0.05539055748291445, 0.030907473904333738, 0.03699596278981281, 0.10067897808268571, 0.14605609660514915, -0.34382534474257637, -0.019291668292265376, 0.14196327457785363, -0.2529155948505097, 0.13158197212841874, -0.17739967675490634, 0.4068566489855213, 0.32959401646644354, -0.9200312184757826, -0.2145475422542854, 0.4846642005978475, -0.09045838056567164, 0.05682089359483111, -0.06320086000514716, 0.1484851150167854, 0.16990694238305906, -0.5075399927960981, -0.030916762723057697, 0.1424697139754866, -0.06515701215618232, 0.04165653752268153, -0.052472864094118755, 0.18145768806422272, 0.2091647325503571, -0.6933089267712428, -0.018046397157177357, 0.21287661410831077, -0.40765872771490513, 0.5026190132283893, -0.6935387557997794, 3.1284514149910816, 3.9623737127427434, -3.597730720656316, 0.09992882449768628, 1.592220193067549, 0.005098533728502351, 0.02597767040561637, -0.038300123506139205, 0.1117783228972259, 0.15734660765287192, -0.3334121409355745, -0.010930844505149518, 0.13697967359459468, 0.028290319624154577, 0.2177524479713381, -0.10300374569903367, 0.3396055404318773, 0.4274956751228051, -1.0980121631515833, -0.005402855707735845, 0.435191747183704, 0.013938600172799973, 0.038356100500187694, -0.04273278801463454, 0.157588861827067, 0.1588042728528204, -0.6689821395760702, -0.01542115804389242, 0.17497213615232063, -0.0019034359428486626, 0.04885088157433357, -0.04713878133892274, 0.1718479256854351, 0.1921003297394584, -0.6631030492367235, -0.01939234629985542, 0.19745120895461532, -0.06716835437674265, 0.3960378373491274, -0.34911952939805757, 0.34512198850737086, 0.5844969722165196, -2.178681650868304, 0.09437774888095364, 0.4853664613636891, -0.004293129202251417, 0.045236129457468244, -0.04597019247224998, 0.17128377437727843, 0.20948793521797857, -0.6730458704320387, -0.02690241924794664, 0.19207250777784612, 0.005170641462350268, 0.032734756571133346, -0.03063746246345327, 0.15484153783805302, 0.18408782890047232, -0.5454065065311654, -0.008023703025920599, 0.16222336568725357, -0.05486437542998606, 0.3748440905766998, -0.10199022364237502, 0.3310663454055355, 0.5172537673735519, -2.2831900178106563, -0.08757488985309267, 0.635735984656862, 0.003934341677502502, 0.041824495109735946, -0.047197577825312455, 0.18039642051633298, 0.1885118646002473, -0.6484312138436807, -0.025028851514049107, 0.18475092345577815, -0.5738239320321306, -0.49620530357904447, -0.17851641807963745, 0.8765507224932121, 0.8343095859133779, -2.2131751438327103, -0.09527054117439343, 1.1644302826194834, -0.0037601268565849184, 0.05278930234780854, -0.07339930792440043, 0.20016795973038035, 0.2497934670005948, -0.6940508806409734, -0.04550571697224946, 0.22764201006292353, 0.01091399824889286, 0.06105323143271545, -0.08116392759883904, 0.21325444723168707, 0.2512112871569979, -0.6048637354549902, -0.02557773576120436, 0.24646747746703088, -0.4508437969126499, -0.06611454615674284, -0.13380865152271185, 1.0204301179329458, 0.653144568620761, -2.109300309835994, -0.5017260932938076, 0.8163480340391204, 0.004340837906807643, 0.024840796356200998, -0.06427641999843225, 0.2168420216767645, 0.23010655918174663, -0.7595046204640812, -0.0290329614261992, 0.22210487756900296, -0.06531945426107279, -0.27624680953999514, -0.07889024161815379, 0.09600097503744125, 0.23397216737568702, -1.0086767338372111, 0.007652628764575899, 0.3360854451036922, -0.04871460236934058, 0.046644441705872064, -0.02739551802834019, 0.16524561886217293, 0.1619121636239929, -0.583880077757654, -0.01969912800137386, 0.17232983779282451, -0.03510130288609839, 0.01647188012882549, -0.020671480048183092, 0.14281676491566647, 0.16576964158725555, -0.45756416065499506, -0.015089415580677234, 0.17106011772106844, 0.08489042274616265, 0.1497925223907032, 0.044810906147468695, 0.4484092001508691, 0.6872094745263421, -1.28190941185994, -0.05568552903239095, 0.4572917239026733, -0.05303875186309927, 0.047222314014720705, -0.04063390592984092, 0.15245972075928152, 0.17231594244982018, -0.5890374514407464, -0.01785453818958432, 0.17446285689726185]\n","[0.42699510436030563, -0.09704862181978663, 0.08310011044525299, -0.05898653930459806, 0.0779754445525191, 0.33063239833130015, 0.14775706888538132, 0.08928217751674823, 0.05633491923971546, -0.001472772616508696, 0.02960220003060907, -0.016875538870939462, -0.05101100214281899, 0.13754007015451628, 0.03148390033905197, 0.010212012901514144, -0.0014967059232145166, -0.003083323473441663, 0.0019920853323477207, -0.007142688533544656, -0.005934485295445113, 0.011913673866798336, 0.00048109631136300653, -0.0046054842233244665, 0.001817200363376891, -0.002863850961864108, 0.004006507324873415, -0.010563667194475618, -0.010657223544479923, 0.019453296850843065, 0.0021059241247743284, -0.011851495359421932, 0.0014908236404764222, -0.003474264644073488, 0.003566611738280003, -0.009061977966048452, -0.007196833373068293, 0.02170873783927201, 0.0019713582937376795, -0.006758284272114183, 0.04113655392300644, -0.5386476985272921, 0.16133711438023282, -0.05579959930004948, 0.09723750285171309, 0.2546276046936161, -0.053484903694664306, -0.21735185685664388, -0.006122536478121088, -0.06633498599063796, -0.0020768768190764296, -0.05289403659161897, -0.016278194953962957, 0.15219534469269305, -0.011567179861483489, -0.0077150502609484965, 0.0029453888975898863, -0.0028975373868803467, 0.005800831179299039, -0.007420840849041109, -0.006628596859041657, 0.01846914727181093, 0.0004898591397702874, -0.004925166478854154, 0.005225801153650716, -0.005774899214829451, 0.005426501412338549, -0.015733950010984505, -0.014225338249524983, 0.028214448547422288, 0.0014101437759554167, -0.015571529533813834, 0.003789443234619539, -0.008650731326060281, 0.006636368301913879, -0.013372668962360017, -0.010141635030237624, 0.030934932178960407, 0.0026921533834221027, -0.010888401759216272, 0.22922704983242248, -0.04502862311406769, 0.07680145338402222, -0.048367869189566, 0.22405984693396375, 0.41426684788016677, 0.01626199686777428, -0.141231593963011, 0.047441130977138944, -0.040668120893087883, -0.04808148122041936, -0.07914290035644952, -0.056567469028366, 0.15727867821520108, 0.02005661075331796, -0.05556964159860023, 0.0024454138918566545, -0.0037339365225445087, 0.003734907934793471, -0.007097356715475949, -0.0028215157445416065, 0.0170262925174117, 0.002164929619621091, -0.0038943277253338723, 0.00344614221047763, -0.004016692361844213, 0.0037979954741664238, -0.01171577236027929, -0.010701083792397979, 0.0191797578370389, 0.0005134556899872855, -0.009812438743325807, 0.0034692782858286243, -0.005520866318553954, 0.0039754697114907, -0.010393254496678859, -0.006665120060962151, 0.02746615522048242, 0.0005772524084447801, -0.007400459189099673, 0.016007879171741388, -0.036420198853089954, 0.11060449380725515, 0.07154391879188482, 0.07691992398934298, 0.3493099952545083, 0.08146333049050607, -0.09817493665932954, 0.007993561541077273, -0.017597796480830014, 0.04220638583774066, -0.03304895364675988, -0.04852545452623741, 0.1557587617122968, 0.02667593751451371, 0.003637425523591973, 1.8459511296918477e-05, -0.0043346897239851905, 0.0032098728936064327, -0.006502712423379797, -0.004047622575220519, 0.014685331203674554, 0.0005275639782183235, -0.003361987995857325, -0.0006039961862382506, -0.004526888062801779, 0.0031298159541794978, -0.011351670027960715, -0.010300357384569678, 0.024454512292790373, 0.00034593392651479185, -0.010050223168251191, 0.0009957295128967545, -0.005989336370590291, 0.002971289760807649, -0.009601500171064304, -0.005724325574777753, 0.023096218199434276, 0.0021654663768914655, -0.00622918225675832, 0.0038501412434179746, -0.00968892519585274, -0.004782573099173701, -0.025467606429041008, -0.0005598229442214071, 0.051736901574263576, 0.011300670653240795, -0.014742665673401042, 0.0002379001004126038, -0.004082645742352925, 0.002509855213731134, -0.008860428743494686, -0.008137372423820574, 0.020221758949288765, 0.001234646680540515, -0.006906740210678057, 0.0015617877477009483, -0.014308499899916402, -0.0038819803752717682, -0.021394542310602952, -0.01590343010375739, 0.05395674500702858, -0.012906157992557612, -0.020222344229292012, -0.007968978449376054, -0.03555685988702127, 0.019185155887330323, -0.046998846977689586, -0.03810647279985072, 0.07504189157194244, 0.00457868243133077, -0.017975531760804398, -0.0006984896780722902, -0.003482228913767624, 0.0033117278441681373, -0.009434371288197498, -0.00670935319984749, 0.01981595319467492, 0.0009830253858912094, -0.006844065493894778, -0.016977194894490743, -0.03876739666229509, -0.010457228282969461, -0.02262961719920989, -0.004647967619064205, 0.09798974743624085, 0.014660177544545714, 0.011929262579097757, -0.000310589332184479, -0.00469342441437185, 0.0028996096538138486, -0.008203796668746734, -0.005451343631779428, 0.01844923469445935, 0.0007330726687820169, -0.005000040659903467, 0.015129197983775948, -0.0025207694369828153, 0.01427292137142561, -0.043380119251409964, -0.003142611107012359, 0.09222607193595085, -0.012484311865239633, 0.008164615182051622, 0.022341994308614745, -0.025609365370126373, 0.03321272001844084, -0.012383833130925807, -0.053638494643519996, 0.1277791981368257, -0.014336014203334135, -0.015604010341018293, 0.00014219281621510182, -0.003846629943999343, 0.0036630127603448537, -0.008675026596476176, -0.00556667760703088, 0.019170048790918777, 0.0004373013530649174, -0.005567885513895126, 0.011207402019800463, -0.040303546508960314, 0.015326818553077366, -0.040897595573482104, -0.011303763855154497, 0.08437046725968379, 0.010229377844133003, -0.008122931304926246, 0.0024788907767702285, -0.004111227794431423, 0.002769554616194449, -0.011410243487969086, -0.00907928348780057, 0.02180439141747545, 0.0012682774707377508, -0.009462958945781462, 0.0075439124566902245, -0.01645675509098618, 0.007561487771696561, -0.025447915130213435, -0.016848643989226086, 0.05560206085751866, -0.002398205719385574, -0.017346834242700778, 0.013037845154920197, -0.025779230993127893, 0.031249463980992265, -0.045884077130912915, -0.010472223376321064, 0.10430479664710787, -0.0031979168681055318, -0.005802199462930093, 0.002617318297074437, -0.004220807275754489, 0.0028776133217969543, -0.010879121274840533, -0.009669794709439523, 0.021576558024149053, 0.0011557240878520005, -0.009808605080169957]\n","[-0.13173206741462062, 0.024734775814495166, -0.02638962008485829, 0.011477659589177526, -0.02692840856639961, -0.19992604682951062, -0.04669191256748201, -0.03292350348109993, -0.0832576229387767, 0.008533568382450445, -0.052704149456537695, -0.005706506757296024, 0.005654455114072189, -0.4233159542114584, -0.04783597608179233, -0.08519134257993807, -0.017097975011927048, 0.07256553101884253, -0.08771002027286989, 0.09055210606414724, -0.0016929538343735736, -0.8119143450378727, -0.02733606115824107, -0.008046332733627792, 0.07907952563139814, 0.1283446015571001, -0.05160520737365897, 0.12070069323598615, 0.010607286765233526, -1.0634819893837095, 0.009739979256375576, -0.03264303099644492, -0.03507591470649507, 0.06031474059658315, -0.0635149424090974, 0.06588296447304559, -0.015257091296622498, -0.7255079806370344, -0.03537657472561727, -0.0343435846151506, -0.005799110443319042, 0.07188518791353503, -0.02518651615309908, 0.004082568620150384, -0.021279421061960457, -0.07383822710909865, 0.008499646142885155, 0.029249530590985402, 0.0068678509344374935, 0.05860460873695636, 0.0031928437414004513, -0.0010770130495400755, -0.037347063016669985, -0.24434822602342324, 0.00698733309267709, -0.06673818463189375, -0.03525016329063834, 0.06684650847369657, -0.06852333553487018, 0.06867219645567915, 0.013688987974532598, -0.615257141454541, -0.017090877140941447, -0.01631031179668038, 0.003433601097836343, 0.11387164189518924, -0.10122674925951228, 0.10545483865143179, -0.006513481786997818, -1.0036696709083675, -0.0032622873580785017, -0.03314858232490337, -0.025488271931645146, 0.08641513376444554, -0.07992872842928996, 0.062016622515859675, -0.002540760761618365, -0.56495131342509, -0.0269053672935874, 0.022586441159464427, -0.04444701183340588, 0.0067361734053797, -0.01452750410154358, 0.005666069508906731, -0.0442210869062621, -0.15688933722688012, -0.0035607225470944523, 0.0245939709073121, -0.05298700527469997, 0.04022077760376357, 0.060447249978742346, 0.062337665549793427, 0.020559776412465532, -0.3436488517417688, -0.023156640197807308, 0.021060761269742472, -0.026428251304454465, 0.0668613667755416, -0.07830001680219091, 0.08707039913073904, -0.00276299012462063, -0.794326821847602, -0.022857527972221122, -0.011182452828316319, 0.011777780954001268, 0.05546562841012454, -0.061325756609848216, 0.1280763970622618, 0.024297669857893257, -0.7215564561326299, 0.039843911256545815, 0.06052128213191294, -0.03767358921456643, 0.07106605781135031, -0.05483752338448906, 0.07005256489981523, -0.012659575359697813, -0.7079939294681277, -0.002406980126530735, -0.0012738164948087407, -0.002656223519184806, 0.005408607975166369, -0.02117105622300038, -0.014158279731968397, -0.01802599350282772, -0.1306370765994152, -0.015604419555519526, 0.016604332140441103, -0.012639652437348763, 0.014085001365034289, -0.05139073148617832, 0.002661317991596877, 0.004999405390146189, -0.3425925909715654, -0.03513654924394668, -0.05976135194289037, -0.005645416677481554, 0.06704834881734292, -0.07605132854932153, 0.08663781714543106, 0.007070415258084955, -0.6250636408689398, -0.01409543192211026, -0.013789323883618481, -0.0006247465341624277, 0.11072230324449975, -0.0696486820259974, 0.0913260399906128, 0.036708545137764025, -0.870227385341819, 0.015490001434157272, -0.020661997984103564, -0.01796957057292199, 0.07548240749652402, -0.0371822547908699, 0.06235138342154989, -0.019098348219666914, -0.5525076243981716, -0.032852742976330986, -0.013281401991552979, -0.0075621777812034125, 0.01349536123944298, 0.015543728579069868, 0.0434834197925715, -0.008985703718738958, -0.20369618043062118, -0.026774431713835957, 0.023839910245243266, -0.004129508207619212, 0.08071407642099278, -0.049067012114440874, 0.0831172052043574, 0.017089786718985988, -0.7473700956486061, -0.018503456537979864, -0.002868122655012947, -0.006368588885827752, 0.04029947790933656, 0.018996066019293257, 0.04360139939353218, 0.02361384701977835, -0.32434498118387306, 0.04939340896687723, 0.043671871909005816, 0.013649725270831815, 0.04710947441950293, -0.03270946331265953, 0.06424355572753929, 0.056193315435809015, -0.23426821363764241, -0.007019117747843949, 0.022099976611205017, 0.019990430794887184, 0.0662090322875239, -0.07665866454530183, 0.09055193340867439, -0.005121252319548354, -0.743323880774784, -0.011451342461766607, 0.004031184436368354, 0.03020896362517122, 0.05498128371152597, 0.018576014276333437, 0.025489798227992858, 0.0008629134481948045, -0.30743846999722163, -0.023421002838108922, -0.028071110448495244, 0.009086096335493926, 0.07872479311055394, -0.04628297806423784, 0.0827825756355454, -0.002588569797249203, -0.628591726726011, -0.00015959084212631652, -0.0015898812329268625, -0.04035688993526503, 0.0023555765885217646, -0.03495319097342008, 0.08453506512270391, -0.012079964545150493, -0.46112737387551045, 0.03533671507227772, -0.041617724705501916, -0.024914713944869122, 0.02633559313249303, -0.041556109109448146, 0.008302532392810869, 0.060057855058447865, -0.30674572127032396, 0.019648145959101162, 0.014339667743226668, -0.00521045151396621, 0.071143591393453, -0.06960306610831804, 0.08517006127743891, 0.010793572918946498, -0.6364385874671651, 0.0006634400860255061, 0.015329633356911492, -0.031117318744292407, 0.10343009854051884, -0.043815244575074595, 0.09758760466300022, 0.02339308179672285, -0.4635146574046582, -0.02995746522244088, 0.011063211722853052, -0.026883141483114048, 0.07613142461185182, -0.07878275353694185, 0.08821406627853919, -0.004978230372954451, -0.8021932685746704, -0.020839899363984955, -0.014056388917394018, -0.027357834353071965, 0.06152345802517524, -0.031926960965920174, 0.059040449881262905, 0.017277816955048746, -0.40128898736479307, 0.01567693277134128, 0.017873399752965355, -0.03015936056945982, 0.04434685113369365, -0.07120661527687644, 0.0757973278310973, 0.005572938094384801, -0.4336807417684207, 0.008009817533471098, 0.0012682008264253233, -0.025598926285703313, 0.07924655962073306, -0.06022802013142972, 0.09468733234181351, -0.00499198497922149, -0.7715266092395918, -0.019166385796251302, -0.004276053221642702]\n","0.3445277282450726\n","1.051709146434638\n","-1.3962368746797098\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sXrfTmnYiMJL","executionInfo":{"status":"ok","timestamp":1628915924425,"user_tz":-330,"elapsed":516,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"7af8e02d-8e7e-4016-d4ee-acf16897746a"},"source":["print(len(confidence_m_pos))\n","print(len(confidence_m_neu))\n","print(len(confidence_m_neg))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["280\n","280\n","280\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mh0Ky5tYiMPs","executionInfo":{"status":"ok","timestamp":1628915930968,"user_tz":-330,"elapsed":4341,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}}},"source":["confidence_f_neg=[]\n","confidence_f_neu=[]\n","confidence_f_pos=[]\n","\n","avg_f_neg=0\n","avg_f_pos=0\n","avg_f_neu=0\n","\n","for i in range(len(fe)):\n","  exp = explainer.explain_instance(tokenize_(fe[i]), lr_bow_pipe.predict_proba, top_labels=3, num_features=10, num_samples=50)\n","  #print(explanation.as_list())\n","  predictions=exp.predict_proba\n","  for item in exp.as_list(label=0):\n","    if(str(item[0]).lower() in feminine):\n","      avg_f_neg+=float(item[1])\n","      val=float(item[1])/float(predictions[0])\n","      confidence_f_neg.append(val)\n","  for item in exp.as_list(label=1):\n","    if(str(item[0]).lower() in feminine):\n","      avg_f_neu+=float(item[1])\n","      val=float(item[1])/float(predictions[1])\n","      confidence_f_neu.append(val)\n","  for item in exp.as_list(label=2):\n","    if(str(item[0]).lower() in feminine):\n","      avg_f_pos+=float(item[1])\n","      val=float(item[1])/float(predictions[2])\n","      confidence_f_pos.append(val)"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wxtdZ04riMS2","executionInfo":{"status":"ok","timestamp":1628915934809,"user_tz":-330,"elapsed":859,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"3c52c336-88cc-4262-9de6-63f44763ea84"},"source":["print(confidence_f_pos)\n","print(confidence_f_neu)\n","print(confidence_f_neg)\n","print(avg_f_pos)\n","print(avg_f_neu)\n","print(avg_f_neg)\n","print(len(confidence_f_neu))\n","print(len(confidence_f_neg))\n","print(len(confidence_f_pos))"],"execution_count":19,"outputs":[{"output_type":"stream","text":["[2.559912975708138, 1.5804998008933087, 5.328184032270202, 1.8641554803819178, -3.4831048941859075, 1.1233859486560833, 1.9403973746005356, 2.683433445716936, -0.04024184893245204, -0.015900699701523833, 0.1434995450734961, 0.04285279944420084, -0.15823893379944237, 0.056777428730502164, 0.05639372238878083, 0.11424487414601839, 0.3836004300618348, 0.2392486758463299, 0.7251083539680154, 0.2694356217559328, -0.24665687652148083, 0.4100030331620276, 0.3496530738322428, 0.4793882756060924, 0.008706319510026352, 0.03929886130295664, 0.2748357237969898, 0.0748886208760997, -0.2908093006206849, 0.07029049538369397, 0.09191923946758716, 0.18342633411705445, 0.04423756170283626, 0.05584721824979073, 0.28400605896852643, 0.10081245852348523, -0.41445115204903576, 0.09222514907342631, 0.1273818517762584, 0.23646320235743423, 0.9647105855910294, 0.7289584094513826, 8.367139622474786, 3.192762623750194, -2.0024657051994867, -0.9429602408435245, -0.011090200794645885, 1.455915085327032, 0.01666757467222717, -0.013272596724815266, 0.15895673476650563, 0.09877830092741562, -0.13576886769065077, 0.039919790338269846, 0.029587451334009814, 0.1275211441602565, 0.13790010805562825, 0.17231066220021232, 0.5758686905546451, 0.19906422059102347, -0.7838877377981375, -0.040114873310527675, 0.27906376855217585, 0.4650142051600347, 0.06354156655530951, 0.0645601393908731, 0.19453127318638064, 0.060997448824762754, -0.27143476539617406, 0.1116046342012042, 0.09934442213218707, 0.1846306697096795, 0.06976370443530044, 0.047906625232575634, 0.2678687880102153, 0.09699836511461099, -0.31303213173647426, 0.07828347116722137, 0.13058016744851217, 0.20232513055038664, 0.9601195525844348, -0.5389642507602648, 5.12831830186455, 2.1747512828690216, -1.9677605079039644, 0.9790430924476925, 3.379800841203693, 4.206476440995812, 0.05424827351895386, -0.008243002254389288, 0.1902906456746699, 0.11978087379184708, -0.17458859419036832, 0.06851072676530395, 0.0699750263560647, 0.16168344418026442, 0.028635855285927027, 0.15546916096675467, 0.643950793888874, 0.2859887896219588, -0.8949457956947171, 0.2669961279082456, 0.17692221299310654, 0.5680685803607012, 0.05947638681837437, 0.06275921717769357, 0.28064522664672875, 0.08775453278811615, -0.3913057119942029, 0.10153331601109236, 0.14219858274009745, 0.18825098652840624, 0.07636906348913902, 0.06053084806667128, 0.32004759079991973, 0.12008626695026517, -0.4420027271679367, 0.09904001190306912, 0.127074989594861, 0.2596345280551273, 0.8259318906030285, 1.898629295485206, 7.4819942768127525, 1.639035003170488, -6.356956167136977, 2.611342897208854, 3.884921315630998, 2.438706566907775, 0.04580546426170913, -0.0204877594453725, 0.15736637489074526, 0.03762367015505363, -0.14908448989685338, 0.0835193530231411, 0.06025241709205739, 0.19313749173388456, 0.21026632003428303, 0.13891470594703292, 0.5984645528396517, 0.27562106201221565, -0.7925560256552188, 0.25074823593917706, 0.1455501433767296, 0.4755292395107176, 0.0325798527981637, 0.057083512727763644, 0.28648137773852694, 0.0981767587139056, -0.3791683341553448, 0.08626980678642071, 0.1426846237904667, 0.21780227931593257, 0.05343031964784887, 0.057052386460267474, 0.31415550103048545, 0.1196679612730999, -0.4033507084039495, 0.09993154411856, 0.15147339623346334, 0.25452310729555816, 0.28112097225892063, 0.2550351616485335, 0.5658283436733904, 0.16870899777277393, -0.8706482739608475, 0.3980845090202084, -0.13686427998759013, 0.458116129048639, 0.055936344739725384, 0.057590073647002964, 0.23725572478125026, 0.10558239750585582, -0.33328837053153787, 0.09086127680310187, 0.11799285101277916, 0.21947307210659076, 0.058464418303568036, 0.011491832542689505, 0.22431189120414663, 0.12554385083382577, -0.2503778762647481, 0.07975690026909, 0.09189578027670206, 0.22431731345929815, 0.5579571649302265, -0.26133912972685214, 1.2124412231106276, 0.5632712350916583, -1.15950390471, 0.19514164380005725, 0.19280800719915794, 0.5523413253140539, 0.049560542557317004, 0.05138671122280401, 0.22456970221867503, 0.08508394921544483, -0.37042518362078974, 0.0852259594980445, 0.10462129103327622, 0.1994499064248699, 0.013449686668844805, 0.498357769758039, 1.3472486280684381, 0.21896572296059497, -1.6513924933421298, 0.1351810786180651, 0.18855454310750683, 1.1973489581482477, 0.056732405859423164, 0.07728976773132612, 0.2981798608172576, 0.11733596689789647, -0.5083983301114133, 0.12010902043676798, 0.17242043045244976, 0.30770469138379464, 0.09504919948407786, 0.040864160714133464, 0.3578238744702432, 0.10489757227452967, -0.38144491186834495, 0.11472622018246181, 0.17508082898113891, 0.2813244001096496, 0.1681169580138798, 0.6153796041441639, 1.3832378029764212, 0.4091935592085753, -1.7370728859189983, 0.01124207556428501, 0.18734298154911183, 1.0531306820299133, 0.06551771856018969, 0.0644778036486775, 0.3656543656327279, 0.13926780156718077, -0.49665799374591263, 0.08594795166440398, 0.14754420795974205, 0.27390162387048433, -0.07851266904775067, -0.14000666159981784, 0.4993230386785713, 0.2847721098042115, -1.0993766395140654, 0.39877701967384843, 0.33588922452571907, 0.524587334423392, 0.059986065670315426, 0.03583064387386144, 0.25637201832483425, 0.10006911154774127, -0.35437419509149476, 0.08792334576926708, 0.11967202712220579, 0.21947159974123723, 0.06549299448097273, 0.043029552875282054, 0.2582967775128191, 0.0995469039220054, -0.28628477215170395, 0.0710417775537334, 0.10032965082604219, 0.21582421775360225, 0.40839407322318017, 0.16795959510026343, 0.9214937605674245, 0.3189085327134144, -0.38039092516943, 0.3814600798760395, 0.4579977441615134, 0.8045223319770296, 0.054650790422281235, 0.05747447239894503, 0.2718931169781911, 0.08929112037986327, -0.3568083445419236, 0.08902231878109713, 0.13089539148288232, 0.23035252256181565]\n","[0.27331983841181956, -0.07226411856850257, -0.3911296012910041, 0.21500708700204657, 0.19385154210483127, -0.014819295666503477, -0.08317267006378569, 0.04141411252951799, 0.06800777313034778, -0.04797159538847382, -0.16921596799163788, 0.026461483572921458, 0.10365196771737088, -0.018092124868404714, -0.05319284360791558, 0.002435555157544711, -0.0015630320473126271, -0.007232329022366422, -0.022356253615484066, 2.4511007687395584e-06, 0.00982042721425359, -0.0043925303132291565, -0.007848731489461481, -0.0049568605143558275, 8.367375247744198e-05, -0.007495956647253846, -0.03288219520348508, -0.0030563814100604005, 0.015347060266286471, -0.005033549356873467, -0.009161368348414084, -0.01405863090916157, 0.001190929951423616, -0.008954009461897077, -0.03032662630016748, -0.0002754325592573817, 0.019479357191749307, -0.0035398551554154042, -0.009336572136355846, -0.00959132229861357, -0.017700721417671626, -0.41117287397749097, -0.6599363568609026, 0.11012552897919939, 0.3525670034064659, -0.49367572068904103, -0.5988279332084975, -0.2106081746244425, 0.008894000640737698, -0.07731225929410265, -0.32993302984584183, 0.012568151253208709, 0.10780799438319719, 0.025233271247158143, -0.06142094533693181, -0.005592810353662523, -0.003237404306301099, -0.011748738373401036, -0.032264851357754185, -0.0007295779535963666, 0.01996830863489423, -0.0016572235744398973, -0.01011641474749973, -0.005932130124376214, -0.005243654220165249, -0.012078402223498555, -0.038255157682842406, -0.0019123937087630522, 0.024978306982096358, -0.008963742199112416, -0.013599642892683412, -0.019368442216213488, -0.004533463766556565, -0.01481973929715337, -0.044424178319215496, 0.0012457965502252722, 0.0264007141270213, -0.005267317579060721, -0.018644239894780413, -0.012112174440354544, 0.07900140117581217, -0.38510721088816147, -0.6208441235872596, 0.25559181701868866, 0.3357861624572611, -0.12088353161130815, -0.1343524804956414, 0.25057146133699204, 0.008180074095479514, -0.03499594776686074, -0.26371048323693064, 0.012253154307771545, 0.11041426399181432, -0.03953389706153415, -0.08269020294976458, -0.05399191398541335, -0.0011674929402757123, -0.008990347790447512, -0.02546557189989896, 0.0004027998741664121, 0.015825741963125646, -0.002750181620354259, -0.00812922894915799, -0.004892297057558337, -0.0036097571041101436, -0.007290076344275475, -0.035148300056566405, -0.002686128917923893, 0.018632752214982787, -0.0054537558967085965, -0.011449737648840684, -0.012332830711840237, -0.004041880498808587, -0.01314215505624126, -0.035800187244995986, 0.001774098089514817, 0.02388415862159882, -0.004625845025546323, -0.010207261839161584, -0.007774588489405471, 0.007633716185223243, -0.049818120331269394, -0.5282612081489358, 0.1080664991775407, 0.05232697057688187, 0.023658595615503545, -0.1008757810806836, -0.13827146972261242, 0.034658834208786245, -0.0553571916521646, -0.23806829710903082, 0.050080040366598376, 0.11969398301688068, -0.02699467576782107, -0.054704240282587684, -0.04361125248045289, 0.0008400201579238487, -0.009873019243133493, -0.025919370646993317, 0.000945739746861417, 0.015492775238498886, -0.002866331304351914, -0.006495994871660985, -0.00470561852780935, -0.0007962890022521777, -0.00949666101818543, -0.03248317231585121, -0.0030649617123806793, 0.018788528104278186, -0.005814743313716504, -0.011571575388975599, -0.014729026832623825, 0.0026615618552401667, -0.01276725051990819, -0.036644733683471736, 0.0009218760219967526, 0.022295652172979293, -0.005991329950870225, -0.012359959996729045, -0.007791067867189549, 0.025103166598812843, -0.09011761106140162, -0.19207003651714233, 0.020413382590497478, 0.107404799133317, -0.0034874219461133817, -0.09458131290286163, -0.01110932291186221, -0.0003473798981979652, -0.011751494901509944, -0.041739944480090926, -0.002961205614866868, 0.024807546553210928, -0.0062280197314619114, -0.015283469037854755, -0.015364644036423597, 0.008239364361400341, -0.0361961148657712, -0.13563556721750994, 0.008556127688332818, 0.07695947560211894, -0.012600764610994466, -0.04560884146428218, -0.019387665817913683, 0.0588123038975663, -0.1311764487203712, -0.24540988054112328, 0.047301341863580745, 0.10261884217379551, -0.048285780867093876, -0.08877758816462858, -0.03186258299373985, 0.0004909964214906714, -0.01319657829547014, -0.0387962487155131, -0.0018544382897032208, 0.026595486509801713, -0.006981837191377974, -0.01299885302582574, -0.014420660068943804, 0.027608261592247274, -0.07584066355696618, -0.16470004075031855, 0.01832970751560454, 0.047897889014435764, -0.002107342375946197, -0.06870786653010057, -0.006885153208857195, 0.00046321657626882386, -0.01007532779545806, -0.02399422465900824, 0.0007185089009449266, 0.017430098618265517, -0.0034886608532122975, -0.01032216073427474, -0.0064669749101735645, 0.028153403344629003, -0.0885059029461145, -0.11584712243111299, -0.002522059941066115, 0.07437447575262823, -0.04259435768081844, -0.02426728534639035, -0.015292350941742548, 0.002462906995318481, -0.09132845314879093, -0.23087214324024433, 0.014593588712743842, 0.12048522012163619, -0.032967973108333326, -0.13744461206020364, 0.00421105526011416, 0.001141457597639321, -0.009877608748714828, -0.030525425164004312, 0.0011403064833513657, 0.01758858108860226, -0.0033903536314194376, -0.00910588770201441, -0.006887898714476033, -0.032292956238748706, -0.05485315882083043, -0.15742281958198795, 0.010979672006230384, 0.07983089944942709, 0.005614450330537488, -0.042771911685934944, -0.006876030911152477, -0.003376294340196305, -0.007495895123422199, -0.03164919976193353, -0.0024712159113800605, 0.01820674331465418, -0.00513044341149483, -0.010577997831381832, -0.01319692767845747, -0.011421552020974049, -0.03057096517686302, -0.11983769566168222, 0.005790583696356075, 0.0524188999047264, -0.013921737477634626, -0.01726460457275353, -0.017204862222345865, 0.01534337162814434, -0.050100865506633376, -0.15293619974680747, 0.02371779125473494, 0.11415392356629818, -0.03321715902380752, -0.054580802441912955, 0.006592019715117396, -0.003371601002340342, -0.009020271592050183, -0.03237345242070499, -0.002273474207926215, 0.01809623087420613, -0.0049833491580835625, -0.011402205904631257, -0.013789192270612618]\n","[-0.09304673681410872, 0.01369347343400334, 0.05596455156318185, -0.07709654320341597, -0.11213412945158856, 0.002473338942182745, 0.01700405963147793, -0.018078442574154384, -0.1406835128090362, 0.08364702031900621, 0.1329196731864046, -0.09982407759744462, -0.36490742425325046, 0.0044275074468368295, 0.06439095833313134, -0.09975735602511426, -0.07734455306882641, 0.16843835863234982, 0.3137168800102185, -0.12227865041562548, -0.7907698467844122, 0.03381518870614487, 0.16170913819864816, -0.01980927001275199, -0.04718975873773639, 0.29027523372588976, 0.3719560376875465, -0.12391166639242941, -0.9258889180738207, 0.06282161535067644, 0.2014847409684739, 0.008146573347309434, -0.08779977817202231, 0.15631883814765096, 0.26208884266285976, -0.11425368000603882, -0.7288854424921598, 0.009948763139250902, 0.11179786388444078, -0.029086144695518748, 0.001521789976711183, 0.043734811966604906, 0.045837224577511174, -0.023447582919452786, -0.10642915234025978, 0.07133694533472286, 0.0716176608408775, 0.02998102351873068, -0.016815753441957983, 0.06692900501507464, 0.1437613517301507, -0.06969963424967641, -0.18067097686591607, -0.044613357163388385, 0.043717800209019074, -0.0707659000056265, 0.03384020917527738, 0.1568986984253892, 0.262388701533478, -0.047287276617661037, -0.673429004030146, 0.046244146548241515, 0.11335218565680207, -0.037883744094187446, 0.0007966176348781398, 0.19096425833115696, 0.287229122184191, -0.14944507035623406, -0.9684031827995925, -0.02228074111093913, 0.13687413985223806, -0.03870581940682615, 0.017493890694976526, 0.13927342065118362, 0.2062308947478947, -0.1097772400000583, -0.565547851841013, 0.01954500710359783, 0.14277509632734547, -0.014862612360411346, -0.014764451482913471, 0.051185062252419436, 0.0583176715915573, -0.056541887380675185, -0.12546896917472825, 0.020312892920045775, 0.017239068415018505, -0.051675552727490734, -0.027881659619303764, 0.03673435596875439, 0.14695613018211173, -0.06690512808677565, -0.24920393847625255, 0.03006622534992382, 0.07123841282021322, 0.00472135110185191, 0.02551393948618597, 0.15635963794032212, 0.27340877070658764, -0.08249863515226542, -0.6889064603508724, 0.01906250014382227, 0.1471462127736828, -0.01788360188207227, 0.031468752567505025, 0.14542837223041827, 0.3596704673004546, -0.10040200762597752, -0.7443420460407083, 0.011451744556718648, 0.13713582288836754, -0.002491643530529482, 0.03370139392544804, 0.15547834340538966, 0.22249894569120504, -0.1180956189576398, -0.6482003249102904, 0.029744822921740053, 0.09233211737614815, -0.04283871391978769, -0.0022665423767496322, 0.0054996347313397385, 0.04751593398036183, -0.024621760892365164, -0.013729336692975417, -0.006243447141451947, 0.011963099952361122, 0.02320060750911578, -0.06873960420192467, 0.05979112048918909, 0.13652883836425111, -0.0952011743887407, -0.28548844305775456, 0.008737107894538005, 0.04309773318586942, -0.023891392175231382, -0.07064038387849568, 0.1761530473814405, 0.28770068839830654, -0.09729150797168469, -0.694112842516643, 0.025323087727807385, 0.11683924362521443, 0.002183100722307066, -0.039691382988749725, 0.22920757521817017, 0.2806339597937096, -0.1090683682712169, -0.7925017630439674, 0.06251072567441397, 0.14070889730827904, 0.019206553098244837, -0.0863806274184776, 0.15170622500875847, 0.23377622385627392, -0.09918936883470794, -0.6110066751907465, 0.05376047928484123, 0.11296593261591577, -0.038729462054679746, -0.04750410661779251, 0.09460018684224994, 0.14838621616280195, -0.03967542519980537, -0.31572581321457704, -0.002525673466075051, 0.11648038802141071, 0.005173500707496446, -0.07121744930444301, 0.14317255947213273, 0.26496136846908536, -0.09144472667847965, -0.6688968956735176, 0.017821922795997616, 0.14382925470589022, -0.034878099493830576, -0.0352221497658211, 0.06357003563858922, 0.1469216781167673, -0.05532399994339348, -0.3389078953434331, 0.014204959743425824, 0.07478506446553457, -0.011701339254845605, -0.08153680373715876, 0.1099088413813103, 0.13839911495758625, -0.07141214393325983, -0.22361174225035557, 0.0497741033922425, 0.07851107918100593, 0.02718087239360769, -0.08354049157494962, 0.17313239679488068, 0.24181794711388035, -0.0880296744165693, -0.6965086526912315, 0.04193842370113837, 0.11726297430366034, -0.02082080181701975, -0.04791094878212796, 0.0837288551633372, 0.13350123896814584, -0.035137921178663635, -0.14347437077993047, 0.002306158087661647, 0.08533504460312138, 0.0006886549514631786, -0.03931144306474083, 0.15188945772497664, 0.20624125751031216, -0.08334603603615721, -0.607917906628185, 0.02779507223447566, 0.13187062915193198, -0.025968575423963663, -0.08750366913653651, 0.16414876772088727, 0.14409821866996322, -0.0008410335291898968, -0.37079881882608057, 0.09806797888951088, 0.040187376105431216, 0.015226701520656121, -0.0039999035290384805, 0.07613480822930083, 0.14355082079224035, -0.022234972365996846, -0.2865389796176102, 0.03716076072261147, 0.12954949883163616, -0.011356397972072699, -0.061570374455949095, 0.15239417866246718, 0.26738378278023783, -0.10700046106831891, -0.6219723838370097, 0.04049518739503178, 0.11812892931199079, 0.004888687485941452, 0.08955585248205006, 0.11339306293376157, 0.22714714063784258, -0.04562820818739405, -0.42472992791426906, -0.02633414386070596, 0.08707343028913313, -0.0009834098271806727, 0.024531437729011608, 0.18241455755154784, 0.314271481831587, -0.12109252709058684, -0.7836043398668474, 0.03549714627071718, 0.150184064293525, -0.021348578946116307, 0.032174218574982684, 0.09300284436282816, 0.23703619843869583, -0.06758198410087424, -0.4008049198321528, 0.040231433845914606, 0.03705381551229566, -0.007286066066052066, -0.0390531009055682, 0.07381638463336333, 0.16001515801548033, -0.06569219942292515, -0.48914843427229504, 0.05924917359889357, 0.08399399796007202, -0.03590296653724907, 0.03466181403773718, 0.199394540834207, 0.3054399802801851, -0.10463075296228132, -0.7679986410124774, 0.027278658703756835, 0.15848846111316237, -0.02513786310099685]\n","1.0685600909701405\n","-1.9097609874185935\n","0.8412008964484491\n","280\n","280\n","280\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3YX7u0tViMXg","executionInfo":{"status":"ok","timestamp":1628915944405,"user_tz":-330,"elapsed":4087,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}}},"source":["confidence_n_neg=[]\n","confidence_n_neu=[]\n","confidence_n_pos=[]\n","\n","avg_n_neg=0\n","avg_n_pos=0\n","avg_n_neu=0\n","for i in range(len(neu)):\n","  exp = explainer.explain_instance(tokenize_(neu[i]), lr_bow_pipe.predict_proba, top_labels=3, num_features=10, num_samples=50)\n","  #print(explanation.as_list())\n","  predictions=exp.predict_proba\n","  for item in exp.as_list(label=0):\n","    if(str(item[0]).lower() in neutral):\n","      avg_n_neg+=float(item[1])\n","      val=float(item[1])/float(predictions[0])\n","      confidence_n_neg.append(val)\n","  for item in exp.as_list(label=1):\n","    if(str(item[0]).lower() in neutral):\n","      avg_n_neu+=float(item[1])\n","      val=float(item[1])/float(predictions[1])\n","      confidence_n_neu.append(val)\n","  for item in exp.as_list(label=2):\n","    if(str(item[0]).lower() in neutral):\n","      avg_n_pos+=float(item[1])\n","      val=float(item[1])/float(predictions[2])\n","      confidence_n_pos.append(val)"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9NTA_VNViMck","executionInfo":{"status":"ok","timestamp":1628915946470,"user_tz":-330,"elapsed":10,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"6e166c63-ccbb-424b-8059-adf152f98ddb"},"source":["print(confidence_n_pos)\n","print(confidence_n_neu)\n","print(confidence_n_neg)\n","print(avg_n_pos)\n","print(avg_n_neu)\n","print(avg_n_neg)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["[1.6730794437520664, 2.3069696295036928, 0.06680981384508458, -2.7500187649894334, 1.8486612995738883, 0.5109983062811245, 0.4162002565409009, -0.3934591772075659, -0.0706922597314334, 0.08838031447290845, -0.09781494347226564, -0.1253690918018624, 0.09493098790203455, -0.017263363332760216, -0.015000702429720361, -0.21248678577779984, 0.06748777538188482, 0.3349727030774427, -0.362050965036583, -0.4092593310525548, 0.49361974870360215, 0.13098938825874823, -0.07983552587108447, -0.1516199413619852, -0.08227417120060682, 0.13590298617758212, -0.23251338207486358, -0.22137048675432291, 0.1706990797674051, -0.037766601876109536, -0.07904142705151944, -0.22971965937677594, -0.04887706291928344, 0.17397632888142225, -0.238356542960548, -0.2481832902622096, 0.20292266576958343, -0.001040526236872625, -0.08125985980458164, -0.28395976605607753, 1.010688424174683, 2.709253422755538, -1.7913305637327106, -2.099406400759729, 1.3540186895086028, -0.8730449675716465, 0.17214865824663647, -3.125132390055745, 0.01898109939694313, 0.0633154439632673, -0.057855667817130085, -0.05494277259363189, 0.18117452517378924, 0.03705953741100199, 0.058395839172435744, -0.09773114500896869, 0.11139072922044607, 0.39815518521582954, -0.4128512917447577, -0.3620366894358467, 0.22417057280135919, -0.07197433366668891, -0.09266902656206112, -0.4735870725768128, 0.03385592818471816, 0.13637741837698916, -0.20649923511477006, -0.13494873815687666, 0.15045149407677075, 0.02241906097096206, -0.0399647177618914, -0.20183523954707863, 0.05914763686424027, 0.1421271366985582, -0.15365389735184368, -0.19331150557932783, 0.1835714249769956, 0.008484484045745644, -0.06665063352030062, -0.23341353370354828, -2.2339108687291955, 3.7818208423085484, -1.7936750268463093, -6.387894253923751, 3.392219198984982, -2.323702719182668, -0.5765293798579366, -6.815390992406866, 0.0546532120805388, 0.1083460907554529, -0.0910912323981237, -0.11344834163678809, 0.20920052008952097, 0.07578026560661641, 0.05695944732414104, -0.12775713532440108, 0.04771820972348998, 0.4662982110633927, -0.44968904648042324, -0.6430310539400156, 0.5498610789323926, 0.05518121094574692, -0.07874126839089554, -0.369328821043811, 0.053645328458384565, 0.17133263775453764, -0.21144231289928897, -0.1914057589061801, 0.1820393780149096, 0.026568464135563952, -0.06929761958174287, -0.2802912970239645, 0.04886268708387174, 0.193816307910114, -0.25959314397380095, -0.2707761765281995, 0.20782342277605698, -0.005646174964037221, -0.08252438468611686, -0.2939766705203946, -1.5608438859403246, 4.151153812155298, -5.088144692499156, -3.873133650973715, 1.0542139335045322, 0.2504850060752193, -0.7926390147666138, -3.4033684883394346, 0.03569676678634103, 0.10629296646043798, -0.10454837153479227, -0.08876247325095016, 0.18968831094815658, 0.02937187677630388, 0.05328300017767569, -0.18840693707530534, -0.0745672691718535, 0.439692699102046, -0.36089577022221875, -0.5245668268599286, 0.44189875442613913, -0.17871613273120676, -0.1674732177673746, -0.5608251225863238, -0.04463235823911247, 0.1708626628985948, -0.222972949630262, -0.21197439607998067, 0.19278996328408726, 0.01922590235399623, -0.05949056043132243, -0.2906119594627038, -0.04751736521511056, 0.1898434560541828, -0.2739946585451713, -0.24526534657858695, 0.21449896385230924, 0.012999111333166936, -0.08531143435282755, -0.26857693476450745, -0.1442929312360149, 0.12790738448138012, -0.6902352350388956, -0.7741941717024068, 0.5291667202128272, 0.3483373807823728, -0.15375667793716, -0.8548257795460145, -0.03257931063861379, 0.17258498793621838, -0.1959975408246778, -0.22387062803962698, 0.20734579352352756, 0.004722871464282204, -0.05965935579791829, -0.2149580762056916, -0.02846005835911699, 0.14320255726259623, -0.17897266834287193, -0.14653061050114638, 0.1990076419816537, 0.036167339193458194, -0.0023528188982014, -0.24316900712265774, -0.32575742242560246, 0.6921494398064205, -0.7235550399889559, -0.16741922053433392, 0.8381389802202723, 0.19274780363941846, -0.1598857387246079, -1.0199732143746845, -0.039101311653374486, 0.16597456408667127, -0.23675078769393482, -0.2239918846759643, 0.16897716497690587, -0.007172889380334425, -0.06360310782731725, -0.23473554705581542, -0.22161687852585496, 0.6646868421173688, -0.49442437922439797, -1.8278401614827746, 0.7716688679816432, -0.040354588120606355, -0.16609386311409502, -1.2580567580336048, -0.06420647732845361, 0.20952636543222775, -0.3183087260790048, -0.30410050486688933, 0.26393818452583667, -0.011163671931611663, -0.10279034394187357, -0.3275008555722255, -0.03362867971911829, 0.14360702837160014, -0.2621264038828425, -0.18910277025757527, 0.2441027628637508, 0.016638331826630853, -0.030926987136188452, -0.3237615545777161, -0.21876658047263517, 0.6878474610555759, -0.8967493138560523, -0.6645896825426271, 0.785203347738548, -0.13731637703859684, -0.21852965230576465, -1.0938981302510917, -0.04985906366039794, 0.20838774138388919, -0.2763593958167948, -0.28465990478449943, 0.26689751646385085, -0.01515380550523288, -0.0863585819529432, -0.2922043948910551, 0.03548420721120002, 0.40880274933401606, -0.5954143929202982, -0.12595616564085005, 0.6607188889706694, -0.1193148181834065, -0.15069019406423706, -0.2702368555460685, 0.04115252921796804, 0.15393586168769408, -0.2183550428114876, -0.2269065166767222, 0.1818865628036669, 0.027577546081395597, -0.06018567921264487, -0.2380754348222793, 0.03323209817128886, 0.14812710718354077, -0.19624838384470109, -0.17667042897743082, 0.1929542210520659, 0.003453165936375679, -0.00012132217524060762, -0.2197572954130132, 0.3111528024930528, 0.5482619600998688, -0.8789150443490176, -0.49465382638626676, 0.770995805929665, 0.23109324914386492, -0.10549358242526198, -0.269039018885927, 0.039968521363449666, 0.15778809642044647, -0.23818179968974307, -0.2102713715821115, 0.18197398847812707, -0.008478476264251997, -0.06890504101194074, -0.2181122829661714]\n","[0.3550107813606734, -0.010674007987406448, 0.30605118891456995, 0.10828673005721559, 0.19371561354385425, 0.1329965421611445, 0.34705733681405543, 0.22842449061312547, 0.09553854329498561, -0.06933793646010708, 0.0669412112583692, 0.07701366010542947, 0.0018261858302102525, 0.04309412476280646, 0.1145847119520144, 0.06245949814455127, 0.003082693653275246, -0.007987838240240236, 0.007917256513377768, 0.007896620764132499, -0.0025308721273609005, 0.0011880509151311843, 0.010725083211656982, 0.00202772485284401, 0.004612282535395876, -0.012652308638824541, 0.012945430793582444, 0.01227087776708898, -0.010344846365203216, 0.0028083594594282505, 0.011140956587311977, 0.00929856474689224, 0.006313179250602417, -0.012245459470957844, 0.01207625030116377, 0.012370115473697053, -0.004846291121428086, 0.003419527410733607, 0.015167440421538727, 0.00805300970009984, -0.10154574942507864, -0.27049457628448775, 0.27915175317587304, 0.09724946721557556, -0.11241482886298482, -0.1334000347006177, 0.30161800556632956, -0.09255618136901082, -0.034082000989049725, -0.04132978136997937, 0.08978372143196488, 0.07291931776129389, -0.0131779183393153, 0.012761062454626697, 0.034763828259569245, 0.016577386530438446, -0.003259485972971158, -0.013262657802758069, 0.011925774810778701, 0.011490409356059309, 0.0016990680542628082, 0.003607566262704875, 0.013083173878739616, 0.006227559091497619, -0.005522355631494095, -0.016734526115307978, 0.017802693162591077, 0.01286903257155652, -0.011555152831554739, 0.0015904380921294193, 0.015440534215256116, 0.011099514398280119, -0.008373026271451691, -0.01778928408608581, 0.014362821338846355, 0.017128477918482418, -0.005079498900588226, 0.0016372347382707711, 0.025972819875977278, 0.010688990060109625, -0.4142448777807323, -0.1611805587829927, 0.24785792682844116, -0.12872684794720304, 0.11309878770372157, -0.2328146756038043, 0.313912588130114, -0.2139260842321337, -0.05890075252607347, -0.0917068074358926, 0.09116019343979175, 0.08611711929715038, -0.01822417530846698, -0.03170664797201488, 0.09304840494404705, 0.016142434571540264, -0.002432486033505199, -0.011004293226015073, 0.010343528669898459, 0.010818254156831393, -0.0011628358074257297, 0.00231188256192793, 0.015140326515239482, 0.0034355483144999283, -0.0041284031045761855, -0.014049416168757566, 0.012718778804870304, 0.012416727544710507, -0.008132156510941025, 0.0019437166031731883, 0.013563594802372419, 0.010076325045211746, -0.0043090510135359965, -0.016740267855086612, 0.015004183013857838, 0.016914042287456906, -0.004607809366951401, 0.005666919522680646, 0.020620483996119078, 0.008679946813048614, -0.0346741989982855, -0.03870816090562016, -0.12148229976144516, 0.07245237596439065, -0.040370785428905015, 0.1021078944142441, 0.31898511529992835, 0.16503721954907155, 0.021722911391582736, -0.09684998310488577, 0.07190666581756323, 0.10142684433596395, 0.0020267594711567702, 0.02272883993332231, 0.07815540878144885, 0.05545038562866607, 0.0029323626431782064, -0.010406116418826845, 0.01072556092523961, 0.012401547272805522, -0.00023212540050169674, 0.0042240666597114125, 0.013509142438535746, 0.004210208009845667, 0.0036240310516699424, -0.01531562191283152, 0.013655868873451481, 0.01307191989500107, -0.008680307851378846, 0.002118489708183654, 0.013737876483206632, 0.009680907157225426, 0.005856775711410785, -0.01522434759792131, 0.018074190252269817, 0.015426375355849533, -0.0011214747212359055, 0.0028134180805395423, 0.022732417713259317, 0.007031382971528884, 0.016600207841525886, -0.10213139787785964, 0.06004920951861499, 0.0634839093408763, 0.031203385551832476, 0.02674011541131374, 0.10832763762624463, 0.01496242477618531, 0.0037402996203182376, -0.01708356059305217, 0.013855230022491612, 0.014489736037882745, -0.008607688658479891, 0.0023833446509964273, 0.01822695563950643, 0.007485086955021205, -0.013131733923272396, -0.05079402655646066, 0.05751012457631164, 0.034505654808294095, -0.006628560383194411, -0.019267158755193633, 0.07766002936914476, 0.014285163571584094, -0.0032506304748987484, -0.04508415500427955, 0.06594331682028709, 0.10486684179827346, 0.024580332872936206, 0.021525041899340843, 0.1320180181826459, 0.02663129059917364, 0.004449344319215404, -0.016130434996856187, 0.014619971683195395, 0.015227986505554432, -0.005898565230683568, 0.003569852348290547, 0.017406533758395647, 0.007605714004074248, 0.027891253095807787, -0.05564993111154013, 0.09253928151225982, 0.008319710123577921, 0.046537674120299084, 0.023122930649703978, 0.12050639315003052, 0.014798838082427823, 0.0029073402363975725, -0.011828836090179595, 0.011858774083381492, 0.0111100304831347, -0.002960724885376663, 0.0020758156931736864, 0.013152122053240787, 0.005069320839599282, 0.019819798119794053, -0.06228684531635992, 0.043232204337365375, 0.047408805164571764, 0.016482905702789024, 0.007979940419833681, 0.05611058201994262, -0.0031264493800433704, 0.02944948022088239, -0.09522412629460293, 0.10230031056311008, 0.0756035111571132, 0.010708438186946194, 0.004679835940396923, 0.07700798395822721, 0.04098222390662792, 0.0029049426596745166, -0.011851843525160331, 0.010161431738667908, 0.011682580733862871, -0.0022134915941382275, 0.002574293906928215, 0.016060091814078786, 0.005954753438721679, -0.016723688477652657, -0.048123069096098495, 0.055569968907816965, 0.058194982163061904, 0.028530618546613113, 0.014247883853763393, 0.09624809604702629, 0.02360157806170223, -0.0035614827897968875, -0.013436992503856013, 0.012502604868621526, 0.012883125617898592, -0.007913034887700083, 0.0010895021075491237, 0.011079000044592741, 0.008270848114196006, -0.013092078585936476, -0.031562188681785036, 0.04498826229397195, 0.03751140756784849, 0.0006973774004713742, 0.02362771278818272, 0.06648771452578477, 0.01448322895209756, -0.015241076081713358, -0.062222125903608844, 0.05768171968652198, 0.06839884143034367, 0.005007510851475133, 0.04221683595508429, 0.09778806417679621, 0.022642873994666364, -0.0033237972141798504, -0.013735980569239798, 0.012907514151035401, 0.01220351143669365, -0.007936552666995635, 0.0025997093007828244, 0.012684168053976364, 0.007827371105952097]\n","[-0.08058496794475616, -0.0007259263746526143, -0.1308164953706374, -0.04414329001872811, -0.07132691861708033, -0.046079665146781426, -0.2778830035608474, -0.07306383925213343, -0.13453251545463563, 0.06857536942230148, -0.15941961691974801, -0.18287692361957555, -0.08887810539382829, -0.0999036666856249, -0.6691936004013913, -0.05970124530020196, -0.1181589436269638, 0.15466668467132857, -0.3784573950858181, -0.3744400407439272, -0.13840965589321214, -0.11099383787507737, -1.2173869216087272, -0.0573299215790171, -0.048066980887673104, 0.2014874327458542, -0.46288568564160104, -0.43897854851360346, -0.15922650176019187, -0.07716530887614796, -1.5442099711736619, -0.05799770672743881, -0.11443662988361802, 0.12328077258279178, -0.30053922116769005, -0.3138063771530187, -0.12830588495688527, -0.11852843614760626, -1.0657885886069285, -0.06063974716536485, 0.012870765833741606, 0.027582796843982113, -0.0584941342555161, -0.019635377880378672, 0.017534448423601717, 0.02401243012960551, -0.12215427664111828, 0.01758593328003548, 0.02767399356199973, 0.010212557995024392, -0.12209917837430395, -0.09981460649137817, -0.10038622029369225, -0.03354026133328122, -0.16126054367986944, 0.010645421251949453, 0.03980463397630137, 0.1266213849272087, -0.2792488706772349, -0.289541079183131, -0.13480408047399373, -0.07295679477867521, -0.737363607710424, -0.05933751174095545, 0.0985913075764188, 0.10071182769658715, -0.3649074148133834, -0.3139194321098476, -0.17775364338034827, -0.1432752038047114, -1.3251258353072741, -0.006444576507644311, 0.07871146775617875, 0.1117333861939396, -0.21070856969750476, -0.2530237532074214, -0.10824815022818257, -0.0355066878286567, -0.971197025076539, -0.054925684436625044, 0.07098129411530524, 0.019380551492632094, -0.06436075345374538, 0.04101126884791258, -0.02843871579141383, 0.051190769918516496, -0.1543495099505436, 0.0467416649993375, 0.05873494805336663, 0.06396953812978709, -0.15427910754843543, -0.1429950379714676, -0.06994264553407302, 0.02522398738880659, -0.38687735842285464, 0.005339314737676571, 0.05262625590474318, 0.1441767734966863, -0.32565485513984643, -0.31970057841131316, -0.1240213205820614, -0.08468735286291965, -1.0895821439141882, -0.049966212626344535, 0.06744912656488422, 0.14538654976079576, -0.39847770389260356, -0.4341476362267185, -0.16893522583647688, -0.16856592710158344, -1.3755097079057172, -0.05152982634705525, 0.05070098363712087, 0.14338415453540873, -0.2747695855857424, -0.3333879128385714, -0.06360880516600213, -0.11996424570714262, -0.9525942617856167, -0.06390164257192585, 0.00841684277244167, 0.0023273463984805213, 0.03618954329845862, -0.01690074473177434, 0.007434065006468404, -0.021803256147058477, -0.1564816553066013, -0.03098943374021616, -0.04509632519161489, 0.0698713079921594, -0.11159876661436026, -0.18314566253705888, -0.09356673699841343, -0.0460734075140116, -0.32873320246454996, -0.03982268551975313, -0.07684445332280102, 0.1365607116271022, -0.35777925811399797, -0.40959363257288933, -0.12235962381367556, -0.09700347558658216, -0.9305051439480124, -0.04571373424443619, -0.09337845603646473, 0.19077559318920503, -0.43674606374130953, -0.4325518992569959, -0.17516661126251368, -0.16052305954700383, -1.446138379249244, -0.014214260569231895, -0.10003820363663002, 0.12392733394099087, -0.35100780916752583, -0.30499690590441175, -0.14611235663272099, -0.0684080124751109, -1.05674619256536, -0.039928945299021176, -0.03105492504360383, 0.13458603912342118, -0.14339226445723638, -0.15752046861991834, -0.0799421400151637, -0.061816959953702275, -0.5172524853480388, -0.017903618063372328, -0.07636798352535439, 0.15716968945680612, -0.31248059399289174, -0.31286879624640895, -0.11238372946437573, -0.0819903253315733, -1.1912652177019634, -0.02691991686676629, 0.04927982163053777, 0.08831892412542387, -0.2137630975669325, -0.12618451732057123, -0.033156885891455726, 0.05866266818030586, -0.6201818181501318, -0.01260243099505435, 0.00890771410990013, 0.03780092872491903, -0.12002122700451383, -0.21197666234561163, -0.05448994253911369, -0.035997783636538064, -0.47638927282215093, -0.02993833057129841, -0.09041805839089068, 0.14499553570806004, -0.2930952606141094, -0.3434959618185261, -0.12772975300274067, -0.10392365171979809, -1.1193994715430111, -0.012338896712851809, -0.048264939616997814, 0.06172182922119865, -0.20757417890368474, -0.008053286257737132, -0.09319043152913926, -0.04167259763451334, -0.5092519949146325, -0.019646122296224654, -0.05232928962592375, 0.1326705577576078, -0.28122876928483925, -0.2707721595889003, -0.08721046364996007, -0.05285839381332566, -0.7619502456027081, -0.029945024128044333, -0.056232918574908794, 0.11288122372965881, -0.1463153081438225, -0.17412613830347828, -0.07418869718470139, -0.02509995715973261, -0.3899376930978053, 0.024248431294990765, -0.03857362373618309, 0.08175789259374838, -0.17173875089661822, -0.1327088859445467, -0.01992408120184019, -0.005781903278731824, -0.2443432725451687, -0.049540284739212154, -0.05836065737517203, 0.13352932590318342, -0.23945518547573175, -0.300463128546831, -0.11038978820808498, -0.06495392699593422, -0.9675356085505772, -0.06449488720565646, 0.04182941616119851, 0.09031432119222664, -0.2086192503612635, -0.24275738100550517, -0.12175144870337011, -0.04242728483329145, -0.7175499393556525, -0.06639332766493516, 0.06703303035341945, 0.16108853833660666, -0.36129544756754073, -0.37804505898281465, -0.1359340431412226, -0.11127583065179578, -1.0289256208091675, -0.04560505071161228, 0.04654773403349152, 0.0701488086041406, -0.24526585094009867, -0.20912619082435585, -0.08906215512556442, -0.12729996074937863, -0.8312367301579102, -0.025733699520279103, 0.023929840140660366, 0.08859988689686368, -0.1594893046993073, -0.20843039777393987, -0.03473800388226263, -0.10737914812990616, -0.552163217363197, -0.048241773139776796, 0.05978569016017666, 0.1639196704574568, -0.3485888025514001, -0.36759639960931817, -0.13500159099110445, -0.1115581674617558, -1.1780027641522561, -0.05351893771387381]\n","0.01230602037066992\n","3.3282088719180725\n","-3.3405148922887395\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ClVzfwN8iMfy","executionInfo":{"status":"ok","timestamp":1628916279502,"user_tz":-330,"elapsed":595,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}}},"source":["confidence_n_neg=[-0.08058496794475616, -0.0007259263746526143, -0.1308164953706374, -0.04414329001872811, -0.07132691861708033, -0.046079665146781426, -0.2778830035608474, -0.07306383925213343, -0.13453251545463563, 0.06857536942230148, -0.15941961691974801, -0.18287692361957555, -0.08887810539382829, -0.0999036666856249, -0.6691936004013913, -0.05970124530020196, -0.1181589436269638, 0.15466668467132857, -0.3784573950858181, -0.3744400407439272, -0.13840965589321214, -0.11099383787507737, -1.2173869216087272, -0.0573299215790171, -0.048066980887673104, 0.2014874327458542, -0.46288568564160104, -0.43897854851360346, -0.15922650176019187, -0.07716530887614796, -1.5442099711736619, -0.05799770672743881, -0.11443662988361802, 0.12328077258279178, -0.30053922116769005, -0.3138063771530187, -0.12830588495688527, -0.11852843614760626, -1.0657885886069285, -0.06063974716536485, 0.012870765833741606, 0.027582796843982113, -0.0584941342555161, -0.019635377880378672, 0.017534448423601717, 0.02401243012960551, -0.12215427664111828, 0.01758593328003548, 0.02767399356199973, 0.010212557995024392, -0.12209917837430395, -0.09981460649137817, -0.10038622029369225, -0.03354026133328122, -0.16126054367986944, 0.010645421251949453, 0.03980463397630137, 0.1266213849272087, -0.2792488706772349, -0.289541079183131, -0.13480408047399373, -0.07295679477867521, -0.737363607710424, -0.05933751174095545, 0.0985913075764188, 0.10071182769658715, -0.3649074148133834, -0.3139194321098476, -0.17775364338034827, -0.1432752038047114, -1.3251258353072741, -0.006444576507644311, 0.07871146775617875, 0.1117333861939396, -0.21070856969750476, -0.2530237532074214, -0.10824815022818257, -0.0355066878286567, -0.971197025076539, -0.054925684436625044, 0.07098129411530524, 0.019380551492632094, -0.06436075345374538, 0.04101126884791258, -0.02843871579141383, 0.051190769918516496, -0.1543495099505436, 0.0467416649993375, 0.05873494805336663, 0.06396953812978709, -0.15427910754843543, -0.1429950379714676, -0.06994264553407302, 0.02522398738880659, -0.38687735842285464, 0.005339314737676571, 0.05262625590474318, 0.1441767734966863, -0.32565485513984643, -0.31970057841131316, -0.1240213205820614, -0.08468735286291965, -1.0895821439141882, -0.049966212626344535, 0.06744912656488422, 0.14538654976079576, -0.39847770389260356, -0.4341476362267185, -0.16893522583647688, -0.16856592710158344, -1.3755097079057172, -0.05152982634705525, 0.05070098363712087, 0.14338415453540873, -0.2747695855857424, -0.3333879128385714, -0.06360880516600213, -0.11996424570714262, -0.9525942617856167, -0.06390164257192585, 0.00841684277244167, 0.0023273463984805213, 0.03618954329845862, -0.01690074473177434, 0.007434065006468404, -0.021803256147058477, -0.1564816553066013, -0.03098943374021616, -0.04509632519161489, 0.0698713079921594, -0.11159876661436026, -0.18314566253705888, -0.09356673699841343, -0.0460734075140116, -0.32873320246454996, -0.03982268551975313, -0.07684445332280102, 0.1365607116271022, -0.35777925811399797, -0.40959363257288933, -0.12235962381367556, -0.09700347558658216, -0.9305051439480124, -0.04571373424443619, -0.09337845603646473, 0.19077559318920503, -0.43674606374130953, -0.4325518992569959, -0.17516661126251368, -0.16052305954700383, -1.446138379249244, -0.014214260569231895, -0.10003820363663002, 0.12392733394099087, -0.35100780916752583, -0.30499690590441175, -0.14611235663272099, -0.0684080124751109, -1.05674619256536, -0.039928945299021176, -0.03105492504360383, 0.13458603912342118, -0.14339226445723638, -0.15752046861991834, -0.0799421400151637, -0.061816959953702275, -0.5172524853480388, -0.017903618063372328, -0.07636798352535439, 0.15716968945680612, -0.31248059399289174, -0.31286879624640895, -0.11238372946437573, -0.0819903253315733, -1.1912652177019634, -0.02691991686676629, 0.04927982163053777, 0.08831892412542387, -0.2137630975669325, -0.12618451732057123, -0.033156885891455726, 0.05866266818030586, -0.6201818181501318, -0.01260243099505435, 0.00890771410990013, 0.03780092872491903, -0.12002122700451383, -0.21197666234561163, -0.05448994253911369, -0.035997783636538064, -0.47638927282215093, -0.02993833057129841, -0.09041805839089068, 0.14499553570806004, -0.2930952606141094, -0.3434959618185261, -0.12772975300274067, -0.10392365171979809, -1.1193994715430111, -0.012338896712851809, -0.048264939616997814, 0.06172182922119865, -0.20757417890368474, -0.008053286257737132, -0.09319043152913926, -0.04167259763451334, -0.5092519949146325, -0.019646122296224654, -0.05232928962592375, 0.1326705577576078, -0.28122876928483925, -0.2707721595889003, -0.08721046364996007, -0.05285839381332566, -0.7619502456027081, -0.029945024128044333, -0.056232918574908794, 0.11288122372965881, -0.1463153081438225, -0.17412613830347828, -0.07418869718470139, -0.02509995715973261, -0.3899376930978053, 0.024248431294990765, -0.03857362373618309, 0.08175789259374838, -0.17173875089661822, -0.1327088859445467, -0.01992408120184019, -0.005781903278731824, -0.2443432725451687, -0.049540284739212154, -0.05836065737517203, 0.13352932590318342, -0.23945518547573175, -0.300463128546831, -0.11038978820808498, -0.06495392699593422, -0.9675356085505772, -0.06449488720565646, 0.04182941616119851, 0.09031432119222664, -0.2086192503612635, -0.24275738100550517, -0.12175144870337011, -0.04242728483329145, -0.7175499393556525, -0.06639332766493516, 0.06703303035341945, 0.16108853833660666, -0.36129544756754073, -0.37804505898281465, -0.1359340431412226, -0.11127583065179578, -1.0289256208091675, -0.04560505071161228, 0.04654773403349152, 0.0701488086041406, -0.24526585094009867, -0.20912619082435585, -0.08906215512556442, -0.12729996074937863, -0.8312367301579102, -0.025733699520279103, 0.023929840140660366, 0.08859988689686368, -0.1594893046993073, -0.20843039777393987, -0.03473800388226263, -0.10737914812990616, -0.552163217363197, -0.048241773139776796, 0.05978569016017666, 0.1639196704574568, -0.3485888025514001, -0.36759639960931817, -0.13500159099110445, -0.1115581674617558, -1.1780027641522561, -0.05351893771387381]\n","confidence_f_neg=[-0.09304673681410872, 0.01369347343400334, 0.05596455156318185, -0.07709654320341597, -0.11213412945158856, 0.002473338942182745, 0.01700405963147793, -0.018078442574154384, -0.1406835128090362, 0.08364702031900621, 0.1329196731864046, -0.09982407759744462, -0.36490742425325046, 0.0044275074468368295, 0.06439095833313134, -0.09975735602511426, -0.07734455306882641, 0.16843835863234982, 0.3137168800102185, -0.12227865041562548, -0.7907698467844122, 0.03381518870614487, 0.16170913819864816, -0.01980927001275199, -0.04718975873773639, 0.29027523372588976, 0.3719560376875465, -0.12391166639242941, -0.9258889180738207, 0.06282161535067644, 0.2014847409684739, 0.008146573347309434, -0.08779977817202231, 0.15631883814765096, 0.26208884266285976, -0.11425368000603882, -0.7288854424921598, 0.009948763139250902, 0.11179786388444078, -0.029086144695518748, 0.001521789976711183, 0.043734811966604906, 0.045837224577511174, -0.023447582919452786, -0.10642915234025978, 0.07133694533472286, 0.0716176608408775, 0.02998102351873068, -0.016815753441957983, 0.06692900501507464, 0.1437613517301507, -0.06969963424967641, -0.18067097686591607, -0.044613357163388385, 0.043717800209019074, -0.0707659000056265, 0.03384020917527738, 0.1568986984253892, 0.262388701533478, -0.047287276617661037, -0.673429004030146, 0.046244146548241515, 0.11335218565680207, -0.037883744094187446, 0.0007966176348781398, 0.19096425833115696, 0.287229122184191, -0.14944507035623406, -0.9684031827995925, -0.02228074111093913, 0.13687413985223806, -0.03870581940682615, 0.017493890694976526, 0.13927342065118362, 0.2062308947478947, -0.1097772400000583, -0.565547851841013, 0.01954500710359783, 0.14277509632734547, -0.014862612360411346, -0.014764451482913471, 0.051185062252419436, 0.0583176715915573, -0.056541887380675185, -0.12546896917472825, 0.020312892920045775, 0.017239068415018505, -0.051675552727490734, -0.027881659619303764, 0.03673435596875439, 0.14695613018211173, -0.06690512808677565, -0.24920393847625255, 0.03006622534992382, 0.07123841282021322, 0.00472135110185191, 0.02551393948618597, 0.15635963794032212, 0.27340877070658764, -0.08249863515226542, -0.6889064603508724, 0.01906250014382227, 0.1471462127736828, -0.01788360188207227, 0.031468752567505025, 0.14542837223041827, 0.3596704673004546, -0.10040200762597752, -0.7443420460407083, 0.011451744556718648, 0.13713582288836754, -0.002491643530529482, 0.03370139392544804, 0.15547834340538966, 0.22249894569120504, -0.1180956189576398, -0.6482003249102904, 0.029744822921740053, 0.09233211737614815, -0.04283871391978769, -0.0022665423767496322, 0.0054996347313397385, 0.04751593398036183, -0.024621760892365164, -0.013729336692975417, -0.006243447141451947, 0.011963099952361122, 0.02320060750911578, -0.06873960420192467, 0.05979112048918909, 0.13652883836425111, -0.0952011743887407, -0.28548844305775456, 0.008737107894538005, 0.04309773318586942, -0.023891392175231382, -0.07064038387849568, 0.1761530473814405, 0.28770068839830654, -0.09729150797168469, -0.694112842516643, 0.025323087727807385, 0.11683924362521443, 0.002183100722307066, -0.039691382988749725, 0.22920757521817017, 0.2806339597937096, -0.1090683682712169, -0.7925017630439674, 0.06251072567441397, 0.14070889730827904, 0.019206553098244837, -0.0863806274184776, 0.15170622500875847, 0.23377622385627392, -0.09918936883470794, -0.6110066751907465, 0.05376047928484123, 0.11296593261591577, -0.038729462054679746, -0.04750410661779251, 0.09460018684224994, 0.14838621616280195, -0.03967542519980537, -0.31572581321457704, -0.002525673466075051, 0.11648038802141071, 0.005173500707496446, -0.07121744930444301, 0.14317255947213273, 0.26496136846908536, -0.09144472667847965, -0.6688968956735176, 0.017821922795997616, 0.14382925470589022, -0.034878099493830576, -0.0352221497658211, 0.06357003563858922, 0.1469216781167673, -0.05532399994339348, -0.3389078953434331, 0.014204959743425824, 0.07478506446553457, -0.011701339254845605, -0.08153680373715876, 0.1099088413813103, 0.13839911495758625, -0.07141214393325983, -0.22361174225035557, 0.0497741033922425, 0.07851107918100593, 0.02718087239360769, -0.08354049157494962, 0.17313239679488068, 0.24181794711388035, -0.0880296744165693, -0.6965086526912315, 0.04193842370113837, 0.11726297430366034, -0.02082080181701975, -0.04791094878212796, 0.0837288551633372, 0.13350123896814584, -0.035137921178663635, -0.14347437077993047, 0.002306158087661647, 0.08533504460312138, 0.0006886549514631786, -0.03931144306474083, 0.15188945772497664, 0.20624125751031216, -0.08334603603615721, -0.607917906628185, 0.02779507223447566, 0.13187062915193198, -0.025968575423963663, -0.08750366913653651, 0.16414876772088727, 0.14409821866996322, -0.0008410335291898968, -0.37079881882608057, 0.09806797888951088, 0.040187376105431216, 0.015226701520656121, -0.0039999035290384805, 0.07613480822930083, 0.14355082079224035, -0.022234972365996846, -0.2865389796176102, 0.03716076072261147, 0.12954949883163616, -0.011356397972072699, -0.061570374455949095, 0.15239417866246718, 0.26738378278023783, -0.10700046106831891, -0.6219723838370097, 0.04049518739503178, 0.11812892931199079, 0.004888687485941452, 0.08955585248205006, 0.11339306293376157, 0.22714714063784258, -0.04562820818739405, -0.42472992791426906, -0.02633414386070596, 0.08707343028913313, -0.0009834098271806727, 0.024531437729011608, 0.18241455755154784, 0.314271481831587, -0.12109252709058684, -0.7836043398668474, 0.03549714627071718, 0.150184064293525, -0.021348578946116307, 0.032174218574982684, 0.09300284436282816, 0.23703619843869583, -0.06758198410087424, -0.4008049198321528, 0.040231433845914606, 0.03705381551229566, -0.007286066066052066, -0.0390531009055682, 0.07381638463336333, 0.16001515801548033, -0.06569219942292515, -0.48914843427229504, 0.05924917359889357, 0.08399399796007202, -0.03590296653724907, 0.03466181403773718, 0.199394540834207, 0.3054399802801851, -0.10463075296228132, -0.7679986410124774, 0.027278658703756835, 0.15848846111316237, -0.02513786310099685]\n","confidence_m_neg=[-0.13173206741462062, 0.024734775814495166, -0.02638962008485829, 0.011477659589177526, -0.02692840856639961, -0.19992604682951062, -0.04669191256748201, -0.03292350348109993, -0.0832576229387767, 0.008533568382450445, -0.052704149456537695, -0.005706506757296024, 0.005654455114072189, -0.4233159542114584, -0.04783597608179233, -0.08519134257993807, -0.017097975011927048, 0.07256553101884253, -0.08771002027286989, 0.09055210606414724, -0.0016929538343735736, -0.8119143450378727, -0.02733606115824107, -0.008046332733627792, 0.07907952563139814, 0.1283446015571001, -0.05160520737365897, 0.12070069323598615, 0.010607286765233526, -1.0634819893837095, 0.009739979256375576, -0.03264303099644492, -0.03507591470649507, 0.06031474059658315, -0.0635149424090974, 0.06588296447304559, -0.015257091296622498, -0.7255079806370344, -0.03537657472561727, -0.0343435846151506, -0.005799110443319042, 0.07188518791353503, -0.02518651615309908, 0.004082568620150384, -0.021279421061960457, -0.07383822710909865, 0.008499646142885155, 0.029249530590985402, 0.0068678509344374935, 0.05860460873695636, 0.0031928437414004513, -0.0010770130495400755, -0.037347063016669985, -0.24434822602342324, 0.00698733309267709, -0.06673818463189375, -0.03525016329063834, 0.06684650847369657, -0.06852333553487018, 0.06867219645567915, 0.013688987974532598, -0.615257141454541, -0.017090877140941447, -0.01631031179668038, 0.003433601097836343, 0.11387164189518924, -0.10122674925951228, 0.10545483865143179, -0.006513481786997818, -1.0036696709083675, -0.0032622873580785017, -0.03314858232490337, -0.025488271931645146, 0.08641513376444554, -0.07992872842928996, 0.062016622515859675, -0.002540760761618365, -0.56495131342509, -0.0269053672935874, 0.022586441159464427, -0.04444701183340588, 0.0067361734053797, -0.01452750410154358, 0.005666069508906731, -0.0442210869062621, -0.15688933722688012, -0.0035607225470944523, 0.0245939709073121, -0.05298700527469997, 0.04022077760376357, 0.060447249978742346, 0.062337665549793427, 0.020559776412465532, -0.3436488517417688, -0.023156640197807308, 0.021060761269742472, -0.026428251304454465, 0.0668613667755416, -0.07830001680219091, 0.08707039913073904, -0.00276299012462063, -0.794326821847602, -0.022857527972221122, -0.011182452828316319, 0.011777780954001268, 0.05546562841012454, -0.061325756609848216, 0.1280763970622618, 0.024297669857893257, -0.7215564561326299, 0.039843911256545815, 0.06052128213191294, -0.03767358921456643, 0.07106605781135031, -0.05483752338448906, 0.07005256489981523, -0.012659575359697813, -0.7079939294681277, -0.002406980126530735, -0.0012738164948087407, -0.002656223519184806, 0.005408607975166369, -0.02117105622300038, -0.014158279731968397, -0.01802599350282772, -0.1306370765994152, -0.015604419555519526, 0.016604332140441103, -0.012639652437348763, 0.014085001365034289, -0.05139073148617832, 0.002661317991596877, 0.004999405390146189, -0.3425925909715654, -0.03513654924394668, -0.05976135194289037, -0.005645416677481554, 0.06704834881734292, -0.07605132854932153, 0.08663781714543106, 0.007070415258084955, -0.6250636408689398, -0.01409543192211026, -0.013789323883618481, -0.0006247465341624277, 0.11072230324449975, -0.0696486820259974, 0.0913260399906128, 0.036708545137764025, -0.870227385341819, 0.015490001434157272, -0.020661997984103564, -0.01796957057292199, 0.07548240749652402, -0.0371822547908699, 0.06235138342154989, -0.019098348219666914, -0.5525076243981716, -0.032852742976330986, -0.013281401991552979, -0.0075621777812034125, 0.01349536123944298, 0.015543728579069868, 0.0434834197925715, -0.008985703718738958, -0.20369618043062118, -0.026774431713835957, 0.023839910245243266, -0.004129508207619212, 0.08071407642099278, -0.049067012114440874, 0.0831172052043574, 0.017089786718985988, -0.7473700956486061, -0.018503456537979864, -0.002868122655012947, -0.006368588885827752, 0.04029947790933656, 0.018996066019293257, 0.04360139939353218, 0.02361384701977835, -0.32434498118387306, 0.04939340896687723, 0.043671871909005816, 0.013649725270831815, 0.04710947441950293, -0.03270946331265953, 0.06424355572753929, 0.056193315435809015, -0.23426821363764241, -0.007019117747843949, 0.022099976611205017, 0.019990430794887184, 0.0662090322875239, -0.07665866454530183, 0.09055193340867439, -0.005121252319548354, -0.743323880774784, -0.011451342461766607, 0.004031184436368354, 0.03020896362517122, 0.05498128371152597, 0.018576014276333437, 0.025489798227992858, 0.0008629134481948045, -0.30743846999722163, -0.023421002838108922, -0.028071110448495244, 0.009086096335493926, 0.07872479311055394, -0.04628297806423784, 0.0827825756355454, -0.002588569797249203, -0.628591726726011, -0.00015959084212631652, -0.0015898812329268625, -0.04035688993526503, 0.0023555765885217646, -0.03495319097342008, 0.08453506512270391, -0.012079964545150493, -0.46112737387551045, 0.03533671507227772, -0.041617724705501916, -0.024914713944869122, 0.02633559313249303, -0.041556109109448146, 0.008302532392810869, 0.060057855058447865, -0.30674572127032396, 0.019648145959101162, 0.014339667743226668, -0.00521045151396621, 0.071143591393453, -0.06960306610831804, 0.08517006127743891, 0.010793572918946498, -0.6364385874671651, 0.0006634400860255061, 0.015329633356911492, -0.031117318744292407, 0.10343009854051884, -0.043815244575074595, 0.09758760466300022, 0.02339308179672285, -0.4635146574046582, -0.02995746522244088, 0.011063211722853052, -0.026883141483114048, 0.07613142461185182, -0.07878275353694185, 0.08821406627853919, -0.004978230372954451, -0.8021932685746704, -0.020839899363984955, -0.014056388917394018, -0.027357834353071965, 0.06152345802517524, -0.031926960965920174, 0.059040449881262905, 0.017277816955048746, -0.40128898736479307, 0.01567693277134128, 0.017873399752965355, -0.03015936056945982, 0.04434685113369365, -0.07120661527687644, 0.0757973278310973, 0.005572938094384801, -0.4336807417684207, 0.008009817533471098, 0.0012682008264253233, -0.025598926285703313, 0.07924655962073306, -0.06022802013142972, 0.09468733234181351, -0.00499198497922149, -0.7715266092395918, -0.019166385796251302, -0.004276053221642702]"],"execution_count":29,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HgZv5IfdiMle","executionInfo":{"status":"ok","timestamp":1628916181651,"user_tz":-330,"elapsed":11,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"9ed4116e-df01-42b2-f0fe-e4a01cc5213d"},"source":["print(confidence_m_neg)\n","print(confidence_f_neg)\n","print(confidence_n_neg)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["[-0.13173206741462062, 0.024734775814495166, -0.02638962008485829, 0.011477659589177526, -0.02692840856639961, -0.19992604682951062, -0.04669191256748201, -0.03292350348109993, -0.0832576229387767, 0.008533568382450445, -0.052704149456537695, -0.005706506757296024, 0.005654455114072189, -0.4233159542114584, -0.04783597608179233, -0.08519134257993807, -0.017097975011927048, 0.07256553101884253, -0.08771002027286989, 0.09055210606414724, -0.0016929538343735736, -0.8119143450378727, -0.02733606115824107, -0.008046332733627792, 0.07907952563139814, 0.1283446015571001, -0.05160520737365897, 0.12070069323598615, 0.010607286765233526, -1.0634819893837095, 0.009739979256375576, -0.03264303099644492, -0.03507591470649507, 0.06031474059658315, -0.0635149424090974, 0.06588296447304559, -0.015257091296622498, -0.7255079806370344, -0.03537657472561727, -0.0343435846151506, -0.005799110443319042, 0.07188518791353503, -0.02518651615309908, 0.004082568620150384, -0.021279421061960457, -0.07383822710909865, 0.008499646142885155, 0.029249530590985402, 0.0068678509344374935, 0.05860460873695636, 0.0031928437414004513, -0.0010770130495400755, -0.037347063016669985, -0.24434822602342324, 0.00698733309267709, -0.06673818463189375, -0.03525016329063834, 0.06684650847369657, -0.06852333553487018, 0.06867219645567915, 0.013688987974532598, -0.615257141454541, -0.017090877140941447, -0.01631031179668038, 0.003433601097836343, 0.11387164189518924, -0.10122674925951228, 0.10545483865143179, -0.006513481786997818, -1.0036696709083675, -0.0032622873580785017, -0.03314858232490337, -0.025488271931645146, 0.08641513376444554, -0.07992872842928996, 0.062016622515859675, -0.002540760761618365, -0.56495131342509, -0.0269053672935874, 0.022586441159464427, -0.04444701183340588, 0.0067361734053797, -0.01452750410154358, 0.005666069508906731, -0.0442210869062621, -0.15688933722688012, -0.0035607225470944523, 0.0245939709073121, -0.05298700527469997, 0.04022077760376357, 0.060447249978742346, 0.062337665549793427, 0.020559776412465532, -0.3436488517417688, -0.023156640197807308, 0.021060761269742472, -0.026428251304454465, 0.0668613667755416, -0.07830001680219091, 0.08707039913073904, -0.00276299012462063, -0.794326821847602, -0.022857527972221122, -0.011182452828316319, 0.011777780954001268, 0.05546562841012454, -0.061325756609848216, 0.1280763970622618, 0.024297669857893257, -0.7215564561326299, 0.039843911256545815, 0.06052128213191294, -0.03767358921456643, 0.07106605781135031, -0.05483752338448906, 0.07005256489981523, -0.012659575359697813, -0.7079939294681277, -0.002406980126530735, -0.0012738164948087407, -0.002656223519184806, 0.005408607975166369, -0.02117105622300038, -0.014158279731968397, -0.01802599350282772, -0.1306370765994152, -0.015604419555519526, 0.016604332140441103, -0.012639652437348763, 0.014085001365034289, -0.05139073148617832, 0.002661317991596877, 0.004999405390146189, -0.3425925909715654, -0.03513654924394668, -0.05976135194289037, -0.005645416677481554, 0.06704834881734292, -0.07605132854932153, 0.08663781714543106, 0.007070415258084955, -0.6250636408689398, -0.01409543192211026, -0.013789323883618481, -0.0006247465341624277, 0.11072230324449975, -0.0696486820259974, 0.0913260399906128, 0.036708545137764025, -0.870227385341819, 0.015490001434157272, -0.020661997984103564, -0.01796957057292199, 0.07548240749652402, -0.0371822547908699, 0.06235138342154989, -0.019098348219666914, -0.5525076243981716, -0.032852742976330986, -0.013281401991552979, -0.0075621777812034125, 0.01349536123944298, 0.015543728579069868, 0.0434834197925715, -0.008985703718738958, -0.20369618043062118, -0.026774431713835957, 0.023839910245243266, -0.004129508207619212, 0.08071407642099278, -0.049067012114440874, 0.0831172052043574, 0.017089786718985988, -0.7473700956486061, -0.018503456537979864, -0.002868122655012947, -0.006368588885827752, 0.04029947790933656, 0.018996066019293257, 0.04360139939353218, 0.02361384701977835, -0.32434498118387306, 0.04939340896687723, 0.043671871909005816, 0.013649725270831815, 0.04710947441950293, -0.03270946331265953, 0.06424355572753929, 0.056193315435809015, -0.23426821363764241, -0.007019117747843949, 0.022099976611205017, 0.019990430794887184, 0.0662090322875239, -0.07665866454530183, 0.09055193340867439, -0.005121252319548354, -0.743323880774784, -0.011451342461766607, 0.004031184436368354, 0.03020896362517122, 0.05498128371152597, 0.018576014276333437, 0.025489798227992858, 0.0008629134481948045, -0.30743846999722163, -0.023421002838108922, -0.028071110448495244, 0.009086096335493926, 0.07872479311055394, -0.04628297806423784, 0.0827825756355454, -0.002588569797249203, -0.628591726726011, -0.00015959084212631652, -0.0015898812329268625, -0.04035688993526503, 0.0023555765885217646, -0.03495319097342008, 0.08453506512270391, -0.012079964545150493, -0.46112737387551045, 0.03533671507227772, -0.041617724705501916, -0.024914713944869122, 0.02633559313249303, -0.041556109109448146, 0.008302532392810869, 0.060057855058447865, -0.30674572127032396, 0.019648145959101162, 0.014339667743226668, -0.00521045151396621, 0.071143591393453, -0.06960306610831804, 0.08517006127743891, 0.010793572918946498, -0.6364385874671651, 0.0006634400860255061, 0.015329633356911492, -0.031117318744292407, 0.10343009854051884, -0.043815244575074595, 0.09758760466300022, 0.02339308179672285, -0.4635146574046582, -0.02995746522244088, 0.011063211722853052, -0.026883141483114048, 0.07613142461185182, -0.07878275353694185, 0.08821406627853919, -0.004978230372954451, -0.8021932685746704, -0.020839899363984955, -0.014056388917394018, -0.027357834353071965, 0.06152345802517524, -0.031926960965920174, 0.059040449881262905, 0.017277816955048746, -0.40128898736479307, 0.01567693277134128, 0.017873399752965355, -0.03015936056945982, 0.04434685113369365, -0.07120661527687644, 0.0757973278310973, 0.005572938094384801, -0.4336807417684207, 0.008009817533471098, 0.0012682008264253233, -0.025598926285703313, 0.07924655962073306, -0.06022802013142972, 0.09468733234181351, -0.00499198497922149, -0.7715266092395918, -0.019166385796251302, -0.004276053221642702]\n","[-0.09304673681410872, 0.01369347343400334, 0.05596455156318185, -0.07709654320341597, -0.11213412945158856, 0.002473338942182745, 0.01700405963147793, -0.018078442574154384, -0.1406835128090362, 0.08364702031900621, 0.1329196731864046, -0.09982407759744462, -0.36490742425325046, 0.0044275074468368295, 0.06439095833313134, -0.09975735602511426, -0.07734455306882641, 0.16843835863234982, 0.3137168800102185, -0.12227865041562548, -0.7907698467844122, 0.03381518870614487, 0.16170913819864816, -0.01980927001275199, -0.04718975873773639, 0.29027523372588976, 0.3719560376875465, -0.12391166639242941, -0.9258889180738207, 0.06282161535067644, 0.2014847409684739, 0.008146573347309434, -0.08779977817202231, 0.15631883814765096, 0.26208884266285976, -0.11425368000603882, -0.7288854424921598, 0.009948763139250902, 0.11179786388444078, -0.029086144695518748, 0.001521789976711183, 0.043734811966604906, 0.045837224577511174, -0.023447582919452786, -0.10642915234025978, 0.07133694533472286, 0.0716176608408775, 0.02998102351873068, -0.016815753441957983, 0.06692900501507464, 0.1437613517301507, -0.06969963424967641, -0.18067097686591607, -0.044613357163388385, 0.043717800209019074, -0.0707659000056265, 0.03384020917527738, 0.1568986984253892, 0.262388701533478, -0.047287276617661037, -0.673429004030146, 0.046244146548241515, 0.11335218565680207, -0.037883744094187446, 0.0007966176348781398, 0.19096425833115696, 0.287229122184191, -0.14944507035623406, -0.9684031827995925, -0.02228074111093913, 0.13687413985223806, -0.03870581940682615, 0.017493890694976526, 0.13927342065118362, 0.2062308947478947, -0.1097772400000583, -0.565547851841013, 0.01954500710359783, 0.14277509632734547, -0.014862612360411346, -0.014764451482913471, 0.051185062252419436, 0.0583176715915573, -0.056541887380675185, -0.12546896917472825, 0.020312892920045775, 0.017239068415018505, -0.051675552727490734, -0.027881659619303764, 0.03673435596875439, 0.14695613018211173, -0.06690512808677565, -0.24920393847625255, 0.03006622534992382, 0.07123841282021322, 0.00472135110185191, 0.02551393948618597, 0.15635963794032212, 0.27340877070658764, -0.08249863515226542, -0.6889064603508724, 0.01906250014382227, 0.1471462127736828, -0.01788360188207227, 0.031468752567505025, 0.14542837223041827, 0.3596704673004546, -0.10040200762597752, -0.7443420460407083, 0.011451744556718648, 0.13713582288836754, -0.002491643530529482, 0.03370139392544804, 0.15547834340538966, 0.22249894569120504, -0.1180956189576398, -0.6482003249102904, 0.029744822921740053, 0.09233211737614815, -0.04283871391978769, -0.0022665423767496322, 0.0054996347313397385, 0.04751593398036183, -0.024621760892365164, -0.013729336692975417, -0.006243447141451947, 0.011963099952361122, 0.02320060750911578, -0.06873960420192467, 0.05979112048918909, 0.13652883836425111, -0.0952011743887407, -0.28548844305775456, 0.008737107894538005, 0.04309773318586942, -0.023891392175231382, -0.07064038387849568, 0.1761530473814405, 0.28770068839830654, -0.09729150797168469, -0.694112842516643, 0.025323087727807385, 0.11683924362521443, 0.002183100722307066, -0.039691382988749725, 0.22920757521817017, 0.2806339597937096, -0.1090683682712169, -0.7925017630439674, 0.06251072567441397, 0.14070889730827904, 0.019206553098244837, -0.0863806274184776, 0.15170622500875847, 0.23377622385627392, -0.09918936883470794, -0.6110066751907465, 0.05376047928484123, 0.11296593261591577, -0.038729462054679746, -0.04750410661779251, 0.09460018684224994, 0.14838621616280195, -0.03967542519980537, -0.31572581321457704, -0.002525673466075051, 0.11648038802141071, 0.005173500707496446, -0.07121744930444301, 0.14317255947213273, 0.26496136846908536, -0.09144472667847965, -0.6688968956735176, 0.017821922795997616, 0.14382925470589022, -0.034878099493830576, -0.0352221497658211, 0.06357003563858922, 0.1469216781167673, -0.05532399994339348, -0.3389078953434331, 0.014204959743425824, 0.07478506446553457, -0.011701339254845605, -0.08153680373715876, 0.1099088413813103, 0.13839911495758625, -0.07141214393325983, -0.22361174225035557, 0.0497741033922425, 0.07851107918100593, 0.02718087239360769, -0.08354049157494962, 0.17313239679488068, 0.24181794711388035, -0.0880296744165693, -0.6965086526912315, 0.04193842370113837, 0.11726297430366034, -0.02082080181701975, -0.04791094878212796, 0.0837288551633372, 0.13350123896814584, -0.035137921178663635, -0.14347437077993047, 0.002306158087661647, 0.08533504460312138, 0.0006886549514631786, -0.03931144306474083, 0.15188945772497664, 0.20624125751031216, -0.08334603603615721, -0.607917906628185, 0.02779507223447566, 0.13187062915193198, -0.025968575423963663, -0.08750366913653651, 0.16414876772088727, 0.14409821866996322, -0.0008410335291898968, -0.37079881882608057, 0.09806797888951088, 0.040187376105431216, 0.015226701520656121, -0.0039999035290384805, 0.07613480822930083, 0.14355082079224035, -0.022234972365996846, -0.2865389796176102, 0.03716076072261147, 0.12954949883163616, -0.011356397972072699, -0.061570374455949095, 0.15239417866246718, 0.26738378278023783, -0.10700046106831891, -0.6219723838370097, 0.04049518739503178, 0.11812892931199079, 0.004888687485941452, 0.08955585248205006, 0.11339306293376157, 0.22714714063784258, -0.04562820818739405, -0.42472992791426906, -0.02633414386070596, 0.08707343028913313, -0.0009834098271806727, 0.024531437729011608, 0.18241455755154784, 0.314271481831587, -0.12109252709058684, -0.7836043398668474, 0.03549714627071718, 0.150184064293525, -0.021348578946116307, 0.032174218574982684, 0.09300284436282816, 0.23703619843869583, -0.06758198410087424, -0.4008049198321528, 0.040231433845914606, 0.03705381551229566, -0.007286066066052066, -0.0390531009055682, 0.07381638463336333, 0.16001515801548033, -0.06569219942292515, -0.48914843427229504, 0.05924917359889357, 0.08399399796007202, -0.03590296653724907, 0.03466181403773718, 0.199394540834207, 0.3054399802801851, -0.10463075296228132, -0.7679986410124774, 0.027278658703756835, 0.15848846111316237, -0.02513786310099685]\n","[-0.08058496794475616, -0.0007259263746526143, -0.1308164953706374, -0.04414329001872811, -0.07132691861708033, -0.046079665146781426, -0.2778830035608474, -0.07306383925213343, -0.13453251545463563, 0.06857536942230148, -0.15941961691974801, -0.18287692361957555, -0.08887810539382829, -0.0999036666856249, -0.6691936004013913, -0.05970124530020196, -0.1181589436269638, 0.15466668467132857, -0.3784573950858181, -0.3744400407439272, -0.13840965589321214, -0.11099383787507737, -1.2173869216087272, -0.0573299215790171, -0.048066980887673104, 0.2014874327458542, -0.46288568564160104, -0.43897854851360346, -0.15922650176019187, -0.07716530887614796, -1.5442099711736619, -0.05799770672743881, -0.11443662988361802, 0.12328077258279178, -0.30053922116769005, -0.3138063771530187, -0.12830588495688527, -0.11852843614760626, -1.0657885886069285, -0.06063974716536485, 0.012870765833741606, 0.027582796843982113, -0.0584941342555161, -0.019635377880378672, 0.017534448423601717, 0.02401243012960551, -0.12215427664111828, 0.01758593328003548, 0.02767399356199973, 0.010212557995024392, -0.12209917837430395, -0.09981460649137817, -0.10038622029369225, -0.03354026133328122, -0.16126054367986944, 0.010645421251949453, 0.03980463397630137, 0.1266213849272087, -0.2792488706772349, -0.289541079183131, -0.13480408047399373, -0.07295679477867521, -0.737363607710424, -0.05933751174095545, 0.0985913075764188, 0.10071182769658715, -0.3649074148133834, -0.3139194321098476, -0.17775364338034827, -0.1432752038047114, -1.3251258353072741, -0.006444576507644311, 0.07871146775617875, 0.1117333861939396, -0.21070856969750476, -0.2530237532074214, -0.10824815022818257, -0.0355066878286567, -0.971197025076539, -0.054925684436625044, 0.07098129411530524, 0.019380551492632094, -0.06436075345374538, 0.04101126884791258, -0.02843871579141383, 0.051190769918516496, -0.1543495099505436, 0.0467416649993375, 0.05873494805336663, 0.06396953812978709, -0.15427910754843543, -0.1429950379714676, -0.06994264553407302, 0.02522398738880659, -0.38687735842285464, 0.005339314737676571, 0.05262625590474318, 0.1441767734966863, -0.32565485513984643, -0.31970057841131316, -0.1240213205820614, -0.08468735286291965, -1.0895821439141882, -0.049966212626344535, 0.06744912656488422, 0.14538654976079576, -0.39847770389260356, -0.4341476362267185, -0.16893522583647688, -0.16856592710158344, -1.3755097079057172, -0.05152982634705525, 0.05070098363712087, 0.14338415453540873, -0.2747695855857424, -0.3333879128385714, -0.06360880516600213, -0.11996424570714262, -0.9525942617856167, -0.06390164257192585, 0.00841684277244167, 0.0023273463984805213, 0.03618954329845862, -0.01690074473177434, 0.007434065006468404, -0.021803256147058477, -0.1564816553066013, -0.03098943374021616, -0.04509632519161489, 0.0698713079921594, -0.11159876661436026, -0.18314566253705888, -0.09356673699841343, -0.0460734075140116, -0.32873320246454996, -0.03982268551975313, -0.07684445332280102, 0.1365607116271022, -0.35777925811399797, -0.40959363257288933, -0.12235962381367556, -0.09700347558658216, -0.9305051439480124, -0.04571373424443619, -0.09337845603646473, 0.19077559318920503, -0.43674606374130953, -0.4325518992569959, -0.17516661126251368, -0.16052305954700383, -1.446138379249244, -0.014214260569231895, -0.10003820363663002, 0.12392733394099087, -0.35100780916752583, -0.30499690590441175, -0.14611235663272099, -0.0684080124751109, -1.05674619256536, -0.039928945299021176, -0.03105492504360383, 0.13458603912342118, -0.14339226445723638, -0.15752046861991834, -0.0799421400151637, -0.061816959953702275, -0.5172524853480388, -0.017903618063372328, -0.07636798352535439, 0.15716968945680612, -0.31248059399289174, -0.31286879624640895, -0.11238372946437573, -0.0819903253315733, -1.1912652177019634, -0.02691991686676629, 0.04927982163053777, 0.08831892412542387, -0.2137630975669325, -0.12618451732057123, -0.033156885891455726, 0.05866266818030586, -0.6201818181501318, -0.01260243099505435, 0.00890771410990013, 0.03780092872491903, -0.12002122700451383, -0.21197666234561163, -0.05448994253911369, -0.035997783636538064, -0.47638927282215093, -0.02993833057129841, -0.09041805839089068, 0.14499553570806004, -0.2930952606141094, -0.3434959618185261, -0.12772975300274067, -0.10392365171979809, -1.1193994715430111, -0.012338896712851809, -0.048264939616997814, 0.06172182922119865, -0.20757417890368474, -0.008053286257737132, -0.09319043152913926, -0.04167259763451334, -0.5092519949146325, -0.019646122296224654, -0.05232928962592375, 0.1326705577576078, -0.28122876928483925, -0.2707721595889003, -0.08721046364996007, -0.05285839381332566, -0.7619502456027081, -0.029945024128044333, -0.056232918574908794, 0.11288122372965881, -0.1463153081438225, -0.17412613830347828, -0.07418869718470139, -0.02509995715973261, -0.3899376930978053, 0.024248431294990765, -0.03857362373618309, 0.08175789259374838, -0.17173875089661822, -0.1327088859445467, -0.01992408120184019, -0.005781903278731824, -0.2443432725451687, -0.049540284739212154, -0.05836065737517203, 0.13352932590318342, -0.23945518547573175, -0.300463128546831, -0.11038978820808498, -0.06495392699593422, -0.9675356085505772, -0.06449488720565646, 0.04182941616119851, 0.09031432119222664, -0.2086192503612635, -0.24275738100550517, -0.12175144870337011, -0.04242728483329145, -0.7175499393556525, -0.06639332766493516, 0.06703303035341945, 0.16108853833660666, -0.36129544756754073, -0.37804505898281465, -0.1359340431412226, -0.11127583065179578, -1.0289256208091675, -0.04560505071161228, 0.04654773403349152, 0.0701488086041406, -0.24526585094009867, -0.20912619082435585, -0.08906215512556442, -0.12729996074937863, -0.8312367301579102, -0.025733699520279103, 0.023929840140660366, 0.08859988689686368, -0.1594893046993073, -0.20843039777393987, -0.03473800388226263, -0.10737914812990616, -0.552163217363197, -0.048241773139776796, 0.05978569016017666, 0.1639196704574568, -0.3485888025514001, -0.36759639960931817, -0.13500159099110445, -0.1115581674617558, -1.1780027641522561, -0.05351893771387381]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bFuSPW3tiMqI","executionInfo":{"status":"ok","timestamp":1628916186036,"user_tz":-330,"elapsed":11,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"dcda59d5-f139-4edb-f111-ba19f965c0c2"},"source":["print(len(confidence_f_neg))\n","print(len(confidence_m_neg))\n","print(len(confidence_n_neg))\n","confidence_m_neg=[i for i in confidence_m_neg if i>0]\n","confidence_f_neg=[i for i in confidence_f_neg if i>0]\n","confidence_n_neg=[i for i in confidence_n_neg if i>0]\n","print(len(confidence_m_neg))\n","print(len(confidence_f_neg))\n","print(len(confidence_n_neg))"],"execution_count":25,"outputs":[{"output_type":"stream","text":["280\n","280\n","280\n","123\n","157\n","65\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_7_wp8hkiMxn","executionInfo":{"status":"ok","timestamp":1628916200238,"user_tz":-330,"elapsed":680,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"15b8a52d-49fa-455b-e9aa-70d33f70bd96"},"source":["print(len([i for i in confidence_m_neg if i>0.05]))\n","print(len([i for i in confidence_f_neg if i>0.05]))\n","print(len([i for i in confidence_n_neg if i>0.05]))"],"execution_count":26,"outputs":[{"output_type":"stream","text":["52\n","99\n","40\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IY7pfFLTiM8E","executionInfo":{"status":"ok","timestamp":1628916296804,"user_tz":-330,"elapsed":614,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"3c3f1993-c216-46ab-db69-74c63ea17b79"},"source":["import statistics\n","from statistics import mean\n","import numpy as np\n","print(\"Masculine Average Positive: \", round(mean(confidence_m_pos), 10),'±', round(np.std(confidence_m_pos),5))\n","print(\"Feminine Average Positive: \",mean(confidence_f_pos), '±', np.std(confidence_f_pos))\n","print(\"Neutral Average Positive: \",mean(confidence_n_pos), '±', np.std(confidence_n_pos))\n","print(\"Masculine Average Positive: \", sum(confidence_m_pos))\n","print(\"Feminine Average Positive: \", sum(confidence_f_pos))\n","print(\"Neutral Average Positive: \", sum(confidence_n_pos))\n","print('\\n')\n","print(\"Masculine Average Negative: \", mean(confidence_m_neg), '±', np.std(confidence_m_neg))\n","print(\"Feminine Average Negative: \",mean(confidence_f_neg), '±', np.std(confidence_f_neg))\n","print(\"Neutral Average Negative: \",mean(confidence_n_neg), '±', np.std(confidence_n_neg))\n","print(\"Masculine Sum Negative\", sum(confidence_m_neg))\n","print(\"Feminine Sum Negative\", sum(confidence_f_neg))\n","print(\"Neutral Sum Negative\", sum(confidence_n_neg))\n","print('\\n')\n","print(\"Masculine Average Neutral: \", mean(confidence_m_neu), '±', np.std(confidence_m_neu))\n","print(\"Feminine Average Neutral: \",mean(confidence_f_neu), '±', np.std(confidence_f_neu))\n","print(\"Neutral Average Neutral: \",mean(confidence_n_neu), '±', np.std(confidence_n_neu))\n","print(\"Masculine Sum Neutral: \", sum(confidence_m_neu))\n","print(\"Feminine Sum Neutral: \", sum(confidence_f_neu))\n","print(\"Neutral Sum Neutral: \", sum(confidence_n_neu))"],"execution_count":30,"outputs":[{"output_type":"stream","text":["Masculine Average Positive:  0.064521054 ± 0.8961\n","Feminine Average Positive:  0.2934323521303603 ± 1.1367153261094005\n","Neutral Average Positive:  -0.13143315665086608 ± 0.9839100823887943\n","Masculine Average Positive:  18.065895127186618\n","Feminine Average Positive:  82.16105859650091\n","Neutral Average Positive:  -36.8012838622425\n","\n","\n","Masculine Average Negative:  -0.059968943736998855 ± 0.20324282207785502\n","Feminine Average Negative:  -0.020835558573630838 ± 0.22505102894605747\n","Neutral Average Negative:  -0.16923688854721555 ± 0.2991247927259007\n","Masculine Sum Negative -16.791304246359672\n","Feminine Sum Negative -5.83395640061664\n","Neutral Sum Negative -47.38632879322035\n","\n","\n","Masculine Average Neutral:  0.008474225086183108 ± 0.0727541654070128\n","Feminine Average Neutral:  -0.023596977229764796 ± 0.11273395188790339\n","Neutral Average Neutral:  0.017504354795440515 ± 0.07763895631097183\n","Masculine Sum Neutral:  2.372783024131271\n","Feminine Sum Neutral:  -6.607153624334142\n","Neutral Sum Neutral:  4.901219342723345\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sH0-LkzviM_j","executionInfo":{"status":"ok","timestamp":1628916309150,"user_tz":-330,"elapsed":546,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"fcea23c9-ba16-4062-85a3-75988fd80b5c"},"source":["print(len([i for i in confidence_m_neg if i>0.1]))\n","print(len([i for i in confidence_f_neg if i>0.1]))\n","print(len([i for i in confidence_n_neg if i>0.1]))\n","print()\n","print(len([i for i in confidence_m_neg if i>0]))\n","print(len([i for i in confidence_f_neg if i>0]))\n","print(len([i for i in confidence_n_neg if i>0]))\n","print()\n","print(len([i for i in confidence_m_neg if i>0.05]))\n","print(len([i for i in confidence_f_neg if i>0.05]))\n","print(len([i for i in confidence_n_neg if i>0.05]))\n","print()\n","print(len([i for i in confidence_m_neg if i<-0.1]))\n","print(len([i for i in confidence_f_neg if i<-0.1]))\n","print(len([i for i in confidence_n_neg if i<-0.1]))\n","print()\n","print(len([i for i in confidence_m_neg if i<0]))\n","print(len([i for i in confidence_f_neg if i<0]))\n","print(len([i for i in confidence_n_neg if i<0]))\n","print()\n","print(len([i for i in confidence_m_neg if i<-0.05]))\n","print(len([i for i in confidence_f_neg if i<-0.05]))\n","print(len([i for i in confidence_n_neg if i<-0.05]))"],"execution_count":31,"outputs":[{"output_type":"stream","text":["7\n","71\n","20\n","\n","123\n","157\n","65\n","\n","52\n","99\n","40\n","\n","36\n","46\n","129\n","\n","157\n","123\n","215\n","\n","59\n","76\n","173\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C4IwHoayiNCw","executionInfo":{"status":"ok","timestamp":1628916315393,"user_tz":-330,"elapsed":9,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"0e1e15d7-5011-4b7a-f6d9-ee88dcb9336d"},"source":["print(len([i for i in confidence_m_pos if i>0]))\n","print(len([i for i in confidence_f_pos if i>0]))\n","print(len([i for i in confidence_n_pos if i>0]))\n","print()\n","print(len([i for i in confidence_m_pos if i>0.05]))\n","print(len([i for i in confidence_f_pos if i>0.05]))\n","print(len([i for i in confidence_n_pos if i>0.05]))\n","print()\n","print(len([i for i in confidence_m_pos if i<0]))\n","print(len([i for i in confidence_f_pos if i<0]))\n","print(len([i for i in confidence_n_pos if i<0]))\n","print()\n","print(len([i for i in confidence_m_pos if i<-0.05]))\n","print(len([i for i in confidence_f_pos if i<-0.05]))\n","print(len([i for i in confidence_n_pos if i<-0.05]))"],"execution_count":32,"outputs":[{"output_type":"stream","text":["156\n","232\n","113\n","\n","125\n","213\n","92\n","\n","124\n","48\n","167\n","\n","81\n","41\n","145\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LjaCNArKiNGX","executionInfo":{"status":"ok","timestamp":1628916319268,"user_tz":-330,"elapsed":530,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}}},"source":["import statistics\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import seaborn as sns\n","from matplotlib.pyplot import figure\n","plt.style.use('ggplot')"],"execution_count":33,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sqTeT1D_iNNb","executionInfo":{"status":"ok","timestamp":1628916321279,"user_tz":-330,"elapsed":11,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"92a8c623-7c58-4eb7-edf1-d4b90ac465f7"},"source":["print(\"Masculine Average Negative: \", mean(confidence_m_neg), '±', np.std(confidence_m_neg))\n","print(\"Feminine Average Negative: \",mean(confidence_f_neg), '±', np.std(confidence_f_neg))\n","print(\"Neutral Average Negative: \",mean(confidence_n_neg), '±', np.std(confidence_n_neg))\n","print(sum(confidence_m_neg))\n","print(sum(confidence_f_neg))\n","print(sum(confidence_n_neg))\n"],"execution_count":34,"outputs":[{"output_type":"stream","text":["Masculine Average Negative:  -0.059968943736998855 ± 0.20324282207785502\n","Feminine Average Negative:  -0.020835558573630838 ± 0.22505102894605747\n","Neutral Average Negative:  -0.16923688854721555 ± 0.2991247927259007\n","-16.791304246359672\n","-5.83395640061664\n","-47.38632879322035\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"3NqvxN4miNQt","executionInfo":{"status":"ok","timestamp":1628916325336,"user_tz":-330,"elapsed":620,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"4f23fa5d-c312-42e7-aedb-2db08e9a47cf"},"source":["sns.kdeplot(confidence_m_neg, shade=True, color='blue')\n","sns.kdeplot(confidence_n_neg, shade=True, color='yellow')\n","sns.kdeplot(confidence_f_neg, shade=True, color='green')"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f90f5ee3a10>"]},"metadata":{"tags":[]},"execution_count":35},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"1zrnPep2iNUr","executionInfo":{"status":"ok","timestamp":1628916355836,"user_tz":-330,"elapsed":842,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"b7bacd82-0fe0-4987-a170-d39286c81b53"},"source":["plt.xlim([-0.05, max(confidence_m_neg)+0.05])\n","plt.ylim([0, 100])\n","plt.hist(confidence_m_neg, bins=5, alpha=0.8)\n","plt.title(f'Plot of weightage of contribution of features')\n","plt.xlabel('Weightage')\n","plt.ylabel('Frequency')\n","\n","plt.show()"],"execution_count":37,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"4wwIO6WSiNb4","executionInfo":{"status":"ok","timestamp":1628916375791,"user_tz":-330,"elapsed":811,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"f79178d6-d00e-4d45-e7b5-9315a24eca03"},"source":["plt.xlim([-0.05, max(confidence_f_neg)+0.05])\n","plt.ylim([0, 100])\n","plt.hist(confidence_f_neg, bins=5, alpha=0.8)\n","plt.title(f'Plot of weightage of contribution of features')\n","plt.xlabel('Weightage')\n","plt.ylabel('Frequency')\n","\n","plt.show()"],"execution_count":38,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"b6aUhp74iNix","executionInfo":{"status":"ok","timestamp":1628916392750,"user_tz":-330,"elapsed":723,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"2dae157f-e5cd-4cbb-8300-6d0ca98163de"},"source":["plt.ylim([0, 100])\n","plt.xlim([-0.05, max(confidence_n_neg)+0.05])\n","plt.hist(confidence_n_neg, bins=5, alpha=0.8)\n","plt.title(f'Plot of weightage of contribution of features')\n","plt.xlabel('Weightage')\n","plt.ylabel('Frequency')\n","\n","plt.show()"],"execution_count":39,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAZEAAAEaCAYAAADQVmpMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deVhVBd4H8O/lsirLZREYXFBEA7S0QnBDUHmnUnuzpnIZS0rfKc0lzZJxnHQye2lxScUWU9yaSivMsbQGETRXFHcRRUnpFVlkF5Hl/t4/fDzjZdHLYblw/X6ex+fxnHvuOb/fOQe+nOWeqxERARERkQoWpi6AiIhaL4YIERGpxhAhIiLVGCJERKQaQ4SIiFRjiBARkWoMkWo0Gg02btxosuWfPHkSQUFBsLW1RefOnZttuWFhYZg4cWK93hMREYHw8PAmqsj0/vrXv8LDwwMajQZr1641dTlGq75dmno7qdl3mtLmzZvRtWtXaLVaRERE1Dlda92+LY7cR8aPHy8ABIBotVrp1KmTvPLKK5Kbm6tMA0A2bNhg9Dz37NkjACQ9Pb1Ranz88cdl6NChkp6eLtnZ2Y0yT2Ncu3ZNCgsL6/We8ePHy9ChQ+86zYIFC8Tb27sBlZnGgQMHBIBs2bJFMjMzpbS01GS11HcfKygokLy8PGXYmO1kjLq2pZp9p6lUVlaKvb29REZGyu+//y4FBQW1TteU21er1UpMTEyjza+lszRhfplESEgINm3ahMrKShw5cgQTJ05ERkYGfvzxR1OXBgA4f/48xo8f36xHIQDg4uLSrMtr6c6fPw8LCws89dRTpi7FaBUVFbCysoKTk1OzLrcl7TuZmZkoKSnBsGHD0L59+zqnay3b9/Y2bdFMnWLNqba/yN59912xsLBQ/hJBtSORK1euyKhRo8TJyUlsbW0lNDRUkpKSREQkPT1dObK5/S80NLTO5dd3XvPmzasxj9LSUrG2tpZffvlFGTdo0CCxtraW69evi4jI9evXxcrKSnbs2KFMs2zZMnnggQfExsZGfH195d1335WKigrl9dDQUJkwYYLBcv7nf/5HHB0dRafTyaRJkyQyMlK6du1aY31+9tln0qlTJ3FwcJAnn3xSrl69KiIiMTExdfb05ZdfSlBQkDg6Ooqrq6sMGzZMUlNTDXpNTk6W4OBgsba2Fl9fX9m0aZN4e3vLggULlGmKi4tl2rRp4uXlJXZ2dtK7d2/57rvv6twGt61du1b8/f3FyspK2rdvL3/729+U9XHnEevtf3UpLi6W6dOnS4cOHcTa2lq8vb1l4cKFyutnz56VYcOGSdu2baVt27YyYsQIOX/+vPJ6TEyMaLVa+fXXX+Xhhx8WOzs7eeSRR+TQoUMicvd97Pb6X7ZsmXh7e4tGo5HS0tIa+/nt4cWLFyvr6dlnn5Vr167VmOZOGzZsUHq/27asvu+Ul5fL7NmzxcvLS6ysrMTf31++/PJLg3kDkOjoaBk3bpzY29tL+/bt5b333rvndtu/f7+EhISIra2t6HQ6GTNmjGRlZdVZ465du2rM427b96uvvpJevXqJjY2NeHt7y4wZM6SkpER5/ZdffpHQ0FBxdnYWR0dHGTRokBw8eFB53dvbu9Z5397Od8rIyDCocdeuXQJAtm3bJgMGDBAbGxtZuXKliNz753fLli3Su3dvsbOzEycnJ+nTp48kJyffc302hvs+RBYtWiQApKioSEQMQ0Sv10tQUJD06tVL9uzZIydOnJDnn39edDqd5OTkSGVlpfzwww8CQA4dOiSZmZkGP5h3MmZemZmZ0qFDB5k9e7ZkZmZKcXFxrfMKCQmRyMhIEflPqLRr105+/vlnERHZsWOHWFlZKaEyb9486dSpk3z//fdy8eJF+fHHH6Vjx44yd+5cZZ7VfxFMnTpV3N3d5YcffpCzZ89KZGSkODo61ggRR0dHGT16tJw8eVL27dsnnTt3lnHjxim1zZ49Wzp06CCZmZkGPa1Zs0a2bt0qaWlpkpycLE8++aT4+vrKzZs3ReRWEHp6esqIESPk+PHjsn//funXr5/Y2dkpIaLX6yUsLExCQ0Nlz549cuHCBfnss8/EyspK4uLi6twPtm3bJhYWFvLee+9JamqqfP3116LT6ZT1UVBQIEuXLhWtVqvUXdc2DQ0NlS5dukhsbKxcuHBBEhMT5fPPP1f679SpkwwZMkQOHz4shw8flrCwMOnatavSZ0xMjGg0GgkJCZHdu3dLSkqKPP7449K5c2epqKi46z42fvx4cXBwkJEjR8qxY8fkxIkTUllZWWuI3A74EydOyK5du8TX11dGjhxpMM3dQuRu27L6vjNr1ixxcXGRTZs2SWpqqixcuFA0Go3BNgEg7u7u8vnnn0taWpqsWLFCANx1u2VmZoqDg4OMGTNGTpw4IXv27JEHH3xQQkJClBoPHTokAOSHH36QzMxMZT3fqa7tGxMTIzqdTtavX69sywcffFDZn0VEvv/+e/nmm2/k7NmzcurUKZkwYYI4Ozsrp8Szs7NFq9XK0qVLa8zb2BB54IEHZOvWrXLx4kXJyMi4589vZmamWFlZyfvvvy8XL16UM2fOyJdffiknTpyoc102pvs6RE6fPi0+Pj4SHBysjLszROLi4gSAnD59Wnm9rKxMPD095R//+IeIGH++2ph5iUiNv7RrM2/ePOnTp4+I3PrLyMfHRyZNmiSzZ88WEZG33npLBg4cKCK3fhnb2dnJ9u3bDeaxbt06cXJyUobv/EVQUlIi1tbW8sUXXxi8Jzg4uEaItGvXTsrKypRxUVFR4unpqQwbe03k2rVrAkB+/fVXERH5/PPPpW3btgbntFNSUgSAsn527dolNjY2Nc57v/TSS/LUU0/VuayBAwfKc889ZzBu6dKlYmtra/DLvfoPfXW3t+nto8nqvvjiC7Gzs5OcnBxl3NWrV8XW1lbWrVunLAeAHDlyRJnm9vn6s2fPikjd+9j48ePFycmpxh8btYVI9XX5888/CwDlqOheISJS97a8c9+5fv26WFtbS3R0tME0I0eOlMGDByvDAGTq1KkG0/j5+Sl/HNVm7ty50r59e4NgOHbsmACQxMREEfnPkduePXvqnI9I7dvX29tbPvnkE4NxiYmJAsDgGtOdqqqqRKfTycaNG5VxtV0TqU+IrF+/XpnGmJ/f5OTkRr0uW1/33d1ZCQkJsLe3h52dHXr27AkfHx/885//rHXa06dPw9XVFQEBAco4GxsbBAcH4/Tp0/VabmPOa/DgwUhOTkZhYSHi4+MxdOhQDB48GPHx8QCA+Ph4DBkyRFnujRs38Kc//Qn29vbKv1deeQWFhYXIycmpMf+0tDSUl5ejb9++BuP79etXY1o/Pz/Y2Ngow15eXsjKyrpnD8eOHcPTTz+NLl26wMHBAZ06dQIAXLp0CQBw5swZ+Pv7G5zf9/Pzg06nU4aTkpJQXl6O9u3bG/S2ceNGnD9/vs5lnz59GoMGDTIYFxoairKyMly4cOGetd925MgRODs7IzAwsM7lBAQEwM3NTRnn4eGBBx54wGCbazQa9OrVSxn28vICAKPWo7+/P+zt7e85XUBAgMG6HDBgAIBb67kx3d53alu/1ffz3r17Gwzfa985ffo0+vbtC2tra2Vcr1694OTkVO+foepycnJw6dIlzJw502BfeuKJJ5S+ACA9PR0vvPACfH194ejoCEdHRxQWFir7bWMICgpS/m/Mz+9DDz2Exx57DD179sTTTz+Njz/+GBkZGY1Wz73cdxfWg4ODsW7dOlhaWsLLy8tgh2wt+vXrB2trayQkJCA+Ph4zZszA4MGDMXbsWFy6dAlHjx7FRx99BADQ6/UAbt322L179xrzuttFUY1Gc89aqq8/jUYDuceDoUtLS/HHP/4RAwcORExMDDw8PAAAPXr0QHl5udHL1+v1cHJyQlJS0j3rasksLCyg1WqV4dt93952d9O2bdtGq6H6dquoqGiUedeltn3HmJ6bwu3lfvzxxxg8eHCN1zt06AAAGDFiBNzc3BAdHY2OHTvC2toaAwcONNhva2NhUfPv9brW753b1JifX61Wi+3btyMpKQlxcXH47rvvEBkZic2bN2PEiBF3rasx3HdHInZ2dvD19UXnzp3v+YumR48euHbtmsFfazdv3sTBgwfRs2dPAP/5QaiqqmrwvIxlbW2N/v37IzY2FsnJyRgyZAjc3NwQEBCAd955B9bW1spRQ48ePWBra4uLFy/C19e3xr87f3nd5uvrC2tra+zfv99g/IEDB+pV5+1aq6+blJQU5OTkYOHChQgLC4O/vz/y8/MNfokFBAQgJSUFhYWFyrjU1FQUFBQow4GBgSgoKEBZWVmNvm4f2dSmR48e2L17t8G4xMRE2NnZoWvXrkb39uijjyI/Px+HDx+uczlnzpxBbm6uMi4rKwupqan12ubG7mN3k5KSgqKiImV43759AKAcGbu7u+PKlSsG70lOTq5Rx71q8PX1hY2NTa3rt777eXU9evTAgQMHDH5hHz9+HIWFhQ2et4eHBzp27IjU1NRaf05sbW2Vn9/IyEg89thjCAgIgK2tLbKzsw3mVdt6cnd3R1VVlcGRVvX1W1fPxvz8ajQaBAUFYc6cOdi9ezdCQ0MRExPToHVirPsuROpjyJAhCAoKwtixY7F3716cOnUKL774IsrKyjBp0iQAgLe3NywsLPDTTz8hOzvb4JdefedV39q+/PJL+Pn5wd3dXRm3fv16DBgwQPnFY29vjzlz5mDOnDmIjo5GamoqTp8+ja+//hqzZ8+udd5t27bFK6+8grlz52Lbtm04d+4c/va3vyElJcWoo5M7denSBVevXsX+/fuRm5uL0tJSeHt7w8bGBsuXL8eFCxewc+dOTJ8+3WDef/7zn2Fvb48XX3wRJ06cwMGDBzFhwgTY2dkp0w0ZMgTh4eF45plnsGXLFly8eBFHjhzB8uXLsWrVqjpr+utf/4rvvvsOUVFROHfuHDZt2oT58+fjjTfeqNcRzJAhQxASEoJRo0bhhx9+QHp6Ovbu3YsvvvgCADB27Fi0a9cOo0aNQnJyMo4cOYLRo0ejffv2GDVqlNHLMXYfuxuNRoMXX3wRp06dwu7du/Haa6/hv//7v+Hr6wsACA8Px9mzZxEdHY0LFy5g1apV2LRpk8E8atuW1bVp0wbTpk3D3//+d2zevBnnzp3De++9hx9++AFz5sypd913mjJlCoqKihAREYFTp07h119/xQsvvICQkBCEhIQ0aN4AsHDhQixbtgwLFy7EqVOnkJqaii1btuCVV14BADg7O6Ndu3ZYtWoVzp07h/3792PMmDGws7MzmE+XLl2wa9cuXLlyRfkDIigoCA4ODoiMjMT58+exY8cOvPPOO/esyZif33379mHBggU4ePAgLl++jJ07d+LEiRMGp86blEmuxJiIMR+6wj1u8R00aFCNC6nvv/++eHl5iYWFRb1u8a1tXsZcWBcR2bdvnwCQadOmKeO2bt0qAGq9VXLVqlXKrYs6nU6CgoKU2wdF6r7F18HBQZycnGTSpEkyffp06dmzpzKNMRdjy8vLZcyYMeLs7GxwW+jmzZvF19dXbGxspHfv3pKQkFDjgmT1W3w3b94s7dq1k48++sigztmzZ0vnzp3FyspKPDw85LHHHpOdO3fedf2tXbtW/Pz8xMrKSry8vGTOnDkGt0wac2FdRKSoqEimTJkinp6eYmVlJZ07d5b//d//VV4/e/asPPHEE8otvsOHD6/1Ft87Vb/gKlL7PlbX/lzXLb4ffviheHp6ip2dnTzzzDMGH7IVuXW7u5eXl7Rt21ZGjx6t3DF1W13bUu0tvtU/1Dt06FAZP358LWv5P+68xdfJycngFl+Rhl1YFxGJjY2Vvn37ip2dnTg4OEivXr0MbnxJSEiQhx56SGxsbKR79+7y7bffSteuXQ1ux9++fbuyb925/rZt2yZ+fn5ia2sr/fv3lx07dtR6YT0jI6NGXXf7+T116pQ88cQT4uHhIdbW1tKpUyeZNWtWrXemNQWNCL/ZkIwzZMgQODs747vvvjPJ8i9duoTOnTtj69atePLJJ01SAxEZuu8urJNxTp48ieTkZPTr1w/l5eXYsGEDdu3ahe3btzdbDRs3bkT79u3RpUsXXLp0CW+99Ra8vb3xxz/+sdlqIKK7a5YQWblyJZKTk+Hk5IRFixYBAEpKSrBkyRLk5OSgXbt2mDFjBuzt7SEiiImJwdGjR2FjY4PJkyfDx8enOcqkO2g0GnzyySeYNm0a9Ho9/Pz8EBsbi8cff7zZarh27RrmzZuH//u//4OLiwsGDBiAzZs3G9xSTESm1Syns86cOQNbW1tER0crIbJx40bY29tj5MiR2LJlC0pKSjBu3DgkJydjx44d+Otf/4rz589j7dq1eO+995q6RCIiUqFZ7s4KCAio8YGopKQkhIaGArj1QaTb9/ofPnwYgwYNgkajQffu3XH9+nXk5+c3R5lERFRPJrsmUlhYCGdnZwCATqdTblvMy8sz+ISvq6sr8vLylGnvFBcXh7i4OABAVFRUM1RNRER3ahEX1jUaTb0/fwDcurf9zi/byZg8ujHLalEsLS1RWVlp6jKahDn3Bph3f+bcG3CrP4n8wNRlNAk3Nzfk5uYqj9lRy2QfNnRyclJOU+Xn58PR0RHArY/x3/kJ32vXrrWo7ysgIqL/MFmIBAYGIjExEcCtRyL06dNHGb97926ICM6dO4c2bdrUeiqLiIhMr1lOZy1duhRnzpxBcXExXn31VTz//PMYOXIklixZgvj4eOUWXwB4+OGHkZycjGnTpsHa2hqTJ09ujhKJiEgFs/rEOq+JtE7m3Btg3v2Zc28Ar4kYgw9gJCIi1RgiRESkGkOEiIhUY4gQEZFqDBEiIlKNIUJERKoxRIiISDWGCBERqcYQISIi1RgiRESkGkOEiIhUY4gQEZFqDBEiIlKNIUJERKoxRIiISDWGCBERqcYQISIi1RgiRESkGkOEiIhUY4gQEZFqDBEiIlKNIUJERKoxRIiISDWGCBERqcYQISIi1RgiRESkGkOEiIhUY4gQEZFqDBEiIlKNIUJERKoxRIiISDWGCBERqcYQISIi1RgiRESkGkOEiIhUszR1Adu2bUN8fDw0Gg06duyIyZMno6CgAEuXLkVxcTF8fHwwdepUWFqavFQiIqrGpEcieXl52L59O6KiorBo0SLo9Xrs27cPGzduxPDhw7F8+XK0bdsW8fHxpiyTiIjqYPLTWXq9HuXl5aiqqkJ5eTl0Oh1Onz6Nvn37AgDCwsKQlJRk4iqJiKg2Jj1H5OLigieffBKTJk2CtbU1evXqBR8fH7Rp0wZarVaZJi8vr9b3x8XFIS4uDgAQFRVl1qe8NBqYbX/m3Btg3v2Zc2/Arf5c3dxMXUaTsLS0hFsj9GbSrV9SUoKkpCRER0ejTZs2WLx4MY4dO2b0+8PDwxEeHq4MV1ZWNkWZLYKlpaXZ9mfOvQHm3Z859wbc6i83N9fUZTQJNzc35ObmwsvLq0HzMWmInDx5Eu7u7nB0dAQABAcHIzU1FaWlpaiqqoJWq0VeXh5cXFxMWSYREdXBpNdE3NzccP78edy8eRMigpMnT6JDhw7o0aMHDhw4AABISEhAYGCgKcskIqI6mPRIpFu3bujbty9mz54NrVaLzp07Izw8HI888giWLl2Kr7/+Gl26dMGQIUNMWSYREdVBIyJi6iIaS8bk0aYuocmY87lnc+4NMO/+zLk34FZ/EvmBqctoEo11TcTkt/gSEVHrxRAhIiLVGCJERKQaQ4SIiFRjiBARkWoMESIiUo0hQkREqjFEiIhINYYIERGpxhAhIiLVGCJERKQaQ4SIiFRjiBARkWoMESIiUo0hQkREqjFEiIhINYYIERGpxhAhIiLVGCJERKQaQ4SIiFRjiBARkWoMESIiUo0hQkREqjFEiIhINYYIERGpxhAhIiLVGCJERKQaQ4SIiFRjiBARkWoMESIiUo0hQkREqjFEiIhINaNDJCkpCVVVVU1ZCxERtTJGh8imTZvwl7/8BatXr8b58+ebsiYiImolLI2d8MMPP8Rvv/2GPXv2YNGiRbCxscGgQYMQEhICd3d31QVcv34dn376KTIyMqDRaDBp0iR4eXlhyZIlyMnJQbt27TBjxgzY29urXgYRETUNjYhIfd8kIjh58iQ2bNiAy5cvw8/PD+Hh4RgwYAAsLOp3mWXFihXw9/fH0KFDUVlZiZs3byI2Nhb29vYYOXIktmzZgpKSEowbN+6e88qYPLq+rbQalpaWqKysNHUZTcKcewPMuz9z7g241Z9EfmDqMpqEm5sbcnNz4eXl1aD51PvC+tWrV/Htt9/iiy++QHl5OUaNGoWhQ4dix44dWLx4cb3mVVpaipSUFAwZMgTArQ3Wtm1bJCUlITQ0FAAQGhqKpKSk+pZJRETNwOjTWTt27MCePXuQmZmJ/v37Y8qUKejevbvyenBwMCZOnFivhWdnZ8PR0RErV67EpUuX4OPjg4iICBQWFsLZ2RkAoNPpUFhYWOv74+LiEBcXBwCIioqCpaXR7bQ6Gg3Mtj9z7g0w7/7MuTfgVn+ubm6mLqNJWFpawq0RejN66x87dgwjRoxAYGAgrKysarxuY2ODWbNm1WvhVVVVSE9Px8svv4xu3bohJiYGW7ZsMZhGo9FAo9HU+v7w8HCEh4crw+Z+WG2u/Zlzb4B592fOvQG3+svNzTV1GU2i2U9nzZw5E3369DEIkMrKSlRUVCjDvXr1qtfCXV1d4erqim7dugEA+vbti/T0dDg5OSE/Px8AkJ+fD0dHx3rNl4iImofRIbJw4UJcvHjRYNzFixexcOFC1QvX6XRwdXXFlStXAAAnT55Ehw4dEBgYiMTERABAYmIi+vTpo3oZRETUdIw+nXXp0iXliOE2X19fXLp0qUEFvPzyy1i2bBkqKyvh7u6OyZMnQ0SwZMkSxMfHK7f4EhFRy2N0iLRt2xaFhYXQ6XTKuMLCQtjY2DSogM6dOyMqKqrG+LfffrtB8yUioqZn9Oms4OBgfPzxx7h8+TJu3ryJy5cvY8WKFejXr19T1kdERC2Y0Ucio0ePxvr16zFnzhxUVFTA2toaYWFhGDNmTFPWR0RELZjRIWJtbY2JEydiwoQJKC4uhoODQ5233hIR0f2hXp8SKi0txZUrV1BWVmYwvmfPno1aFBERtQ5Gh0hCQgJWr14NW1tbWFtbK+M1Gg1WrFjRJMUREVHLZnSIfPXVV5g5cyYefvjhpqyHiIhaEaPvztLr9fX+RDoREZk3o0PkqaeewnfffQe9Xt+U9RARUSti9OmsH3/8EQUFBdi6dWuNL4j65JNPGr0wIiJq+YwOkalTpzZlHURE1AoZHSIBAQFNWQcREbVCRodIRUUFvv32W+zduxfFxcVYt24djh8/jszMTDz++ONNWSMREbVQRl9YX7duHTIyMjBt2jTlk+odO3bEL7/80mTFERFRy2b0kcihQ4ewbNky2NraKiHi4uKCvLy8JiuOiIhaNqOPRCwtLWvc3ltUVAQHB4dGL4qIiFoHo0Okb9++WLFiBbKzswHc+tra1atXo3///k1WHBERtWxGh8jYsWPh7u6ON954A6WlpZg2bRqcnZ3x3HPPNWV9RETUghl9TcTS0hIRERGIiIhQTmPxUfBERPc3o0MkKyvLYPjGjRvK/z08PBqvIiIiajWMDpFp06bV+do333zTKMUQEVHrYnSIVA+KgoICbN68Gf7+/o1eFBERtQ5GX1ivTqfTISIiAv/85z8bsx4iImpFVIcIAFy5cgU3b95srFqIiKiVMfp01ttvv21wN9bNmzeRkZGBZ599tkkKIyKils/oEBkyZIjBsK2tLby9vfGHP/yh0YsiIqLWwegQCQsLa8IyiIioNVJ9d1ZdRo0apboYIiJqXYwOkczMTBw8eBC+vr5wc3NDbm4u0tLSEBwcDGtr66askYiIWiijQwQApk+fjr59+yrDBw8exP79+zF58uRGL4yIiFo+o2/xPXr0KIKCggzGBQYG4ujRo41eFBERtQ5Gh4inpyd27NhhMO6XX36Bp6dnoxdFREStg9Gns1599VV89NFH2Lp1q/KNhlqtFm+88UZT1kdERC2Y0SHSpUsXfPzxxzh//jzy8/Oh0+nQvXt3WFrW67IKERGZEdWPPQkICEBlZSXKysoasx4iImpFjD6MuHz5Mt5//31YWVnh2rVr6N+/P86cOYPExETMmDGjKWskIqIWyugjkVWrVmHUqFFYunSpcgorICAAZ8+ebXARer0eb731FqKiogAA2dnZmDNnDqZOnYolS5agsrKywcsgIqLGZ3SI/P777wgJCTEYZ2tri/Ly8gYX8dNPP6F9+/bK8MaNGzF8+HAsX74cbdu2RXx8fIOXQUREjc/oEGnXrh0uXrxoMC4tLa3Bt/heu3YNycnJGDp0KABARHD69GnlQ41hYWFISkpq0DKIiKhpGH1NZNSoUYiKisJ//dd/obKyErGxsfj3v/+NV155pUEFrF27FuPGjVO+s724uBht2rSBVqsFAOV24trExcUhLi4OABAVFWXWd4ppNDDb/sy5N8C8+zPn3oBb/bm6uZm6jCZhaWkJt0bozeit/+ijj2LOnDnYuXMnAgICkJOTg1mzZsHHx0f1wo8cOQInJyf4+Pjg9OnT9X5/eHg4wsPDlWFzvnZiaWlptv2Zc2+Aefdnzr0Bt/rLzc01dRlN4vYzEL28vBo0H6NCRK/XY/r06Vi8eDEmTpzYoAXeKTU1FYcPH8bRo0dRXl6OGzduYO3atSgtLUVVVRW0Wi3y8vLg4uLSaMskIqLGY1SIWFhYwMLCAhUVFbCysmq0hY8dOxZjx44FAJw+fRr/+te/MG3aNCxevBgHDhzAgAEDkJCQgMDAwEZbJhERNR6jL6wPGzYMS5YswZkzZ3D16lVkZWUp/xrbn//8Z2zbtg1Tp05FSUlJjW9VJCKilkEjInK3CQoKCqDT6e76ZVPGfmFVU8uYPNrUJTQZcz73bM69Aebdnzn3BtzqTyI/MHUZTaLZrolMnz4d69atU4Liww8/xJtvvtmghRIRkXm45+ms6myHHsoAABAlSURBVAcqZ86cabJiiIiodblniGg0muaog4iIWqF7ns6qqqrCqVOnlGG9Xm8wDAA9e/Zs/MqIiKjFu2eIODk54ZNPPlGG7e3tDYY1Gg1WrFjRNNUREVGLds8QiY6Obo46iIioFVL9pVREREQMESIiUo0hQkREqjFEiIhINYYIERGpxhAhIiLVGCJERKQaQ4SIiFRjiBARkWoMESIiUo0hQkREqjFEiIhINYYIERGpxhAhIiLVGCJERKQaQ4SIiFRjiBARkWoMESIiUo0hQkREqjFEiIhINYYIERGpxhAhIiLVGCJERKQaQ4SIiFRjiBARkWoMESIiUo0hQkREqjFEiIhINUtTLjw3NxfR0dEoKCiARqNBeHg4hg0bhpKSEixZsgQ5OTlo164dZsyYAXt7e1OWSkREtTBpiGi1Wrzwwgvw8fHBjRs3EBkZiYceeggJCQl48MEHMXLkSGzZsgVbtmzBuHHjTFkqERHVwqSns5ydneHj4wMAsLOzQ/v27ZGXl4ekpCSEhoYCAEJDQ5GUlGTKMomIqA4mPRK5U3Z2NtLT0+Hr64vCwkI4OzsDAHQ6HQoLC2t9T1xcHOLi4gAAUVFRsLRsMe00Oo0GZtufOfcGmHd/5twbcKs/Vzc3U5fRJCwtLeHWCL21iK1fVlaGRYsWISIiAm3atDF4TaPRQKPR1Pq+8PBwhIeHK8OVlZVNWqcpWVpamm1/5twbYN79mXNvwK3+cnNzTV1Gk3Bzc0Nubi68vLwaNB+T351VWVmJRYsWISQkBMHBwQAAJycn5OfnAwDy8/Ph6OhoyhKJiKgOJg0REcGnn36K9u3bY8SIEcr4wMBAJCYmAgASExPRp08fU5VIRER3YdLTWampqdi9ezc6deqEN998EwAwZswYjBw5EkuWLEF8fLxyiy8REbU8Jg0RPz8/bNq0qdbX3n777WauhoiI6svk10SIiKj1YogQEZFqDBEiIlKNIUJERKoxRIiISDWGCBERqcYQISIi1RgiRESkGkOEiIhUY4gQEZFqDBEiIlKNIUJERKoxRIiISDWGCBERqcYQISIi1RgiRESkGkOEiIhUY4gQEZFqDBEiIlKNIUJERKoxRIiISDWGCBERqcYQISIi1RgiRESkGkOEiIhUY4gQEZFqDBEiIlKNIUJERKoxRIiISDWGCBERqcYQISIi1RgiRESkGkOEiIhUY4gQEZFqDBEiIlLN0tQF1OXYsWOIiYmBXq/H0KFDMXLkSFOXRERE1bTIIxG9Xo/Vq1djzpw5WLJkCfbu3Yvff//d1GUREVE1LTJE0tLS4OnpCQ8PD1haWqJ///5ISkoydVlERFRNizydlZeXB1dXV2XY1dUV58+frzFdXFwc4uLiAABRUVHouPLrZquRiKi18/LyavA8WuSRiLHCw8MRFRWFqKgoREZGmrqcJmXO/Zlzb4B592fOvQHm3V9j9dYiQ8TFxQXXrl1Thq9duwYXFxcTVkRERLVpkSHStWtXZGZmIjs7G5WVldi3bx8CAwNNXRYREVWjnT9//nxTF1GdhYUFPD09sXz5cuzYsQMhISHo27fvPd/n4+PTDNWZjjn3Z869Aebdnzn3Bph3f43Rm0ZEpBFqISKi+1CLPJ1FREStA0OEiIhUa5GfE6lLSUkJlixZgpycHLRr1w4zZsyAvb19jekSEhLw/fffAwCeeeYZhIWFAQDmz5+P/Px8WFtbAwDmzp0LJyenZqu/Nvd6vEtFRQVWrFiBixcvwsHBAa+//jrc3d0BALGxsYiPj4eFhQVeeukl9O7d2xQt3JXa/rKzszFjxgzlPvZu3brhL3/5iylaqNO9ejtz5gzWrVuHS5cu4fXXXze4rlfXPtqSNKS/UaNGoVOnTgAANzc3zJ49u1lrv5d79bZt2zbs3LkTWq0Wjo6OmDRpEtq1awfAPLbd3fqr97aTVmTDhg0SGxsrIiKxsbGyYcOGGtMUFxfLa6+9JsXFxQb/FxGZN2+epKWlNWvNd1NVVSVTpkyRq1evSkVFhcyaNUsyMjIMptmxY4d89tlnIiLy66+/yuLFi0VEJCMjQ2bNmiXl5eWSlZUlU6ZMkaqqqmbv4W4a0l9WVpbMnDmz2Ws2ljG9ZWVlyW+//SbLly+X/fv3K+Pvto+2FA3pT0Rk3LhxzVluvRjT28mTJ6WsrExERH7++WdlvzSXbVdXfyL133at6nRWUlISQkNDAQChoaG1Pgrl2LFjeOihh2Bvbw97e3s89NBDOHbsWHOXahRjHu9y+PBh5S+dvn374tSpUxARJCUloX///rCysoK7uzs8PT2RlpZmgi7q1pD+WjpjenN3d4e3tzc0Go3B+Nawjzakv5bOmN569uwJGxsbALeOgvPy8gCYz7arqz81WtXprMLCQjg7OwMAdDodCgsLa0xT/ZEpLi4uBito5cqVsLCwQHBwMP70pz+Z9AfAmMe73DmNVqtFmzZtUFxcjLy8PHTr1k2ZrnqfLUFD+gOA7OxsvPXWW7Czs8Po0aPh7+/ffMXfg7GP5jHmva11291NRUUFIiMjodVq8dRTTyEoKKgpylSlvr3Fx8crp4rNcdvd2R9Q/23X4kJkwYIFKCgoqDF+9OjRBsMajabeATBt2jS4uLjgxo0bWLRoEXbv3q0c2VDL4uzsjJUrV8LBwQEXL17Ehx9+iEWLFqFNmzamLo2MsHLlSri4uCArKwvvvPMOOnXqBE9PT1OXVW+7d+/GxYsX0QI/TtcoauuvvtuuxYXI3//+9zpfc3JyQn5+PpydnZGfnw9HR8ca07i4uODMmTPKcF5eHgICApTXAMDOzg4DBw5EWlqaSUPEmMe73J7G1dUVVVVVKC0thYODQ4335uXltbhHwzSkP41GAysrKwC3PhDl4eGBzMxMdO3atVl7qEtDHs1zt320pWjoo4duT+vh4YGAgAD89ttvLSZEjO3txIkTiI2Nxfz585V90Zy2XW393X4/YPy2a1XXRAIDA5GYmAgASExMRJ8+fWpM07t3bxw/fhwlJSUoKSnB8ePH0bt3b1RVVaGoqAgAUFlZiSNHjqBjx47NWn91xjze5dFHH0VCQgIA4MCBA+jRowc0Gg0CAwOxb98+VFRUIDs7G5mZmfD19TVBF3VrSH9FRUXQ6/UAgKysLGRmZsLDw6O5W6hTQx7NU9c+2pI0pL+SkhJUVFQAAIqKipCamooOHTo0Zbn1Ykxv6enpWLVqFd566y2DOzjNZdvV1Z+abdeqPrFeXFyMJUuWIDc31+AW3wsXLuDf//43Xn31VQC3zvHFxsYCuHUL3uDBg1FWVoZ58+ahqqoKer0eDz74IMaPHw8LC9PmaHJyMtatWwe9Xo/BgwfjmWeewTfffIOuXbsiMDAQ5eXlWLFiBdLT02Fvb4/XX39d+WX6/fffY9euXbCwsEBERAQefvhhk/ZSG7X9HThwAJs2bYJWq4WFhQWee+65Fvf8tHv1lpaWho8++gjXr1+HlZUVdDodFi9eDKD2fbSlUdtfamoqPv/8c1hYWECv12P48OEYMmSIqdsxcK/eFixYgMuXL0On0wEwvNXVHLZdXf2p2XatKkSIiKhlaVWns4iIqGVhiBARkWoMESIiUo0hQkREqjFEiIhINYYIUT3s2bMH7777rlHTJiQk3PXDs0TmgCFC94XY2Fi89957BuOmTZtW67i9e/fWOZ+QkBDMnTu3UWqaP38+du7c2SjzIjIVhgjdF/z9/ZGamqp8Cj4/Px9VVVVIT083GHf16tUW9aBHopauxT07i6gp+Pr6oqqqCr/99ht8fHyQkpKCHj16ICsry2Cch4cHbG1t8cknn+Do0aPQaDQYPHgwnn/+eVhYWCAhIQE7d+7EggULAADHjx/HmjVrUFBQgJCQEGRkZGDQoEEYOnSosuz169dj165daNOmDSZOnIiHH34YX331FVJSUnD+/HmsXbsWYWFhmDBhAmJiYnDo0CGUlpbC09MTERERSqiVl5fj888/x5EjR6DT6RAWFobt27fj008/BXDrOU5r1qxBSkoKbG1tMXz4cAwbNqz5VzbdV3gkQvcFS0tLdOvWTXl4XkpKCvz8/ODn52cwzt/fH9HR0dBqtVi2bBk++OADHD9+vNbTTkVFRVi8eDHGjh2LNWvWwMvLC+fOnTOYJi0tDV5eXli9ejWeeuopfPrppxARjBkzBv7+/nj55ZexYcMGTJgwAcCt5x598MEHWLNmDQYOHIjFixejvLwcALB582bk5ORg+fLlmDt3Lvbs2aMsR6/X4/3330fnzp3x2Wef4e2338ZPP/3U4r7rgswPQ4TuG/7+/khJSQEAnD17Fv7+/jXGBQQE4OjRo4iIiICtrS2cnJwwfPhw7Nu3r8b8jh49ig4dOiA4OBharRZPPPGE8iyi29zc3BAeHg4LCwuEhoYiPz+/1u/BuW3QoEFwcHCAVqvFk08+icrKSly5cgUAsH//fjz99NOwt7eHq6srnnjiCeV9Fy5cQFFREZ599llYWlrCw8MDQ4cOrbVuosbE01l03wgICMDPP/+MkpISFBUV4Q9/+AOcnJwQHR2NkpISXL58Ge3bt0dVVZXB97mLiMGX/NyWn59vMF6j0dR45PadoXL7m+TKysrqrHHr1q3YtWsX8vLyoNFocOPGDeVLuvLz8+Hm5qZMe+eyc3JykJ+fj4iICGWcXq/n9R1qcgwRum90794dpaWliIuLwwMPPAAAaNOmDZydnREXFwcXFxe4ubnB0tISq1evhlarvev8dDqdwbfaiUi9vuWu+peqpaSkYOvWrXj77bfRoUMHWFhY4KWXXlK+Llin0+HatWvKo7nv/M4INzc3uLu7Y9myZUYvn6gx8HQW3Tesra3RtWtX/Pjjj/Dz81PG+/n54ccff4S/vz+cnZ3Rq1cvrF+/HqWlpdDr9bh69arBFxHd9sgjj+Dy5cs4dOgQqqqq8PPPP9f6rZx1cXJyQlZWljJ848YNaLVaODo6Qq/X49tvv0Vpaanyer9+/bBlyxaUlJQgLy8PO3bsUF7z9fWFnZ0dtmzZgvLycuj1ely+fBlpaWn1XU1E9cIQoftKQEAACgsLa4RIYWGhcupnypQpqKysxMyZM/HSSy9h8eLFyM/PrzEvR0dHzJw5E19++SVefvll/P777/Dx8TH4lri7GTZsGA4ePIiXXnoJa9asQe/evdGrVy9Mnz4dkydPhpWVlcHpq2effRYuLi6YMmUKFixYgL59+yrLsrCwwOzZs/Hbb7/htddew4QJE/DZZ58ZhBBRU+D3iRA1Er1ej0mTJmHq1Kno2bNnky/vl19+wd69e/GPf/yjyZdFVBceiRA1wLFjx3D9+nVUVFQgNjYWIoLu3bs3ybLy8/Nx9uxZ6PV6XLlyBf/6178QFBTUJMsiMhYvrBM1wLlz57Bs2TJUVlaiQ4cOePPNN2Ftbd0ky6qsrMSqVauQnZ2NNm3aYMCAAXjssceaZFlExuLpLCIiUo2ns4iISDWGCBERqcYQISIi1RgiRESkGkOEiIhU+3/FJKdHGBnDnAAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":328},"id":"HnMd5HMY-9nR","executionInfo":{"status":"ok","timestamp":1628916411163,"user_tz":-330,"elapsed":967,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"b844ae1e-b57e-4180-f56a-db4d0e92a244"},"source":["figure(figsize=(6, 4), dpi=80)\n","plt.xlim([-0.05, 0.3])\n","plt.hist(confidence_n_neg, bins=5, alpha=0.8, color='blue', label=\"Neutral\")\n","plt.hist(confidence_f_neg, bins=5, alpha=0.8, color='orange', label=\"Feminine\")\n","plt.hist(confidence_m_neg, bins=5, alpha=0.8, color='y', label=\"Masculine\")\n","plt.legend(loc='best')\n","plt.title(f'Plot of weightage of contribution of features')\n","plt.xlabel('Weightage')\n","plt.ylabel('Frequency')\n","\n","plt.show()"],"execution_count":40,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 480x320 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"hKnF0UPBiNmW","executionInfo":{"status":"ok","timestamp":1628916434475,"user_tz":-330,"elapsed":3988,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"9113c298-68e0-411f-bf25-134686954012"},"source":["figure(figsize=(10, 6), dpi=80)\n","\n","#sns.set_style(\"darkgrid\")\n","x=np.arange(0, 280, 1)\n","plt.plot(x, confidence_f_neg, \"g\")\n","plt.plot(x, confidence_m_neg, \"r\")\n","#plt.plot(x, confidence_n_neg, \"b\")\n","plt.xlabel(\"Samples\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()\n","\n","print()\n","figure(figsize=(8, 6), dpi=80)\n","\n","#plt.plot(x, confidence_f_neg, \"g\")\n","plt.plot(x, confidence_m_neg, \"r\")\n","plt.plot(x, confidence_n_neg, \"b\")\n","plt.xlabel(\"Samples\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()\n","\n","\n","print()\n","figure(figsize=(8, 6), dpi=80)\n","\n","plt.plot(x, confidence_f_neg, \"g\")\n","#plt.plot(x, confidence_m_neg, \"r\")\n","plt.plot(x, confidence_n_neg, \"b\")\n","plt.xlabel(\"Samples\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()\n","\n","print()\n","figure(figsize=(8, 6), dpi=80)\n","\n","plt.plot(x, confidence_f_neg, \"g\")\n","plt.plot(x, confidence_m_neg, \"r\")\n","plt.plot(x, confidence_n_neg, \"b\")\n","plt.xlabel(\"Samples\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()"],"execution_count":41,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 800x480 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B7CMCugwiNo2","executionInfo":{"status":"ok","timestamp":1628916437940,"user_tz":-330,"elapsed":25,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"75b7101c-6691-4992-cbbe-4c93ef1fa250"},"source":["import math\n","diff_f_m=[confidence_f_neg[i]-confidence_m_neg[i] for i in range(280) if abs(confidence_f_neg[i]-confidence_m_neg[i])>=0.1]\n","diff_f_n=[confidence_f_neg[i]-confidence_n_neg[i] for i in range(280) if abs(confidence_f_neg[i]-confidence_n_neg[i])>=0.1]\n","diff_m_n=[confidence_m_neg[i]-confidence_n_neg[i] for i in range(280) if abs(confidence_m_neg[i]-confidence_n_neg[i])>=0.1]\n","\n","#diff_m_n=[confidence_n_neg[i]-confidence_m_neg[i] for i in range(280)]\n","#diff_f_n=[confidence_f_neg[i]-confidence_n_neg[i] for i in range(280)]\n","print(len(diff_f_m))\n","print(len(diff_f_n))\n","print(len(diff_m_n))"],"execution_count":42,"outputs":[{"output_type":"stream","text":["150\n","143\n","155\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hSqnAsWFiNsx","executionInfo":{"status":"ok","timestamp":1628916440461,"user_tz":-330,"elapsed":30,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"a60d5db1-73a7-4f9e-cfe9-380357cd70cb"},"source":["import math\n","diff_f_m=[confidence_f_neg[i]-confidence_m_neg[i] for i in range(280) if abs(confidence_f_neg[i]-confidence_m_neg[i])>=0.05]\n","diff_f_n=[confidence_f_neg[i]-confidence_n_neg[i] for i in range(280) if abs(confidence_f_neg[i]-confidence_n_neg[i])>=0.05]\n","diff_m_n=[confidence_m_neg[i]-confidence_n_neg[i] for i in range(280) if abs(confidence_m_neg[i]-confidence_n_neg[i])>=0.05]\n","\n","print(len(diff_f_m))\n","print(len(diff_f_n))\n","print(len(diff_m_n))\n","\n","diff_f_m=[confidence_f_neg[i]-confidence_m_neg[i] for i in range(280)]\n","diff_m_n=[confidence_n_neg[i]-confidence_m_neg[i] for i in range(280)]\n","diff_f_n=[confidence_f_neg[i]-confidence_n_neg[i] for i in range(280)]\n","print(len(diff_f_m))\n","print(len(diff_f_n))\n","print(len(diff_m_n))"],"execution_count":43,"outputs":[{"output_type":"stream","text":["210\n","178\n","221\n","280\n","280\n","280\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"B8aPQLRIiNz9","executionInfo":{"status":"ok","timestamp":1628916444223,"user_tz":-330,"elapsed":28,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"32b90806-b4dc-405a-a97b-2074302a52e6"},"source":["figure(figsize=(25, 6), dpi=80)\n","\n","x=np.arange(0, len(diff_f_n), 1)\n","plt.plot(x, diff_f_n, \"r\")\n","plt.scatter(x, diff_f_n, alpha=1.0, color='green')\n","\n","x=np.arange(0, len(diff_f_m), 1)\n","plt.plot(x, diff_f_m, \"b\")\n","plt.scatter(x, diff_f_m, alpha=1.0, color='yellow')\n","\n","x=np.arange(0, len(diff_m_n), 1)\n","plt.plot(x, diff_m_n, \"y\")\n","plt.scatter(x, diff_m_n, alpha=1.0, color='blue')\n","\n","plt.xlabel(\"Samples\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()"],"execution_count":44,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2000x480 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":435},"id":"zJ9piUbkiN3U","executionInfo":{"status":"ok","timestamp":1628916449917,"user_tz":-330,"elapsed":1225,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"b9af4f43-74ff-4681-9edd-25b6621a8e1b"},"source":["figure(figsize=(8, 6), dpi=80)\n","x=np.arange(0, 280, 1)\n","\n","plt.scatter(x, confidence_f_neg, alpha=1.0, color='red')\n","plt.scatter(x, confidence_m_neg, alpha=1.0, color='blue')\n","plt.scatter(x, confidence_n_neg, alpha=1.0, color='green')\n","plt.xlabel(\"Samples\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()"],"execution_count":45,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":435},"id":"Mw_aahLhiN8b","executionInfo":{"status":"ok","timestamp":1628916454766,"user_tz":-330,"elapsed":1102,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"d5d4a61b-cc81-404e-d9f9-ea47bc8f52ee"},"source":["figure(figsize=(8, 6), dpi=80)\n","\n","x=np.arange(0, len(diff_f_n), 1)\n","#plt.plot(x, diff_f_n, \"r\")\n","plt.scatter(x, diff_f_n, alpha=1.0, color='red')\n","\n","x=np.arange(0, len(diff_f_m), 1)\n","#plt.plot(x, diff_f_m, \"b\")\n","plt.scatter(x, diff_f_m, alpha=1.0, color='green')\n","\n","x=np.arange(0, len(diff_m_n), 1)\n","#plt.plot(x, diff_m_n, \"y\")\n","plt.scatter(x, diff_m_n, alpha=1.0, color='blue')\n","\n","plt.xlabel(\"Samples, Difference=0.05\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()"],"execution_count":46,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":435},"id":"SHTxd6dgiOCL","executionInfo":{"status":"ok","timestamp":1628916461700,"user_tz":-330,"elapsed":2013,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"d55db9f7-da41-4472-de75-61718974d8b2"},"source":["figure(figsize=(8, 6), dpi=80)\n","\n","x=np.arange(0, len(diff_f_n), 1)\n","plt.plot(x, diff_f_n, \"r\")\n","plt.scatter(x, diff_f_n, alpha=1.0, color='red')\n","\n","x=np.arange(0, len(diff_f_m), 1)\n","plt.plot(x, diff_f_m, \"b\")\n","plt.scatter(x, diff_f_m, alpha=1.0, color='green')\n","\n","x=np.arange(0, len(diff_m_n), 1)\n","plt.plot(x, diff_m_n, \"y\")\n","plt.scatter(x, diff_m_n, alpha=1.0, color='blue')\n","\n","plt.xlabel(\"Samples for a difference of 0.05\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()"],"execution_count":47,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"eQlbCU-QiOE4","executionInfo":{"status":"ok","timestamp":1628916463731,"user_tz":-330,"elapsed":2053,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"e9ce1d1f-5842-4168-ef4d-36bc69f9f63d"},"source":["figure(figsize=(8, 6), dpi=80)\n","x=np.arange(0, len(diff_f_m), 1)\n","\n","plt.plot(x, diff_f_m, \"b\")\n","plt.scatter(x, diff_f_m, alpha=0.5)\n","plt.xlabel(\"Samples\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()\n","\n","print()\n","\n","x=np.arange(0, len(diff_f_n), 1)\n","\n","figure(figsize=(8, 6), dpi=80)\n","\n","plt.plot(x, diff_f_n, \"b\")\n","plt.scatter(x, diff_f_n, alpha=0.5)\n","plt.xlabel(\"Samples\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()\n","\n","print()\n","\n","x=np.arange(0, len(diff_m_n), 1)\n","\n","figure(figsize=(8, 6), dpi=80)\n","\n","plt.plot(x, diff_m_n, \"b\")\n","plt.scatter(x, diff_m_n, alpha=0.5)\n","plt.xlabel(\"Samples\",fontsize=15)\n","plt.ylabel(\"Prediction\",fontsize=15)\n","plt.show()\n","plt.close()"],"execution_count":48,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P6qFvJP8u94C","executionInfo":{"status":"ok","timestamp":1628916463732,"user_tz":-330,"elapsed":14,"user":{"displayName":"Supriti Vijay","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjBpTxnDckDKl8_lt13CSpjsnrfPKsSXG12cPLQSg=s64","userId":"17225008665821878619"}},"outputId":"001478c6-4eeb-4a2c-b23e-9b39475b2fb9"},"source":["from scipy.stats import ks_2samp\n","import numpy as np\n","\n","print(ks_2samp(confidence_f_neg, confidence_m_neg))\n","print(ks_2samp(confidence_f_neg, confidence_n_neg))\n","print(ks_2samp(confidence_m_neg, confidence_n_neg))"],"execution_count":49,"outputs":[{"output_type":"stream","text":["Ks_2sampResult(statistic=0.2357142857142857, pvalue=3.1120585241106417e-07)\n","Ks_2sampResult(statistic=0.375, pvalue=6.4321254684730935e-18)\n","Ks_2sampResult(statistic=0.42857142857142855, pvalue=1.8635612496969804e-23)\n"],"name":"stdout"}]}]}